----------------------------------------------------------------------

                                   13/02/18   R65 ASSEMBLER  PAGE 01

0001                   *              666666  555555  333333  000000
0002                   *              6       5            3  0    0
0003                   *              6       5            3  0    0
0004                   *              666666  555555  333333  0    0
0005                   *              6    6       5       3  0    0
0006                   *              6    6       5       3  0    0
0007                   *              666666  666666  666666  000000
0008                   *
0009                   *
0010                   *
0011                   *                      000000  000000  333333
0012                   *                      0    0  0    0       3
0013                   *              ------  0    0  0    0       3
0014                   *              ------  0    0  0    0  333333
0015                   *              ------  0    0  0    0       3
0016                   *                      0    0  0    0       3
0017                   *                      000000  000000  333333
0018                   *
0019                   *
0020                   *
0021                   *
0022                   *
0023                   *      COPYRIGHT
0024                   *      MOS TECHNOLOGY, INC
0025                   *      DATE: OCT 18, 1975 REV-D
0026                   *
0027                   *
0028                   *
0029                   *      6530-003 I.C. IS AN AUDIO CASSETT TAPE
0030                   *      RECORDER ENTENSION OF THE BASIC
0031                   *      KIM MONITOR
0032                   *
0033                   *      IT FEATURES TWO BASIC ROUTINES
0034                   *      LOADT-LOAD MEM FROM AUDIO TAPE
0035                   *      DUMPT-STOR MEM ONTO AUDIO TAPE
0036                   *
0037                   *      LOADT
0038                   *        ID=00     IGNORE ID
0039                   *        ID=FF     IGN. ID USE SA FOR START ADD
0040                   *        ID=01-FE  IGN.ID USE ADDRESS ON TAPE
0041                   *
0042                   *      DUMPT
0043                   *        ID=00     SHOULD NOT BE USED
0044                   *        ID=FF     SHOULD NOT BE USED
0045                   *        ID=01-FE  NORMAL ID RANGE
0046                   *        SAL       LSB STARTING ADDRESS OF PROG
0047                   *        SAH       MSB
0048                   *        EAL       ENDING ADDRESS OF PROGRAM
0049                   *        EAH       MSB
0050                   *

----------------------------------------------------------------------

                                   13/02/18   R65 ASSEMBLER  PAGE 02

0051                   *
0052                   *       EQUATES
0053                   *       SET UP FOR 6530-002 I/O
0054                   *
0055                   SAD     EQU $1740         6530 A DATA
0056                   PADD    EQU $1741         6530 A DATA DIRECTION
0057                   SBD     EQU $1742         6530 B DATA
0058                   PBDD    EQU $1743         6530 B DATA DIRECTION
0059                   CLK1T   EQU $1744         DIV BY 1 TIME
0060                   CLK8T   EQU $1745         DIV BY 8 TIME
0061                   CLK64T  EQU $1746         DIV BY 64 TIME
0062                   CLKKT   EQU $1747         DIV BY 1024 TIME
0063                   CLKRDI  EQU $1747         READ TIME OUT BIT
0064                   CLKRDT  EQU $1746         READ TIME
0065                   *
0066  0000-                    ORG $00EF
0067                   *
0068                   *       MPU REG.  SAVX AREA IN PAGE 0
0069                   *
0070  00EF-            PCL     BSS 1 PROGRAM CNT LOW
0071  00F0-            PCH     BSS 1 PROGRAM CNT HI
0072  00F1-            PREG    BSS 1 CURRENT STATUS REG
0073  00F2-            SPUSER  BSS 1 CURRENT STACK POINTER
0074  00F3-            ACC     BSS 1 ACCUMULATOR
0075  00F4-            YREG    BSS 1 Y INDEX
0076  00F5-            XREG    BSS 1 X INDEX
0077                   *
0078                   *       KIM FIXED AREA IN PAGE 0
0079                   *
0080  00F6-            CHKHI   BSS 1
0081  00F7-            CHKSUM  BSS 1
0082  00F8-            INL     BSS 1 INPUT BUFFER
0083  00F9-            INH     BSS 1 INPUT BUFFER
0084  00FA-            POINTL  BSS 1 LSB OF OPEN CELL
0085  00FB-            POINTH  BSS 1 MSB OF OPEN CELL
0086  00FC-            TEMP    BSS 1
0087  00FD-            TMPX    BSS 1
0088  00FE-            CHAR    BSS 1
0089  00FF-            MODE    BSS 1
0090                   *
0091                   *       KIM FIXED AREA IN PAGE 23
0092                   *
0093  0100-                    ORG $17E7
0094  17E7-            CHKL    BSS 1
0095  17E8-            CHKH    BSS 1        CHKSUM
0096  17E9-            SAVX    BSS 3
0097  17EC-            VEB     BSS 6        VOLATILE EXECUTION BLOCK
0098  17F2-            CNTL30  BSS 1        TTY DELAY
0099  17F3-            CNTH30  BSS 1        TTY DELAY
0100  17F4-            TIMH    BSS 1

----------------------------------------------------------------------

                                   13/02/18   R65 ASSEMBLER  PAGE 03

0101  17F5-            SAL     BSS 1        LOW STARTING ADDRESS
0102  17F6-            SAH     BSS 1        HI STARTING ADDRESS
0103  17F7-            EAL     BSS 1        LOW ENDING ADDRESS
0104  17F8-            EAH     BSS 1        HI ENDING ADDRESS
0105  17F9-            ID      BSS 1        TAPE PROGRAM ID NUMBER
0106                   *
0107                   *       INTERRUPT VECTORS
0108                   *
0109  17FA-            NMIV    BSS 2        STOP VECTOR (STOP=1C00)
0110  17FC-            RSTV    BSS 2        RST VECTOR
0111  17FE-            IRQV    BSS 2        IRQ VECTOR (BRK= 1C00)
0112                   *
0113                           ORG $1800
0114                   *
0115                   *       INIT VOLATILE EXECUTION BLOCK
0116                   *       DUMP MEM TO TAPE
0117                   *
0118  1800- A9 AD      DUMPT   LDA =$AD       LOAD ABSOLUTE INST
0119  1802- 8D EC 17           STA VEB
0120  1805- 20 32 19           JSR INTVEB
0121                   *
0122  1808- A9 27              LDA =$27       TURN OFF DATAIN PB5
0123  180A- 8D 42 17           STA SBD
0124  180D- A9 BF              LDA =$BF       CONVERT PB7 TO OUTPUT
0125  180F- 8D 43 17           STA PBDD
0126                   *
0127  1812- A2 64              LDX =$64       100 CHARS
0128  1814- A9 16      DUMPT1  LDA =$16       SYNC CHAR'S
0129  1816- 20 7A 19           JSR OUTCHT
0130  1819- CA                 DEX
0131  181A- D0 F8              BNE DUMPT1
0132                   *
0133  181C- A9 2A              LDA =$2A       START CHAR
0134  181E- 20 7A 19           JSR OUTCHT
0135                   *
0136  1821- AD F9 17           LDA ID         OUTPUT ID
0137  1824- 20 61 19           JSR OUTBT
0138                   *
0139  1827- AD F5 17           LDA SAL        OUTPUT STARTING
0140  182A- 20 5E 19           JSR OUTBTC     ADDRESS
0141  182D- AD F6 17           LDA SAH
0142  1830- 20 5E 19           JSR OUTBTC
0143                   *
0144  1833- AD ED 17   DUMPT2  LDA VEB+1      CHECK FOR LAST
0145  1836- CD F7 17           CMP EAL        DATA BYTE
0146  1839- AD EE 17           LDA VEB+2
0147  183C- ED F8 17           SBC EAH
0148  183F- 90 24              BCC DUMPT4
0149                   *
0150  1841- A9 2F              LDA ='/        OUTPUT END OF DATA CHAR

----------------------------------------------------------------------

                                   13/02/18   R65 ASSEMBLER  PAGE 04

0151  1843- 20 7A 19           JSR OUTCHT
0152  1846- AD E7 17           LDA CHKL       LAST BYTE HAS BEEN
0153  1849- 20 61 19           JSR OUTBT      OUTPUT    NOW OUTPUT
0154  184C- AD E8 17           LDA CHKH       CHKSUM
0155  184F- 20 61 19           JSR OUTBT
0156                   *
0157                   *
0158  1852- A2 02              LDX =$02       2 CHAR'S
0159  1854- A9 04      DUMPT3  LDA =$04       EOT CHAR
0160  1856- 20 7A 19           JSR OUTCHT
0161  1859- CA                 DEX
0162  185A- D0 F8              BNE DUMPT3
0163                   *
0164  185C- A9 00              LDA =$00       DISPLAY 0000
0165  185E- 85 FA              STA POINTL     FOR NORMAL EXIT
0166  1860- 85 FB              STA POINTH
0167  1862- 4C 4F 1C           JMP START
0168                   *
0169  1865- 20 EC 17   DUMPT4  JSR VEB        DATA BYTE OUTPUT
0170  1868- 20 5E 19           JSR OUTBTC
0171                   *
0172  186B- 20 EA 19           JSR INCVEB
0173  186E- 4C 33 18           JMP DUMPT2
0174                   *
0175                   *       LOAD MEMORY FROM TAPE
0176                   *
0177                   *
0178  1871- 0F 19      TAB     WRD LOAD12
0179  1873- A9 8D      LOADT   LDA =$8D       INIT VOLATILE EXECUTION
0180  1875- 8D EC 17           STA VEB        BLOCK WITH STA ABS.
0181  1878- 20 32 19           JSR INTVEB
0182                   *
0183  187B- A9 4C              LDA =$4C       JUMP TYPE RTRN
0184  187D- 8D EF 17           STA VEB+3
0185  1880- AD 71 18           LDA TAB
0186  1883- 8D F0 17           STA VEB+4
0187  1886- AD 72 18           LDA TAB+1
0188  1889- 8D F1 17           STA VEB+5
0189                   *
0190  188C- A9 07              LDA =$07       RESET PB5=0 (DATA-IN)
0191  188E- 8D 42 17           STA SBD
0192                   *
0193  1891- A9 FF      SYNC    LDA =$FF       CLEAR SAVX FOR SYNC CHAR
0194                   *
0195  1893- 8D E9 17           STA SAVX
0196                   *
0197  1896- 20 41 1A   SYNC1   JSR RDBIT      GET A BIT
0198  1899- 4E E9 17           LSR SAVX       SHIFT BIT INTO CHAR
0199  189C- 0D E9 17           ORA SAVX
0200  189F- 8D E9 17           STA SAVX

----------------------------------------------------------------------

                                   13/02/18   R65 ASSEMBLER  PAGE 05

0201  18A2- AD E9 17           LDA SAVX       GET NEW CHAR
0202  18A5- C9 16              CMP =$16       SYNC CHAR
0203  18A7- D0 ED              BNE SYNC1
0204                   *
0205  18A9- A2 0A              LDX =$0A       TEST FOR 10 SYNC CHARS
0206  18AB- 20 24 1A   SYNC2   JSR RDCHT
0207  18AE- C9 16              CMP =$16
0208  18B0- D0 DF              BNE SYNC       IF NOT 10 CHAR, RE-SYNC
0209  18B2- CA                 DEX
0210  18B3- D0 F6              BNE SYNC2
0211                   *
0212                   *
0213  18B5- 20 24 1A   LOADT4  JSR RDCHT      LOOK FOR START OF
0214  18B8- C9 2A              CMP =$2A       DATA CHAR
0215  18BA- F0 06              BEQ LOAD11
0216  18BC- C9 16              CMP =$16       IF NOT , SHOULD BE SYN
0217  18BE- D0 D1              BNE SYNC
0218  18C0- F0 F3              BEQ LOADT4
0219                   *
0220  18C2- 20 F3 19   LOAD11  JSR RDBYT     READ ID FROM TAPE
0221  18C5- CD F9 17           CMP ID        COMPARE WITH REQUESTED ID
0222                   *
0223  18C8- F0 0D              BEQ LOADT5
0224  18CA- AD F9 17           LDA ID        DEFAULT 00, READ RECORD
0225  18CD- C9 00              CMP =$00      ANYWAY
0226  18CF- F0 06              BEQ LOADT5
0227  18D1- C9 FF              CMP =$FF      DEFAULT FF, IGNORE SA ON
0228  18D3- F0 17              BEQ LOADT6    TAPE
0229  18D5- D0 9C              BNE LOADT
0230                   *
0231  18D7- 20 F3 19   LOADT5  JSR RDBYT     GET SA FROM TAPE
0232  18DA- 20 4C 19           JSR CHKT
0233  18DD- 8D ED 17           STA VEB+1     SAVX IN VEB+1,2
0234  18E0- 20 F3 19           JSR RDBYT
0235  18E3- 20 4C 19           JSR CHKT
0236  18E6- 8D EE 17           STA VEB+2
0237  18E9- 4C F8 18           JMP LOADT7
0238                   *
0239  18EC- 20 F3 19   LOADT6  JSR RDBYT     GET SA BUT IGNORE
0240  18EF- 20 4C 19           JSR CHKT
0241  18F2- 20 F3 19           JSR RDBYT
0242  18F5- 20 4C 19           JSR CHKT
0243                   *
0244                   *
0245  18F8- A2 02      LOADT7  LDX =$02      GET 2 CHARS
0246  18FA- 20 24 1A   LOAD13  JSR RDCHT     GET CHAR (X)
0247  18FD- C9 2F              CMP =$2F      LOOK FOR LAST CHAR
0248  18FF- F0 14              BEQ LOADT8
0249  1901- 20 00 1A           JSR PACKT     CONVERT TO HEX
0250  1904- D0 23              BNE LOADT9    Y=1 NON-HEX CHAR

----------------------------------------------------------------------

                                   13/02/18   R65 ASSEMBLER  PAGE 06

0251  1906- CA                 DEX
0252  1907- D0 F1              BNE LOAD13
0253                   *
0254  1909- 20 4C 19           JSR CHKT      COMPUTE CHECKSUM
0255  190C- 4C EC 17           JMP VEB       SAVX DATA IN MEMORY
0256  190F- 20 EA 19   LOAD12  JSR INCVEB    INCREMENT DATA POINTER
0257  1912- 4C F8 18           JMP LOADT7
0258                   *
0259  1915- 20 F3 19   LOADT8  JSR RDBYT     END OF DATA, COMP CHKSUM
0260  1918- CD E7 17           CMP CHKL
0261  191B- D0 0C              BNE LOADT9
0262  191D- 20 F3 19           JSR RDBYT
0263  1920- CD E8 17           CMP CHKH
0264  1923- D0 04              BNE LOADT9
0265  1925- A9 00              LDA =$00      NORMAL EXIT
0266  1927- F0 02              BEQ LOAD10
0267                   *
0268  1929- A9 FF      LOADT9  LDA =$FF      ERROR EXIT
0269  192B- 85 FA      LOAD10  STA POINTL
0270  192D- 85 FB              STA POINTH
0271  192F- 4C 4F 1C           JMP START
0272                   *
0273                   *
0274                   *       SUBROUTINES FOLLOW
0275                   *
0276                   *       SUB TO MOVE SA TO VEB+1,2
0277                   *
0278  1932- AD F5 17   INTVEB  LDA SAL       MOVE SA TO VEB+1,2
0279  1935- 8D ED 17           STA VEB+1
0280  1938- AD F6 17           LDA SAH
0281  193B- 8D EE 17           STA VEB+2
0282  193E- A9 60              LDA =$60      RTS INST
0283  1940- 8D EF 17           STA VEB+3
0284  1943- A9 00              LDA =$00      CLEAR CHKSUM AREA
0285  1945- 8D E7 17           STA CHKL
0286  1948- 8D E8 17           STA CHKH
0287  194B- 60                 RTS
0288                   *
0289                   *       COMPUTE CHKSUM FOR TAPE LOAD
0290                   *       RTN USES Y TO SAVEX A
0291                   *
0292  194C- A8         CHKT    TAY
0293  194D- 18                 CLC
0294  194E- 6D E7 17           ADC CHKL
0295  1951- 8D E7 17           STA CHKL
0296  1954- AD E8 17           LDA CHKH
0297  1957- 69 00              ADC =$00
0298  1959- 8D E8 17           STA CHKH
0299  195C- 98                 TYA
0300  195D- 60                 RTS

----------------------------------------------------------------------

                                   13/02/18   R65 ASSEMBLER  PAGE 07

0301                   *
0302                   *       OUTPUT ONE BYTE USE Y
0303                   *       TO SAVX BYTE
0304                   *
0305  195E- 20 4C 19   OUTBTC  JSR CHKT      COMPARE CHKSUM
0306  1961- A8         OUTBT   TAY           SAVX DATA BYTE
0307  1962- 4A                 LSR A         SHIFT OFF LSD
0308  1963- 4A                 LSR A
0309  1964- 4A                 LSR A
0310  1965- 4A                 LSR A
0311  1966- 20 6F 19           JSR HEXOUT    OUTPUT MSD
0312  1969- 98                 TYA           OUTPUT MSD
0313  196A- 20 6F 19           JSR HEXOUT    OUTPUT LSD
0314  196D- 98                 TYA
0315  196E- 60                 RTS
0316                   *
0317                   *       CONVERT LSD OF A TO ASCII
0318                   *       OUTPUT TO TAPE
0319                   *
0320  196F- 29 0F      HEXOUT  AND =$0F
0321  1971- C9 0A              CMP =$0A
0322  1973- 18                 CLC
0323  1974- 30 02              BMI HEX1
0324  1976- 69 07              ADC =$07
0325  1978- 69 30      HEX1    ADC =$30
0326                   *
0327                   *       OUTPUT TO TAPE ONE ASCII
0328                   *       CHAR  USE SUB'S ONE + ZRO
0329                   *
0330  197A- 8E E9 17   OUTCHT  STX SAVX
0331  197D- 8C EA 17           STY SAVX+1
0332  1980- A0 08              LDY =$08      START BIT
0333  1982- 20 9E 19   CHT1    JSR ONE
0334  1985- 4A                 LSR A         GET DATA BIT
0335  1986- B0 06              BCS CHT2
0336  1988- 20 9E 19           JSR ONE       DATA BIT=1
0337  198B- 4C 91 19           JMP CHT3
0338  198E- 20 C4 19   CHT2    JSR ZRO       DATA BIT=0
0339  1991- 20 C4 19   CHT3    JSR ZRO
0340  1994- 88                 DEY
0341  1995- D0 EB              BNE CHT1
0342  1997- AE E9 17           LDX SAVX
0343  199A- AC EA 17           LDY SAVX+1
0344  199D- 60                 RTS
0345                   *
0346                   *
0347                   *       OUTPUT 1 TO TAPE
0348                   *       9 PULSES, 138 MICROSEC EACH
0349                   *
0350  199E- A2 09      ONE     LDX =$09

----------------------------------------------------------------------

                                   13/02/18   R65 ASSEMBLER  PAGE 08

0351  19A0- 48                 PHA           SAVX A
0352  19A1- 2C 47 17   ONE1    BIT CLKRDI    WAIT FOR TIME OUT
0353  19A4- 10 FB              BPL ONE1
0354  19A6- A9 7E              LDA =126
0355  19A8- 8D 44 17           STA CLK1T
0356  19AB- A9 A7              LDA =$A7
0357  19AD- 8D 42 17           STA SBD       SET PB7=1
0358  19B0- 2C 47 17   ONE2    BIT CLKRDI
0359  19B3- 10 FB              BPL ONE2
0360  19B5- A9 7E              LDA =126
0361  19B7- 8D 44 17           STA CLK1T
0362  19BA- A9 27              LDA =$27
0363  19BC- 8D 42 17           STA SBD       RESET PB7=0
0364  19BF- CA                 DEX
0365  19C0- D0 DF              BNE ONE1
0366  19C2- 68                 PLA
0367  19C3- 60                 RTS
0368                   *
0369                   *
0370                   *       OUTPUT 0 TO TAPE
0371                   *       6 PULSES, 207 MICROSEC EACH
0372                   *
0373  19C4- A2 06      ZRO     LDX =$06
0374  19C6- 48                 PHA           SAVX A
0375  19C7- 2C 47 17   ZRO1    BIT CLKRDI
0376  19CA- 10 FB              BPL ZRO1
0377  19CC- A9 C3              LDA =$C3
0378  19CE- 8D 44 17           STA CLK1T
0379  19D1- A9 A7              LDA =$A7
0380  19D3- 8D 42 17           STA SBD       SET PB7=1
0381  19D6- 2C 47 17   ZRO2    BIT CLKRDI
0382  19D9- 10 FB              BPL ZRO2
0383  19DB- A9 C3              LDA =195
0384  19DD- 8D 44 17           STA CLK1T
0385  19E0- A9 27              LDA =$27
0386  19E2- 8D 42 17           STA SBD       RESET PB7=0
0387  19E5- CA                 DEX
0388  19E6- D0 DF              BNE ZRO1
0389  19E8- 68                 PLA           RESTORE A
0390  19E9- 60                 RTS
0391                   *
0392                   *       SUB TO INC VEB+1,2
0393                   *
0394  19EA- EE ED 17   INCVEB  INC VEB+1
0395  19ED- D0 03              BNE INCVE1
0396  19EF- EE EE 17           INC VEB+2
0397  19F2- 60         INCVE1  RTS
0398                   *
0399                   *       SUB TO READ BYTE FROM TAPE
0400                   *

----------------------------------------------------------------------

                                   13/02/18   R65 ASSEMBLER  PAGE 09

0401  19F3- 20 24 1A   RDBYT   JSR RDCHT
0402  19F6- 20 00 1A           JSR PACKT
0403  19F9- 20 24 1A           JSR RDCHT
0404  19FC- 20 00 1A           JSR PACKT
0405  19FF- 60                 RTS
0406                   *
0407                   *       PACK A=ASCII INTO SAVX
0408                   *       AS HEX DATA
0409                   *
0410  1A00- C9 30      PACKT   CMP =$30
0411  1A02- 30 1E              BMI PACKT3
0412  1A04- C9 47              CMP =$47
0413  1A06- 10 1A              BPL PACKT3
0414  1A08- C9 40              CMP =$40
0415  1A0A- 30 03              BMI PACKT1
0416  1A0C- 18                 CLC
0417  1A0D- 69 09              ADC =$09
0418  1A0F- 2A         PACKT1  ROL A
0419  1A10- 2A                 ROL A
0420  1A11- 2A                 ROL A
0421  1A12- 2A                 ROL A
0422  1A13- A0 04              LDY =$04
0423  1A15- 2A         PACKT2  ROL A
0424  1A16- 2E E9 17           ROL SAVX
0425  1A19- 88                 DEY
0426  1A1A- D0 F9              BNE PACKT2
0427  1A1C- AD E9 17           LDA SAVX
0428  1A1F- A0 00              LDY =$00      Y=0 VALID HEX CHAR
0429  1A21- 60                 RTS
0430  1A22- C8         PACKT3  INY           Y=1 NOT HEX
0431  1A23- 60                 RTS
0432                   *
0433                   *       GET 1 CHAR FROM TAPE AND RETURN
0434                   *       WITH CHAR IN A  USE SAVX+1 TO ASM CHAR
0435                   *
0436  1A24- 8E EB 17   RDCHT   STX SAVX+2
0437  1A27- A2 08              LDX =$08      READ 8 BITS
0438  1A29- 20 41 1A   RDCHT1  JSR RDBIT     GET NEXT DATA BIT
0439  1A2C- 4E EA 17           LSR SAVX+1    RIGHT SHIFT CHAR
0440  1A2F- 0D EA 17           ORA SAVX+1    OR IN SIGN BIT
0441  1A32- 8D EA 17           STA SAVX+1    REPLACE CHAR
0442  1A35- CA                 DEX
0443  1A36- D0 F1              BNE RDCHT1
0444                   *
0445  1A38- AD EA 17           LDA SAVX+1    MOVE CHAR INTO A
0446  1A3B- 2A                 ROL A         SHIFT OFF PARITY
0447  1A3C- 4A                 LSR A
0448  1A3D- AE EB 17           LDX SAVX+2
0449  1A40- 60                 RTS
0450                   *

----------------------------------------------------------------------

                                   13/02/18   R65 ASSEMBLER  PAGE 10

0451                   *       THIS SUB GETS ONE BIT FROM
0452                   *       TAPE AND RETURNS IT IN SIGN OF A
0453                   *
0454  1A41- 2C 42 17   RDBIT   BIT SBD       WAIT FOR END START BIT
0455                   *
0456  1A44- 10 FB              BPL RDBIT
0457  1A46- AD 46 17           LDA CLKRDT    GET START BIT TIME
0458  1A49- A0 FF              LDY =$FF      A=256-T1
0459  1A4B- 8C 46 17           STY CLK64T    SET UP TIMER
0460                   *
0461  1A4E- A0 14              LDY =$14
0462  1A50- 88         RDBIT3  DEY           DELAY 100 MICROSEC
0463  1A51- D0 FD              BNE RDBIT3
0464                   *
0465  1A53- 2C 42 17   RDBIT2  BIT SBD
0466  1A56- 30 FB              BMI RDBIT2    WAIT FOR NEXT START BIT
0467  1A58- 38                 SEC
0468  1A59- ED 46 17           SBC CLKRDT    (256-T1)-(256-T2)=T2-T1
0469  1A5C- A0 FF              LDY =$FF
0470  1A5E- 8C 46 17           STY CLK64T    TIMER FOR NEXT BIT
0471                   *
0472  1A61- A0 07              LDY =$07
0473  1A63- 88         RDBIT4  DEY           DELAY 50 MICROSEC
0474  1A64- D0 FD              BNE RDBIT4
0475                   *
0476  1A66- 49 FF              EOR =$FF      COMPLEMENT SIGN OF A
0477  1A68- 29 80              AND =$80      MASK ALL EXCEPT SIGN
0478  1A6A- 60                 RTS
0479                   *
0480                   *       DIAGNOSTICS
0481                   *          MEMORY
0482                   *          PLLCAL
0483                   *
0484                   *
0485                   *
0486                   *       PLLCAL OUTPUT 166 MICROSEC
0487                   *       PULSE STRING
0488                   *
0489  1A6B- A9 27      PLLCAL  LDA =$27
0490  1A6D- 8D 42 17           STA SBD       TURN OFF DATIN PB5=1
0491  1A70- A9 BF              LDA =$BF      CONVERT PB7 TO OUTPUT
0492  1A72- 8D 43 17           STA PBDD
0493                   *
0494  1A75- 2C 47 17   PLL1    BIT CLKRDI
0495  1A78- 10 FB              BPL PLL1
0496  1A7A- A9 9A              LDA =154      WAIT 166 MICROSEC
0497  1A7C- 8D 44 17           STA CLK1T
0498  1A7F- A9 A7              LDA =$A7      OUTPUT PB7=1
0499  1A81- 8D 42 17           STA SBD
0500                   *

----------------------------------------------------------------------

                                   13/02/18   R65 ASSEMBLER  PAGE 11

0501  1A84- 2C 47 17   PLL2    BIT CLKRDI
0502  1A87- 10 FB              BPL PLL2
0503  1A89- A9 9A              LDA =154
0504  1A8B- 8D 44 17           STA CLK1T
0505  1A8E- A9 27              LDA =$27      PB7=0
0506  1A90- 8D 42 17           STA SBD
0507  1A93- 4C 75 1A           JMP PLL1
0508                   *
0509                   *
0510                   *       INTERRUPTS PAGE 27
0511                   *
0512  1A96-          BSS $164    RESERVED FOR TEST
0513  1BFA- 6B 1A      NMIP27  WRD PLLCAL
0514  1BFC- 6B 1A      RSTP27  WRD PLLCAL
0515  1BFE- 6B 1A      IRQP27  WRD PLLCAL
0516                   *
0517                   *
0518                   *
0519                   *
0520                   *
0521                   *              666666  555555  333333  000000
0522                   *              6       5            3  0    0
0523                   *              6       5            3  0    0
0524                   *              666666  555555  333333  0    0
0525                   *              6    6       5       3  0    0
0526                   *              6    6       5       3  0    0
0527                   *              666666  666666  666666  000000
0528                   *
0529                   *
0530                   *
0531                   *                      000000  000000  222222
0532                   *                      0    0  0    0       2
0533                   *              ------  0    0  0    0       2
0534                   *              ------  0    0  0    0  222222
0535                   *              ------  0    0  0    0  2
0536                   *                      0    0  0    0  2
0537                   *                      000000  000000  222222
0538                   *
0539                   *
0540                   *
0541                   *
0542                   *          COPYRIGHT
0543                   *          MOS TECHNOLOGY INC.
0544                   *          DATE  OCT 13 1975    REV E
0545                   *
0546                   *    KIM   :TTY INTERFACE
0547                   *          :KEYBOARD INTERFACE
0548                   *          :7 SEG 6 DIGIT DISPLAY
0549                   *
0550                   *

----------------------------------------------------------------------

                                   13/02/18   R65 ASSEMBLER  PAGE 12

0551                   *    TTY CMDS:
0552                   *          G   GOEXEC
0553                   *          CR  OPEN NEXT CELL
0554                   *          LF  OPEN PREV. CELL
0555                   *          .   MODIFY OPEN CELL
0556                   *          SP  OPEN NEW CELL
0557                   *          L   LOAD (OBJECT FORMAT)
0558                   *          Q   DUMP  FROM OPEN CELL AD TO HI L
0559                   *          RO  RUB OUT  - RETURN TO START (KIM)
0560                   *              (ALL ILLEGAL CHARS ARE IGNORED)
0561                   *
0562                   *    KEYBOARD COMMANDS:
0563                   *        ADDR  SETS MODE TO MODIFY CELL AD
0564                   *        DATA  SETS MODE TO MODIFY DATA
0565                   *        STEP  INCREMENTS TO NEXT CELL
0566                   *        RST   SYSTEM RESET
0567                   *        RUN   GOEXEC
0568                   *        STOP  $1C00 CAN BE PUT INTO NMIV TO
0569                   *              USE STOP FEATURE
0570                   *        PC    DISPLAY PC
0571                   *
0572                   *        CLOCK IS NOT DISABLED IN SIGMA 1
0573                   *
0574                   *
0575                   *
0576                   *
0577            ORG $1C00
0578                   *
0579                   *
0580  1C00- 85 F3      SAVE    STA ACC       KIM ENTRY VIA STOP(NMI)
0581  1C02- 68                 PLA           OR BRK (IRQ)
0582  1C03- 85 F1              STA PREG
0583  1C05- 68                 PLA           KIM ENTRY VIA JSR(A LOST)
0584  1C06- 85 EF              STA PCL
0585  1C08- 85 FA              STA POINTL
0586  1C0A- 68                 PLA
0587  1C0B- 85 F0              STA PCH
0588  1C0D- 85 FB              STA POINTH
0589  1C0F- 84 F4              STY YREG
0590  1C11- 86 F5              STX XREG
0591  1C13- BA                 TSX
0592  1C14- 86 F2              STX SPUSER
0593  1C16- 20 88 1E           JSR INITS
0594  1C19- 4C 4F 1C           JMP START
0595                   *
0596  1C1C- 6C FA 17   NMIT    JMP (NMIV)    NON-MASKABLE INTERRUPT
0597  1C1F- 6C FE 17   IRQT    JMP (IRQV)    INTERRUPT TRAP
0598                   *
0599  1C22- A2 FF      RST     LDX =$FF      KIM ENTRY VIA RST
0600  1C24- 9A                 TXS

----------------------------------------------------------------------

                                   13/02/18   R65 ASSEMBLER  PAGE 13

0601  1C25- 86 F2              STX SPUSER
0602  1C27- 20 88 1E           JSR INITS
0603                   *
0604                   *
0605  1C2A- A9 FF              LDA =$FF      COUNT START BIT
0606  1C2C- 8D F3 17           STA CNTH30    ZERO CNTH30
0607  1C2F- A9 01              LDA =$01      MASK HI ORDER BITS
0608  1C31- 2C 40 17   DET1    BIT SAD       TEST
0609  1C34- D0 19              BNE START     KEYBD SSW TEST
0610  1C36- 30 F9              BMI DET1      START BIT TEST
0611  1C38- A9 FC              LDA =$FC
0612  1C3A- 18         DET3    CLC           THIS LOOP COUNTS
0613  1C3B- 69 01              ADC =$01      THE START BIT TIME
0614  1C3D- 90 03              BCC DET2
0615  1C3F- EE F3 17           INC CNTH30
0616  1C42- AC 40 17   DET2    LDY SAD       CHECK FOR END OF START BT
0617  1C45- 10 F3              BPL DET3
0618  1C47- 8D F2 17           STA CNTL30
0619  1C4A- A2 08              LDX =$08
0620  1C4C- 20 6A 1E           JSR GET5      GET REST OF THE CHAR
0621                   *
0622                   *
0623                   *
0624                   *       MAKE TTY/KB SELECTION
0625                   *
0626  1C4F- 20 8C 1E   START   JSR INIT1
0627  1C52- A9 01              LDA =$01
0628  1C54- 2C 40 17           BIT SAD
0629  1C57- D0 1E              BNE TTYKB
0630  1C59- 20 2F 1E           JSR CRLF      PRT CR LF
0631  1C5C- A2 0A              LDX =$0A      TYPE OUT KIM
0632  1C5E- 20 31 1E           JSR PRTST
0633  1C61- 4C AF 1D           JMP SHOW1
0634                   *
0635  1C64- A9 00      CLEAR   LDA =$00
0636  1C66- 85 F8              STA INL       CLEAR INPUT BUFFER
0637  1C68- 85 F9              STA INH
0638  1C6A- 20 5A 1E   READ    JSR GETCH     GET CHAR
0639  1C6D- C9 01              CMP =$01
0640  1C6F- F0 06              BEQ TTYKB
0641  1C71- 20 AC 1F           JSR PACK
0642  1C74- 4C DB 1D           JMP SCAN
0643                   *
0644                   *       MAIN ROUTINE FOR KEY BOARD
0645                   *       AND DISPLAY
0646                   *
0647  1C77- 20 19 1F   TTYKB   JSR SCAND     IF A=0 NO KEY
0648  1C7A- D0 D3              BNE START
0649  1C7C- A9 01      TTYKB1  LDA =$01
0650  1C7E- 2C 40 17           BIT SAD

----------------------------------------------------------------------

                                   13/02/18   R65 ASSEMBLER  PAGE 14

0651  1C81- F0 CC              BEQ START
0652  1C83- 20 19 1F           JSR SCAND
0653  1C86- F0 F4              BEQ TTYKB1
0654  1C88- 20 19 1F           JSR SCAND
0655  1C8B- F0 EF              BEQ TTYKB1
0656                   *
0657  1C8D- 20 6A 1F   GETK    JSR GETKEY
0658  1C90- C9 15              CMP =$15
0659  1C92- 10 BB              BPL START
0660  1C94- C9 14              CMP =$14
0661  1C96- F0 44              BEQ PCCMD     DISPLAY PC
0662  1C98- C9 10              CMP =$10      ADDR MODE=1
0663  1C9A- F0 2C              BEQ ADDRM
0664  1C9C- C9 11              CMP =$11      DATA MODE=1
0665  1C9E- F0 2C              BEQ DATAM
0666  1CA0- C9 12              CMP =$12      STEP
0667  1CA2- F0 2F              BEQ STEP
0668  1CA4- C9 13              CMP =$13      RUN
0669  1CA6- F0 31              BEQ GOV
0670  1CA8- 0A         DATA    ASL A         SHIFT CHAR INTO HIGH
0671  1CA9- 0A                 ASL A         ORDER NIBBLE
0672  1CAA- 0A                 ASL A
0673  1CAB- 0A                 ASL A
0674  1CAC- 85 FC              STA TEMP      STORE IN TEMP
0675  1CAE- A2 04              LDX =$04
0676  1CB0- A4 FF      DATA1   LDY MODE      TEST MODE 1=ADDR
0677  1CB2- D0 0A              BNE ADDR      MODE=0 DATA
0678  1CB4- B1 FA              LDA (POINTL),Y GET DATA
0679  1CB6- 06 FC              ASL TEMP      SHIFT CHAR
0680  1CB8- 2A                 ROL A         SHIFT DATA
0681  1CB9- 91 FA              STA (POINTL),Y STORE OUT DATA
0682  1CBB- 4C C3 1C           JMP DATA2
0683                   *
0684  1CBE- 0A         ADDR    ASL A         SHIFT CHAR
0685  1CBF- 26 FA              ROL POINTL    SHIFT ADDR
0686  1CC1- 26 FB              ROL POINTH    SHIFT ADDR HI
0687  1CC3- CA         DATA2   DEX
0688  1CC4- D0 EA              BNE DATA1     DO 4 TIMES
0689  1CC6- F0 08              BEQ DATAM2    EXIT HERE
0690                   *
0691  1CC8- A9 01      ADDRM   LDA =$01
0692  1CCA- D0 02              BNE DATAM1
0693                   *
0694  1CCC- A9 00      DATAM   LDA =$00
0695  1CCE- 85 FF      DATAM1  STA MODE
0696  1CD0- 4C 4F 1C   DATAM2  JMP START
0697                   *
0698  1CD3- 20 63 1F   STEP    JSR INCPT
0699  1CD6- 4C 4F 1C           JMP START
0700                   *

----------------------------------------------------------------------

                                   13/02/18   R65 ASSEMBLER  PAGE 15

0701  1CD9- 4C C8 1D   GOV     JMP GOEXEC
0702                   *
0703                   *
0704                   *       DISPLAY PC BY MOVING
0705                   *       PC TO POINT
0706                   *
0707  1CDC- A5 EF      PCCMD   LDA PCL
0708  1CDE- 85 FA              STA POINTL
0709  1CE0- A5 F0              LDA PCH
0710  1CE2- 85 FB              STA POINTH
0711  1CE4- 4C 4F 1C           JMP START
0712                   *
0713                   *       LOAD PAPER TAPE FROM TTY
0714                   *
0715  1CE7- 20 5A 1E   LOAD    JSR GETCH     LOOK FOR FIRST CHAR
0716  1CEA- C9 3B              CMP =$3B      SMICOLON
0717  1CEC- D0 F9              BNE LOAD
0718  1CEE- A9 00              LDA =$00
0719  1CF0- 85 F7              STA CHKSUM
0720  1CF2- 85 F6              STA CHKHI
0721                   *
0722  1CF4- 20 9D 1F           JSR GETBYT    GET BYTE CNT
0723  1CF7- AA                 TAX           SAVE IN X INDEX
0724  1CF8- 20 91 1F           JSR CHK       COMPUTE CHKSUM
0725                   *
0726  1CFB- 20 9D 1F           JSR GETBYT    GET ADDRESS HI
0727  1CFE- 85 FB              STA POINTH
0728  1D00- 20 91 1F           JSR CHK
0729  1D03- 20 9D 1F           JSR GETBYT    GET ADDRESS LO
0730  1D06- 85 FA              STA POINTL
0731  1D08- 20 91 1F           JSR CHK
0732                   *
0733  1D0B- 8A                 TXA           IF CNT=0 DONT
0734  1D0C- F0 0F              BEQ LOAD3     GET ANY DATA
0735                   *
0736  1D0E- 20 9D 1F   LOAD2   JSR GETBYT    GET DATA
0737  1D11- 91 FA              STA (POINTL),Y STORE DATA
0738  1D13- 20 91 1F           JSR CHK
0739  1D16- 20 63 1F           JSR INCPT     NEXT ADDRESS
0740  1D19- CA                 DEX
0741  1D1A- D0 F2              BNE LOAD2
0742  1D1C- E8                 INX           X=1 DATA RECORD
0743                   *                       X=0 LAST RECORD
0744  1D1D- 20 9D 1F   LOAD3   JSR GETBYT    COMPARE CHKSUM
0745  1D20- C5 F6              CMP CHKHI
0746  1D22- D0 17              BNE LOADE1
0747  1D24- 20 9D 1F           JSR GETBYT
0748  1D27- C5 F7              CMP CHKSUM
0749  1D29- D0 13              BNE LOADER
0750                   *

----------------------------------------------------------------------

                                   13/02/18   R65 ASSEMBLER  PAGE 16

0751  1D2B- 8A                 TXA           X=0 LAST RECORD
0752  1D2C- D0 B9              BNE LOAD
0753                   *
0754  1D2E- A2 0C      LOAD7   LDX =$0C      X-OFF KIM
0755  1D30- A9 27      LOAD8   LDA =$27
0756  1D32- 8D 42 17           STA SBD       DISABLE DATA IN
0757  1D35- 20 31 1E           JSR PRTST
0758  1D38- 4C 4F 1C           JMP START
0759                   *
0760  1D3B- 20 9D 1F   LOADE1  JSR GETBYT    DUMMY
0761  1D3E- A2 11      LOADER  LDX =$11      X-OFF ERR KIM
0762  1D40- D0 EE              BNE LOAD8
0763                   *
0764                   *       DUMP TO TTY
0765                   *       FROM OPEN CELL ADDRESS
0766                   *       TO LIMHL,LIMHH
0767                   *
0768  1D42- A9 00      DUMP    LDA =$00
0769  1D44- 85 F8              STA INL
0770  1D46- 85 F9              STA INH       CLEAR RECORD COUNT
0771  1D48- A9 00      DUMP0   LDA =$00
0772  1D4A- 85 F6              STA CHKHI     CLEAR CHKSUM
0773  1D4C- 85 F7              STA CHKSUM
0774                   *
0775  1D4E- 20 2F 1E           JSR CRLF      PRINT CR LF
0776  1D51- A9 3B              LDA =$3B      PRINT SEMICOLON
0777  1D53- 20 A0 1E           JSR OUTCH
0778  1D56- A5 FA              LDA POINTL    TEST POINT GT OR ET
0779  1D58- CD F7 17           CMP EAL       HI LIMIT GOTO EXIT
0780  1D5B- A5 FB              LDA POINTH
0781  1D5D- ED F8 17           SBC EAH
0782  1D60- 90 18              BCC DUMP4
0783                   *
0784  1D62- A9 00              LDA =$00       PRINT LAST RECORD
0785  1D64- 20 3B 1E           JSR PRTBYT    0 BYTES
0786  1D67- 20 CC 1F           JSR OPEN
0787  1D6A- 20 1E 1E           JSR PRTPNT
0788                   *
0789  1D6D- A5 F6              LDA CHKHI     PRINT CHKSUM
0790  1D6F- 20 3B 1E           JSR PRTBYT    FOR LAST RECORD
0791  1D72- A5 F7              LDA CHKSUM
0792  1D74- 20 3B 1E           JSR PRTBYT
0793  1D77- 4C 64 1C           JMP CLEAR
0794                   *
0795  1D7A- A9 18      DUMP4   LDA =$18      PRINT 24 BYTE COUNT
0796  1D7C- AA                 TAX           SAVE AS INDEX
0797  1D7D- 20 3B 1E           JSR PRTBYT
0798  1D80- 20 91 1F           JSR CHK
0799  1D83- 20 1E 1E           JSR PRTPNT
0800                   *

----------------------------------------------------------------------

                                   13/02/18   R65 ASSEMBLER  PAGE 17

0801  1D86- A0 00      DUMP2   LDY =$00      PRINT 24 BYTES
0802  1D88- B1 FA              LDA (POINTL),Y GET DATA
0803  1D8A- 20 3B 1E           JSR PRTBYT    PRINT DATA
0804  1D8D- 20 91 1F           JSR CHK       COMPUTE CHKSUM
0805  1D90- 20 63 1F           JSR INCPT     INCREMENT POINT
0806  1D93- CA                 DEX
0807  1D94- D0 F0              BNE DUMP2
0808                   *
0809  1D96- A5 F6              LDA CHKHI     PRINT CHKSUM
0810  1D98- 20 3B 1E           JSR PRTBYT
0811  1D9B- A5 F7              LDA CHKSUM
0812  1D9D- 20 3B 1E           JSR PRTBYT
0813  1DA0- E6 F8              INC INL       INCR RECORD COUNT
0814  1DA2- D0 02              BNE DUMP3
0815  1DA4- E6 F9              INC INH
0816  1DA6- 4C 48 1D   DUMP3   JMP DUMP0
0817                   *
0818  1DA9- 20 CC 1F   SPACE   JSR OPEN      OPEN NEW CELL
0819  1DAC- 20 2F 1E   SHOW    JSR CRLF      PRINT CR LF
0820  1DAF- 20 1E 1E   SHOW1   JSR PRTPNT
0821  1DB2- 20 9E 1E           JSR OUTSP     PRINT SPACE
0822  1DB5- A0 00              LDY =$00      PRINT DATA SPECIFIED
0823  1DB7- B1 FA              LDA (POINTL),Y BY POINT AD=LDA EXT
0824  1DB9- 20 3B 1E           JSR PRTBYT
0825  1DBC- 20 9E 1E           JSR OUTSP     PRINT SPACE
0826  1DBF- 4C 64 1C           JMP CLEAR
0827                   *
0828  1DC2- 20 63 1F   RTRN    JSR INCPT     OPEN NEXT CELL
0829  1DC5- 4C AC 1D           JMP SHOW
0830                   *
0831  1DC8- A6 F2      GOEXEC  LDX SPUSER
0832  1DCA- 9A                 TXS
0833  1DCB- A5 FB              LDA POINTH    PROGRAM RUNS FROM
0834  1DCD- 48                 PHA           OPEN CELL ADDRESS
0835  1DCE- A5 FA              LDA POINTL
0836  1DD0- 48                 PHA
0837  1DD1- A5 F1              LDA PREG
0838  1DD3- 48                 PHA
0839  1DD4- A6 F5              LDX XREG      RESTORE REGS
0840  1DD6- A4 F4              LDY YREG
0841  1DD8- A5 F3              LDA ACC
0842  1DDA- 40                 RTI
0843                   *
0844  1DDB- C9 20      SCAN    CMP =$20      OPEN CELL
0845  1DDD- F0 CA              BEQ SPACE
0846  1DDF- C9 7F              CMP =$7F      RUB OUT (KIM)
0847  1DE1- F0 1B              BEQ STV
0848  1DE3- C9 0D              CMP =$0D      NEXT CELL
0849  1DE5- F0 DB              BEQ RTRN
0850  1DE7- C9 0A              CMP =$0A      PREV CELL

----------------------------------------------------------------------

                                   13/02/18   R65 ASSEMBLER  PAGE 18

0851  1DE9- F0 1C              BEQ FEED
0852  1DEB- C9 2E              CMP ='.       MODIFY CELL
0853  1DED- F0 26              BEQ MODIFY
0854  1DEF- C9 47              CMP ='G       GO EXEC
0855  1DF1- F0 D5              BEQ GOEXEC
0856  1DF3- C9 51              CMP ='Q       DUMP FROM OPEN CELL
0857  1DF5- F0 0A              BEQ DUMPV
0858  1DF7- C9 4C              CMP ='L       LOAD TAPE
0859  1DF9- F0 09              BEQ LOADV
0860  1DFB- 4C 6A 1C           JMP READ      IGNORE ILLEGAL CHAR
0861                   *
0862  1DFE- 4C 4F 1C   STV     JMP START
0863  1E01- 4C 42 1D   DUMPV   JMP DUMP
0864  1E04- 4C E7 1C   LOADV   JMP LOAD
0865                   *
0866  1E07- 38         FEED    SEC
0867  1E08- A5 FA              LDA POINTL    DEC DOUBLE BYTE
0868  1E0A- E9 01              SBC =$01      AT POINTL AND POINTH
0869  1E0C- 85 FA              STA POINTL
0870  1E0E- B0 02              BCS FEED1
0871  1E10- C6 FB              DEC POINTH
0872  1E12- 4C AC 1D   FEED1   JMP SHOW
0873                   *
0874  1E15- A0 00      MODIFY  LDY =$00      GET CONTENT OF INP BUFF
0875  1E17- A5 F8              LDA INL       INL AND STORE IN LOC
0876  1E19- 91 FA              STA (POINTL),Y SPECIFIED BY POINT
0877  1E1B- 4C C2 1D           JMP RTRN
0878                   *
0879                   *       END OF MAIN LINE
0880                   *       SUBROUTINES FOLLOW
0881                   *
0882                   *
0883                   *
0884                   *       SUB TO PRINT POINTL,POINTH
0885                   *
0886  1E1E- A5 FB      PRTPNT  LDA POINTH
0887  1E20- 20 3B 1E           JSR PRTBYT
0888  1E23- 20 91 1F           JSR CHK
0889  1E26- A5 FA              LDA POINTL
0890  1E28- 20 3B 1E           JSR PRTBYT
0891  1E2B- 20 91 1F           JSR CHK
0892  1E2E- 60                 RTS
0893                   *
0894                   *       PRINT STRING OF ASCII CHARS FROM
0895                   *       TOP+X TO TOP
0896                   *
0897  1E2F- A2 07      CRLF    LDX =$07
0898  1E31- BD D5 1F   PRTST   LDA TOP,X
0899  1E34- 20 A0 1E           JSR OUTCH
0900  1E37- CA                 DEX

----------------------------------------------------------------------

                                   13/02/18   R65 ASSEMBLER  PAGE 19

0901  1E38- 10 F7              BPL PRTST     STOP ON INDEX ZERO
0902  1E3A- 60                 RTS
0903                   *
0904                   *       PRINT 1 HEX BYTE AS TWO ASCII CHAR'S
0905                   *
0906  1E3B- 85 FC      PRTBYT  STA TEMP
0907  1E3D- 4A                 LSR A         SHIFT CHAR RIGHT 4 BITS
0908  1E3E- 4A                 LSR A
0909  1E3F- 4A                 LSR A
0910  1E40- 4A                 LSR A
0911  1E41- 20 4C 1E           JSR HEXTA     CONVERT TO HEX AND PRINT
0912  1E44- A5 FC              LDA TEMP      GET OTHER HALF
0913  1E46- 20 4C 1E           JSR HEXTA     CONVERT TO HEX AND PRINT
0914  1E49- A5 FC              LDA TEMP      RESTORE BYTE IN A AND RET
0915  1E4B- 60                 RTS
0916                   *
0917  1E4C- 29 0F      HEXTA   AND =$0F      MASK HI 4 BITS
0918  1E4E- C9 0A              CMP =$0A
0919  1E50- 18                 CLC
0920  1E51- 30 02              BMI HEXTA1
0921  1E53- 69 07              ADC =$07      ALPHA HEX
0922  1E55- 69 30      HEXTA1  ADC =$30      DEC HEX
0923  1E57- 4C A0 1E           JMP OUTCH     PRINT CHAR
0924                   *
0925                   *       GET 1 CHAR FROM TTY
0926                   *       CHAR IN A
0927                   *       X IS PRESERVED AND Y RETURNED = FF
0928                   *
0929  1E5A- 86 FD      GETCH   STX TMPX      SAVE X REG
0930  1E5C- A2 08              LDX =$08      SET UP 8-BIT CNT
0931  1E5E- A9 01              LDA =$01
0932  1E60- 2C 40 17   GET1    BIT SAD
0933  1E63- D0 22              BNE GET6
0934  1E65- 30 F9              BMI GET1      WAIT FOR START BIT
0935  1E67- 20 D4 1E           JSR DELAY     DELAY 1 BIT
0936  1E6A- 20 EB 1E   GET5    JSR DEHALF    DELAY 1/2 BIT TIME
0937  1E6D- AD 40 17   GET2    LDA SAD       GET 8 BITS
0938  1E70- 29 80              AND =$80      MASK OFF LOW ORDER BITS
0939  1E72- 46 FE              LSR CHAR      SHIFT RIGHT CHAR
0940  1E74- 05 FE              ORA CHAR
0941  1E76- 85 FE              STA CHAR
0942  1E78- 20 D4 1E           JSR DELAY     DELAY 1 BIT TIME
0943  1E7B- CA                 DEX
0944  1E7C- D0 EF              BNE GET2      GET NEXT CHAR
0945  1E7E- 20 EB 1E           JSR DEHALF    EXIT THIS RTN
0946                   *
0947  1E81- A6 FD              LDX TMPX
0948  1E83- A5 FE              LDA CHAR
0949  1E85- 2A                 ROL A         SHIFT OFF PARITY
0950  1E86- 4A                 LSR A

----------------------------------------------------------------------

                                   13/02/18   R65 ASSEMBLER  PAGE 20

0951  1E87- 60         GET6    RTS
0952                   *
0953                   *       INITIALIZATION FOR SIGMA
0954                   *
0955  1E88- A2 01      INITS   LDX =$01      SET KB MODE TO ADDR
0956  1E8A- 86 FF              STX MODE
0957                   *
0958  1E8C- A2 00      INIT1   LDX =$00
0959  1E8E- 8E 41 17           STX PADD      FOR SIGMA USE SADD
0960  1E91- A2 3F              LDX =$3F
0961  1E93- 8E 43 17   KINIT2  STX PBDD      FOR SIGMA USE SBDD
0962  1E96- A2 07              LDX =$07      ENABLE DATA IN
0963  1E98- 8E 42 17           STX SBD       OUTPUT
0964  1E9B- D8                 CLD
0965  1E9C- 78                 SEI
0966  1E9D- 60                 RTS
0967                   *
0968                   *       PRINT 1 CHAR   CHAR IN A
0969                   *       X IS PRESERVED  Y RETURNED = FF
0970                   *       OUTSP   PRINTS 1 SPACE
0971                   *
0972  1E9E- A9 20      OUTSP   LDA =$20
0973  1EA0- 85 FE      OUTCH   STA CHAR
0974  1EA2- 86 FD              STX TMPX
0975  1EA4- 20 D4 1E           JSR DELAY     10/11 BIT CODE SYNC
0976  1EA7- AD 42 17           LDA SBD       START BIT
0977  1EAA- 29 FE              AND =$FE
0978  1EAC- 8D 42 17           STA SBD
0979  1EAF- 20 D4 1E           JSR DELAY
0980  1EB2- A2 08              LDX =$08
0981  1EB4- AD 42 17   OUT1    LDA SBD       DATA BIT
0982  1EB7- 29 FE              AND =$FE
0983  1EB9- 46 FE              LSR CHAR
0984  1EBB- 69 00              ADC =$00
0985  1EBD- 8D 42 17           STA SBD
0986  1EC0- 20 D4 1E           JSR DELAY
0987  1EC3- CA                 DEX
0988  1EC4- D0 EE              BNE OUT1
0989  1EC6- AD 42 17           LDA SBD       STOP BIT
0990  1EC9- 09 01              ORA =$01
0991  1ECB- 8D 42 17           STA SBD
0992  1ECE- 20 D4 1E           JSR DELAY     STOP BIT
0993  1ED1- A6 FD              LDX TMPX      RESTORE INDEX
0994  1ED3- 60                 RTS
0995                   *
0996                   *
0997                   *       DELAY 1 BIT TIME
0998                   *       AS DETERMEND BY DETCPS
0999                   *
1000  1ED4- AD F3 17   DELAY   LDA CNTH30    THIS LOOP SIMULATES

----------------------------------------------------------------------

                                   13/02/18   R65 ASSEMBLER  PAGE 21

1001  1ED7- 8D F4 17           STA TIMH      DETCPS SECTION
1002  1EDA- AD F2 17           LDA CNTL30    1 BIT TIME
1003  1EDD- 38         DE2     SEC
1004  1EDE- E9 01      DE4     SBC =$01
1005  1EE0- B0 03              BCS DE3
1006  1EE2- CE F4 17           DEC TIMH
1007  1EE5- AC F4 17   DE3     LDY TIMH
1008  1EE8- 10 F3              BPL DE2
1009  1EEA- 60                 RTS
1010                   *
1011                   *                       DELAY 1/2 BIT TIME
1012  1EEB- AD F3 17   DEHALF  LDA CNTH30    DOUBLE RIGHT SHIFT
1013  1EEE- 8D F4 17           STA TIMH      CONSTANT FOR A DIV BY 2
1014  1EF1- AD F2 17           LDA CNTL30
1015  1EF4- 4A                 LSR A
1016  1EF5- 4E F4 17           LSR TIMH
1017  1EF8- 90 E3              BCC DE2
1018  1EFA- 09 80              ORA =$80
1019  1EFC- B0 E0              BCS DE4
1020                   *
1021                   *       SUB TO DETERMINE IF KEY IS
1022                   *       DEPRESSED OR CONDITION OF SSW
1023                   *             KEY NOT DEP OR TTY MODE A=0
1024                   *             KEY DEP OR KB MODE A NOT ZERO
1025                   *
1026                   *
1027  1EFE- A0 03      AK      LDY =$03       3 ROWS
1028  1F00- A2 01              LDX =$01      DIGIT 0
1029                   *
1030  1F02- A9 FF      ONEKEY  LDA =$FF
1031  1F04- 8E 42 17   AK1     STX SBD      OUTPUT DIGIT
1032  1F07- E8                 INX          GET NEXT DIGIT
1033  1F08- E8                 INX          GET NEXT DIGIT
1034  1F09- 2D 40 17           AND SAD      INPUT SEGMENTS
1035  1F0C- 88                 DEY          INPUT SEGMENTS
1036  1F0D- D0 F5              BNE AK1
1037                   *
1038  1F0F- A0 07              LDY =$07
1039  1F11- 8C 42 17           STY SBD
1040                   *
1041  1F14- 09 80              ORA =$80
1042  1F16- 49 FF              EOR =$FF
1043  1F18- 60                 RTS
1044                   *
1045                   *       SUB  OUTPUT TO 7-SEGMENT DISPLAY
1046                   *
1047  1F19- A0 00      SCAND   LDY =$00      GET DATA SPECIFIED
1048  1F1B- B1 FA              LDA (POINTL),Y BY POINT
1049  1F1D- 85 F9              STA INH       SET UP DISPLAY BUFFER
1050  1F1F- A9 7F      SCANDS  LDA =$7F      CHANGE SEG

----------------------------------------------------------------------

                                   13/02/18   R65 ASSEMBLER  PAGE 22

1051  1F21- 8D 41 17           STA PADD      TO OUTPUT
1052                   *
1053  1F24- A2 09              LDX =$09      INIT DIGIT NUMBER
1054  1F26- A0 03              LDY =$03      OUTPUT 3 BYTES
1055                   *
1056  1F28- B9 F8 00   SCAND1  LDA INL,Y     GET BYTE
1057  1F2B- 4A                 LSR A         GET MSD
1058  1F2C- 4A                 LSR A
1059  1F2D- 4A                 LSR A
1060  1F2E- 4A                 LSR A
1061  1F2F- 20 48 1F           JSR CONVD     OUTPUT CHAR
1062  1F32- B9 F8 00           LDA INL,Y     GET BYTE AGAIN
1063  1F35- 29 0F              AND =$0F      GET LSD
1064  1F37- 20 48 1F           JSR CONVD     OUTPUT CHAR
1065  1F3A- 88                 DEY           SET UP FOR NXT BYTE
1066  1F3B- D0 EB              BNE SCAND1
1067  1F3D- 8E 42 17           STX SBD       ALL DIGITS OFF
1068  1F40- A9 00              LDA =$00      CHANGE SEGMENT
1069  1F42- 8D 41 17           STA PADD      TO INPUTS
1070  1F45- 4C FE 1E           JMP AK        GET ANY KEY
1071                   *
1072                   *       CONVERT AND DISPLAY HEX
1073                   *       USED BY SCAND ONLY
1074                   *
1075  1F48- 84 FC      CONVD   STY TEMP      SAVE Y
1076  1F4A- A8                 TAY           USE CHAR AS INDEX
1077  1F4B- B9 E7 1F           LDA TABLE,Y   LOOKUP CONVERSION
1078  1F4E- A0 00              LDY =$00      TURN OFF SEGMENTS
1079  1F50- 8C 40 17           STY SAD
1080  1F53- 8E 42 17           STX SBD       OUTPUT DIGIT ENABLE
1081  1F56- 8D 40 17           STA SAD       OUT PUT SEGMENTS
1082                   *
1083  1F59- A0 7F              LDY =$7F      DELAY 500 CYCLES APPROX.
1084  1F5B- 88         CONVD1  DEY
1085  1F5C- D0 FD              BNE CONVD1
1086                   *
1087  1F5E- E8                 INX           GET NEXT DIGIT NUMBER
1088  1F5F- E8                 INX           ADD 2
1089  1F60- A4 FC              LDY TEMP      RESTORE Y
1090  1F62- 60                 RTS
1091                   *
1092                   *       SUB TO INCREMENT POINT
1093                   *
1094  1F63- E6 FA      INCPT   INC POINTL
1095  1F65- D0 02              BNE INCPT2
1096  1F67- E6 FB              INC POINTH
1097  1F69- 60         INCPT2  RTS
1098                   *
1099                   *       GET KEY FROM KEY BOARD
1100                   *       RETURN WITH A=KEY VALUE

----------------------------------------------------------------------

                                   13/02/18   R65 ASSEMBLER  PAGE 23

1101                   *       GT. 15 THEN ILLEGAL OR NO KEY
1102                   *
1103                   *
1104  1F6A- A2 21      GETKEY  LDX =$21      START AT DIGIT 0
1105  1F6C- A0 01      GETKE5  LDY =$01      GET 1 ROW
1106  1F6E- 20 02 1F           JSR ONEKEY
1107  1F71- D0 07              BNE KEYIN     A=0 NO KEY
1108  1F73- E0 27              CPX =$27      TEST FOR DIGIT 2
1109  1F75- D0 F5              BNE GETKE5
1110  1F77- A9 15              LDA =$15      15=NOKEY
1111  1F79- 60                 RTS
1112  1F7A- A0 FF      KEYIN   LDY =$FF
1113  1F7C- 0A         KEYIN1  ASL A         SHIFT LEFT
1114  1F7D- B0 03              BCS KEYIN2    UNTIL Y=KEY NUM
1115  1F7F- C8                 INY
1116  1F80- 10 FA              BPL KEYIN1
1117  1F82- 8A         KEYIN2  TXA
1118  1F83- 29 0F              AND =$0F      MASK MSD
1119  1F85- 4A                 LSR A         DIVIDE BY 2
1120  1F86- AA                 TAX
1121  1F87- 98                 TYA
1122  1F88- 10 03              BPL KEYIN4
1123  1F8A- 18         KEYIN3  CLC
1124  1F8B- 69 07              ADC =$07      MULT (X-1) TIMES A
1125  1F8D- CA         KEYIN4  DEX
1126  1F8E- D0 FA              BNE KEYIN3
1127  1F90- 60                 RTS
1128                   *
1129                   *       SUB TO COMPUTE CHECK SUM
1130                   *
1131  1F91- 18         CHK     CLC
1132  1F92- 65 F7              ADC CHKSUM
1133  1F94- 85 F7              STA CHKSUM
1134  1F96- A5 F6              LDA CHKHI
1135  1F98- 69 00              ADC =$00
1136  1F9A- 85 F6              STA CHKHI
1137  1F9C- 60                 RTS
1138                   *
1139                   *       GET 2 HEX CHAR'S AND PACK
1140                   *       INTO INL AND INH
1141                   *       X PRESERVED  Y RETURNED = 0
1142                   *       NON HEX CHAR LOADED AS NEAREST H
1143                   *
1144  1F9D- 20 5A 1E   GETBYT  JSR GETCH
1145  1FA0- 20 AC 1F           JSR PACK
1146  1FA3- 20 5A 1E           JSR GETCH
1147  1FA6- 20 AC 1F           JSR PACK
1148  1FA9- A5 F8              LDA INL
1149  1FAB- 60                 RTS
1150                   *

----------------------------------------------------------------------

                                   13/02/18   R65 ASSEMBLER  PAGE 24

1151                   *       SHIFT CHAR IN A INTO
1152                   *       INL AND INH
1153                   *
1154  1FAC- C9 30      PACK    CMP =$30      CHECK FOR HEX
1155  1FAE- 30 1B              BMI UPDAT2
1156  1FB0- C9 47              CMP =$47      NOT HEX EXIT
1157  1FB2- 10 17              BPL UPDAT2
1158  1FB4- C9 40              CMP =$40      CONVERT TO HEX
1159  1FB6- 30 03              BMI UPDATE
1160  1FB8- 18                 CLC
1161  1FB9- 69 09              ADC =$09
1162  1FBB- 2A         UPDATE  ROL A
1163  1FBC- 2A                 ROL A
1164  1FBD- 2A                 ROL A
1165  1FBE- 2A                 ROL A
1166  1FBF- A0 04              LDY =$04      SHIFT INTO I/O BUFFER
1167  1FC1- 2A         UPDAT1  ROL A
1168  1FC2- 26 F8              ROL INL
1169  1FC4- 26 F9              ROL INH
1170  1FC6- 88                 DEY
1171  1FC7- D0 F8              BNE UPDAT1
1172  1FC9- A9 00              LDA =$00      A=0 IF HEX NUM
1173  1FCB- 60         UPDAT2  RTS
1174                   *
1175  1FCC- A5 F8      OPEN    LDA INL       MOVE I/O BUFFER TO POINT
1176  1FCE- 85 FA              STA POINTL
1177  1FD0- A5 F9              LDA INH       TRANSFER INH- POINTH
1178  1FD2- 85 FB              STA POINTH
1179  1FD4- 60                 RTS
1180                   *
1181                   *
1182                   *       END OF SUBROUTINES
1183                   *
1184                   *       TABLES
1185                   *
1186  1FD5- 00 00 00   TOP     BYT $00,$00,$00,$00,$00,$00
1186  1FD8- 00 00 00 
1187  1FDB- 0A 0D 4D           BYT $0A,$0D,'M','I','K'
1187  1FDE- 49 4B 
1188                   *
1189  1FE0- 20 13 52           BYT ' ',$13,'R','R','E',' ',$13
1189  1FE3- 52 45 20 
1189  1FE6- 13 
1190                   *
1191                   *       TABLE HEX TO 7 SEGMENT
1192                   *            0   1   2   3   4   5   6   7
1193  1FE7- BF 86 DB   TABLE   BYT $BF,$86,$DB,$CF,$E6,$ED,$FD,$87
1193  1FEA- CF E6 ED 
1193  1FED- FD 87 
1194                   *            8   9   A   B   C   D   E   F

----------------------------------------------------------------------

                                   13/02/18   R65 ASSEMBLER  PAGE 25

1195  1FEF- FF EF F7           BYT $FF,$EF,$F7,$FC,$B9,$DE,$F9,$F1
1195  1FF2- FC B9 DE 
1195  1FF5- F9 F1 
1196                   *
1197                   *
1198                   *
1199                   *
1200                   *       INTERRUPT VECTORS
1201                   *
1202  1FF7-          ORG $1FFA
1203  1FFA- 1C 1C      NMIENT  WRD NMIT
1204  1FFC- 22 1C      RSTENT  WRD RST
1205  1FFE- 1F 1C      IRQENT  WRD IRQT
1206                   *
1207  2000-                    END
LABELS=00C4
ERRORS=00
RECORDS=47

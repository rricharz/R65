

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 28/10/23   R65 ASSEMBLER  PAGE 01

0001                    * 18/11/81,25/10/23
0002                   **********************************
0003                   * R65 COMPUTER SYSTEM: ASSEMBLER *
0004                   **********************************
0005                   *
0006                   * VERSION 8.0   WITH UNLIMITED NO OF LABELS
0007                   *               ADDITIONAL PSEUDO OP'S
0008                   *               NO RPINTING IN FIRST PASS
0009                   *               SOURCE MAY BE IN SEVERAL FILES
0010                   *               ONLY 'END' TERMINATES A PASS
0011                   * ASSEMBLER FOR R65 COMPUTER SYSTEM
0012                   * CC RRICHARZ, RBAUMANN 1978-1981
0013                   *       - 32 k MEMORY
0014                   *       - VIDEO INTERFACE WITH 4k VIDEO MEMORY
0015                   *       - HARDCOPY OUTPUT
0016                   *       - TAPE AND OR DISK DRIVE(S)
0017                   *
0018                   * INPUT FROM 2 DEVICES
0019                   *       - COMMAND INPUT FROM KEYBOARD
0020                   *       - SOURCE CODE INPUT FROM TAPE OR DISK
0021                   *
0022                   * OUTPUT TO 3 DEVICES
0023                   *       - MESSAGES AND LISTING TO VIDEO DISPLAY
0024                   *       - ERROR TABLE, CROSS REFERENCE MAP AND
0025                   *         LISTINGS TO HARD COPY
0026                   *       - OBJECT FILE(S) TO TAPE OR DISK
0027                   *
0028                   * COMMANDS (A* IS PRINTED IN COMMAND MODE)
0029                   *       F       FIRST PASS
0030                   *       S       SECOND PASS
0031                   *       C       CONTINUE SAME PASS
0032                   *       R       REFERENCE MAP
0033                   *       <CR>    EXIT ASSEMBLER
0034                   *       <ESC>   EXIT ASSEMBLER
0035                   *
0036                   *
0037                   * SOURCE LINE FORMAT [] MEANS OPTIONAL
0038                   * [LABEL] OPCODE [OPERAND] [COMMENT]
0039                   * OR *[COMMENT]
0040                   *
0041                   * PSEUDO OPCODES (ASSEMBLER DIRECTIVES)
0042                   *
0043                   *       - EQU "EXPRESSION"      ASSIGN LABEL
0044                   *       - ORG "EXPRESSION"      ASSIGN PC
0045                   *       - BSS "EXPRESSION"      RESERVE BYTES
0046                   *       - BYT "EXPR","EXPR",..  ASSIGN BYTES
0047                   *               "EXPR" CAN BE 'STRING'
0048                   *       - WRD "EXPR","EXPR",..  ASSIGN WORDS
0049                   *       - PAG                   NEW PAGE
0050                   *       - TIT "MAX 32 CHARS"    ASSIGN TITLE

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 28/10/23   R65 ASSEMBLER  PAGE 01

0051                   *       - END                   END OF SOURCE
0052                   *       - NPR                   NO PRINTING
0053                   *       - PRT                   PRINTING
0054                   *
0055                   * ERROR CODES: (FULL ERROR ANALYSIS IN FIRST
0056                   * PASS INCLUDING FORWARD BRANCHES AND
0057                   * UNRESOLVED REFERENCES)
0058                   * FOR ERROR CODES <30 SEE SYSTEM ERRORS
0059                   *
0060                   * ERROR 31  CLOSING ) EXPECTED IN EXPRESSION
0061                   * ERROR 32  SYNTAX ERROR IN LABEL
0062                   * ERROR 33  HEX CHAR EXPECTED AFTER $
0063                   * ERROR 34  LABEL TABLE OVERFLOW
0064                   * ERROR 35  LOGICAL CHAR EXPECTED AFTER #
0065                   * ERROR 36  EXPRESSION NOT RESOLVED (PASS 2)
0066                   * ERROR 37  SYNTAX ERROR IN OPCODE
0067                   * ERROR 38  MNEMONIC OR ADDRESSING ILLEGAL
0068                   * ERROR 39  ILLEGAL ADDRESSING MODE
0069                   * ERROR 40  SYNTAX ERROR IN OPERAND
0070                   * ERROR 41  ABSOLUTE ADDRESS ILLEGAL
0071                   * ERROR 42  MORE THAN 1 UNRESOLVED LABEL IN
0072                   *               FORWARD BRANCH
0073                   * ERROR 43  BRANCH EXCEEDS BOUNDS
0074                   * ERROR 44  FORWARD BRANCH TO THIS LABEL
0075                   *               EXCEEDS BOUNDS
0076                   * ERROR 45  DOUBLE LABELDEFINITION
0077                   * ERROR 46  MISSMATCH IN SECOND PASS
0078                   * ERROR 47  LABEL MISSING IN EQU
0079                   * ERROR 48  OPERAND OF BYT TOO LONG
0080                   * ERROR 49  EXPRESSION MUST BE RESOLVED
0081                   * ERROR 50  LINE TOO LONG
0082                   * ERROR 51  CHAR FOLLOWS LOGICAL END OF OPERAND
0083                   * ERROR 52  TOO MANY UNRESOLVED BRANCHES
0084                   *               NOT INSERTED INTO TEST TABLE
0085                   *
0086                           TIT R65 ASSEMBLER V8.0
0087                   *
0088                           ORG 0
0089                   *
0090                   * PAGE ZERO ASSEMBLER VARIABLES
0091                   *******************************
0092                   *
0093                   * TEMPORARY BUFFERS
0094                   *
0095  0000-            INBUFF  BSS 48  LINE BUFFER
0096  0030-            LABEL   BSS 7   LABEL SHIFT REGISTER
0097  0037-            TEMP1   BSS 1   TEMPORARY REGISTER
0098  0038-            NUMBYT  BSS 1   NUMBER OF BYTES
0099  0039-            RESOLV  BSS 3   UNRESOLVED COUNTER
0100  003C-            OBJECT  BSS 32  OBJECT CODE LINE BUFFER

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 28/10/23   R65 ASSEMBLER  PAGE 02

0101  005C-            VALUE   BSS 2   VALUE OF EXPRESSION
0102  005E-            OPCODE  BSS 2   OPCODE SAVE REGISTER
0103  0060-            ADMODE  BSS 1   ADDRESSING MODE
0104  0061-            INDEX1  BSS 1   MNEMONIC TABLE INDEX
0105  0062-            INDEX2  BSS 1   CODE OFFSET INDEX
0106  0063-            DEFLB   BSS 1   LABEL DEFINITION FLAG
0107  0064-            INBFPN  BSS 1   END OF INPUT POINTER
0108  0065-            BRANTB  BSS 48  FORWARD BRANCH TABLE
0109  0095-            BASE    BSS 2   REFERENCE TABLE POINTER
0110  0097-            LABPNT  BSS 2   LABEL POINTER
0111  0099-            LABPN1  BSS 2   SECOND LABEL POINTER
0112  009B-            INPFIL  BSS 1   INPUT FILE NUMBER
0113  009C-            SAVPNT  BSS 2   SAVED FILE PAR POINTER
0114                   *
0115                   * PRESET TO 0 IN BOTH PASSES
0116                   *
0117  009E-            PCOLD   BSS 2   OLD PROGRAM COUNTER
0118  00A0-            PCNEW   BSS 2   NEW PROGRAMM COUNTER
0119  00A2-            LINCNT  BSS 2   LINE COUNTER
0120  00A4-            PAGECN  BSS 1   PAGE COUNTER
0121  00A5-            OUTREC  BSS 1   OUTPUT RECORD COUNTER
0122  00A6-            BRANTC  BSS 1   TABLE POINTER
0123  00A7-            FILCNT  BSS 1   INPUT FILE COUNTER
0124  00A8-            NUMERR  BSS 1   NUMBER OF ERRORS
0125                   *
0126                   * PRESET IN BOTH PASSES
0127                   *
0128  00A9-            PASSFL  BSS 1   PASS FLAG
0129  00AA-            PRTFLG  BSS 1   PRINT FLAG
0130  00AB-            PAGELN  BSS 1   PAGE LINE COUNTER
0131  00AC-            OBPNT   BSS 2   OBJECT BUFFER POINTER
0132  00AE-            OBADDR  BSS 2   OBJECT BASE ADDRESS
0133                   *
0134                   * PRESET ONLY IN FIRST BASS
0135                   *
0136  00B0-            LABCNT  BSS 2   LABEL COUNTER
0137  00B2-            TITLE   BSS 32  TITLE OF PROGRAM
0138                   *
0139                   *
0140                   *
0141                   * MONITOR LABELS:
0142                   *****************
0143                   *
0144                   FILFLG  EQU $DA         FILE ENTRY FLAG
0145                   FILDRV  EQU $DC         FILE DRIVE
0146                   CURPOS  EQU $EE         CURSOR HOR. POSITION
0147                   INL     EQU $F8         INPUT BUFFER MONITOR
0148                   *
0149                   FILNAM  EQU $0301       FILE NAME
0150                   FILSTP  EQU $0312       FILE SUBTYPE

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 28/10/23   R65 ASSEMBLER  PAGE 03

0151                   FILLOC  EQU $0313       FILE LOCATION/SECTOR
0152                   FILSIZ  EQU $0315       FILE SIZE
0153                   FILSA   EQU $031A       START ADDRESS
0154                   FILEA   EQU $031C       END ADDRESS
0155                   FILNM1  EQU $0320       SECOND FILE NAME
0156                   FILSA1  EQU $0331       SECOND START ADDRESS
0157                   FIRCTB  EQU $0351       ROCORD COUNTER
0158                   *
0159                   VFLAG   EQU $1780       VIDEO FLAG REGISTER
0160                   SFLAG   EQU $1781       SYSTEM FLAG REGISTER
0161                   NUMLIN  EQU $1789       VIDEO LINES
0162                   VMON    EQU $17D5       ADDRESS OF MONITOR START
0163                   MNEMR   EQU $E7C0       MNEMONIC TABLE
0164                   MNEML   EQU $E780
0165                   DISMOD  EQU $E722       ADDRESSING MODE TABLE 1
0166                   MODE2   EQU $E766       ADDRESSING MODE TABLE
0167                   CLOSAL  EQU $F015
0168                   *
0169                           PAG

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 28/10/23   R65 ASSEMBLER  PAGE 04

0170                   *
0171                   * START OF PROGRAM ENTRY VECTORS
0172                   ********************************
0173                   *
0174  00D2-                    ORG $2000
0175                   *
0176  2000- 4C CE 29           JMP COLDST      COLD START ENTRY
0177  2003- 4C 17 2A           JMP WARMST      WARM START ENTRY
0178                   *
0179                   *
0180                   * ASSEMBLER BUFFERS AND CONSTANTS:
0181                   **********************************
0182                   *
0183  2006- 00 50      OBSTR   WRD $5000       START OF OBJECT BUFFER
0184  2008- FE 8F      OBEND   WRD $8FFE       END OF OBJECT BUFFER -1
0185                   *
0186  200A- 00 90      SAVNAM  WRD $9000       INPUT FILE NAME BUFFER
0187                   *
0188  200C- 00 30      LABSTR  WRD $3000       START OF LABEL TABLE
0189  200E- F0 4F      LABEND  WRD $4FF0       END OF LABEL TABLE
0190                   *
0191  2010- 32         TABLE   BYT 50          PRINTED LINES/PAGE
0192  2011- 45                 BYT 69          TOTAL LINES/PAGE
0193  2012- 0C                 BYT $0C         FORM FEED CODE
0194  2013- 00                 BYT 0           NO OF ADD. PAD CHARS
0195  2014- 41                 BYT 65          POSITION OF PAPER MARK
0196  2015- CE                 BYT $CE         START POSITION ON PAPER
0197                   *
0198                   * SUBROUTINE VECTORS
0199                   ********************
0200                   *
0201                   GETKEY  EQU $E000
0202                   GETCHR  EQU $E003
0203                   GETLIN  EQU $E006
0204                   PRTCHR  EQU $E009
0205                   VAUTOP  EQU $E00C
0206                   ENDLIN  EQU $E024
0207                   PRTINF  EQU $E027
0208                   PRTBYT  EQU $E02D
0209                   PRTAX   EQU $E030
0210  2016- 4C 20 EB   WRFILA  JMP WRFILE+12   SPECIAL ENTRY!
0211                   WRFILE  EQU $EB14
0212                   OPEN    EQU $F00F
0213                   CLOSE   EQU $F012
0214                   READCH  EQU $F018
0215                   PRTDAT  EQU $F80F
0216                   GETNAM  EQU $F815
0217  2019- 4C F2 FC   HARGUM  JMP $FCF2
0218                   PACKTS  EQU $F919
0219                   *

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 28/10/23   R65 ASSEMBLER  PAGE 05

0220                   *
0221                   * SUBROUTINE SRLAB: SEARCH LABEL
0222                   ********************************
0223                   * SEARCH IN LABTB, RETURN C0 IF NOT
0224                   * FOUND, ELSE LBAPNT=ADDRESS OF LABEL
0225                   * USED: TEMP1,A; SAVED: X,Y; OUPUT: A,Z
0226                   *
0227  201C- 84 37      SRLAB   STY TEMP1
0228  201E- AD 0C 20           LDA LABSTR      SET TO START OF TABLE
0229  2021- AC 0D 20           LDY LABSTR+1
0230                   *
0231  2024- 85 97      SRLAB1  STA LABPNT
0232  2026- 84 98              STY LABPNT+1
0233  2028- C5 B0              CMP LABCNT      COMPARE TABLE END
0234  202A- 98                 TYA
0235  202B- E5 B1              SBC LABCNT+1
0236  202D- B0 1C              BCS SRLAB4      SKIP, IF END OF TABLE
0237  202F- A0 04              LDY =4
0238  2031- B9 30 00   SRLAB2  LDA LABEL,Y     COMPARE NOW
0239  2034- D1 97              CMP (LABPNT),Y
0240  2036- D0 07              BNE SRLAB3
0241  2038- 88                 DEY
0242  2039- 10 F6              BPL SRLAB2      LOOP UNTIL DONE
0243  203B- 38                 SEC             LABEL FOUND
0244  203C- A4 37              LDY TEMP1
0245  203E- 60                 RTS
0246                   *
0247  203F- A5 97      SRLAB3  LDA LABPNT      DIFFERENCE FOUND
0248  2041- A4 98              LDY LABPNT+1
0249  2043- 18                 CLC
0250  2044- 69 08              ADC =8          NEXT ONE
0251  2046- 90 DC              BCC SRLAB1
0252  2048- C8                 INY
0253  2049- B0 D9              BCS SRLAB1      ALLWAYS TAKEN
0254                   *
0255  204B- 18         SRLAB4  CLC             NOT FOUND
0256  204C- A4 37              LDY TEMP1
0257  204E- 60                 RTS
0258                   *
0259                   *
0260                   * SUBROUTINE STLABN: STORE LABEL NAME
0261                   *************************************
0262                   * STORE IN LABTAB, ERROR IF TABLE OVERFLOW
0263                   * NO DUPLICATE LABEL TEST, LABTB7 SET TO 0
0264                   * USED: A,Y; SAVED: X; INPUT: LABCNT;
0265                   * OUTPUT: LABCNT, CALLED: ERROR 34
0266                   *
0267  204F- A5 B0      STLABN  LDA LABCNT      COMPUTE LABPNT
0268  2051- A4 B1              LDY LABCNT+1
0269  2053- 18                 CLC

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 28/10/23   R65 ASSEMBLER  PAGE 06

0270  2054- 69 08              ADC =8
0271  2056- 90 01              BCC *+3
0272  2058- C8                 INY
0273  2059- 48                 PHA
0274  205A- CD 0E 20           CMP LABEND      TEST TABLE OVERFLOW
0275  205D- 98                 TYA
0276  205E- ED 0F 20           SBC LABEND+1
0277  2061- 68                 PLA
0278  2062- 90 09              BCC STLAB1      SKIP, IF NOT FULL
0279                   *
0280  2064- A9 34              LDA =$34        ERROR 34: TOO MANY
0281  2066- 20 38 29           JSR ERROR       ERRORS
0282  2069- A5 B0              LDA LABCNT
0283  206B- A4 B1              LDY LABCNT+1
0284                   *
0285  206D- 85 B0      STLAB1  STA LABCNT
0286  206F- 84 B1              STY LABCNT+1
0287  2071- 38                 SEC
0288  2072- E9 08              SBC =8
0289  2074- B0 01              BCS *+3
0290  2076- 88                 DEY
0291  2077- 85 97              STA LABPNT
0292  2079- 84 98              STY LABPNT+1
0293                   *
0294  207B- A0 04              LDY =4
0295  207D- B9 30 00   STLAB2  LDA LABEL,Y
0296  2080- 91 97              STA (LABPNT),Y
0297  2082- 88                 DEY
0298  2083- 10 F8              BPL STLAB2
0299                   *
0300  2085- A9 00              LDA =0          CLEAR BYTE 7
0301  2087- A0 07              LDY =7
0302  2089- 91 97              STA (LABPNT),Y
0303  208B- 60                 RTS
0304                   *
0305                   *  SUBROUTINE RDLAB: READ LABEL FROM BUFFER
0306                   *******************************************
0307                   * READ 1-7 CHARS, SHIFT INTO 5 BYTES, STORE
0308                   * IN LABEL, TERMINATORS ARE NOT LETTERS OR
0309                   * NUMBERS. USED: A,X,Y,TEMP1; CALLED: ERROR;
0310                   * INPUT:X; OUTPUT: LABEL,X
0311                   *
0312  208C- A0 08      RDLAB   LDY =8          CHAR COUNTER
0313  208E- A9 06              LDA =6
0314  2090- 85 37              STA TEMP1       TEMP1 = BIT COUNTER
0315  2092- B5 00              LDA INBUFF,X    GET ONE CHAR
0316  2094- C9 30              CMP =$30        IF NOT LEGAL CODE
0317  2096- 90 04              BCC *+6         USE SAME NEXT LOOP
0318  2098- C9 5B              CMP =$5B        IF LEGAL
0319  209A- 90 03              BCC *+5         USE THIS CHAR

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 28/10/23   R65 ASSEMBLER  PAGE 07

0320  209C- CA                 DEX             USE SAME CHAR AGAIN
0321  209D- A9 00              LDA =0          USE 0 FILLER
0322  209F- 88                 DEY             COUNT CHAR
0323  20A0- F0 21              BEQ RDLAB2      LAST CHAR
0324  20A2- 0A                 ASL A
0325  20A3- 0A                 ASL A
0326  20A4- C0 06              CPY =6          IF X<6
0327  20A6- 90 08              BCC RDLAB1      USE 6 BITS
0328  20A8- C6 37              DEC TEMP1
0329  20AA- 0A                 ASL A           TAKE ONLY 5 BITS
0330  20AB- 90 03              BCC RDLAB1      LEGAL 5 BIT CODE
0331  20AD- A9 00              LDA =0          ELSE USE FILLER
0332  20AF- CA                 DEX
0333  20B0- 0A         RDLAB1  ASL A           SHIFT INTO LABEL
0334  20B1- 26 34              ROL LABEL+4
0335  20B3- 26 33              ROL LABEL+3
0336  20B5- 26 32              ROL LABEL+2
0337  20B7- 26 31              ROL LABEL+1
0338  20B9- 26 30              ROL LABEL
0339  20BB- C6 37              DEC TEMP1
0340  20BD- D0 F1              BNE RDLAB1      LOOP FOR BITS
0341  20BF- E8                 INX
0342  20C0- 4C 8E 20           JMP RDLAB+2
0343  20C3- C9 00      RDLAB2  CMP =0
0344  20C5- D0 06              BNE *+8         MORE THAN 6 CHARACTERS
0345  20C7- A5 30              LDA LABEL
0346  20C9- F0 02              BEQ *+4         FIRST CHAR NOT LETTER
0347  20CB- E8                 INX
0348  20CC- 60                 RTS
0349  20CD- A9 32              LDA =$32
0350  20CF- 4C 38 29           JMP ERROR       RETURN AFTER ERROR
0351                   *
0352                   *
0353                   * SUBROUTINE RDBL: READ BLANKS
0354                   ******************************
0355                   * USED: A; SAVED:Y; INPUT:X; OUTPUT:X
0356                   *
0357  20D2- B5 00      RDBL    LDA INBUFF,X
0358  20D4- E8                 INX
0359  20D5- C9 20              CMP =$20
0360  20D7- F0 F9              BEQ RDBL
0361  20D9- CA                 DEX
0362  20DA- 60                 RTS
0363                   *
0364                   *
0365                   * SUBROUTINE EXPRESSION
0366                   ***********************
0367                   * READ EXPRESSION FROM INBUFF,X.  COMPUTE
0368                   * VALUE AND RESOLV-FLAG (GIVES NUMBER OF
0369                   * UNRESOLVED REFERENCES USED

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 28/10/23   R65 ASSEMBLER  PAGE 08

0370                   * SYNTAX:
0371                   * EXPRESSION: FUNCTION [+-FUNCTION]
0372                   * FUNCTION:   <ARGUMENT OR >ARGUMENT OR
0373                   *               ARGUMENT
0374                   * ARGUMENT:   'CHAR['] OR $HEX OR #BINARY OR
0375                   *               DECIMAL OR * OR LABEL
0376                   * USED: A,X,Y; INPUT:X; OUTPUT: X,VALUE
0377                   *               RESOLVE,RESOLV+1;
0378                   *               CALLED: FUNC,ERROR
0379                   *
0380  20DB- A9 00      EXPRES  LDA =0          SET COUNTER FOR
0381  20DD- 85 39              STA RESOLV      UNRESOLVED LABELS
0382  20DF- 20 17 21           JSR FUNC
0383  20E2- 48         EXP1    PHA             PUSH RESULT ON STACK
0384  20E3- A5 5C              LDA VALUE
0385  20E5- 48                 PHA
0386  20E6- B5 00              LDA INBUFF,X    GET NEXT CHAR
0387  20E8- C9 2B              CMP =$2B        IF +
0388  20EA- D0 12              BNE MINUS
0389  20EC- E8                 INX
0390  20ED- 20 17 21           JSR FUNC        GET NEXT FUNCTION
0391  20F0- 68                 PLA             AND ADD TO SAVED VALUE
0392  20F1- 18                 CLC
0393  20F2- 65 5C              ADC VALUE
0394  20F4- 85 5C              STA VALUE
0395  20F6- 68                 PLA
0396  20F7- 65 5D              ADC VALUE+1
0397  20F9- 85 5D              STA VALUE+1
0398  20FB- 4C E2 20           JMP EXP1
0399  20FE- C9 2D     MINUS   CMP =$2D        IF -
0400  2100- D0 12              BNE EXP2
0401  2102- E8                 INX
0402  2103- 20 17 21           JSR FUNC        GET NEXT FUNCTION
0403  2106- 68                 PLA             AND SUBTRACT FROM SAVED
0404  2107- 38                 SEC
0405  2108- E5 5C              SBC VALUE
0406  210A- 85 5C              STA VALUE
0407  210C- 68                 PLA
0408  210D- E5 5D              SBC VALUE+1
0409  210F- 85 5D              STA VALUE+1
0410  2111- 4C E2 20           JMP EXP1
0411  2114- 68         EXP2    PLA             GET SAVED VALUE BACK
0412  2115- 68                 PLA
0413  2116- 60                 RTS
0414                   *
0415                   *
0416                   * SUBROUTINE FUNCTION
0417                   *********************
0418                   * CALLED: ARG
0419                   *

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 28/10/23   R65 ASSEMBLER  PAGE 09

0420  2117- B5 00      FUNC    LDA INBUFF,X
0421  2119- C9 3C              CMP =$3C        IF < (LOW BYTE)
0422  211B- D0 09              BNE *+11
0423  211D- E8                 INX
0424  211E- 20 33 21           JSR ARG         GET ARGUMENT
0425  2121- A9 00      FUNC1   LDA =0          AND SET HIGH BYTE TO 0
0426  2123- 85 5D              STA VALUE+1
0427  2125- 60                 RTS
0428                   *
0429  2126- C9 3E              CMP =$3E        IF > (HIGH BYTE)
0430  2128- D0 09              BNE ARG
0431  212A- E8                 INX
0432  212B- 20 33 21           JSR ARG         GET ARGUMENT
0433  212E- 85 5C              STA VALUE       STORE HIGH BYTE IN
0434  2130- 4C 21 21           JMP FUNC1       LOW BYTE AND CLEAR HIGH
0435                   *
0436                   *
0437                   * SUBROUTINE ARGUMENT
0438                   *********************
0439                   * CALLED: ERROR,PACKTS,TSTBIN,DIGTST,RDLAB,
0440                   * SRLAB,STLABN,SETREF
0441                   *
0442  2133- B5 00      ARG     LDA INBUFF,X
0443  2135- C9 28              CMP =$28        IF (
0444  2137- D0 13              BNE ARG05
0445  2139- E8                 INX
0446  213A- 20 DF 20           JSR EXPRES+4    GET EXPRESSION
0447  213D- B5 00              LDA INBUFF,X    MUST BE )
0448  213F- C9 29              CMP =$29
0449  2141- F0 05              BEQ *+7
0450  2143- A9 31              LDA =$31
0451  2145- 20 38 29           JSR ERROR
0452  2148- E8                 INX
0453  2149- A5 5D              LDA VALUE+1
0454  214B- 60                 RTS
0455                   *
0456  214C- C9 27      ARG05   CMP =$27        IF '
0457  214E- D0 12              BNE ARG10
0458  2150- E8                 INX
0459  2151- B5 00              LDA INBUFF,X    GET CHAR
0460  2153- 85 5C              STA VALUE
0461  2155- E8                 INX
0462  2156- B5 00              LDA INBUFF,X    IGNORE SECOND '
0463  2158- C9 27              CMP =$27
0464  215A- D0 01              BNE *+3
0465  215C- E8                 INX
0466  215D- A9 00              LDA =0
0467  215F- 85 5D              STA VALUE+1
0468  2161- 60                 RTS
0469                   *

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 28/10/23   R65 ASSEMBLER  PAGE 10

0470  2162- C9 24      ARG10   CMP =$24        IF $ (HEX)
0471  2164- D0 24              BNE ARG20
0472  2166- E8                 INX
0473  2167- A9 00              LDA =0
0474  2169- 85 F8              STA INL
0475  216B- 85 F9              STA INL+1
0476  216D- B5 00              LDA INBUFF,X
0477  216F- 20 1B F9           JSR PACKTS+2
0478  2172- F0 05              BEQ *+7
0479  2174- A9 33              LDA =$33
0480  2176- 20 38 29           JSR ERROR
0481  2179- E8                 INX
0482  217A- B5 00              LDA INBUFF,X
0483  217C- 20 1B F9           JSR PACKTS+2
0484  217F- F0 F8              BEQ *-6
0485  2181- A5 F8              LDA INL
0486  2183- 85 5C              STA VALUE
0487  2185- A5 F9              LDA INL+1
0488  2187- 85 5D              STA VALUE+1
0489  2189- 60                 RTS
0490                   *
0491  218A- C9 23      ARG20   CMP =$23        IF # (BINARY)
0492  218C- D0 1A              BNE ARG30
0493  218E- E8                 INX             READ BINARY NUMBER
0494  218F- A9 00              LDA =0
0495  2191- 85 5C              STA VALUE
0496  2193- 85 5D              STA VALUE+1
0497  2195- 20 2A 22           JSR TSTBIN
0498  2198- F0 05              BEQ *+7
0499  219A- A9 35              LDA =$35
0500  219C- 20 38 29           JSR ERROR
0501  219F- E8                 INX
0502  21A0- 20 2A 22           JSR TSTBIN
0503  21A3- F0 FA              BEQ *-4
0504  21A5- A5 5D              LDA VALUE+1
0505  21A7- 60                 RTS
0506                   *
0507  21A8- 20 3D 22   ARG30   JSR DIGTST      IF DECIMAL NUMBER
0508  21AB- B0 12              BCS ARG40
0509  21AD- A9 00              LDA =0          READ DECIMAL NUMBER
0510  21AF- 85 5C              STA VALUE
0511  21B1- 85 5D              STA VALUE+1
0512  21B3- 20 3D 22           JSR DIGTST
0513  21B6- E8                 INX
0514  21B7- 20 3D 22           JSR DIGTST
0515  21BA- 90 FA              BCC *-4
0516  21BC- A5 5D              LDA VALUE+1
0517  21BE- 60                 RTS
0518                   *
0519  21BF- C9 2A      ARG40   CMP =$2A        IF *

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 28/10/23   R65 ASSEMBLER  PAGE 11

0520  21C1- D0 0A              BNE ARG50
0521  21C3- E8                 INX             GET PROGRAM COUNTER
0522  21C4- A5 9E              LDA PCOLD
0523  21C6- 85 5C              STA VALUE
0524  21C8- A5 9F              LDA PCOLD+1
0525  21CA- 85 5D              STA VALUE+1
0526  21CC- 60                 RTS
0527                   *
0528  21CD- 20 8C 20   ARG50   JSR RDLAB       MUST BE LABEL
0529  21D0- 20 1C 20           JSR SRLAB
0530  21D3- 90 3A              BCC ARG52       BRANCH IF UNKNOWN
0531  21D5- 20 F7 2D           JSR SETREF      INSERT INTO REF TABLE
0532  21D8- 20 79 22           JSR DEFIN       IF DEFINED
0533  21DB- F0 18              BEQ ARG51
0534  21DD- A5 A9              LDA PASSFL
0535  21DF- F0 08              BEQ *+10
0536  21E1- A0 07              LDY =7
0537  21E3- B1 97              LDA (LABPNT),Y  GET RFLAG
0538  21E5- 30 02              BMI *+4
0539  21E7- E6 39              INC RESOLV
0540  21E9- A0 05              LDY =5
0541  21EB- B1 97              LDA (LABPNT),Y  GET VALUE
0542  21ED- 85 5C              STA VALUE
0543  21EF- C8                 INY
0544  21F0- B1 97              LDA (LABPNT),Y
0545  21F2- 85 5D              STA VALUE+1
0546  21F4- 60                 RTS
0547  21F5- E6 39      ARG51   INC RESOLV      COUNT UNRESOLVED REF
0548  21F7- A5 97              LDA LABPNT
0549  21F9- 85 3A              STA RESOLV+1
0550  21FB- A5 98              LDA LABPNT+1
0551  21FD- 85 3B              STA RESOLV+2    SAVE LABEL NUMBER
0552  21FF- A5 A9             LDA PASSFL
0553  2201- F0 05              BEQ *+7
0554  2203- A9 36              LDA =$36
0555  2205- 20 38 29           JSR ERROR
0556  2208- A9 00              LDA =0
0557  220A- 85 5C              STA VALUE       RETURN VALUE = 0
0558  220C- 85 5D              STA VALUE+1
0559  220E- 60                 RTS
0560  220F- 20 4F 20   ARG52   JSR STLABN      STORE LABEL NAME
0561  2212- A5 A9              LDA PASSFL
0562  2214- F0 05              BEQ *+7
0563  2216- A9 36              LDA =$36
0564  2218- 20 38 29           JSR ERROR
0565  221B- A9 FF              LDA =$FF        SET TO UNRESOLVED
0566  221D- A0 05              LDY =5
0567  221F- 91 97              STA (LABPNT),Y
0568  2221- C8                 INY
0569  2222- 91 97              STA (LABPNT),Y

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 28/10/23   R65 ASSEMBLER  PAGE 12

0570  2224- 20 F7 2D           JSR SETREF
0571  2227- 4C F5 21           JMP ARG51
0572                   *
0573                   *
0574                   * SUBROUTINE TSTBIN: GET AND TEST BINARY NUMBER
0575                   ***********************************************
0576                   *
0577  222A- B5 00      TSTBIN  LDA INBUFF,X
0578  222C- C9 30              CMP =$30
0579  222E- 18                 CLC
0580  222F- F0 05              BEQ *+7
0581  2231- C9 31              CMP =$31
0582  2233- D0 07              BNE *+9
0583  2235- 38                 SEC
0584  2236- 26 5C              ROL VALUE
0585  2238- 26 5D              ROL VALUE+1
0586  223A- A9 00              LDA =0          SET ZERO FLAG
0587  223C- 60                 RTS
0588                   *
0589                   *
0590                   * SUBROUTINE DIGTST: TEST AND GET DECIMAL
0591                   *****************************************
0592                   *
0593  223D- B5 00      DIGTST  LDA INBUFF,X
0594  223F- C9 30              CMP =$30
0595  2241- 90 04              BCC *+6
0596  2243- C9 3A              CMP =$3A
0597  2245- 90 02              BCC *+4
0598  2247- 38                 SEC             C=1 >> NOT DECIMAL
0599  2248- 60                 RTS
0600                   *
0601  2249- 06 5C              ASL VALUE       MULTIPLY VALUE BY 10
0602  224B- 26 5D              ROL VALUE+1
0603  224D- A5 5C              LDA VALUE       SAVE 2*VALUE
0604  224F- 85 F8              STA INL
0605  2251- A5 5D              LDA VALUE+1
0606  2253- 85 F9              STA INL+1
0607  2255- 06 5C              ASL VALUE
0608  2257- 26 5D              ROL VALUE+1
0609  2259- 06 5C              ASL VALUE
0610  225B- 26 5D              ROL VALUE+1     8*VALUE
0611  225D- A5 5C              LDA VALUE
0612  225F- 18                 CLC
0613  2260- 65 F8              ADC INL
0614  2262- 85 5C              STA VALUE
0615  2264- A5 5D              LDA VALUE+1
0616  2266- 65 F9              ADC INL+1
0617  2268- 85 5D              STA VALUE+1     10*VALUE
0618  226A- B5 00              LDA INBUFF,X
0619  226C- 29 0F              AND =$0F        CONVERT TO BCD

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 28/10/23   R65 ASSEMBLER  PAGE 13

0620  226E- 18                 CLC
0621  226F- 65 5C              ADC VALUE       ADD TO 10*VALUE
0622  2271- 85 5C              STA VALUE
0623  2273- 90 02              BCC *+4
0624  2275- E6 5D              INC VALUE+1
0625  2277- 18                 CLC             C=0 >> DECIMAL
0626  2278- 60                 RTS
0627                   *
0628                   *
0629                   * SUBROUTINE DEFIN
0630                   ******************
0631                   * RETURN Z=1 IF LABEL UNDEFINED
0632                   * INPUT: LABEL IN LABPNT
0633                   *
0634  2279- A0 05      DEFIN   LDY =5
0635  227B- B1 97              LDA (LABPNT),Y
0636  227D- C8                 INY
0637  227E- 31 97              AND (LABPNT),Y
0638  2280- C9 FF              CMP =$FF
0639  2282- 60                 RTS
0640                   *
0641                   *
0642                   * SUBROUTINE RDOPC: READ OPCODE FROM INBUFF
0643                   *******************************************
0644                   * PACK IN OPCODE WITH SAME FORMAT AS DISASSEM-
0645                   * BLER (5BIT/CHAR, OFFSET=$3F, LEFT SHIFTED 1)
0646                   * USED: A,X,Y,TEMP1; INPUT: X; OUTPUT; X,
0647                   * OPCODE; CALLED: ERROR
0648                   *
0649  2283- A9 03      RDOPC   LDA =3
0650  2285- 85 37              STA TEMP1       CHAR COUNTER
0651  2287- B5 00      RDOPC1  LDA INBUFF,X    GET A CHAR
0652  2289- C9 41              CMP =$41        TEST FOR LETTER
0653  228B- 90 04              BCC ERR7
0654  228D- C9 5B              CMP =$5B
0655  228F- 90 0B              BCC *+13
0656  2291- A0 00      ERR7    LDY =0
0657  2293- 84 5E              STY OPCODE
0658  2295- 84 5F              STY OPCODE+1
0659  2297- A9 37              LDA =$37
0660  2299- 4C 38 29           JMP ERROR
0661                   *
0662  229C- E8                 INX
0663  229D- 38                 SEC
0664  229E- E9 3F              SBC =$3F        SUBTRACT OFFSET
0665  22A0- 0A                 ASL A
0666  22A1- 0A                 ASL A
0667  22A2- 0A                 ASL A
0668  22A3- A0 05              LDY =5          BIT COUNTER
0669  22A5- 0A         RDOPC2  ASL A

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 28/10/23   R65 ASSEMBLER  PAGE 14

0670  22A6- 26 5F              ROL OPCODE+1
0671  22A8- 26 5E              ROL OPCODE
0672  22AA- 88                 DEY
0673  22AB- D0 F8              BNE RDOPC2
0674  22AD- C6 37              DEC TEMP1       NEXT CHAR
0675  22AF- D0 D6              BNE RDOPC1
0676  22B1- 06 5F              ASL OPCODE+1
0677  22B3- 26 5E              ROL OPCODE
0678  22B5- B5 00              LDA INBUFF,X    TEST NEXT CHAR
0679  22B7- E8                 INX
0680  22B8- C9 20              CMP =$20        MUST BE BLANK
0681  22BA- F0 03              BEQ *+5
0682  22BC- 20 97 22           JSR ERR7+6
0683  22BF- 60                 RTS
0684                   *
0685                   *
0686                   * SUBROUTINE SROPC: SEARCH OPCODE IN TABLE
0687                   ******************************************
0688                   * USE OPCODE AND ADDRESSING MODE FOR TEST
0689                   *
0690  22C0- A2 41      SROPC   LDX =$41        POINTER TO MNEMONIC TB
0691  22C2- CA                 DEX
0692  22C3- D0 0C              BNE *+14
0693  22C5- A9 38              LDA =$38
0694  22C7- 20 38 29           JSR ERROR
0695  22CA- A9 00              LDA =0
0696  22CC- 85 3C              STA OBJECT
0697  22CE- 4C FA 23           JMP ERR10+5     ASSUME ABS AND OPCODE=0
0698                   *                       IF NOT FOUND
0699  22D1- A5 5F              LDA OPCODE+1
0700  22D3- DD BF E7           CMP MNEMR-1,X
0701  22D6- D0 EA              BNE SROPC+2
0702  22D8- A5 5E              LDA OPCODE
0703  22DA- DD 7F E7           CMP MNEML-1,X
0704  22DD- D0 E3              BNE SROPC+2
0705  22DF- CA                 DEX
0706  22E0- 86 61              STX INDEX1
0707  22E2- 8A                 TXA
0708  22E3- 0A                 ASL A
0709  22E4- 0A                 ASL A
0710  22E5- 0A                 ASL A
0711  22E6- 85 62              STA INDEX2
0712  22E8- B0 0B              BCS SROP30
0713  22EA- 20 47 23   SROP20  JSR TSTADM      ITS XXXXX000 INST
0714  22ED- F0 05              BEQ *+7
0715  22EF- A9 39      ERR9    LDA =$39
0716  22F1- 20 38 29           JSR ERROR
0717  22F4- 60                 RTS
0718  22F5- 06 62      SROP30  ASL INDEX2
0719  22F7- B0 22              BCS SROP50

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 28/10/23   R65 ASSEMBLER  PAGE 15

0720  22F9- 10 06              BPL SROP40
0721  22FB- A5 62              LDA INDEX2      ITS 1XXX1010 INST
0722  22FD- 09 8A              ORA =$8A        COMPUTE OPCODE
0723  22FF- D0 E9             BNE SROP20
0724                   *
0725  2301- 06 62      SROP40  ASL INDEX2      ITS XXXYY100 INST
0726  2303- A0 03              LDY =3
0727  2305- 98                 TYA
0728  2306- 38                 SEC
0729  2307- 2A                 ROL A
0730  2308- 0A                 ASL A
0731  2309- 0A                 ASL A
0732  230A- 05 62              ORA INDEX2
0733  230C- 20 47 23           JSR TSTADM
0734  230F- D0 01              BNE *+3
0735  2311- 60                 RTS             RETURN, IF FOUND
0736  2312- 88                 DEY             TRY AGAIN
0737  2313- 10 F0              BPL SROP40+4
0738  2315- A6 61              LDX INDEX1      IF NOT FOUND, SEARCH
0739  2317- E8                 INX             CODE AGAIN (DOUBLE
0740  2318- 4C C2 22           JMP SROPC+2     CODES IN TABLE!)
0741                   *
0742  231B- 06 62      SROP50  ASL INDEX2
0743  231D- B0 14              BCS SROP60      IF XXXYYY10 INST
0744  231F- A0 07              LDY =7
0745  2321- 98                 TYA
0746  2322- 38                 SEC
0747  2323- 2A                 ROL A
0748  2324- 0A                 ASL A
0749  2325- 05 62              ORA INDEX2
0750  2327- 20 47 23           JSR TSTADM      TEST ADDRESSING
0751  232A- D0 01              BNE *+3
0752  232C- 60                 RTS             RETURN, IF FOUND
0753  232D- 88                 DEY             TRY NEXT Y
0754  232E- 10 F1              BPL SROP50+6
0755  2330- 4C EF 22           JMP ERR9
0756                   *
0757  2333- A0 07      SROP60  LDY =7
0758  2335- 98                 TYA
0759  2336- 0A                 ASL A
0760  2337- 38                 SEC
0761  2338- 2A                 ROL A
0762  2339- 05 62              ORA INDEX2
0763  233B- 20 47 23           JSR TSTADM
0764  233E- D0 01              BNE *+3
0765  2340- 60                 RTS             RETURN, IF FOUND
0766  2341- 88                 DEY
0767  2342- 10 F1              BPL SROP60+2
0768  2344- 4C EF 22           JMP ERR9
0769                   *

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 28/10/23   R65 ASSEMBLER  PAGE 16

0770                   *
0771                   * SUBROUTINE TSTADM: TEST ADDRESSING MODE
0772                   *****************************************
0773                   * ADDRESSING MODE CAN BE CHANGED IF NEEDED
0774                   *
0775  2347- 85 3C      TSTADM  STA OBJECT      SAVE OPCODE
0776  2349- 4A                 LSR A           COMPUTE ADDRESSING MODE
0777  234A- 90 05              BCC *+7         FOR THIS CODE
0778  234C- 4A                 LSR A
0779  234D- 29 07              AND =7
0780  234F- 09 80              ORA =$80
0781  2351- 4A                 LSR A
0782  2352- AA                 TAX
0783  2353- BD 22 E7           LDA DISMOD,X    LOAD MODE FROM TABLE
0784  2356- B0 04              BCS *+6
0785  2358- 4A                 LSR A
0786  2359- 4A                 LSR A
0787  235A- 4A                 LSR A
0788  235B- 4A                 LSR A
0789  235C- 29 0F              AND =$0F        COMPUTE MODE IN A
0790  235E- AA                 TAX             AND SAVE IN X
0791  235F- C9 0D              CMP =$0D                IF RELATIVE
0792  2361- D0 0D              BNE TSTAD1
0793  2363- A5 60              LDA ADMODE      CONVERT IT
0794  2365- C9 02              CMP =2          CAN BE ZERO PAGE
0795  2367- F0 04              BEQ *+6
0796  2369- C9 03              CMP =3          CAN BE ABSOLUTE
0797  236B- D0 03              BNE *+5
0798  236D- 86 60              STX ADMODE
0799  236F- 60                 RTS
0800                   *
0801  2370- A5 60      TSTAD1  LDA ADMODE
0802  2372- C9 02              CMP =2          ZERO PAGE
0803  2374- D0 11              BNE TSTAD3
0804  2376- A5 3C              LDA OBJECT
0805  2378- C9 4C              CMP =$4C        IF JMP
0806  237A- F0 04              BEQ *+6
0807  237C- C9 20              CMP =$20        OR JSR
0808  237E- D0 04              BNE TSTAD2
0809  2380- A9 03              LDA =3          SET TO ABSOLUTE
0810  2382- 85 60              STA ADMODE
0811  2384- E4 60      TSTAD2  CPX ADMODE      TEST NOW
0812  2386- 60                 RTS
0813                   *
0814  2387- C9 0C      TSTAD3  CMP =$0C        ZERO PAGE,Y
0815  2389- D0 F9              BNE TSTAD2
0816  238B- A5 3C              LDA OBJECT
0817  238D- 29 0F              AND =$0F
0818  238F- C9 09              CMP =$09
0819  2391- F0 F1              BEQ TSTAD2

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 28/10/23   R65 ASSEMBLER  PAGE 17

0820  2393- A9 0A              LDA =$A         CONVERT TO ABS,Y
0821  2395- 4C 82 23           JMP TSTAD2-2    IF CODE =X9
0822                   *
0823                   *
0824                   * SUBROUTINE OPER: INTERPRET OPERAND
0825                   ************************************
0826                   * USED: A,X,Y,TEMP1; INPUT:X; OUTPUT:RESOLV
0827                   * VALUE,D(ADDRESSING MODE); CALLED: EXPRES,
0828                   * ERROR,ZPAGE
0829                   *
0830  2398- B5 00      OPER    LDA INBUFF,X
0831  239A- C9 3D              CMP =$3D        IF =
0832  239C- D0 07              BNE *+9
0833  239E- E8                 INX             IMMEDIATE (1)
0834  239F- 20 DB 20           JSR EXPRES
0835  23A2- A9 01              LDA =1
0836  23A4- 60                 RTS
0837                   *
0838  23A5- C9 20              CMP =$20        IF BLANK
0839  23A7- D0 04              BNE *+6
0840  23A9- E8                 INX
0841  23AA- A9 04              LDA =4          IMPLIED (4)
0842  23AC- 60                 RTS
0843                   *
0844  23AD- C9 41              CMP =$41        IF A
0845  23AF- D0 0D              BNE OPER15
0846  23B1- E8                 INX
0847  23B2- B5 00              LDA INBUFF,X    AND BLANK
0848  23B4- C9 20              CMP =$20
0849  23B6- D0 03              BNE *+5
0850  23B8- A9 05              LDA =5          ACCUMULATOR (5)
0851  23BA- 60                 RTS
0852                   *
0853                   *
0854  23BB- CA                 DEX
0855  23BC- B5 00              LDA INBUFF,X
0856                   *
0857  23BE- C9 28      OPER15  CMP =$28        IF (
0858  23C0- D0 57              BNE OPER20
0859  23C2- E8                 INX
0860  23C3- 20 DB 20           JSR EXPRES      GET EXPRESSION
0861  23C6- B5 00              LDA INBUFF,X
0862  23C8- C9 2C              CMP =$2C        IF NOW ,
0863  23CA- D0 1A              BNE OPER16
0864  23CC- E8                 INX
0865  23CD- B5 00              LDA INBUFF,X
0866  23CF- C9 58              CMP =$58        MUST BE X
0867  23D1- D0 22              BNE ERR10
0868  23D3- E8                 INX
0869  23D4- B5 00              LDA INBUFF,X

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 28/10/23   R65 ASSEMBLER  PAGE 18

0870  23D6- C9 29              CMP =$29        AND )
0871  23D8- D0 1B              BNE ERR10
0872  23DA- 20 53 24           JSR ZPAGE       MUST BE ZERO PAGE
0873  23DD- F0 03              BEQ *+5
0874  23DF- 20 FD 23           JSR ERR11
0875  23E2- E8                 INX
0876  23E3- A9 06              LDA =6          (X.PAGE,X) (6)
0877  23E5- 60                 RTS
0878                   *
0879  23E6- C9 29      OPER16  CMP =$29        MUST BE )
0880  23E8- D0 0B              BNE ERR10
0881  23EA- E8                 INX
0882  23EB- B5 00              LDA INBUFF,X
0883  23ED- C9 20              CMP =$20        IF NOW BLANK
0884  23EF- D0 11              BNE OPER17
0885  23F1- E8                 INX
0886  23F2- A9 0B              LDA =$0B        (ABSOLUTE) (11)
0887  23F4- 60                 RTS
0888                   *
0889  23F5- A9 40      ERR10   LDA =$40        SYNTAX ERROR IN OPER
0890  23F7- 20 38 29           JSR ERROR
0891  23FA- A9 03              LDA =3          ASSUME ABSOLUTE
0892  23FC- 60                 RTS
0893                   *
0894  23FD- A9 41      ERR11   LDA =$41        MUST BE ZERO PAGE IND
0895  23FF- 4C 38 29          JMP ERROR
0896                   *
0897  2402- C9 2C      OPER17  CMP =$2C        MUST BE ,
0898  2404- D0 EF              BNE ERR10
0899  2406- E8                 INX
0900  2407- B5 00              LDA INBUFF,X
0901  2409- C9 59              CMP =$59        MUST BE Y
0902  240B- D0 E8              BNE ERR10
0903  240D- E8                 INX
0904  240E- 20 53 24           JSR ZPAGE
0905  2411- F0 03              BEQ *+5         MSU BE ZERO PAGE
0906  2413- 20 FD 23           JSR ERR11
0907  2416- A9 07              LDA =7          (ZERO PAGE),Y (7)
0908  2418- 60                 RTS
0909                   *
0910  2419- 20 DB 20   OPER20  JSR EXPRES      MUST BE EXPRESSION
0911  241C- B5 00              LDA INBUFF,X
0912  241E- C9 20              CMP =$20        IF NOW BLANK
0913  2420- D0 0B              BNE OPER25
0914  2422- 20 53 24           JSR ZPAGE
0915  2425- D0 03              BNE *+5
0916  2427- A9 02              LDA =2          ZERO PAGE (2)
0917  2429- 60                 RTS
0918                   *
0919  242A- A9 03              LDA =3          ABSOLUTE

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 28/10/23   R65 ASSEMBLER  PAGE 19

0920  242C- 60                 RTS
0921                   *
0922  242D- C9 2C      OPER25  CMP =$2C        MUST BE ,
0923  242F- D0 C4              BNE ERR10
0924  2431- E8                 INX
0925  2432- B5 00              LDA INBUFF,X
0926  2434- E8                 INX
0927  2435- C9 58              CMP =$58        IF NOW X
0928  2437- D0 0B              BNE OPER30
0929  2439- 20 53 24           JSR ZPAGE
0930  243C- D0 03              BNE *+5
0931  243E- A9 08              LDA =8          ZERO PAGE,X (8)
0932  2440- 60                 RTS
0933                   *
0934  2441- A9 09              LDA =9          ZERO PAGE,Y (12)
0935  2443- 60                 RTS
0936                   *
0937  2444- C9 59      OPER30  CMP =$59        MUST BE Y
0938  2446- D0 AD              BNE ERR10
0939  2448- 20 53 24           JSR ZPAGE
0940  244B- D0 03              BNE *+5
0941  244D- A9 0C              LDA =$0C        ZERO PAGE,Y (12)
0942  244F- 60                 RTS
0943                   *
0944  2450- A9 0A              LDA =$0A        ABSOLUTE,Y (10
0945  2452- 60                 RTS
0946                   *
0947                   *
0948                   * SUBROUTINE ZPAGE
0949                   ******************
0950                   * TEST FOR ZERO PAGE ADDRESSING
0951                   * RETURN Z=1 IF ZERO PAGE
0952                   *
0953  2453- A5 39      ZPAGE   LDA RESOLV
0954  2455- D0 02              BNE *+4         ASSUME ABS IF UNDEFINED
0955  2457- A5 5D              LDA VALUE+1
0956  2459- 60                 RTS
0957                   *
0958                   *
0959                   * SUBROUTINE DEFLAB: DEFINE LABEL
0960                   *********************************
0961                   * USED: A,Y; SAVED:X; INPUT: LABEL, VALUE,
0962                   * LABPNT; CALLED SRLAB,STLAB,ERROR,DEFIN
0963                   *
0964  245A- 20 1C 20   DEFLAB  JSR SRLAB       IF LABEL IN TAB;E
0965  245D- B0 06              BCS *+8           DO NOT STORE
0966  245F- 20 4F 20           JSR STLABN      ELSE STORE
0967  2462- 4C 91 24           JMP DEFL1
0968                   *
0969  2465- A5 A9              LDA PASSFL

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 28/10/23   R65 ASSEMBLER  PAGE 20

0970  2467- D0 03              BNE *+5
0971  2469- 20 58 2D           JSR RESFBR      RESOLVE BRANCHES
0972  246C- 20 79 22           JSR DEFIN
0973  246F- F0 20              BEQ DEFL1       IF DEFINED
0974  2471- A5 A9              LDA PASSFL        TEST PASS FLAG
0975  2473- D0 05              BNE *+7
0976  2475- A9 45              LDA =$45
0977  2477- 4C 38 29           JMP ERROR
0978                   *
0979  247A- A0 05              LDY =5
0980  247C- B1 97              LDA (LABPNT),Y  COMPARE IN PASS 2
0981  247E- C5 5C              CMP VALUE
0982  2480- D0 07              BNE *+9
0983  2482- C8                 INY
0984  2483- B1 97              LDA (LABPNT),Y
0985  2485- C5 5D              CMP VALUE+1
0986  2487- F0 05              BEQ *+7
0987  2489- A9 46              LDA =$46
0988  248B- 20 38 29           JSR ERROR
0989  248E- 4C 9C 24           JMP DEFL2
0990                   *
0991  2491- A5 5C      DEFL1   LDA VALUE       STORE ADDRESS
0992  2493- A0 05              LDY =5
0993  2495- 91 97              STA (LABPNT),Y
0994  2497- A5 5D              LDA VALUE+1
0995  2499- C8                 INY
0996  249A- 91 97              STA (LABPNT),Y
0997                   *
0998  249C- A5 A9      DEFL2   LDA PASSFL
0999  249E- F0 08              BEQ *+10
1000  24A0- A0 07              LDY =7
1001  24A2- B1 97              LDA (LABPNT),Y
1002  24A4- 09 80              ORA =$80        SET RFLAG
1003  24A6- 91 97              STA (LABPNT),Y
1004  24A8- 60                 RTS
1005                   *
1006                   *
1007                   * SUBROUTINE INTLIN:INTERPRET ONE LINE
1008                   **************************************
1009                   *OUTPUT: OBJECT,NUMBYT
1010                   *
1011  24A9- A2 00      INTLIN  LDX =0          CLEAR BUFFER POINTER
1012  24AB- 86 38              STX NUMBYT      CLEAR NUMBER OF BYTES
1013  24AD- 86 63              STX DEFLB       CLEAR LABEL DEF FLAG
1014  24AF- B5 00              LDA INBUFF,X    GET FIRST CHAR
1015  24B1- C9 2A              CMP =$2A        IF *
1016  24B3- D0 01              BNE *+3
1017  24B5- 60                 RTS             RETURN (COMMENT LINE)
1018                   *
1019  24B6- C9 20              CMP =$20        NOT A BLANK

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 28/10/23   R65 ASSEMBLER  PAGE 21

1020  24B8- F0 0F              BEQ INTL2
1021  24BA- 20 8C 20           JSR RDLAB       READ LABEL, NO STORING
1022  24BD- A9 FF              LDA =$FF        AT THIS MOMENT, BUT SET
1023  24BF- 85 63              STA DEFLB       LABEL DEFINITION FLAG
1024  24C1- A5 9E              LDA PCOLD       GET ADDRESS FOR LABEL
1025  24C3- 85 5C              STA VALUE
1026  24C5- A5 9F              LDA PCOLD+1
1027  24C7- 85 5D              STA VALUE+1
1028                   *
1029  24C9- 20 D2 20   INTL2   JSR RDBL        READ BLANKS
1030  24CC- 20 83 22           JSR RDOPC       READ NOW OPCODE
1031                   *
1032  24CF- A0 09              LDY =9          SEARCH IN PSEUDO TABLE
1033  24D1- A5 5E              LDA OPCODE
1034  24D3- D9 50 26           CMP PSEUDO,Y
1035  24D6- F0 05              BEQ *+7
1036  24D8- 88                 DEY
1037  24D9- 10 F8              BPL *-6
1038  24DB- 30 07              BMI *+9         BRANCH IF NOT FOUND
1039  24DD- A5 5F              LDA OPCODE+1
1040  24DF- D9 5A 26           CMP PSEUDO+10,Y
1041  24E2- D0 F4              BNE *-10
1042                   *
1043  24E4- 98                 TYA
1044  24E5- 48                 PHA
1045  24E6- D0 20              BNE INTL10      FOUND. IF EQU (0)
1046  24E8- A5 63              LDA DEFLB         TEST DEF FLAG
1047  24EA- D0 05              BNE *+7
1048  24EC- A9 47              LDA =$47        LABEL MISSING IN EQU
1049  24EE- 4C 38 29           JMP ERROR
1050                   *
1051  24F1- A0 04              LDY =4          SAVE LABEL
1052  24F3- B9 30 00   INTL5   LDA LABEL,Y
1053  24F6- 48                 PHA
1054  24F7- 88                 DEY
1055  24F8- 10 F9              BPL INTL5
1056                   *
1057  24FA- 20 64 26           JSR EXPDEF      GET VALUE FOR EQU
1058                   *
1059  24FD- A0 00              LDY =0
1060  24FF- 68        INTL6   PLA             GET BACK LABEL
1061  2500- 99 30 00           STA LABEL,Y
1062  2503- C8                 INY
1063  2504- C0 05              CPY =5
1064  2506- D0 F7              BNE INTL6
1065                   *
1066  2508- A5 63      INTL10  LDA DEFLB       IF LABEL DEFNITION
1067  250A- F0 03              BEQ *+5
1068  250C- 20 5A 24           JSR DEFLAB      DEFINE IT NOW
1069                   *

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 28/10/23   R65 ASSEMBLER  PAGE 22

1070  250F- 68                 PLA             GET AGAIN PSEUDO NUMBER
1071  2510- D0 01              BNE *+3
1072  2512- 60                 RTS             RETURN NOW FROM EQU
1073                   *
1074  2513- C9 01              CMP =1          IF ORG (1)
1075  2515- D0 0E              BNE INTL12
1076  2517- 20 64 26           JSR EXPDEF        GET NEW PC
1077  251A- A5 5C              LDA VALUE
1078  251C- 85 A0              STA PCNEW
1079  251E- A5 5D              LDA VALUE+1
1080  2520- 85 A1              STA PCNEW+1
1081  2522- 4C 62 28           JMP CLOSRC      CLOSE EXISTING OBJ. REC
1082                   *
1083  2525- C9 02      INTL12  CMP =2          IF BSS (2)
1084  2527- D0 13              BNE INTL13
1085  2529- 20 64 26           JSR EXPDEF        GET VALUE
1086  252C- 18                 CLC             ADD TO PCOLD
1087  252D- A5 9E              LDA PCOLD
1088  252F- 65 5C              ADC VALUE
1089  2531- 85 A0              STA PCNEW
1090  2533- A5 9F              LDA PCOLD+1
1091  2535- 65 5D              ADC VALUE+1
1092  2537- 85 A1              STA PCNEW+1
1093  2539- 4C 62 28           JMP CLOSRC      CLOSE EXISTING OBJ. REC
1094                   *
1095  253C- C9 03      INTL13  CMP =3          IF BYT (3)
1096  253E- D0 49              BNE INTL14
1097  2540- B5 00      BYT     LDA INBUFF,X    GET ONE BYTE
1098  2542- C9 27              CMP =$27        IF '
1099  2544- D0 29              BNE BYT3
1100  2546- E8                 INX             GET ASCII STRING
1101  2547- B5 00              LDA INBUFF,X
1102  2549- A4 38      BYT1    LDY NUMBYT
1103  254B- C0 20              CPY =$20
1104  254D- B0 35              BCS ERR18
1105  254F- 99 3C 00           STA OBJECT,Y    STORE
1106  2552- E6 38              INC NUMBYT
1107  2554- E8                 INX
1108  2555- E0 2E              CPX =$2E        TEST END OF INBUFF
1109  2557- B0 2B              BCS ERR18
1110  2559- B5 00              LDA INBUFF,X    TEST NEXT CHAR
1111  255B- C9 27              CMP =$27
1112  255D- D0 EA              BNE BYT1        CONTINUE STRING READ
1113  255F- E8                 INX
1114  2560- C6 38              DEC NUMBYT
1115  2562- B9 3C 00           LDA OBJECT,Y
1116  2565- 85 5C              STA VALUE
1117  2567- A9 00              LDA =0
1118  2569- 20 E2 20           JSR EXP1
1119  256C- 4C 72 25           JMP BYT2

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 28/10/23   R65 ASSEMBLER  PAGE 23

1120                   *
1121  256F- 20 DB 20   BYT3    JSR EXPRES
1122  2572- A5 5C      BYT2    LDA VALUE
1123  2574- A4 38              LDY NUMBYT
1124  2576- 99 3C 00           STA OBJECT,Y
1125  2579- E6 38              INC NUMBYT
1126  257B- B5 00              LDA INBUFF,X
1127  257D- E8                 INX
1128  257E- C9 2C              CMP =$2C
1129  2580- F0 BE              BEQ BYT
1130  2582- CA                 DEX
1131  2583- 60                 RTS
1132                   *
1133  2584- A9 48      ERR18   LDA =$48
1134  2586- 4C 38 29           JMP ERROR       RETURN AFTER ERROR
1135                   *
1136  2589- C9 04      INTL14  CMP =$04                IF WRD (4)
1137  258B- D0 1C              BNE INTL15
1138  258D- 20 DB 20   WRD     JSR EXPRES      GET WORD
1139  2590- A4 38              LDY NUMBYT
1140  2592- A5 5C              LDA VALUE
1141  2594- 99 3C 00           STA OBJECT,Y
1142  2597- C8                 INY
1143  2598- A5 5D              LDA VALUE+1
1144  259A- 99 3C 00           STA OBJECT,Y
1145  259D- C8                 INY
1146  259E- 84 38              STY NUMBYT
1147  25A0- B5 00              LDA INBUFF,X
1148  25A2- E8                 INX
1149  25A3- C9 2C              CMP =$2C        IF ,
1150  25A5- F0 E6              BEQ WRD         CONTINUE
1151  25A7- CA                 DEX
1152  25A8- 60                 RTS
1153                   *
1154  25A9- C9 05      INTL15  CMP =5          IF PAG (5)
1155  25AB- D0 07              BNE INTL16
1156  25AD- A5 AB      PAGE    LDA PAGELN      . SET BIT 7 (PAGE FLAG)
1157  25AF- 09 80              ORA =$80
1158  25B1- 85 AB              STA PAGELN
1159  25B3- 60                 RTS
1160                   *
1161  25B4- C9 06      INTL16  CMP =6          IF TIT (6)
1162  25B6- D0 0C              BNE INTL17
1163  25B8- A0 1F              LDY =$1F          LOAD 32 CHARS
1164  25BA- B5 00              LDA INBUFF,X
1165  25BC- 99 B2 00           STA TITLE,Y
1166  25BF- E8                 INX
1167  25C0- 88                 DEY
1168  25C1- 10 F7              BPL *-7
1169  25C3- 60                 RTS

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 28/10/23   R65 ASSEMBLER  PAGE 24

1170                   *
1171  25C4- C9 07      INTL17  CMP =7          IF END (7)
1172  25C6- D0 03              BNE *+5
1173  25C8- 4C F0 2B           JMP END         GO TO END
1174                   *
1175  25CB- C9 08      INTL18  CMP =$08        IF NPR (8)
1176  25CD- D0 05              BNE INTL19
1177  25CF- A9 00              LDA =0
1178  25D1- 85 AA              STA PRTFLG      INHIBIT PRINTING
1179  25D3- 60                 RTS
1180                   *
1181  25D4- C9 09      INTL19  CMP =$09        IF PRT (9)
1182  25D6- D0 09              BNE INTL20
1183  25D8- A5 A9              LDA PASSFL      DO NOTHIN IN FIRST PASS
1184  25DA- F0 04              BEQ *+6
1185  25DC- A9 80              LDA =$80        SET PRINTING FLAG
1186  25DE- 85 AA              STA PRTFLG
1187  25E0- 60                 RTS
1188                   *
1189  25E1- 20 98 23   INTL20  JSR OPER        MUST BE OPCODE
1190  25E4- 85 60              STA ADMODE      SAVE ADDRESSING MODE
1191  25E6- B5 00              LDA INBUFF,X
1192  25E8- C9 20              CMP =$20
1193  25EA- F0 05              BEQ *+7
1194  25EC- A9 51              LDA =$51
1195  25EE- 20 38 29           JSR ERROR
1196  25F1- A5 5C              LDA VALUE
1197  25F3- 85 3D              STA OBJECT+1
1198  25F5- A5 5D              LDA VALUE+1
1199  25F7- 85 3E              STA OBJECT+2
1200  25F9- 20 C0 22           JSR SROPC       SEARCH OPCODE
1201  25FC- A4 60              LDY ADMODE
1202  25FE- B9 66 E7          LDA MODE2,Y     COMPUTE NUMBYT
1203  2601- 29 03              AND =$03
1204  2603- AA                 TAX
1205  2604- E8                 INX
1206  2605- 86 38              STX NUMBYT
1207  2607- C0 0D              CPY =$0D        IF RELATIVE ADDRESSING
1208  2609- F0 01              BEQ *+3         GO TO COMPUTE OFFSET
1209  260B- 60                 RTS
1210                   *
1211  260C- A5 A9              LDA PASSFL
1212  260E- D0 2C              BNE BRAN2
1213  2610- A5 39              LDA RESOLV      IF OPERAND RESOLVED
1214  2612- F0 28              BEQ BRAN2
1215  2614- C9 02              CMP =2
1216  2616- 90 05              BCC *+7
1217  2618- A9 42              LDA =$42
1218  261A- 20 38 29           JSR ERROR       MORE THAN 1 UNRES LABEL
1219  261D- 20 32 2D           JSR FORBR       INSERT FORWARD BRANCH

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 28/10/23   R65 ASSEMBLER  PAGE 25

1220  2620- A9 00              LDA =0
1221  2622- 85 3D              STA OBJECT+1
1222  2624- 60                 RTS
1223                   *
1224                   * SUBROUTINE TO COMPUTE RELATIVE ADDRESS
1225                   ****************************************
1226                   *
1227  2625- A5 3D      BRAN1   LDA OBJECT+1
1228  2627- 38                 SEC
1229  2628- E9 02              SBC =2
1230  262A- 48                 PHA
1231  262B- A5 3E              LDA OBJECT+2
1232  262D- E9 00              SBC =0
1233  262F- A8                 TAY
1234  2630- 68                 PLA
1235  2631- 38                 SEC
1236  2632- E5 9E              SBC PCOLD
1237  2634- 85 3D              STA OBJECT+1
1238  2636- 08                 PHP
1239  2637- 98                 TYA
1240  2638- E5 9F              SBC PCOLD+1
1241  263A- 28                 PLP
1242  263B- 60                 RTS
1243                   *
1244                   *
1245  263C- 20 25 26   BRAN2   JSR BRAN1
1246  263F- 30 0A              BMI BRAN3
1247  2641- C9 00              CMP =0
1248  2643- F0 05              BEQ *+7
1249  2645- A9 43              LDA =$43
1250  2647- 20 38 29           JSR ERROR
1251  264A- 60                 RTS
1252  264B- C9 FF      BRAN3   CMP =$FF
1253  264D- D0 F6              BNE *-8
1254  264F- 60                 RTS
1255                   *
1256                   *
1257                   * PSEUDO OPCODE TABLE
1258                   *
1259  2650- 34 84 1D   PSEUDO  BYT $34,$84,$1D,$1E,$C4,$88,$AA,$33
1259  2653- 1E C4 88 
1259  2656- AA 33 
1260  2658- 7C 8C              BYT $7C,$8C
1261  265A- AC D0 28           BYT $AC,$D0,$28,$AA,$CA,$90,$AA,$CA
1261  265D- AA CA 90 
1261  2660- AA CA 
1262  2662- 66 EA              BYT $66,$EA
1263                   *
1264                   *
1265                   * EXPDEF: GET A RESOLVED EXPRESSION

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 28/10/23   R65 ASSEMBLER  PAGE 26

1266                   ***********************************
1267                   *
1268  2664- 20 DB 20   EXPDEF  JSR EXPRES
1269  2667- A5 39              LDA RESOLV
1270  2669- F0 05              BEQ *+7
1271  266B- A9 49              LDA =$49
1272  266D- 20 38 29           JSR ERROR
1273  2670- 60                 RTS
1274                   *
1275                   *
1276                   * JSR PRINTLIN: PRINT A LINE
1277                   ****************************
1278                   * INPUT: OBJECT,NUMBYT,PCOLD,PCNEW,PAGELN
1279                   * PAGECN,LINCNT
1280                   *
1281  2671- A9 00      PRTLIN  LDA =0
1282  2673- 85 37              STA TEMP1       POINTER IN OBJ
1283  2675- F8                 SED
1284  2676- 18                 CLC             INCREMENT LINE COUNTER
1285  2677- A9 01              LDA =1
1286  2679- 65 A2              ADC LINCNT      DECIMAL INCREMENT
1287  267B- 85 A2              STA LINCNT
1288  267D- A5 A3              LDA LINCNT+1
1289  267F- 69 00              ADC =0
1290  2681- 85 A3              STA LINCNT+1
1291  2683- D8                 CLD
1292  2684- 24 AA      PRTL10  BIT PRTFLG
1293  2686- 10 28              BPL PRTL21-2
1294  2688- A5 A3              LDA LINCNT+1
1295  268A- A6 A2              LDX LINCNT
1296  268C- 20 30 E0           JSR PRTAX       PRINT LINE NUMBER
1297  268F- 20 27 E0           JSR PRTINF
1298  2692- 20 A0              BYT $20,$A0     PRINT 2 BLANKS
1299  2694- A5 A0              LDA PCNEW
1300  2696- C5 9E              CMP PCOLD
1301  2698- D0 06              BNE *+8
1302  269A- A5 A1              LDA PCNEW+1
1303  269C- C5 9F              CMP PCOLD+1
1304  269E- F0 0B              BEQ PRTL20
1305  26A0- A5 9F              LDA PCOLD+1
1306  26A2- A6 9E              LDX PCOLD
1307  26A4- 20 30 E0           JSR PRTAX       PRINT PROGRAM COUNTER
1308  26A7- 20 27 E0           JSR PRTINF
1309  26AA- AD                 BYT $AD         PRINT -
1310  26AB- A2 0B      PRTL20  LDX =$0B
1311  26AD- 20 05 27           JSR TAB
1312  26B0- A2 03              LDX =3          PRINT MAX 3 OBJ BYTES
1313  26B2- A4 37      PRTL21  LDY TEMP1
1314  26B4- B9 3C 00           LDA OBJECT,Y
1315  26B7- C4 38              CPY NUMBYT

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 28/10/23   R65 ASSEMBLER  PAGE 27

1316  26B9- F0 1A              BEQ PRTL25
1317  26BB- E6 37              INC TEMP1
1318  26BD- 24 AA              BIT PRTFLG
1319  26BF- 10 03              BPL *+5
1320  26C1- 20 2D E0           JSR PRTBYT
1321  26C4- E6 9E              INC PCOLD
1322  26C6- D0 02              BNE *+4
1323  26C8- E6 9F              INC PCOLD+1
1324  26CA- 24 AA              BIT PRTFLG
1325  26CC- 10 04              BPL *+6
1326  26CE- 20 27 E0           JSR PRTINF      PRINT BLANK
1327  26D1- A0                 BYT $A0
1328  26D2- CA                 DEX
1329  26D3- D0 DD              BNE PRTL21
1330  26D5- A4 37      PRTL25  LDY TEMP1
1331  26D7- C0 04              CPY =4
1332  26D9- B0 19              BCS PRTL30
1333  26DB- 24 AA              BIT PRTFLG
1334  26DD- 10 05              BPL *+7
1335  26DF- A2 16              LDX =$16
1336  26E1- 20 05 27           JSR TAB         TABULATE TO POS $16
1337  26E4- A2 00              LDX =0
1338  26E6- 24 AA      PRTL26  BIT PRTFLG
1339  26E8- 10 05              BPL *+7
1340  26EA- B5 00              LDA INBUFF,X
1341  26EC- 20 09 E0           JSR PRTCHR      PRINT TEXT
1342  26EF- E8                 INX
1343  26F0- E4 64              CPX INBFPN
1344  26F2- 90 F2              BCC PRTL26
1345  26F4- A5 38      PRTL30  LDA NUMBYT
1346  26F6- C5 37              CMP TEMP1
1347  26F8- F0 0A              BEQ *+12        RETURN
1348  26FA- 24 AA              BIT PRTFLG
1349  26FC- 10 03              BPL *+5
1350  26FE- 20 0F 27          JSR NEWLIN
1351  2701- 4C 84 26           JMP PRTL10
1352  2704- 60                 RTS
1353                   *
1354                   *
1355                   * SUBROUTINE TAB: TABULATOR (TO X)
1356                   **********************************
1357                   *
1358  2705- A9 20      TAB     LDA =$20
1359  2707- 20 09 E0           JSR PRTCHR
1360  270A- E4 EE              CPX CURPOS
1361  270C- B0 F9              BCS TAB+2
1362  270E- 60                 RTS
1363                   *
1364                   *
1365                   * SUBROUTINE NEWLIN: START NEW LINE

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 28/10/23   R65 ASSEMBLER  PAGE 28

1366                   ***********************************
1367                   *
1368  270F- 20 6E 27   NEWLIN  JSR CRLF
1369  2712- E6 AB              INC PAGELN
1370  2714- A5 AB              LDA PAGELN
1371  2716- 30 06              BMI NEWL06
1372  2718- CD 10 20           CMP TABLE       PRINTED LINES
1373  271B- B0 01              BCS NEWL06
1374  271D- 60                 RTS             RETURN IF NOT NEW PAGE
1375  271E- E6 AB      NEWL06  INC PAGELN
1376  2720- AD 80 17           LDA VFLAG       TEST AUTOPRINT FLAG
1377  2723- 29 08              AND =8
1378  2725- F0 06              BEQ *+8
1379  2727- AD 12 20           LDA TABLE+2     $D FOR IBM, $A FOR TTY
1380  272A- 20 0C E0           JSR VAUTOP      EXECUTE LFON HARD COPY
1381                   *
1382  272D- 20 6E 27   NEWL10  JSR CRLF
1383  2730- A9 00              LDA =0
1384  2732- 85 AB              STA PAGELN
1385  2734- F8                 SED
1386  2735- 38                 SEC
1387  2736- 65 A4              ADC PAGECN      INCREMENT PAGE NUMBER
1388  2738- 85 A4              STA PAGECN
1389  273A- D8                 CLD
1390  273B- A2 1F              LDX =$1F
1391  273D- B5 B2              LDA TITLE,X     PRINT TITLE
1392  273F- 20 09 E0           JSR PRTCHR
1393  2742- CA                 DEX
1394  2743- 10 F8              BPL *-6
1395  2745- A2 22              LDX =34
1396  2747- 20 05 27           JSR TAB
1397  274A- 20 0F F8           JSR PRTDAT
1398  274D- 20 27 E0           JSR PRTINF
1399  2750- 20 20 52           BYT '  R65 ASSEMBLER  PAGE',$A0
1399  2753- 36 35 20 
1399  2756- 41 53 53 
1399  2759- 45 4D 42 
1399  275C- 4C 45 52 
1399  275F- 20 20 50 
1399  2762- 41 47 45 
1399  2765- A0 
1400  2766- A5 A4              LDA PAGECN
1401  2768- 20 2D E0           JSR PRTBYT
1402  276B- 20 6E 27           JSR CRLF
1403  276E- 20 27 E0   CRLF    JSR PRTINF
1404  2771- 0D 8A              BYT $0D,$8A
1405                   *
1406  2773- 60         CRLF1   RTS
1407                   *
1408                   *

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 28/10/23   R65 ASSEMBLER  PAGE 29

1409                   *
1410                   * SUBROUTINE GET: GET A LINE FROM FILE
1411                   **************************************
1412                   *
1413  2774- A2 2F      GET     LDX =$2F        CLEAR INBUFF
1414  2776- A9 20              LDA =$20
1415  2778- 95 00              STA INBUFF,X
1416  277A- CA                 DEX
1417  277B- 10 FB              BPL GET+4
1418                   *
1419  277D- A2 00              LDX =0          POINTER IN INBUFF
1420  277F- 86 64      GET10   STX INBFPN
1421  2781- A6 9B              LDX INPFIL
1422  2783- A9 00              LDA =0
1423  2785- 85 DA              STA FILFLG
1424  2787- 20 18 F0           JSR READCH      GET ONE CHARACTER
1425  278A- F0 03              BEQ *+5
1426  278C- 4C 0B 28           JMP GETERR
1427  278F- C9 1F              CMP =$1F        EOF
1428  2791- F0 0D              BEQ GET20
1429  2793- C9 0D              CMP =$0D
1430  2795- D0 01              BNE *+3
1431  2797- 60                 RTS
1432  2798- A6 64              LDX INBFPN
1433  279A- 20 12 28           JSR STINB
1434  279D- 4C 7F 27           JMP GET10
1435                   *
1436  27A0- A6 9B      GET20   LDX INPFIL
1437  27A2- 20 12 F0           JSR CLOSE
1438  27A5- E6 A7              INC FILCNT
1439  27A7- A5 A9      GET25   LDA PASSFL
1440  27A9- F0 06              BEQ GET27
1441  27AB- 20 AA 29           JSR BACKNM      GET SAVED FILE NAME
1442  27AE- 4C F5 27           JMP GET28
1443                   *
1444  27B1- 20 27 E0   GET27   JSR PRTINF
1445  27B4- 0D 0A 4E           BYT $D,$A,'NEXT FILE? '+128
1445  27B7- 45 58 54 
1445  27BA- 20 46 49 
1445  27BD- 4C 45 3F 
1445  27C0- A0 
1446                   *
1447  27C1- A5 EE              LDA CURPOS
1448  27C3- 48                 PHA             SAVE CURPOS ON STACK
1449  27C4- A2 00              LDX =0
1450  27C6- BD 20 03   GET27A  LDA FILNM1,X
1451  27C9- C9 30              CMP ='0'        IF DIGIT
1452  27CB- 30 07              BMI GET27B
1453  27CD- C9 39              CMP ='9'
1454  27CF- 10 03              BPL GET27B

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 28/10/23   R65 ASSEMBLER  PAGE 30

1455  27D1- 18                 CLC
1456  27D2- 69 01              ADC =1          ADD 1
1457  27D4- C9 20      GET27B  CMP =$20
1458  27D6- F0 08              BEQ GET27C
1459  27D8- 20 09 E0           JSR PRTCHR
1460  27DB- E8                 INX
1461  27DC- E0 0F              CPX =15
1462  27DE- D0 E6              BNE GET27A
1463  27E0- 20 27 E0   GET27C  JSR PRTINF
1464  27E3- 2E 30 30           BYT '.00,'+128
1464  27E6- AC 
1465  27E7- 18                 CLC
1466  27E8- A5 DC              LDA FILDRV
1467  27EA- 69 30              ADC ='0'
1468  27EC- 20 09 E0           JSR PRTCHR
1469  27EF- 68                 PLA             RESTORE CURPOS
1470  27F0- 85 EE              STA CURPOS
1471                   *
1472  27F2- 20 7D 29           JSR INNAME
1473  27F5- A5 AA      GET28   LDA PRTFLG
1474  27F7- 10 04              BPL *+6
1475  27F9- 20 27 E0           JSR PRTINF
1476  27FC- 94                 BYT $94
1477  27FD- A9 00              LDA =0
1478  27FF- 85 DA             STA FILFLG
1479  2801- 20 0F F0           JSR OPEN
1480  2804- D0 06              BNE GETERR+1
1481                   *
1482  2806- 84 9B      GET30   STY INPFIL
1483  2808- 4C 74 27           JMP GET
1484                   *
1485  280B- 98         GETERR  TYA             INPUT ERROR
1486  280C- 20 38 29           JSR ERROR       THIS ERROR IS FATAL
1487  280F- 4C 17 2A           JMP WARMST
1488                   *
1489  2812- E0 30      STINB   CPX =$30                IF NOT OVERFLOW
1490  2814- F0 04              BEQ *+6
1491  2816- 95 00              STA INBUFF,X
1492  2818- E8                 INX
1493  2819- 60                 RTS
1494  281A- A9 50              LDA =$50
1495  281C- 4C 38 29           JMP ERROR       RETURN AFTER ERROR
1496                   *
1497                   *
1498                   * SUBROUTINE PUT: PUT OBJECT CODE INTO
1499                   **************************************
1500                   * OUTPUT BUFFER, RETURN IF FIRST PASS.
1501                   * IS ONLY CALLED, IF NUMBYT>0
1502                   *
1503  281F- A5 A9      PUT     LDA PASSFL

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 28/10/23   R65 ASSEMBLER  PAGE 31

1504  2821- D0 01              BNE *+3
1505  2823- 60                 RTS
1506                   *
1507  2824- 20 2B 29           JSR OBEMPT      IF BUFFER EMPTY
1508  2827- D0 08              BNE PUT10
1509  2829- A5 9E              LDA PCOLD       STORE PCOLD
1510  282B- 85 AE              STA OBADDR      AT BASE ADDRESS
1511  282D- A5 9F              LDA PCOLD+1
1512  282F- 85 AF              STA OBADDR+1
1513                   *
1514  2831- AD 08 20   PUT10   LDA OBEND       IF BUFFER FULL
1515  2834- 38                 SEC
1516  2835- E5 AC              SBC OBPNT
1517  2837- 85 37              STA TEMP1
1518  2839- AD 09 20           LDA OBEND+1
1519  283C- E5 AD              SBC OBPNT+1
1520  283E- 48                 PHA
1521  283F- A5 37              LDA TEMP1
1522  2841- C5 38              CMP NUMBYT
1523  2843- 68                 PLA
1524  2844- E9 00              SBC =0
1525  2846- B0 06              BCS *+8
1526  2848- 20 62 28           JSR CLOSRC      CLOSE RECORD
1527  284B- 4C 1F 28           JMP PUT         AND OPEN NEW ONE
1528                   *
1529  284E- A0 00              LDY =0          STORE OBJECT CODE
1530  2850- A2 00              LDX =0
1531  2852- B5 3C      PUT20   LDA OBJECT,X
1532  2854- 91 AC              STA (OBPNT),Y
1533  2856- E6 AC              INC OBPNT
1534  2858- D0 02              BNE *+4
1535  285A- E6 AD              INC OBPNT+1
1536  285C- E8                 INX
1537  285D- E4 38              CPX NUMBYT
1538  285F- D0 F1              BNE PUT20
1539  2861- 60                 RTS
1540                   *
1541                   *
1542  2862- A5 A9      CLOSRC  LDA PASSFL
1543  2864- D0 01              BNE *+3
1544  2866- 60                 RTS
1545  2867- 20 2B 29           JSR OBEMPT      IF BUFFER EMPTY
1546  286A- D0 01              BNE *+3
1547  286C- 60                 RTS             DO NOTHING
1548                   *
1549  286D- 8A                 TXA
1550  286E- 48                 PHA
1551  286F- 20 27 E0           JSR PRTINF
1552  2872- 14 0D 0A           BYT $14,$0D,$0A,$0E
1552  2875- 0E 

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 28/10/23   R65 ASSEMBLER  PAGE 32

1553  2876- 53 54 4F           BYT 'STORE OBJECT FILE:',$0B
1553  2879- 52 45 20 
1553  287C- 4F 42 4A 
1553  287F- 45 43 54 
1553  2882- 20 46 49 
1553  2885- 4C 45 3A 
1553  2888- 0B 
1554  2889- 0D 0A 46           BYT $0D,$0A,'FILENAME.CY,DRIVE,LOC?'
1554  288C- 49 4C 45 
1554  288F- 4E 41 4D 
1554  2892- 45 2E 43 
1554  2895- 59 2C 44 
1554  2898- 52 49 56 
1554  289B- 45 2C 4C 
1554  289E- 4F 43 3F 
1555  28A1- A0                 BYT $A0
1556  28A2- 20 06 E0           JSR GETLIN
1557                   *
1558  28A5- 20 24 E0           JSR ENDLIN      SKIP STORE IF INPUT EMP
1559  28A8- F0 6E              BEQ CLOSRC0     (USER DOES NOT WANT TO
1560                   *
1561  28AA- 20 15 F8           JSR GETNAM
1562  28AD- 20 19 20           JSR HARGUM
1563  28B0- 85 DC              STA FILDRV
1564  28B2- 20 19 20           JSR HARGUM
1565  28B5- 8D 13 03           STA FILLOC
1566  28B8- 8E 14 03           STX FILLOC+1
1567  28BB- A2 10              LDX =16
1568  28BD- BD 20 03           LDA FILNM1,X
1569  28C0- 9D 01 03           STA FILNAM,X
1570  28C3- CA                 DEX
1571  28C4- 10 F7              BPL *-7
1572                   *
1573  28C6- 20 27 E0           JSR PRTINF
1574  28C9- 0D 8A              BYT $D,$8A
1575                   *
1576  28CB- A5 AC              LDA OBPNT       SET FILE SIZE
1577  28CD- 38                 SEC
1578  28CE- ED 06 20           SBC OBSTR
1579  28D1- 8D 15 03           STA FILSIZ
1580  28D4- A5 AD              LDA OBPNT+1
1581  28D6- ED 07 20           SBC OBSTR+1
1582  28D9- 8D 16 03           STA FILSIZ+1
1583  28DC- AD 06 20           LDA OBSTR       SET START IN RAM
1584  28DF- 8D 31 03           STA FILSA1
1585  28E2- AD 07 20           LDA OBSTR+1
1586  28E5- 8D 32 03           STA FILSA1+1
1587  28E8- A9 00              LDA =0
1588  28EA- 85 DA              STA FILFLG
1589  28EC- A9 4D              LDA ='M         OBJECT FILE FROM

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 28/10/23   R65 ASSEMBLER  PAGE 33

1590  28EE- 8D 12 03           STA FILSTP      ASSEMBLER
1591  28F1- A5 AE              LDA OBADDR
1592  28F3- 8D 1A 03           STA FILSA
1593  28F6- 18                 CLC
1594  28F7- 6D 15 03           ADC FILSIZ
1595  28FA- 8D 1C 03           STA FILEA
1596  28FD- A5 AF              LDA OBADDR+1
1597  28FF- 8D 1B 03          STA FILSA+1
1598  2902- 6D 16 03           ADC FILSIZ+1
1599  2905- 8D 1D 03           STA FILEA+1
1600  2908- AD 1C 03           LDA FILEA
1601  290B- D0 03              BNE *+5
1602  290D- CE 1D 03           DEC FILEA+1
1603  2910- CE 1C 03           DEC FILEA
1604  2913- 20 16 20           JSR WRFILA
1605  2916- D0 0D              BNE PUTERR
1606  2918- AD 06 20   CLOSRC0 LDA OBSTR       RESET BUFFER
1607  291B- 85 AC              STA OBPNT
1608  291D- AD 07 20           LDA OBSTR+1
1609  2920- 85 AD              STA OBPNT+1
1610  2922- 68                 PLA
1611  2923- AA                 TAX
1612  2924- 60                 RTS
1613                   *
1614  2925- 68         PUTERR  PLA             WRITE ERROR
1615  2926- AA                 TAX
1616  2927- 98                 TYA
1617  2928- 4C 38 29           JMP ERROR
1618                   *
1619                   *
1620  292B- A5 AC      OBEMPT  LDA OBPNT
1621  292D- CD 06 20           CMP OBSTR
1622  2930- D0 05              BNE *+7
1623  2932- A5 AD              LDA OBPNT+1
1624  2934- CD 07 20           CMP OBSTR+1
1625  2937- 60                 RTS
1626                   *
1627                   *
1628                   * SUBROUTINE ERROR: PRINT ERROR MESSAGE
1629                   ***************************************
1630                   * SET PRINT FLAG; SAVED: X,Y
1631                   *
1632  2938- 48         ERROR   PHA
1633  2939- 20 27 E0           JSR PRTINF
1634  293C- 12                 BYT $12
1635  293D- 2A 2A 2A           BYT '*** ERROR',$A0
1635  2940- 20 45 52 
1635  2943- 52 4F 52 
1635  2946- A0 
1636  2947- 68                 PLA

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 28/10/23   R65 ASSEMBLER  PAGE 34

1637  2948- 20 2D E0           JSR PRTBYT
1638  294B- E6 A8              INC NUMERR
1639  294D- 8A                 TXA
1640  294E- 48                 PHA
1641  294F- A5 A9              LDA PASSFL
1642  2951- D0 14              BNE ENDERR
1643  2953- 20 27 E0           JSR PRTINF
1644  2956- 20 20 49           BYT '  IN LINE '+128
1644  2959- 4E 20 4C 
1644  295C- 49 4E 45 
1644  295F- A0 
1645  2960- A5 A3              LDA LINCNT+1
1646  2962- A6 A2              LDX LINCNT
1647  2964- 20 30 E0           JSR PRTAX
1648  2967- 20 6E 27   ENDERR  JSR CRLF
1649  296A- 68                 PLA
1650  296B- AA                 TAX
1651  296C- 60                 RTS
1652                   *
1653                   *
1654                   * CONFIGURATE PRINTER FOR 96 CHARS
1655                   *
1656  296D- A2 02      PRCON   LDX =2
1657  296F- BD 08 2B           LDA PRTAB,X
1658  2972- 86 37              STX TEMP1
1659  2974- 20 0C E0           JSR VAUTOP
1660  2977- A6 37              LDX TEMP1
1661  2979- CA                 DEX
1662  297A- 10 F3              BPL PRCON+2
1663  297C- 60                 RTS
1664                   *
1665                   *
1666                   * GET FILE NAME
1667                   *
1668  297D- 20 06 E0   INNAME  JSR GETLIN
1669  2980- 20 15 F8           JSR GETNAM
1670  2983- 20 19 20           JSR HARGUM
1671  2986- 48                 PHA
1672  2987- A4 A7              LDY FILCNT
1673  2989- AD 0A 20           LDA SAVNAM
1674  298C- 18         INNA5   CLC
1675  298D- 88                 DEY
1676  298E- 30 05              BMI INNA10
1677  2990- 69 14              ADC =20
1678  2992- 4C 8C 29           JMP INNA5
1679  2995- 85 9C      INNA10  STA SAVPNT
1680  2997- AD 0B 20           LDA SAVNAM+1
1681  299A- 85 9D              STA SAVPNT+1
1682  299C- A0 12              LDY =18
1683  299E- B9 1F 03   INNA20  LDA FILNM1-1,Y

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 28/10/23   R65 ASSEMBLER  PAGE 35

1684  29A1- 91 9C              STA (SAVPNT),Y
1685  29A3- 88                 DEY
1686  29A4- D0 F8              BNE INNA20
1687  29A6- 68                 PLA
1688  29A7- 91 9C              STA (SAVPNT),Y
1689  29A9- 60                 RTS
1690                   *
1691                   *
1692                   * GET FILE NAME BACK FROM BUFFER
1693                   *
1694  29AA- A4 A7      BACKNM  LDY FILCNT
1695  29AC- AD 0A 20           LDA SAVNAM
1696  29AF- 18         BACK10  CLC
1697  29B0- 88                 DEY
1698  29B1- 30 05              BMI BACK20      CALCULATE POINTER
1699  29B3- 69 14              ADC =20
1700  29B5- 4C AF 29           JMP BACK10
1701  29B8- 85 9C      BACK20  STA SAVPNT
1702  29BA- AD 0B 20           LDA SAVNAM+1
1703  29BD- 85 9D              STA SAVPNT+1
1704  29BF- A0 12              LDY =18
1705  29C1- B1 9C      BACK30  LDA (SAVPNT),Y
1706  29C3- 99 1F 03           STA FILNM1-1,Y
1707  29C6- 88                 DEY
1708  29C7- D0 F8              BNE BACK30
1709  29C9- B1 9C              LDA (SAVPNT),Y
1710  29CB- 85 DC              STA FILDRV
1711  29CD- 60                 RTS
1712                   *
1713                   *
1714                   * INITIALIZATION
1715                   ****************
1716                   *
1717  29CE- A9 20      COLDST  LDA =$20
1718  29D0- A2 1F              LDX =$1F
1719  29D2- 95 B2              STA TITLE,X     CLEAR TITLE
1720  29D4- CA                 DEX
1721  29D5- 10 FB              BPL *-3
1722                   *
1723  29D7- 20 27 E0           JSR PRTINF
1724  29DA- 0D 0A 09           BYT $D,$A,9,9,'R65 ASSEMBLER',$D,$A
1724  29DD- 09 52 36 
1724  29E0- 35 20 41 
1724  29E3- 53 53 45 
1724  29E6- 4D 42 4C 
1724  29E9- 45 52 0D 
1724  29EC- 0A 
1725  29ED- 0A 53 4F           BYT $A,'SOURCE FILE: ',$D
1725  29F0- 55 52 43 
1725  29F3- 45 20 46 

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 28/10/23   R65 ASSEMBLER  PAGE 36

1725  29F6- 49 4C 45 
1725  29F9- 3A 20 0D 
1726  29FC- 0A 46 49          BYT $A,'FILENAME.CY,DRIVE?',$A0
1726  29FF- 4C 45 4E 
1726  2A02- 41 4D 45 
1726  2A05- 2E 43 59 
1726  2A08- 2C 44 52 
1726  2A0B- 49 56 45 
1726  2A0E- 3F A0 
1727  2A10- A9 00              LDA =0
1728  2A12- 85 A7              STA FILCNT
1729  2A14- 20 7D 29           JSR INNAME
1730                   *
1731  2A17- 20 27 E0   WARMST  JSR PRTINF
1732  2A1A- 0D 0A 41           BYT $D,$A,'A*'+128
1732  2A1D- AA 
1733  2A1E- 20 6D 29           JSR PRCON
1734  2A21- 20 03 E0           JSR GETCHR
1735                   *
1736  2A24- C9 46              CMP =$46        F=FIRST PASS
1737  2A26- F0 03              BEQ *+5
1738  2A28- 4C B6 2A           JMP WARM10
1739  2A2B- AD 0C 20           LDA LABSTR
1740  2A2E- AE 0D 20           LDX LABSTR+1
1741  2A31- 85 B0              STA LABCNT
1742  2A33- 86 B1              STX LABCNT+1
1743  2A35- A9 00              LDA =0
1744  2A37- 85 A9              STA PASSFL
1745  2A39- 85 AA              STA PRTFLG      PRINTING OFF
1746  2A3B- AD 15 20           LDA TABLE+5
1747  2A3E- 85 AB              STA PAGELN
1748  2A40- A9 00      PASS    LDA =0
1749  2A42- 85 A7              STA FILCNT      START WITH FIRST FILE
1750  2A44- 20 AA 29           JSR BACKNM
1751                   *
1752  2A47- A9 00              LDA =0
1753  2A49- 85 DA              STA FILFLG
1754  2A4B- 20 0F F0           JSR OPEN        OPEN SOURCE
1755  2A4E- F0 03              BEQ *+5
1756  2A50- 4C 0C 28           JMP GETERR+1
1757                   *
1758  2A53- 84 9B              STY INPFIL
1759  2A55- AD 06 20           LDA OBSTR       OBJECT START
1760  2A58- 85 AC              STA OBPNT
1761  2A5A- AD 07 20           LDA OBSTR+1
1762  2A5D- 85 AD              STA OBPNT+1
1763  2A5F- A2 0A              LDX =(NUMERR-PCOLD)  SET ALL TO 0
1764  2A61- A9 00              LDA =0
1765  2A63- 95 9E              STA PCOLD,X
1766  2A65- CA                 DEX

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 28/10/23   R65 ASSEMBLER  PAGE 37

1767  2A66- 10 FB              BPL *-3
1768  2A68- A9 80              LDA =$80
1769  2A6A- 85 A5              STA OUTREC
1770                   *
1771  2A6C- 20 27 E0   LINE    JSR PRTINF      AUTOPRINT OFF
1772  2A6F- 94                 BYT $94
1773  2A70- AD 81 17           LDA SFLAG       ESCAPE TEST
1774  2A73- 10 08              BPL LINE1
1775  2A75- 29 7F              AND =$7F
1776  2A77- 8D 81 17           STA SFLAG
1777  2A7A- 4C 17 2A           JMP WARMST
1778  2A7D- 20 74 27   LINE1   JSR GET
1779  2A80- 20 A9 24           JSR INTLIN
1780  2A83- 18                 CLC
1781  2A84- A5 A0              LDA PCNEW
1782  2A86- 65 38              ADC NUMBYT
1783  2A88- 85 A0              STA PCNEW
1784  2A8A- 90 06              BCC LINE2
1785  2A8C- E6 A1              INC PCNEW+1
1786  2A8E- 20 27 E0           JSR PRTINF      HEART BEAT
1787  2A91- AE                 BYT '.'+128
1788  2A92- A5 38      LINE2   LDA NUMBYT
1789  2A94- F0 03              BEQ *+5
1790  2A96- 20 1F 28           JSR PUT
1791  2A99- 24 AA              BIT PRTFLG
1792  2A9B- 10 04              BPL *+6
1793  2A9D- 20 27 E0           JSR PRTINF
1794  2AA0- 92                 BYT $92         AUTOPRINT ON
1795  2AA1- 20 71 26           JSR PRTLIN
1796  2AA4- 24 AA              BIT PRTFLG
1797  2AA6- 10 03              BPL *+5
1798  2AA8- 20 0F 27           JSR NEWLIN
1799  2AAB- A5 A0              LDA PCNEW
1800  2AAD- 85 9E              STA PCOLD
1801  2AAF- A5 A1              LDA PCNEW+1
1802  2AB1- 85 9F              STA PCOLD+1
1803  2AB3- 4C 6C 2A           JMP LINE        HANDLE LINES
1804                   *
1805  2AB6- C9 53      WARM10  CMP =$53        S=SECOND PASS
1806  2AB8- D0 25              BNE WARM20
1807  2ABA- A9 01              LDA =1
1808  2ABC- 85 A9              STA PASSFL
1809  2ABE- A9 80              LDA =$80
1810  2AC0- 85 AA              STA PRTFLG      PRINTING ON
1811  2AC2- 20 6D 29           JSR PRCON
1812  2AC5- 20 0B 2B           JSR CLRRFL      CLEAR R-FLAG
1813  2AC8- AD 15 20           LDA TABLE+5
1814  2ACB- 85 AB              STA PAGELN
1815  2ACD- A9 00              LDA =0
1816  2ACF- 85 A4              STA PAGECN

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 28/10/23   R65 ASSEMBLER  PAGE 38

1817  2AD1- 20 27 E0           JSR PRTINF
1818  2AD4- 92                 BYT $92         AUTOPRINT ON
1819  2AD5- 20 0F 27           JSR NEWLIN
1820  2AD8- 20 27 E0           JSR PRTINF
1821  2ADB- 94                 BYT $94         AUTOPRINT OFF
1822  2ADC- 4C 40 2A           JMP PASS
1823                   *
1824  2ADF- C9 0D      WARM20  CMP =$0D        <CR>?
1825  2AE1- D0 16              BNE WARM30
1826                   *
1827  2AE3- 20 27 E0   EXIT    JSR PRTINF
1828  2AE6- 0D 0A 45           BYT $D,$A,'EXIT ASSEMBLER'+128
1828  2AE9- 58 49 54 
1828  2AEC- 20 41 53 
1828  2AEF- 53 45 4D 
1828  2AF2- 42 4C 45 
1828  2AF5- D2 
1829  2AF6- 6C D5 17           JMP (VMON)      GO TO MONITOR
1830                   *
1831  2AF9- C9 00      WARM30  CMP =$00         <ESC>
1832  2AFB- F0 E6              BEQ EXIT
1833                   *
1834  2AFD- C9 52              CMP =$52        R=REFERENCE TABLE
1835  2AFF- F0 30             BEQ MAP
1836  2B01- 20 27 E0           JSR PRTINF
1837  2B04- 87                 BYT $87         BELL
1838  2B05- 4C 17 2A           JMP WARMST
1839                   *
1840                   *
1841  2B08- 14 75 1B   PRTAB   BYT 20,117,27
1842                   *
1843                   *
1844                   * CLEAR R-FLAG
1845                   *
1846  2B0B- A0 07      CLRRFL  LDY =7
1847  2B0D- AD 0C 20           LDA LABSTR
1848  2B10- AE 0D 20           LDX LABSTR+1
1849  2B13- 85 97      CLRRF1  STA LABPNT
1850  2B15- 86 98              STX LABPNT+1
1851  2B17- C5 B0              CMP LABCNT
1852  2B19- 8A                 TXA
1853  2B1A- E5 B1              SBC LABCNT+1
1854  2B1C- 90 01              BCC *+3
1855  2B1E- 60                 RTS
1856                   *
1857  2B1F- B1 97              LDA (LABPNT),Y
1858  2B21- 29 7F              AND =$7F
1859  2B23- 91 97              STA (LABPNT),Y
1860  2B25- A5 97              LDA LABPNT
1861  2B27- A6 98              LDX LABPNT+1

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 28/10/23   R65 ASSEMBLER  PAGE 39

1862  2B29- 18                 CLC
1863  2B2A- 69 08              ADC =8
1864  2B2C- 90 E5              BCC CLRRF1
1865  2B2E- E8                 INX
1866  2B2F- B0 E2              BCS CLRRF1      ALWAYS TAKEN
1867                   *
1868                   *
1869                   * PRINT REFERENCE TABLE
1870                   ***********************
1871                   *
1872  2B31- A5 A9      MAP     LDA PASSFL
1873  2B33- F0 17              BEQ MAP1
1874  2B35- A9 80              LDA =$80
1875  2B37- 85 AA              STA PRTFLG
1876  2B39- 20 27 E0           JSR PRTINF
1877  2B3C- 4D 41 50           BYT 'MAP DESTROYED'+128
1877  2B3F- 20 44 45 
1877  2B42- 53 54 52 
1877  2B45- 4F 59 45 
1877  2B48- C4 
1878  2B49- 4C 17 2A           JMP WARMST
1879  2B4C- 20 6D 29   MAP1    JSR PRCON
1880  2B4F- AD 15 20           LDA TABLE+5
1881  2B52- 85 AB              STA PAGELN
1882  2B54- A9 00              LDA =0
1883  2B56- 85 A4              STA PAGECN
1884  2B58- 20 27 E0           JSR PRTINF
1885  2B5B- 92                 BYT $92         AUTOPRINT ON
1886  2B5C- 20 0F 27           JSR NEWLIN
1887  2B5F- 20 27 E0           JSR PRTINF
1888  2B62- 43 52 4F           BYT 'CROSS REFERENCE MAP',$BA
1888  2B65- 53 53 20 
1888  2B68- 52 45 46 
1888  2B6B- 45 52 45 
1888  2B6E- 4E 43 45 
1888  2B71- 20 4D 41 
1888  2B74- 50 BA 
1889  2B76- 20 0F 27           JSR NEWLIN
1890  2B79- 20 0B 2B           JSR CLRRFL      CLEAR R-FLAG
1891                   *
1892  2B7C- AD 0C 20   CROSS0  LDA LABSTR
1893  2B7F- AE 0D 20           LDX LABSTR+1
1894  2B82- 85 97      CROSS1  STA LABPNT
1895  2B84- 86 98              STX LABPNT+1
1896  2B86- C5 B0              CMP LABCNT
1897  2B88- 8A                 TXA
1898  2B89- E5 B1              SBC LABCNT+1
1899  2B8B- 90 0A              BCC CROSS2
1900  2B8D- 20 0F 27           JSR NEWLIN
1901  2B90- 20 27 E0           JSR PRTINF

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 28/10/23   R65 ASSEMBLER  PAGE 40

1902  2B93- 94                 BYT $94
1903  2B94- 4C 17 2A           JMP WARMST
1904                   *
1905  2B97- A0 07      CROSS2  LDY =7
1906  2B99- B1 97              LDA (LABPNT),Y
1907  2B9B- 10 0C              BPL CROSS3      SKIP, IF FOUND
1908  2B9D- A5 97              LDA LABPNT
1909  2B9F- A6 98              LDX LABPNT+1
1910  2BA1- 18                 CLC
1911  2BA2- 69 08              ADC =8
1912  2BA4- 90 DC              BCC CROSS1
1913  2BA6- E8                 INX
1914  2BA7- B0 D9              BCS CROSS1
1915                   *
1916  2BA9- A5 97      CROSS3  LDA LABPNT
1917  2BAB- A6 98              LDX LABPNT+1
1918  2BAD- 18         CROSS4  CLC
1919  2BAE- 69 08              ADC =8
1920  2BB0- 85 99              STA LABPN1
1921  2BB2- 90 01              BCC *+3
1922  2BB4- E8                 INX
1923  2BB5- 86 9A              STX LABPN1+1
1924  2BB7- C5 B0              CMP LABCNT
1925  2BB9- 8A                 TXA
1926  2BBA- E5 B1              SBC LABCNT+1
1927  2BBC- B0 24              BCS CROSS7      SKIP, IF FOUND
1928                   *
1929  2BBE- A0 07              LDY =7
1930  2BC0- B1 99              LDA (LABPN1),Y
1931  2BC2- 10 07              BPL CROSS6
1932  2BC4- A5 99      CROSS5  LDA LABPN1
1933  2BC6- A6 9A              LDX LABPN1+1
1934  2BC8- 4C AD 2B           JMP CROSS4
1935                   *
1936  2BCB- 38         CROSS6  SEC
1937  2BCC- A0 04              LDY =4
1938  2BCE- B1 97              LDA (LABPNT),Y  COMPARE NOW
1939  2BD0- F1 99              SBC (LABPN1),Y
1940  2BD2- 88                 DEY
1941  2BD3- 10 F9              BPL CROSS6+3
1942  2BD5- 90 ED              BCC CROSS5
1943  2BD7- A5 99              LDA LABPN1
1944  2BD9- A6 9A              LDX LABPN1+1
1945  2BDB- 85 97              STA LABPNT
1946  2BDD- 86 98              STX LABPNT+1
1947  2BDF- 4C AD 2B           JMP CROSS4
1948                   *
1949  2BE2- A0 07      CROSS7  LDY =7
1950  2BE4- B1 97              LDA (LABPNT),Y  SET R-FLAG
1951  2BE6- 09 80              ORA =$80

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 28/10/23   R65 ASSEMBLER  PAGE 41

1952  2BE8- 91 97              STA (LABPNT),Y
1953  2BEA- 20 A1 2C           JSR PRLABN
1954  2BED- 4C 7C 2B           JMP CROSS0
1955                   *
1956                   *
1957                   * END OF SOURCE
1958                   *
1959  2BF0- A9 00      END     LDA =0
1960  2BF2- 85 A0              STA PCNEW
1961  2BF4- 85 A1              STA PCNEW+1
1962  2BF6- A5 A9              LDA PASSFL      ONLY IN SECOND PASS
1963  2BF8- F0 04              BEQ END0-3
1964  2BFA- 20 27 E0           JSR PRTINF      AUTOPRINT ON
1965  2BFD- 92                 BYT $92
1966  2BFE- 20 71 26          JSR PRTLIN
1967  2C01- 20 0F 27   END0    JSR NEWLIN
1968  2C04- 20 27 E0           JSR PRTINF
1969  2C07- 4C 41 42           BYT 'LABELS',$BD
1969  2C0A- 45 4C 53 
1969  2C0D- BD 
1970  2C0E- A9 00              LDA =0
1971  2C10- 85 98              STA LABPNT+1
1972  2C12- A5 B0              LDA LABCNT
1973  2C14- 38                 SEC
1974  2C15- ED 0C 20           SBC LABSTR
1975  2C18- 85 97              STA LABPNT
1976  2C1A- A5 B1              LDA LABCNT+1
1977  2C1C- ED 0D 20           SBC LABSTR+1
1978  2C1F- A0 04              LDY =4
1979  2C21- 06 97      END1    ASL LABPNT
1980  2C23- 2A                 ROL A
1981  2C24- 26 98              ROL LABPNT+1
1982  2C26- 88                 DEY
1983  2C27- 10 F8              BPL END1
1984  2C29- AA                 TAX
1985  2C2A- A5 98              LDA LABPNT+1
1986  2C2C- 20 30 E0           JSR PRTAX
1987  2C2F- 20 0F 27           JSR NEWLIN
1988  2C32- 20 27 E0           JSR PRTINF
1989  2C35- 45 52 52           BYT 'ERRORS',$BD
1989  2C38- 4F 52 53 
1989  2C3B- BD 
1990  2C3C- A5 A8              LDA NUMERR
1991  2C3E- 20 2D E0           JSR PRTBYT
1992  2C41- 20 0F 27           JSR NEWLIN
1993  2C44- 20 27 E0           JSR PRTINF
1994  2C47- 52 45 43           BYT 'RECORDS',$BD
1994  2C4A- 4F 52 44 
1994  2C4D- 53 BD 
1995  2C4F- A6 9B              LDX INPFIL

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 28/10/23   R65 ASSEMBLER  PAGE 42

1996  2C51- BD 51 03           LDA FIRCTB,X
1997  2C54- 20 2D E0           JSR PRTBYT
1998  2C57- 20 0F 27           JSR NEWLIN
1999  2C5A- 20 62 28           JSR CLOSRC
2000  2C5D- A6 9B              LDX INPFIL
2001  2C5F- 20 12 F0           JSR CLOSE
2002  2C62- 20 27 E0           JSR PRTINF
2003  2C65- 55 4E 52           BYT 'UNRESOLVED',$BA
2003  2C68- 45 53 4F 
2003  2C6B- 4C 56 45 
2003  2C6E- 44 BA 
2004  2C70- 20 0B 2B           JSR CLRRFL      CLEAR R-FLAG
2005  2C73- AD 0C 20           LDA LABSTR
2006  2C76- AE 0D 20           LDX LABSTR+1
2007  2C79- 85 97      UNRES   STA LABPNT
2008  2C7B- 86 98              STX LABPNT+1
2009  2C7D- C5 B0              CMP LABCNT
2010  2C7F- 8A                 TXA
2011  2C80- E5 B1              SBC LABCNT+1
2012  2C82- 90 03              BCC *+5
2013  2C84- 4C 7C 2B           JMP CROSS0
2014  2C87- 20 79 22           JSR DEFIN
2015  2C8A- F0 08              BEQ END2
2016  2C8C- A0 07              LDY =7
2017  2C8E- B1 97              LDA (LABPNT),Y
2018  2C90- 09 80              ORA =$80
2019  2C92- 91 97              STA (LABPNT),Y
2020  2C94- A5 97      END2    LDA LABPNT
2021  2C96- A6 98              LDX LABPNT+1
2022  2C98- 18                 CLC
2023  2C99- 69 08              ADC =8
2024  2C9B- 90 01              BCC *+3
2025  2C9D- E8                 INX
2026  2C9E- 4C 79 2C           JMP UNRES
2027                   *
2028                   *
2029                   * SUBROUTINE PRLABN: PRINT NAME OF LABEL
2030                   ****************************************
2031                   *
2032  2CA1- A0 00      PRLABN  LDY =0
2033  2CA3- B1 97              LDA (LABPNT),Y
2034  2CA5- 99 30 00           STA LABEL,Y
2035  2CA8- C8                 INY
2036  2CA9- C0 05              CPY =5
2037  2CAB- D0 F6              BNE PRLABN+2
2038                   *
2039  2CAD- 20 0F 27           JSR NEWLIN
2040  2CB0- A0 07              LDY =7          CHAR COUNTER
2041  2CB2- A2 06      PRLAB0  LDX =6
2042  2CB4- C0 06              CPY =6

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 28/10/23   R65 ASSEMBLER  PAGE 43

2043  2CB6- 90 01              BCC *+3
2044  2CB8- CA                 DEX
2045  2CB9- A9 00              LDA =0
2046  2CBB- 26 34      PRLAB1  ROL LABEL+4
2047  2CBD- 26 33              ROL LABEL+3
2048  2CBF- 26 32              ROL LABEL+2
2049  2CC1- 26 31              ROL LABEL+1
2050  2CC3- 26 30              ROL LABEL
2051  2CC5- 2A                 ROL A
2052  2CC6- CA                 DEX
2053  2CC7- D0 F2              BNE PRLAB1
2054  2CC9- C9 00              CMP =0
2055  2CCB- F0 09              BEQ PRLAB3
2056  2CCD- C9 30              CMP =$30
2057  2CCF- 10 02              BPL *+4
2058  2CD1- 09 40              ORA =$40
2059  2CD3- 20 09 E0           JSR PRTCHR
2060  2CD6- 88         PRLAB3  DEY
2061  2CD7- D0 D9              BNE PRLAB0
2062  2CD9- A2 08              LDX =8
2063  2CDB- 20 05 27           JSR TAB
2064  2CDE- 20 79 22           JSR DEFIN
2065  2CE1- D0 0A              BNE *+12
2066  2CE3- 20 27 E0           JSR PRTINF
2067  2CE6- 3F 3F 3F           BYT '???',$BF
2067  2CE9- BF 
2068  2CEA- 4C FA 2C           JMP *+16
2069                   *
2070  2CED- A0 06              LDY =6
2071  2CEF- B1 97              LDA (LABPNT),Y
2072  2CF1- 20 2D E0           JSR PRTBYT
2073  2CF4- 88                 DEY
2074  2CF5- B1 97              LDA (LABPNT),Y
2075  2CF7- 20 2D E0           JSR PRTBYT
2076  2CFA- 20 BF 2D           JSR CBASE
2077  2CFD- A0 07              LDY =7
2078  2CFF- B1 97             LDA (LABPNT),Y
2079  2D01- 29 7F              AND =$7F
2080  2D03- 0A                 ASL A
2081  2D04- A8                 TAY             Y=2*NO OF REFERENCES
2082                   *
2083  2D05- A9 0A      PRLAB4  LDA =10         REFERENCES PER LINE
2084  2D07- 85 37              STA TEMP1
2085  2D09- A2 10              LDX =16
2086  2D0B- 20 05 27           JSR TAB
2087  2D0E- C0 00      PRLAB5  CPY =0
2088  2D10- F0 1F              BEQ PRLAB6
2089  2D12- 88                 DEY
2090  2D13- B1 95              LDA (BASE),Y
2091  2D15- 20 2D E0           JSR PRTBYT

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 28/10/23   R65 ASSEMBLER  PAGE 44

2092  2D18- 88                 DEY
2093  2D19- B1 95              LDA (BASE),Y
2094  2D1B- 20 2D E0           JSR PRTBYT
2095  2D1E- 20 27 E0           JSR PRTINF
2096  2D21- A0                 BYT $A0
2097  2D22- C6 37              DEC TEMP1
2098  2D24- 10 E8              BPL PRLAB5
2099  2D26- 98                 TYA
2100  2D27- F0 08              BEQ PRLAB6
2101  2D29- 48                 PHA
2102  2D2A- 20 0F 27           JSR NEWLIN
2103  2D2D- 68                 PLA
2104  2D2E- A8                 TAY
2105  2D2F- D0 D4              BNE PRLAB4
2106  2D31- 60         PRLAB6  RTS
2107                   *
2108                   *
2109                   * SUBROUTINE FORBR: INSERT FORWARD BRANCH
2110                   *****************************************
2111                   * INPUT: OBJECT, BRANTC, ONLY IN FIRST PASS
2112                   * RESOLV+1
2113                   *
2114  2D32- A5 A6      FORBR   LDA BRANTC
2115  2D34- C9 0C              CMP =12
2116  2D36- 90 05              BCC *+7
2117  2D38- A9 52              LDA =$52
2118  2D3A- 4C 38 29           JMP ERROR
2119  2D3D- A8                 TAY
2120  2D3E- A5 3A              LDA RESOLV+1
2121  2D40- 99 65 00           STA BRANTB,Y    STORE NO OF LABELS
2122  2D43- A5 3B              LDA RESOLV+2
2123  2D45- 99 71 00           STA BRANTB+12,Y
2124  2D48- 20 25 26           JSR BRAN1
2125  2D4B- A4 A6              LDY BRANTC
2126  2D4D- 99 89 00           STA BRANTB+36,Y STORE HIGH BYTE
2127  2D50- A5 3D              LDA OBJECT+1
2128  2D52- 99 7D 00           STA BRANTB+24,Y STORE LOW BYTE
2129  2D55- E6 A6              INC BRANTC
2130  2D57- 60                 RTS
2131                   *
2132                   *
2133                   * SUBROUTINE RESFBR: RESOLVE FORWARD BRANCH
2134                   *******************************************
2135                   * INPUT: LABPNT; ONLY IN FIRST PASS
2136                   * SAVED: X,Y
2137                   *
2138  2D58- 8A         RESFBR  TXA
2139  2D59- 48                 PHA
2140  2D5A- A6 A6      RESF1   LDX BRANTC
2141  2D5C- F0 10              BEQ RESF0       TABLE EMPTY

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 28/10/23   R65 ASSEMBLER  PAGE 45

2142  2D5E- CA                 DEX
2143  2D5F- A5 97      RESF8   LDA LABPNT
2144  2D61- D5 65              CMP BRANTB,X
2145  2D63- D0 06              BNE RESF6
2146  2D65- A5 98              LDA LABPNT+1
2147  2D67- D5 71              CMP BRANTB+12,X
2148  2D69- F0 06              BEQ RESF7
2149  2D6B- CA         RESF6   DEX
2150  2D6C- 10 F1              BPL RESF8
2151  2D6E- 68         RESF0   PLA
2152  2D6F- AA                 TAX
2153  2D70- 60                 RTS
2154                   *
2155  2D71- 8A         RESF7   TXA
2156  2D72- 48                 PHA
2157  2D73- 20 7B 2D           JSR RESF2
2158  2D76- 68                 PLA
2159  2D77- AA                 TAX
2160  2D78- 4C 5A 2D           JMP RESF1
2161                   *
2162  2D7B- B5 7D      RESF2   LDA BRANTB+24,X
2163  2D7D- 18                 CLC
2164  2D7E- 65 5C              ADC VALUE
2165  2D80- 08                 PHP
2166  2D81- B5 89              LDA BRANTB+36,X
2167  2D83- 65 5D              ADC VALUE+1
2168  2D85- 28                 PLP
2169  2D86- 30 10              BMI RESF3
2170  2D88- C9 00              CMP =0
2171  2D8A- F0 10              BEQ RESF4
2172  2D8C- 98         ERR14   TYA
2173  2D8D- 48                 PHA
2174  2D8E- A9 44              LDA =$44
2175  2D90- 20 38 29           JSR ERROR
2176  2D93- 68                 PLA
2177  2D94- A8                 TAY
2178  2D95- 4C 9C 2D           JMP RESF4
2179                   *
2180  2D98- C9 FF      RESF3   CMP =$FF
2181  2D9A- D0 F0              BNE ERR14
2182                   *
2183  2D9C- E8         RESF4   INX
2184  2D9D- E4 A6              CPX BRANTC
2185  2D9F- B0 13              BCS RESF5
2186  2DA1- B5 65              LDA BRANTB,X
2187  2DA3- 95 64              STA BRANTB-1,X
2188  2DA5- B5 71              LDA BRANTB+12,X
2189  2DA7- 95 70              STA BRANTB+11,X
2190  2DA9- B5 7D              LDA BRANTB+24,X
2191  2DAB- 95 7C              STA BRANTB+23,X

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 28/10/23   R65 ASSEMBLER  PAGE 46

2192  2DAD- B5 89              LDA BRANTB+36,X
2193  2DAF- 95 88              STA BRANTB+35,X
2194  2DB1- 4C 9C 2D           JMP RESF4
2195                   *
2196  2DB4- C6 A6      RESF5   DEC BRANTC
2197  2DB6- 60                 RTS
2198                   *
2199                   *
2200                   * SUBROUTINE CBASE: COMPUTE BASE
2201                   ********************************
2202                   * INPUT: LABCNT
2203                   *
2204  2DB7- A5 B0      CBASE2  LDA LABCNT
2205  2DB9- A6 B1              LDX LABCNT+1
2206  2DBB- 85 97              STA LABPNT
2207  2DBD- 86 98              STX LABPNT+1
2208                   *
2209  2DBF- AD 06 20   CBASE   LDA OBSTR
2210  2DC2- 85 95              STA BASE
2211  2DC4- AD 07 20           LDA OBSTR+1
2212  2DC7- 85 96              STA BASE+1
2213  2DC9- A5 97              LDA LABPNT
2214  2DCB- A6 98              LDX LABPNT+1
2215  2DCD- 38         CBASE1  SEC
2216  2DCE- E9 08              SBC =8
2217  2DD0- 85 99              STA LABPN1
2218  2DD2- B0 01              BCS *+3
2219  2DD4- CA                 DEX
2220  2DD5- 86 9A              STX LABPN1+1
2221  2DD7- CD 0C 20           CMP LABSTR
2222  2DDA- 8A                 TXA
2223  2DDB- ED 0D 20           SBC LABSTR+1
2224  2DDE- B0 01              BCS *+3
2225  2DE0- 60                 RTS
2226  2DE1- A0 07              LDY =7
2227  2DE3- B1 99              LDA (LABPN1),Y
2228  2DE5- 29 7F              AND =$7F
2229  2DE7- 0A                 ASL A
2230  2DE8- 65 95              ADC BASE
2231  2DEA- 85 95              STA BASE
2232  2DEC- 90 02              BCC *+4
2233  2DEE- E6 96              INC BASE+1
2234  2DF0- A5 99              LDA LABPN1
2235  2DF2- A6 9A              LDX LABPN1+1
2236  2DF4- 4C CD 2D           JMP CBASE1
2237                   *
2238                   *
2239                   * SUBROUTINE: SETREF: SET REFERENCE
2240                   ***********************************
2241                   * SAVED: X,Y; INPUT: LABPNT

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 28/10/23   R65 ASSEMBLER  PAGE 47

2242                   *
2243  2DF7- 86 61      SETREF  STX INDEX1      SAVE X
2244  2DF9- 84 62              STY INDEX2
2245  2DFB- A5 A9              LDA PASSFL
2246  2DFD- F0 01              BEQ *+3
2247  2DFF- 60                RTS
2248                   *
2249  2E00- A0 07              LDY =7
2250  2E02- B1 97              LDA (LABPNT),Y
2251  2E04- 29 7F              AND =$7F
2252  2E06- C9 7F              CMP =$7F
2253  2E08- D0 03              BNE *+5
2254  2E0A- A4 62              LDY INDEX2      NOT INSERTED IN FULL
2255  2E0C- 60                 RTS
2256                   *
2257  2E0D- A5 97              LDA LABPNT
2258  2E0F- 48                 PHA
2259  2E10- A5 98              LDA LABPNT+1
2260  2E12- 48                 PHA
2261  2E13- 20 B7 2D           JSR CBASE2
2262  2E16- 68                 PLA
2263  2E17- 85 98              STA LABPNT+1
2264  2E19- 68                 PLA
2265  2E1A- 85 97              STA LABPNT
2266                   *
2267  2E1C- A5 95              LDA BASE
2268  2E1E- 85 AC              STA OBPNT
2269  2E20- CD 08 20           CMP OBEND
2270  2E23- A5 96              LDA BASE+1
2271  2E25- 85 AD              STA OBPNT+1
2272  2E27- ED 09 20           SBC OBEND+1
2273  2E2A- B0 3C              BCS SETR1
2274                   *
2275  2E2C- A6 37              LDX TEMP1
2276  2E2E- A0 07              LDY =7
2277  2E30- B1 97              LDA (LABPNT),Y
2278  2E32- 18                 CLC
2279  2E33- 69 01              ADC =1
2280  2E35- 91 97              STA (LABPNT),Y
2281  2E37- 20 BF 2D           JSR CBASE
2282  2E3A- A5 AC      SETR2   LDA OBPNT
2283  2E3C- C5 95              CMP BASE
2284  2E3E- A5 AD              LDA OBPNT+1
2285  2E40- E5 96              SBC BASE+1
2286  2E42- 90 16              BCC SETR3
2287  2E44- A0 00              LDY =0
2288  2E46- B1 AC              LDA (OBPNT),Y
2289  2E48- A0 02              LDY =2
2290  2E4A- 91 AC              STA (OBPNT),Y
2291  2E4C- 38                 SEC

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 28/10/23   R65 ASSEMBLER  PAGE 48

2292  2E4D- A5 AC              LDA OBPNT
2293  2E4F- E9 01              SBC =1
2294  2E51- 85 AC              STA OBPNT
2295  2E53- B0 02              BCS *+4
2296  2E55- C6 AD              DEC OBPNT+1
2297  2E57- 4C 3A 2E           JMP SETR2
2298                   *
2299  2E5A- 20 BF 2D   SETR3   JSR CBASE
2300  2E5D- A0 00              LDY =0
2301  2E5F- A5 9E              LDA PCOLD
2302  2E61- 91 95              STA (BASE),Y
2303  2E63- C8                 INY
2304  2E64- A5 9F              LDA PCOLD+1
2305  2E66- 91 95              STA (BASE),Y
2306  2E68- A4 62      SETR1   LDY INDEX2
2307  2E6A- A6 61              LDX INDEX1
2308  2E6C- 60                 RTS
2309                   *
2310                   *
2311  2E6D-                    END
LABELS=0105
ERRORS=00
RECORDS=85

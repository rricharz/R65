0001                    * 18/11/81,25/10/23

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 25/10/23   R65 ASSEMBLER  PAGE 01

0002                   **********************************
0003                   * R65 COMPUTER SYSTEM: ASSEMBLER *
0004                   **********************************
0005                   *
0006                   * VERSION 8.0   WITH UNLIMITED NO OF LABELS
0007                   *               ADDITIONAL PSEUDO OP'S
0008                   *               NO RPINTING IN FIRST PASS
0009                   *               SOURCE MAY BE IN SEVERAL FILES
0010                   *               ONLY 'END' TERMINATES A PASS
0011                   * ASSEMBLER FOR R65 COMPUTER SYSTEM
0012                   * CC RRICHARZ, RBAUMANN 1978-1981
0013                   *       - 32 k MEMORY
0014                   *       - VIDEO INTERFACE WITH 4k VIDEO MEMORY
0015                   *       - HARDCOPY OUTPUT
0016                   *       - TAPE AND OR DISK DRIVE(S)
0017                   *
0018                   * INPUT FROM 2 DEVICES
0019                   *       - COMMAND INPUT FROM KEYBOARD
0020                   *       - SOURCE CODE INPUT FROM TAPE OR DISK
0021                   *
0022                   * OUTPUT TO 3 DEVICES
0023                   *       - MESSAGES AND LISTING TO VIDEO DISPLAY
0024                   *       - ERROR TABLE, CROSS REFERENCE MAP AND
0025                   *         LISTINGS TO HARD COPY
0026                   *       - OBJECT FILE(S) TO TAPE OR DISK
0027                   *
0028                   * COMMANDS (A* IS PRINTED IN COMMAND MODE)
0029                   *       F       FIRST PASS
0030                   *       S       SECOND PASS
0031                   *       C       CONTINUE SAME PASS
0032                   *       R       REFERENCE MAP
0033                   *       <return> QUIT ASSEMBLER
0034                   *
0035                   *
0036                   * SOURCE LINE FORMAT [] MEANS OPTIONAL
0037                   * [LABEL] OPCODE [OPERAND] [COMMENT]
0038                   * OR *[COMMENT]
0039                   *
0040                   * PSEUDO OPCODES (ASSEMBLER DIRECTIVES)
0041                   *
0042                   *       - EQU "EXPRESSION"      ASSIGN LABEL
0043                   *       - ORG "EXPRESSION"      ASSIGN PC
0044                   *       - BSS "EXPRESSION"      RESERVE BYTES
0045                   *       - BYT "EXPR","EXPR",..  ASSIGN BYTES
0046                   *               "EXPR" CAN BE 'STRING'
0047                   *       - WRD "EXPR","EXPR",..  ASSIGN WORDS
0048                   *       - PAG                   NEW PAGE
0049                   *       - TIT "MAX 32 CHARS"    ASSIGN TITLE
0050                   *       - END                   END OF SOURCE
0051                   *       - NPR                   NO PRINTING

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 25/10/23   R65 ASSEMBLER  PAGE 02

0052                   *       - PRT                   PRINTING
0053                   *
0054                   * ERROR CODES: (FULL ERROR ANALYSIS IN FIRST
0055                   * PASS INCLUDING FORWARD BRANCHES AND
0056                   * UNRESOLVED REFERENCES)
0057                   * FOR ERROR CODES <30 SEE SYSTEM ERRORS
0058                   *
0059                   * ERROR 31  CLOSING ) EXPECTED IN EXPRESSION
0060                   * ERROR 32  SYNTAX ERROR IN LABEL
0061                   * ERROR 33  HEX CHAR EXPECTED AFTER $
0062                   * ERROR 34  LABEL TABLE OVERFLOW
0063                   * ERROR 35  LOGICAL CHAR EXPECTED AFTER #
0064                   * ERROR 36  EXPRESSION NOT RESOLVED (PASS 2)
0065                   * ERROR 37  SYNTAX ERROR IN OPCODE
0066                   * ERROR 38  MNEMONIC OR ADDRESSING ILLEGAL
0067                   * ERROR 39  ILLEGAL ADDRESSING MODE
0068                   * ERROR 40  SYNTAX ERROR IN OPERAND
0069                   * ERROR 41  ABSOLUTE ADDRESS ILLEGAL
0070                   * ERROR 42  MORE THAN 1 UNRESOLVED LABEL IN
0071                   *               FORWARD BRANCH
0072                   * ERROR 43  BRANCH EXCEEDS BOUNDS
0073                   * ERROR 44  FORWARD BRANCH TO THIS LABEL
0074                   *               EXCEEDS BOUNDS
0075                   * ERROR 45  DOUBLE LABELDEFINITION
0076                   * ERROR 46  MISSMATCH IN SECOND PASS
0077                   * ERROR 47  LABEL MISSING IN EQU
0078                   * ERROR 48  OPERAND OF BYT TOO LONG
0079                   * ERROR 49  EXPRESSION MUST BE RESOLVED
0080                   * ERROR 50  LINE TOO LONG
0081                   * ERROR 51  CHAR FOLLOWS LOGICAL END OF OPERAND
0082                   * ERROR 52  TOO MANY UNRESOLVED BRANCHES
0083                   *               NOT INSERTED INTO TEST TABLE
0084                   *
0085                           TIT R65 ASSEMBLER V8.0
0086                   *
0087                           ORG 0
0088                   *
0089                   * PAGE ZERO ASSEMBLER VARIABLES
0090                   *******************************
0091                   *
0092                   * TEMPORARY BUFFERS
0093                   *
0094  0000-            INBUFF  BSS 48  LINE BUFFER
0095  0030-            LABEL   BSS 7   LABEL SHIFT REGISTER
0096  0037-            TEMP1   BSS 1   TEMPORARY REGISTER
0097  0038-            NUMBYT  BSS 1   NUMBER OF BYTES
0098  0039-            RESOLV  BSS 3   UNRESOLVED COUNTER
0099  003C-            OBJECT  BSS 32  OBJECT CODE LINE BUFFER
0100  005C-            VALUE   BSS 2   VALUE OF EXPRESSION
0101  005E-            OPCODE  BSS 2   OPCODE SAVE REGISTER

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 25/10/23   R65 ASSEMBLER  PAGE 03

0102  0060-            ADMODE  BSS 1   ADDRESSING MODE
0103  0061-            INDEX1  BSS 1   MNEMONIC TABLE INDEX
0104  0062-            INDEX2  BSS 1   CODE OFFSET INDEX
0105  0063-            DEFLB   BSS 1   LABEL DEFINITION FLAG
0106  0064-            INBFPN  BSS 1   END OF INPUT POINTER
0107  0065-            BRANTB  BSS 48  FORWARD BRANCH TABLE
0108  0095-            BASE    BSS 2   REFERENCE TABLE POINTER
0109  0097-            LABPNT  BSS 2   LABEL POINTER
0110  0099-            LABPN1  BSS 2   SECOND LABEL POINTER
0111  009B-            INPFIL  BSS 1   INPUT FILE NUMBER
0112  009C-            SAVPNT  BSS 2   SAVED FILE PAR POINTER
0113                   *
0114                   * PRESET TO 0 IN BOTH PASSES
0115                   *
0116  009E-            PCOLD   BSS 2   OLD PROGRAM COUNTER
0117  00A0-            PCNEW   BSS 2   NEW PROGRAMM COUNTER
0118  00A2-            LINCNT  BSS 2   LINE COUNTER
0119  00A4-            PAGECN  BSS 1   PAGE COUNTER
0120  00A5-            OUTREC  BSS 1   OUTPUT RECORD COUNTER
0121  00A6-            BRANTC  BSS 1   TABLE POINTER
0122  00A7-            FILCNT  BSS 1   INPUT FILE COUNTER
0123  00A8-            NUMERR  BSS 1   NUMBER OF ERRORS
0124                   *
0125                   * PRESET IN BOTH PASSES
0126                   *
0127  00A9-            PASSFL  BSS 1   PASS FLAG
0128  00AA-            PRTFLG  BSS 1   PRINT FLAG
0129  00AB-            PAGELN  BSS 1   PAGE LINE COUNTER
0130  00AC-            OBPNT   BSS 2   OBJECT BUFFER POINTER
0131  00AE-            OBADDR  BSS 2   OBJECT BASE ADDRESS
0132                   *
0133                   * PRESET ONLY IN FIRST BASS
0134                   *
0135  00B0-            LABCNT  BSS 2   LABEL COUNTER
0136  00B2-            TITLE   BSS 32  TITLE OF PROGRAM
0137                   *
0138                   *
0139                   *
0140                   * MONITOR LABELS:
0141                   *****************
0142                   *
0143                   FILFLG  EQU $DA         FILE ENTRY FLAG
0144                   FILDRV  EQU $DC         FILE DRIVE
0145                   CURPOS  EQU $EE         CURSOR HOR. POSITION
0146                   INL     EQU $F8         INPUT BUFFER MONITOR
0147                   *
0148                   FILNAM  EQU $0301       FILE NAME
0149                   FILSTP  EQU $0312       FILE SUBTYPE
0150                   FILLOC  EQU $0313       FILE LOCATION/SECTOR
0151                   FILSIZ  EQU $0315       FILE SIZE

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 25/10/23   R65 ASSEMBLER  PAGE 04

0152                   FILSA   EQU $031A       START ADDRESS
0153                   FILEA   EQU $031C       END ADDRESS
0154                   FILNM1  EQU $0320       SECOND FILE NAME
0155                   FILSA1  EQU $0331       SECOND START ADDRESS
0156                   FIRCTB  EQU $0351       ROCORD COUNTER
0157                   *
0158                   VFLAG   EQU $1780       VIDEO FLAG REGISTER
0159                   SFLAG   EQU $1781       SYSTEM FLAG REGISTER
0160                   NUMLIN  EQU $1789       VIDEO LINES
0161                   VMON    EQU $17D5       ADDRESS OF MONITOR START
0162                   MNEMR   EQU $E7C0       MNEMONIC TABLE
0163                   MNEML   EQU $E780
0164                   DISMOD  EQU $E722       ADDRESSING MODE TABLE 1
0165                   MODE2   EQU $E766       ADDRESSING MODE TABLE
0166                   CLOSAL  EQU $F015
0167                   *
0168                           PAG

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 25/10/23   R65 ASSEMBLER  PAGE 05

0169                   *
0170                   * START OF PROGRAM ENTRY VECTORS
0171                   ********************************
0172                   *
0173  00D2-                    ORG $2000
0174                   *
0175  2000- 4C CE 29           JMP COLDST      COLD START ENTRY
0176  2003- 4C 17 2A           JMP WARMST      WARM START ENTRY
0177                   *
0178                   *
0179                   * ASSEMBLER BUFFERS AND CONSTANTS:
0180                   **********************************
0181                   *
0182  2006- 00 50      OBSTR   WRD $5000       START OF OBJECT BUFFER
0183  2008- FE 8F      OBEND   WRD $8FFE       END OF OBJECT BUFFER -1
0184                   *
0185  200A- 00 90      SAVNAM  WRD $9000       INPUT FILE NAME BUFFER
0186                   *
0187  200C- 00 30      LABSTR  WRD $3000       START OF LABEL TABLE
0188  200E- F0 4F      LABEND  WRD $4FF0       END OF LABEL TABLE
0189                   *
0190  2010- 32         TABLE   BYT 50          PRINTED LINES/PAGE
0191  2011- 45                 BYT 69          TOTAL LINES/PAGE
0192  2012- 0C                 BYT $0C         FORM FEED CODE
0193  2013- 00                 BYT 0           NO OF ADD. PAD CHARS
0194  2014- 41                 BYT 65          POSITION OF PAPER MARK
0195  2015- CE                 BYT $CE         START POSITION ON PAPER
0196                   *
0197                   * SUBROUTINE VECTORS
0198                   ********************
0199                   *
0200                   GETKEY  EQU $E000
0201                   GETCHR  EQU $E003
0202                   GETLIN  EQU $E006
0203                   PRTCHR  EQU $E009
0204                   VAUTOP  EQU $E00C
0205                   ENDLIN  EQU $E024
0206                   PRTINF  EQU $E027
0207                   PRTBYT  EQU $E02D
0208                   PRTAX   EQU $E030
0209  2016- 4C 20 EB   WRFILA  JMP WRFILE+12   SPECIAL ENTRY!
0210                   WRFILE  EQU $EB14
0211                   OPEN    EQU $F00F
0212                   CLOSE   EQU $F012
0213                   READCH  EQU $F018
0214                   PRTDAT  EQU $F80F
0215                   GETNAM  EQU $F815
0216  2019- 4C F2 FC   HARGUM  JMP $FCF2
0217                   PACKTS  EQU $F919
0218                   *

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 25/10/23   R65 ASSEMBLER  PAGE 06

0219                   *
0220                   * SUBROUTINE SRLAB: SEARCH LABEL
0221                   ********************************
0222                   * SEARCH IN LABTB, RETURN C0 IF NOT
0223                   * FOUND, ELSE LBAPNT=ADDRESS OF LABEL
0224                   * USED: TEMP1,A; SAVED: X,Y; OUPUT: A,Z
0225                   *
0226  201C- 84 37      SRLAB   STY TEMP1
0227  201E- AD 0C 20           LDA LABSTR      SET TO START OF TABLE
0228  2021- AC 0D 20           LDY LABSTR+1
0229                   *
0230  2024- 85 97      SRLAB1  STA LABPNT
0231  2026- 84 98              STY LABPNT+1
0232  2028- C5 B0              CMP LABCNT      COMPARE TABLE END
0233  202A- 98                 TYA
0234  202B- E5 B1              SBC LABCNT+1
0235  202D- B0 1C              BCS SRLAB4      SKIP, IF END OF TABLE
0236  202F- A0 04              LDY =4
0237  2031- B9 30 00   SRLAB2  LDA LABEL,Y     COMPARE NOW
0238  2034- D1 97              CMP (LABPNT),Y
0239  2036- D0 07              BNE SRLAB3
0240  2038- 88                 DEY
0241  2039- 10 F6              BPL SRLAB2      LOOP UNTIL DONE
0242  203B- 38                 SEC             LABEL FOUND
0243  203C- A4 37              LDY TEMP1
0244  203E- 60                 RTS
0245                   *
0246  203F- A5 97      SRLAB3  LDA LABPNT      DIFFERENCE FOUND
0247  2041- A4 98              LDY LABPNT+1
0248  2043- 18                 CLC
0249  2044- 69 08              ADC =8          NEXT ONE
0250  2046- 90 DC              BCC SRLAB1
0251  2048- C8                 INY
0252  2049- B0 D9              BCS SRLAB1      ALLWAYS TAKEN
0253                   *
0254  204B- 18         SRLAB4  CLC             NOT FOUND
0255  204C- A4 37              LDY TEMP1
0256  204E- 60                 RTS
0257                   *
0258                   *
0259                   * SUBROUTINE STLABN: STORE LABEL NAME
0260                   *************************************
0261                   * STORE IN LABTAB, ERROR IF TABLE OVERFLOW
0262                   * NO DUPLICATE LABEL TEST, LABTB7 SET TO 0
0263                   * USED: A,Y; SAVED: X; INPUT: LABCNT;
0264                   * OUTPUT: LABCNT, CALLED: ERROR 34
0265                   *
0266  204F- A5 B0      STLABN  LDA LABCNT      COMPUTE LABPNT
0267  2051- A4 B1              LDY LABCNT+1
0268  2053- 18                 CLC

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 25/10/23   R65 ASSEMBLER  PAGE 07

0269  2054- 69 08              ADC =8
0270  2056- 90 01              BCC *+3
0271  2058- C8                 INY
0272  2059- 48                 PHA
0273  205A- CD 0E 20           CMP LABEND      TEST TABLE OVERFLOW
0274  205D- 98                 TYA
0275  205E- ED 0F 20           SBC LABEND+1
0276  2061- 68                 PLA
0277  2062- 90 09              BCC STLAB1      SKIP, IF NOT FULL
0278                   *
0279  2064- A9 34              LDA =$34        ERROR 34: TOO MANY
0280  2066- 20 38 29           JSR ERROR       ERRORS
0281  2069- A5 B0              LDA LABCNT
0282  206B- A4 B1              LDY LABCNT+1
0283                   *
0284  206D- 85 B0      STLAB1  STA LABCNT
0285  206F- 84 B1              STY LABCNT+1
0286  2071- 38                 SEC
0287  2072- E9 08              SBC =8
0288  2074- B0 01              BCS *+3
0289  2076- 88                 DEY
0290  2077- 85 97              STA LABPNT
0291  2079- 84 98              STY LABPNT+1
0292                   *
0293  207B- A0 04              LDY =4
0294  207D- B9 30 00   STLAB2  LDA LABEL,Y
0295  2080- 91 97              STA (LABPNT),Y
0296  2082- 88                 DEY
0297  2083- 10 F8              BPL STLAB2
0298                   *
0299  2085- A9 00              LDA =0          CLEAR BYTE 7
0300  2087- A0 07              LDY =7
0301  2089- 91 97              STA (LABPNT),Y
0302  208B- 60                 RTS
0303                   *
0304                   *  SUBROUTINE RDLAB: READ LABEL FROM BUFFER
0305                   *******************************************
0306                   * READ 1-7 CHARS, SHIFT INTO 5 BYTES, STORE
0307                   * IN LABEL, TERMINATORS ARE NOT LETTERS OR
0308                   * NUMBERS. USED: A,X,Y,TEMP1; CALLED: ERROR;
0309                   * INPUT:X; OUTPUT: LABEL,X
0310                   *
0311  208C- A0 08      RDLAB   LDY =8          CHAR COUNTER
0312  208E- A9 06              LDA =6
0313  2090- 85 37              STA TEMP1       TEMP1 = BIT COUNTER
0314  2092- B5 00              LDA INBUFF,X    GET ONE CHAR
0315  2094- C9 30              CMP =$30        IF NOT LEGAL CODE
0316  2096- 90 04              BCC *+6         USE SAME NEXT LOOP
0317  2098- C9 5B              CMP =$5B        IF LEGAL
0318  209A- 90 03              BCC *+5         USE THIS CHAR

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 25/10/23   R65 ASSEMBLER  PAGE 08

0319  209C- CA                 DEX             USE SAME CHAR AGAIN
0320  209D- A9 00              LDA =0          USE 0 FILLER
0321  209F- 88                 DEY             COUNT CHAR
0322  20A0- F0 21              BEQ RDLAB2      LAST CHAR
0323  20A2- 0A                 ASL A
0324  20A3- 0A                 ASL A
0325  20A4- C0 06              CPY =6          IF X<6
0326  20A6- 90 08              BCC RDLAB1      USE 6 BITS
0327  20A8- C6 37              DEC TEMP1
0328  20AA- 0A                 ASL A           TAKE ONLY 5 BITS
0329  20AB- 90 03              BCC RDLAB1      LEGAL 5 BIT CODE
0330  20AD- A9 00              LDA =0          ELSE USE FILLER
0331  20AF- CA                 DEX
0332  20B0- 0A         RDLAB1  ASL A           SHIFT INTO LABEL
0333  20B1- 26 34              ROL LABEL+4
0334  20B3- 26 33              ROL LABEL+3
0335  20B5- 26 32              ROL LABEL+2
0336  20B7- 26 31              ROL LABEL+1
0337  20B9- 26 30              ROL LABEL
0338  20BB- C6 37              DEC TEMP1
0339  20BD- D0 F1              BNE RDLAB1      LOOP FOR BITS
0340  20BF- E8                 INX
0341  20C0- 4C 8E 20           JMP RDLAB+2
0342  20C3- C9 00      RDLAB2  CMP =0
0343  20C5- D0 06              BNE *+8         MORE THAN 6 CHARACTERS
0344  20C7- A5 30              LDA LABEL
0345  20C9- F0 02              BEQ *+4         FIRST CHAR NOT LETTER
0346  20CB- E8                 INX
0347  20CC- 60                 RTS
0348  20CD- A9 32              LDA =$32
0349  20CF- 4C 38 29           JMP ERROR       RETURN AFTER ERROR
0350                   *
0351                   *
0352                   * SUBROUTINE RDBL: READ BLANKS
0353                   ******************************
0354                   * USED: A; SAVED:Y; INPUT:X; OUTPUT:X
0355                   *
0356  20D2- B5 00      RDBL    LDA INBUFF,X
0357  20D4- E8                 INX
0358  20D5- C9 20              CMP =$20
0359  20D7- F0 F9              BEQ RDBL
0360  20D9- CA                 DEX
0361  20DA- 60                 RTS
0362                   *
0363                   *
0364                   * SUBROUTINE EXPRESSION
0365                   ***********************
0366                   * READ EXPRESSION FROM INBUFF,X.  COMPUTE
0367                   * VALUE AND RESOLV-FLAG (GIVES NUMBER OF
0368                   * UNRESOLVED REFERENCES USED

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 25/10/23   R65 ASSEMBLER  PAGE 09

0369                   * SYNTAX:
0370                   * EXPRESSION: FUNCTION [+-FUNCTION]
0371                   * FUNCTION:   <ARGUMENT OR >ARGUMENT OR
0372                   *               ARGUMENT
0373                   * ARGUMENT:   'CHAR['] OR $HEX OR #BINARY OR
0374                   *               DECIMAL OR * OR LABEL
0375                   * USED: A,X,Y; INPUT:X; OUTPUT: X,VALUE
0376                   *               RESOLVE,RESOLV+1;
0377                   *               CALLED: FUNC,ERROR
0378                   *
0379  20DB- A9 00      EXPRES  LDA =0          SET COUNTER FOR
0380  20DD- 85 39              STA RESOLV      UNRESOLVED LABELS
0381  20DF- 20 17 21           JSR FUNC
0382  20E2- 48         EXP1    PHA             PUSH RESULT ON STACK
0383  20E3- A5 5C              LDA VALUE
0384  20E5- 48                 PHA
0385  20E6- B5 00              LDA INBUFF,X    GET NEXT CHAR
0386  20E8- C9 2B              CMP =$2B        IF +
0387  20EA- D0 12              BNE MINUS
0388  20EC- E8                 INX
0389  20ED- 20 17 21           JSR FUNC        GET NEXT FUNCTION
0390  20F0- 68                 PLA             AND ADD TO SAVED VALUE
0391  20F1- 18                 CLC
0392  20F2- 65 5C              ADC VALUE
0393  20F4- 85 5C              STA VALUE
0394  20F6- 68                 PLA
0395  20F7- 65 5D              ADC VALUE+1
0396  20F9- 85 5D              STA VALUE+1
0397  20FB- 4C E2 20           JMP EXP1
0398  20FE- C9 2D     MINUS   CMP =$2D        IF -
0399  2100- D0 12              BNE EXP2
0400  2102- E8                 INX
0401  2103- 20 17 21           JSR FUNC        GET NEXT FUNCTION
0402  2106- 68                 PLA             AND SUBTRACT FROM SAVED
0403  2107- 38                 SEC
0404  2108- E5 5C              SBC VALUE
0405  210A- 85 5C              STA VALUE
0406  210C- 68                 PLA
0407  210D- E5 5D              SBC VALUE+1
0408  210F- 85 5D              STA VALUE+1
0409  2111- 4C E2 20           JMP EXP1
0410  2114- 68         EXP2    PLA             GET SAVED VALUE BACK
0411  2115- 68                 PLA
0412  2116- 60                 RTS
0413                   *
0414                   *
0415                   * SUBROUTINE FUNCTION
0416                   *********************
0417                   * CALLED: ARG
0418                   *

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 25/10/23   R65 ASSEMBLER  PAGE 10

0419  2117- B5 00      FUNC    LDA INBUFF,X
0420  2119- C9 3C              CMP =$3C        IF < (LOW BYTE)
0421  211B- D0 09              BNE *+11
0422  211D- E8                 INX
0423  211E- 20 33 21           JSR ARG         GET ARGUMENT
0424  2121- A9 00      FUNC1   LDA =0          AND SET HIGH BYTE TO 0
0425  2123- 85 5D              STA VALUE+1
0426  2125- 60                 RTS
0427                   *
0428  2126- C9 3E              CMP =$3E        IF > (HIGH BYTE)
0429  2128- D0 09              BNE ARG
0430  212A- E8                 INX
0431  212B- 20 33 21           JSR ARG         GET ARGUMENT
0432  212E- 85 5C              STA VALUE       STORE HIGH BYTE IN
0433  2130- 4C 21 21           JMP FUNC1       LOW BYTE AND CLEAR HIGH
0434                   *
0435                   *
0436                   * SUBROUTINE ARGUMENT
0437                   *********************
0438                   * CALLED: ERROR,PACKTS,TSTBIN,DIGTST,RDLAB,
0439                   * SRLAB,STLABN,SETREF
0440                   *
0441  2133- B5 00      ARG     LDA INBUFF,X
0442  2135- C9 28              CMP =$28        IF (
0443  2137- D0 13              BNE ARG05
0444  2139- E8                 INX
0445  213A- 20 DF 20           JSR EXPRES+4    GET EXPRESSION
0446  213D- B5 00              LDA INBUFF,X    MUST BE )
0447  213F- C9 29              CMP =$29
0448  2141- F0 05              BEQ *+7
0449  2143- A9 31              LDA =$31
0450  2145- 20 38 29           JSR ERROR
0451  2148- E8                 INX
0452  2149- A5 5D              LDA VALUE+1
0453  214B- 60                 RTS
0454                   *
0455  214C- C9 27      ARG05   CMP =$27        IF '
0456  214E- D0 12              BNE ARG10
0457  2150- E8                 INX
0458  2151- B5 00              LDA INBUFF,X    GET CHAR
0459  2153- 85 5C              STA VALUE
0460  2155- E8                 INX
0461  2156- B5 00              LDA INBUFF,X    IGNORE SECOND '
0462  2158- C9 27              CMP =$27
0463  215A- D0 01              BNE *+3
0464  215C- E8                 INX
0465  215D- A9 00              LDA =0
0466  215F- 85 5D              STA VALUE+1
0467  2161- 60                 RTS
0468                   *

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 25/10/23   R65 ASSEMBLER  PAGE 11

0469  2162- C9 24      ARG10   CMP =$24        IF $ (HEX)
0470  2164- D0 24              BNE ARG20
0471  2166- E8                 INX
0472  2167- A9 00              LDA =0
0473  2169- 85 F8              STA INL
0474  216B- 85 F9              STA INL+1
0475  216D- B5 00              LDA INBUFF,X
0476  216F- 20 1B F9           JSR PACKTS+2
0477  2172- F0 05              BEQ *+7
0478  2174- A9 33              LDA =$33
0479  2176- 20 38 29           JSR ERROR
0480  2179- E8                 INX
0481  217A- B5 00              LDA INBUFF,X
0482  217C- 20 1B F9           JSR PACKTS+2
0483  217F- F0 F8              BEQ *-6
0484  2181- A5 F8              LDA INL
0485  2183- 85 5C              STA VALUE
0486  2185- A5 F9              LDA INL+1
0487  2187- 85 5D              STA VALUE+1
0488  2189- 60                 RTS
0489                   *
0490  218A- C9 23      ARG20   CMP =$23        IF # (BINARY)
0491  218C- D0 1A              BNE ARG30
0492  218E- E8                 INX             READ BINARY NUMBER
0493  218F- A9 00              LDA =0
0494  2191- 85 5C              STA VALUE
0495  2193- 85 5D              STA VALUE+1
0496  2195- 20 2A 22           JSR TSTBIN
0497  2198- F0 05              BEQ *+7
0498  219A- A9 35              LDA =$35
0499  219C- 20 38 29           JSR ERROR
0500  219F- E8                 INX
0501  21A0- 20 2A 22           JSR TSTBIN
0502  21A3- F0 FA              BEQ *-4
0503  21A5- A5 5D              LDA VALUE+1
0504  21A7- 60                 RTS
0505                   *
0506  21A8- 20 3D 22   ARG30   JSR DIGTST      IF DECIMAL NUMBER
0507  21AB- B0 12              BCS ARG40
0508  21AD- A9 00              LDA =0          READ DECIMAL NUMBER
0509  21AF- 85 5C              STA VALUE
0510  21B1- 85 5D              STA VALUE+1
0511  21B3- 20 3D 22           JSR DIGTST
0512  21B6- E8                 INX
0513  21B7- 20 3D 22           JSR DIGTST
0514  21BA- 90 FA              BCC *-4
0515  21BC- A5 5D              LDA VALUE+1
0516  21BE- 60                 RTS
0517                   *
0518  21BF- C9 2A      ARG40   CMP =$2A        IF *

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 25/10/23   R65 ASSEMBLER  PAGE 12

0519  21C1- D0 0A              BNE ARG50
0520  21C3- E8                 INX             GET PROGRAM COUNTER
0521  21C4- A5 9E              LDA PCOLD
0522  21C6- 85 5C              STA VALUE
0523  21C8- A5 9F              LDA PCOLD+1
0524  21CA- 85 5D              STA VALUE+1
0525  21CC- 60                 RTS
0526                   *
0527  21CD- 20 8C 20   ARG50   JSR RDLAB       MUST BE LABEL
0528  21D0- 20 1C 20           JSR SRLAB
0529  21D3- 90 3A              BCC ARG52       BRANCH IF UNKNOWN
0530  21D5- 20 D1 2D           JSR SETREF      INSERT INTO REF TABLE
0531  21D8- 20 79 22           JSR DEFIN       IF DEFINED
0532  21DB- F0 18              BEQ ARG51
0533  21DD- A5 A9              LDA PASSFL
0534  21DF- F0 08              BEQ *+10
0535  21E1- A0 07              LDY =7
0536  21E3- B1 97              LDA (LABPNT),Y  GET RFLAG
0537  21E5- 30 02              BMI *+4
0538  21E7- E6 39              INC RESOLV
0539  21E9- A0 05              LDY =5
0540  21EB- B1 97              LDA (LABPNT),Y  GET VALUE
0541  21ED- 85 5C              STA VALUE
0542  21EF- C8                 INY
0543  21F0- B1 97              LDA (LABPNT),Y
0544  21F2- 85 5D              STA VALUE+1
0545  21F4- 60                 RTS
0546  21F5- E6 39      ARG51   INC RESOLV      COUNT UNRESOLVED REF
0547  21F7- A5 97              LDA LABPNT
0548  21F9- 85 3A              STA RESOLV+1
0549  21FB- A5 98              LDA LABPNT+1
0550  21FD- 85 3B              STA RESOLV+2    SAVE LABEL NUMBER
0551  21FF- A5 A9             LDA PASSFL
0552  2201- F0 05              BEQ *+7
0553  2203- A9 36              LDA =$36
0554  2205- 20 38 29           JSR ERROR
0555  2208- A9 00              LDA =0
0556  220A- 85 5C              STA VALUE       RETURN VALUE = 0
0557  220C- 85 5D              STA VALUE+1
0558  220E- 60                 RTS
0559  220F- 20 4F 20   ARG52   JSR STLABN      STORE LABEL NAME
0560  2212- A5 A9              LDA PASSFL
0561  2214- F0 05              BEQ *+7
0562  2216- A9 36              LDA =$36
0563  2218- 20 38 29           JSR ERROR
0564  221B- A9 FF              LDA =$FF        SET TO UNRESOLVED
0565  221D- A0 05              LDY =5
0566  221F- 91 97              STA (LABPNT),Y
0567  2221- C8                 INY
0568  2222- 91 97              STA (LABPNT),Y

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 25/10/23   R65 ASSEMBLER  PAGE 13

0569  2224- 20 D1 2D           JSR SETREF
0570  2227- 4C F5 21           JMP ARG51
0571                   *
0572                   *
0573                   * SUBROUTINE TSTBIN: GET AND TEST BINARY NUMBER
0574                   ***********************************************
0575                   *
0576  222A- B5 00      TSTBIN  LDA INBUFF,X
0577  222C- C9 30              CMP =$30
0578  222E- 18                 CLC
0579  222F- F0 05              BEQ *+7
0580  2231- C9 31              CMP =$31
0581  2233- D0 07              BNE *+9
0582  2235- 38                 SEC
0583  2236- 26 5C              ROL VALUE
0584  2238- 26 5D              ROL VALUE+1
0585  223A- A9 00              LDA =0          SET ZERO FLAG
0586  223C- 60                 RTS
0587                   *
0588                   *
0589                   * SUBROUTINE DIGTST: TEST AND GET DECIMAL
0590                   *****************************************
0591                   *
0592  223D- B5 00      DIGTST  LDA INBUFF,X
0593  223F- C9 30              CMP =$30
0594  2241- 90 04              BCC *+6
0595  2243- C9 3A              CMP =$3A
0596  2245- 90 02              BCC *+4
0597  2247- 38                 SEC             C=1 >> NOT DECIMAL
0598  2248- 60                 RTS
0599                   *
0600  2249- 06 5C              ASL VALUE       MULTIPLY VALUE BY 10
0601  224B- 26 5D              ROL VALUE+1
0602  224D- A5 5C              LDA VALUE       SAVE 2*VALUE
0603  224F- 85 F8              STA INL
0604  2251- A5 5D              LDA VALUE+1
0605  2253- 85 F9              STA INL+1
0606  2255- 06 5C              ASL VALUE
0607  2257- 26 5D              ROL VALUE+1
0608  2259- 06 5C              ASL VALUE
0609  225B- 26 5D              ROL VALUE+1     8*VALUE
0610  225D- A5 5C              LDA VALUE
0611  225F- 18                 CLC
0612  2260- 65 F8              ADC INL
0613  2262- 85 5C              STA VALUE
0614  2264- A5 5D              LDA VALUE+1
0615  2266- 65 F9              ADC INL+1
0616  2268- 85 5D              STA VALUE+1     10*VALUE
0617  226A- B5 00              LDA INBUFF,X
0618  226C- 29 0F              AND =$0F        CONVERT TO BCD

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 25/10/23   R65 ASSEMBLER  PAGE 14

0619  226E- 18                 CLC
0620  226F- 65 5C              ADC VALUE       ADD TO 10*VALUE
0621  2271- 85 5C              STA VALUE
0622  2273- 90 02              BCC *+4
0623  2275- E6 5D              INC VALUE+1
0624  2277- 18                 CLC             C=0 >> DECIMAL
0625  2278- 60                 RTS
0626                   *
0627                   *
0628                   * SUBROUTINE DEFIN
0629                   ******************
0630                   * RETURN Z=1 IF LABEL UNDEFINED
0631                   * INPUT: LABEL IN LABPNT
0632                   *
0633  2279- A0 05      DEFIN   LDY =5
0634  227B- B1 97              LDA (LABPNT),Y
0635  227D- C8                 INY
0636  227E- 31 97              AND (LABPNT),Y
0637  2280- C9 FF              CMP =$FF
0638  2282- 60                 RTS
0639                   *
0640                   *
0641                   * SUBROUTINE RDOPC: READ OPCODE FROM INBUFF
0642                   *******************************************
0643                   * PACK IN OPCODE WITH SAME FORMAT AS DISASSEM-
0644                   * BLER (5BIT/CHAR, OFFSET=$3F, LEFT SHIFTED 1)
0645                   * USED: A,X,Y,TEMP1; INPUT: X; OUTPUT; X,
0646                   * OPCODE; CALLED: ERROR
0647                   *
0648  2283- A9 03      RDOPC   LDA =3
0649  2285- 85 37              STA TEMP1       CHAR COUNTER
0650  2287- B5 00      RDOPC1  LDA INBUFF,X    GET A CHAR
0651  2289- C9 41              CMP =$41        TEST FOR LETTER
0652  228B- 90 04              BCC ERR7
0653  228D- C9 5B              CMP =$5B
0654  228F- 90 0B              BCC *+13
0655  2291- A0 00      ERR7    LDY =0
0656  2293- 84 5E              STY OPCODE
0657  2295- 84 5F              STY OPCODE+1
0658  2297- A9 37              LDA =$37
0659  2299- 4C 38 29           JMP ERROR
0660                   *
0661  229C- E8                 INX
0662  229D- 38                 SEC
0663  229E- E9 3F              SBC =$3F        SUBTRACT OFFSET
0664  22A0- 0A                 ASL A
0665  22A1- 0A                 ASL A
0666  22A2- 0A                 ASL A
0667  22A3- A0 05              LDY =5          BIT COUNTER
0668  22A5- 0A         RDOPC2  ASL A

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 25/10/23   R65 ASSEMBLER  PAGE 15

0669  22A6- 26 5F              ROL OPCODE+1
0670  22A8- 26 5E              ROL OPCODE
0671  22AA- 88                 DEY
0672  22AB- D0 F8              BNE RDOPC2
0673  22AD- C6 37              DEC TEMP1       NEXT CHAR
0674  22AF- D0 D6              BNE RDOPC1
0675  22B1- 06 5F              ASL OPCODE+1
0676  22B3- 26 5E              ROL OPCODE
0677  22B5- B5 00              LDA INBUFF,X    TEST NEXT CHAR
0678  22B7- E8                 INX
0679  22B8- C9 20              CMP =$20        MUST BE BLANK
0680  22BA- F0 03              BEQ *+5
0681  22BC- 20 97 22           JSR ERR7+6
0682  22BF- 60                 RTS
0683                   *
0684                   *
0685                   * SUBROUTINE SROPC: SEARCH OPCODE IN TABLE
0686                   ******************************************
0687                   * USE OPCODE AND ADDRESSING MODE FOR TEST
0688                   *
0689  22C0- A2 41      SROPC   LDX =$41        POINTER TO MNEMONIC TB
0690  22C2- CA                 DEX
0691  22C3- D0 0C              BNE *+14
0692  22C5- A9 38              LDA =$38
0693  22C7- 20 38 29           JSR ERROR
0694  22CA- A9 00              LDA =0
0695  22CC- 85 3C              STA OBJECT
0696  22CE- 4C FA 23           JMP ERR10+5     ASSUME ABS AND OPCODE=0
0697                   *                       IF NOT FOUND
0698  22D1- A5 5F              LDA OPCODE+1
0699  22D3- DD BF E7           CMP MNEMR-1,X
0700  22D6- D0 EA              BNE SROPC+2
0701  22D8- A5 5E              LDA OPCODE
0702  22DA- DD 7F E7           CMP MNEML-1,X
0703  22DD- D0 E3              BNE SROPC+2
0704  22DF- CA                 DEX
0705  22E0- 86 61              STX INDEX1
0706  22E2- 8A                 TXA
0707  22E3- 0A                 ASL A
0708  22E4- 0A                 ASL A
0709  22E5- 0A                 ASL A
0710  22E6- 85 62              STA INDEX2
0711  22E8- B0 0B              BCS SROP30
0712  22EA- 20 47 23   SROP20  JSR TSTADM      ITS XXXXX000 INST
0713  22ED- F0 05              BEQ *+7
0714  22EF- A9 39      ERR9    LDA =$39
0715  22F1- 20 38 29           JSR ERROR
0716  22F4- 60                 RTS
0717  22F5- 06 62      SROP30  ASL INDEX2
0718  22F7- B0 22              BCS SROP50

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 25/10/23   R65 ASSEMBLER  PAGE 16

0719  22F9- 10 06              BPL SROP40
0720  22FB- A5 62              LDA INDEX2      ITS 1XXX1010 INST
0721  22FD- 09 8A              ORA =$8A        COMPUTE OPCODE
0722  22FF- D0 E9             BNE SROP20
0723                   *
0724  2301- 06 62      SROP40  ASL INDEX2      ITS XXXYY100 INST
0725  2303- A0 03              LDY =3
0726  2305- 98                 TYA
0727  2306- 38                 SEC
0728  2307- 2A                 ROL A
0729  2308- 0A                 ASL A
0730  2309- 0A                 ASL A
0731  230A- 05 62              ORA INDEX2
0732  230C- 20 47 23           JSR TSTADM
0733  230F- D0 01              BNE *+3
0734  2311- 60                 RTS             RETURN, IF FOUND
0735  2312- 88                 DEY             TRY AGAIN
0736  2313- 10 F0              BPL SROP40+4
0737  2315- A6 61              LDX INDEX1      IF NOT FOUND, SEARCH
0738  2317- E8                 INX             CODE AGAIN (DOUBLE
0739  2318- 4C C2 22           JMP SROPC+2     CODES IN TABLE!)
0740                   *
0741  231B- 06 62      SROP50  ASL INDEX2
0742  231D- B0 14              BCS SROP60      IF XXXYYY10 INST
0743  231F- A0 07              LDY =7
0744  2321- 98                 TYA
0745  2322- 38                 SEC
0746  2323- 2A                 ROL A
0747  2324- 0A                 ASL A
0748  2325- 05 62              ORA INDEX2
0749  2327- 20 47 23           JSR TSTADM      TEST ADDRESSING
0750  232A- D0 01              BNE *+3
0751  232C- 60                 RTS             RETURN, IF FOUND
0752  232D- 88                 DEY             TRY NEXT Y
0753  232E- 10 F1              BPL SROP50+6
0754  2330- 4C EF 22           JMP ERR9
0755                   *
0756  2333- A0 07      SROP60  LDY =7
0757  2335- 98                 TYA
0758  2336- 0A                 ASL A
0759  2337- 38                 SEC
0760  2338- 2A                 ROL A
0761  2339- 05 62              ORA INDEX2
0762  233B- 20 47 23           JSR TSTADM
0763  233E- D0 01              BNE *+3
0764  2340- 60                 RTS             RETURN, IF FOUND
0765  2341- 88                 DEY
0766  2342- 10 F1              BPL SROP60+2
0767  2344- 4C EF 22           JMP ERR9
0768                   *

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 25/10/23   R65 ASSEMBLER  PAGE 17

0769                   *
0770                   * SUBROUTINE TSTADM: TEST ADDRESSING MODE
0771                   *****************************************
0772                   * ADDRESSING MODE CAN BE CHANGED IF NEEDED
0773                   *
0774  2347- 85 3C      TSTADM  STA OBJECT      SAVE OPCODE
0775  2349- 4A                 LSR A           COMPUTE ADDRESSING MODE
0776  234A- 90 05              BCC *+7         FOR THIS CODE
0777  234C- 4A                 LSR A
0778  234D- 29 07              AND =7
0779  234F- 09 80              ORA =$80
0780  2351- 4A                 LSR A
0781  2352- AA                 TAX
0782  2353- BD 22 E7           LDA DISMOD,X    LOAD MODE FROM TABLE
0783  2356- B0 04              BCS *+6
0784  2358- 4A                 LSR A
0785  2359- 4A                 LSR A
0786  235A- 4A                 LSR A
0787  235B- 4A                 LSR A
0788  235C- 29 0F              AND =$0F        COMPUTE MODE IN A
0789  235E- AA                 TAX             AND SAVE IN X
0790  235F- C9 0D              CMP =$0D                IF RELATIVE
0791  2361- D0 0D              BNE TSTAD1
0792  2363- A5 60              LDA ADMODE      CONVERT IT
0793  2365- C9 02              CMP =2          CAN BE ZERO PAGE
0794  2367- F0 04              BEQ *+6
0795  2369- C9 03              CMP =3          CAN BE ABSOLUTE
0796  236B- D0 03              BNE *+5
0797  236D- 86 60              STX ADMODE
0798  236F- 60                 RTS
0799                   *
0800  2370- A5 60      TSTAD1  LDA ADMODE
0801  2372- C9 02              CMP =2          ZERO PAGE
0802  2374- D0 11              BNE TSTAD3
0803  2376- A5 3C              LDA OBJECT
0804  2378- C9 4C              CMP =$4C        IF JMP
0805  237A- F0 04              BEQ *+6
0806  237C- C9 20              CMP =$20        OR JSR
0807  237E- D0 04              BNE TSTAD2
0808  2380- A9 03              LDA =3          SET TO ABSOLUTE
0809  2382- 85 60              STA ADMODE
0810  2384- E4 60      TSTAD2  CPX ADMODE      TEST NOW
0811  2386- 60                 RTS
0812                   *
0813  2387- C9 0C      TSTAD3  CMP =$0C        ZERO PAGE,Y
0814  2389- D0 F9              BNE TSTAD2
0815  238B- A5 3C              LDA OBJECT
0816  238D- 29 0F              AND =$0F
0817  238F- C9 09              CMP =$09
0818  2391- F0 F1              BEQ TSTAD2

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 25/10/23   R65 ASSEMBLER  PAGE 18

0819  2393- A9 0A              LDA =$A         CONVERT TO ABS,Y
0820  2395- 4C 82 23           JMP TSTAD2-2    IF CODE =X9
0821                   *
0822                   *
0823                   * SUBROUTINE OPER: INTERPRET OPERAND
0824                   ************************************
0825                   * USED: A,X,Y,TEMP1; INPUT:X; OUTPUT:RESOLV
0826                   * VALUE,D(ADDRESSING MODE); CALLED: EXPRES,
0827                   * ERROR,ZPAGE
0828                   *
0829  2398- B5 00      OPER    LDA INBUFF,X
0830  239A- C9 3D              CMP =$3D        IF =
0831  239C- D0 07              BNE *+9
0832  239E- E8                 INX             IMMEDIATE (1)
0833  239F- 20 DB 20           JSR EXPRES
0834  23A2- A9 01              LDA =1
0835  23A4- 60                 RTS
0836                   *
0837  23A5- C9 20              CMP =$20        IF BLANK
0838  23A7- D0 04              BNE *+6
0839  23A9- E8                 INX
0840  23AA- A9 04              LDA =4          IMPLIED (4)
0841  23AC- 60                 RTS
0842                   *
0843  23AD- C9 41              CMP =$41        IF A
0844  23AF- D0 0D              BNE OPER15
0845  23B1- E8                 INX
0846  23B2- B5 00              LDA INBUFF,X    AND BLANK
0847  23B4- C9 20              CMP =$20
0848  23B6- D0 03              BNE *+5
0849  23B8- A9 05              LDA =5          ACCUMULATOR (5)
0850  23BA- 60                 RTS
0851                   *
0852                   *
0853  23BB- CA                 DEX
0854  23BC- B5 00              LDA INBUFF,X
0855                   *
0856  23BE- C9 28      OPER15  CMP =$28        IF (
0857  23C0- D0 57              BNE OPER20
0858  23C2- E8                 INX
0859  23C3- 20 DB 20           JSR EXPRES      GET EXPRESSION
0860  23C6- B5 00              LDA INBUFF,X
0861  23C8- C9 2C              CMP =$2C        IF NOW ,
0862  23CA- D0 1A              BNE OPER16
0863  23CC- E8                 INX
0864  23CD- B5 00              LDA INBUFF,X
0865  23CF- C9 58              CMP =$58        MUST BE X
0866  23D1- D0 22              BNE ERR10
0867  23D3- E8                 INX
0868  23D4- B5 00              LDA INBUFF,X

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 25/10/23   R65 ASSEMBLER  PAGE 19

0869  23D6- C9 29              CMP =$29        AND )
0870  23D8- D0 1B              BNE ERR10
0871  23DA- 20 53 24           JSR ZPAGE       MUST BE ZERO PAGE
0872  23DD- F0 03              BEQ *+5
0873  23DF- 20 FD 23           JSR ERR11
0874  23E2- E8                 INX
0875  23E3- A9 06              LDA =6          (X.PAGE,X) (6)
0876  23E5- 60                 RTS
0877                   *
0878  23E6- C9 29      OPER16  CMP =$29        MUST BE )
0879  23E8- D0 0B              BNE ERR10
0880  23EA- E8                 INX
0881  23EB- B5 00              LDA INBUFF,X
0882  23ED- C9 20              CMP =$20        IF NOW BLANK
0883  23EF- D0 11              BNE OPER17
0884  23F1- E8                 INX
0885  23F2- A9 0B              LDA =$0B        (ABSOLUTE) (11)
0886  23F4- 60                 RTS
0887                   *
0888  23F5- A9 40      ERR10   LDA =$40        SYNTAX ERROR IN OPER
0889  23F7- 20 38 29           JSR ERROR
0890  23FA- A9 03              LDA =3          ASSUME ABSOLUTE
0891  23FC- 60                 RTS
0892                   *
0893  23FD- A9 41      ERR11   LDA =$41        MUST BE ZERO PAGE IND
0894  23FF- 4C 38 29          JMP ERROR
0895                   *
0896  2402- C9 2C      OPER17  CMP =$2C        MUST BE ,
0897  2404- D0 EF              BNE ERR10
0898  2406- E8                 INX
0899  2407- B5 00              LDA INBUFF,X
0900  2409- C9 59              CMP =$59        MUST BE Y
0901  240B- D0 E8              BNE ERR10
0902  240D- E8                 INX
0903  240E- 20 53 24           JSR ZPAGE
0904  2411- F0 03              BEQ *+5         MSU BE ZERO PAGE
0905  2413- 20 FD 23           JSR ERR11
0906  2416- A9 07              LDA =7          (ZERO PAGE),Y (7)
0907  2418- 60                 RTS
0908                   *
0909  2419- 20 DB 20   OPER20  JSR EXPRES      MUST BE EXPRESSION
0910  241C- B5 00              LDA INBUFF,X
0911  241E- C9 20              CMP =$20        IF NOW BLANK
0912  2420- D0 0B              BNE OPER25
0913  2422- 20 53 24           JSR ZPAGE
0914  2425- D0 03              BNE *+5
0915  2427- A9 02              LDA =2          ZERO PAGE (2)
0916  2429- 60                 RTS
0917                   *
0918  242A- A9 03              LDA =3          ABSOLUTE

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 25/10/23   R65 ASSEMBLER  PAGE 20

0919  242C- 60                 RTS
0920                   *
0921  242D- C9 2C      OPER25  CMP =$2C        MUST BE ,
0922  242F- D0 C4              BNE ERR10
0923  2431- E8                 INX
0924  2432- B5 00              LDA INBUFF,X
0925  2434- E8                 INX
0926  2435- C9 58              CMP =$58        IF NOW X
0927  2437- D0 0B              BNE OPER30
0928  2439- 20 53 24           JSR ZPAGE
0929  243C- D0 03              BNE *+5
0930  243E- A9 08              LDA =8          ZERO PAGE,X (8)
0931  2440- 60                 RTS
0932                   *
0933  2441- A9 09              LDA =9          ZERO PAGE,Y (12)
0934  2443- 60                 RTS
0935                   *
0936  2444- C9 59      OPER30  CMP =$59        MUST BE Y
0937  2446- D0 AD              BNE ERR10
0938  2448- 20 53 24           JSR ZPAGE
0939  244B- D0 03              BNE *+5
0940  244D- A9 0C              LDA =$0C        ZERO PAGE,Y (12)
0941  244F- 60                 RTS
0942                   *
0943  2450- A9 0A              LDA =$0A        ABSOLUTE,Y (10
0944  2452- 60                 RTS
0945                   *
0946                   *
0947                   * SUBROUTINE ZPAGE
0948                   ******************
0949                   * TEST FOR ZERO PAGE ADDRESSING
0950                   * RETURN Z=1 IF ZERO PAGE
0951                   *
0952  2453- A5 39      ZPAGE   LDA RESOLV
0953  2455- D0 02              BNE *+4         ASSUME ABS IF UNDEFINED
0954  2457- A5 5D              LDA VALUE+1
0955  2459- 60                 RTS
0956                   *
0957                   *
0958                   * SUBROUTINE DEFLAB: DEFINE LABEL
0959                   *********************************
0960                   * USED: A,Y; SAVED:X; INPUT: LABEL, VALUE,
0961                   * LABPNT; CALLED SRLAB,STLAB,ERROR,DEFIN
0962                   *
0963  245A- 20 1C 20   DEFLAB  JSR SRLAB       IF LABEL IN TAB;E
0964  245D- B0 06              BCS *+8           DO NOT STORE
0965  245F- 20 4F 20           JSR STLABN      ELSE STORE
0966  2462- 4C 91 24           JMP DEFL1
0967                   *
0968  2465- A5 A9              LDA PASSFL

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 25/10/23   R65 ASSEMBLER  PAGE 21

0969  2467- D0 03              BNE *+5
0970  2469- 20 32 2D           JSR RESFBR      RESOLVE BRANCHES
0971  246C- 20 79 22           JSR DEFIN
0972  246F- F0 20              BEQ DEFL1       IF DEFINED
0973  2471- A5 A9              LDA PASSFL        TEST PASS FLAG
0974  2473- D0 05              BNE *+7
0975  2475- A9 45              LDA =$45
0976  2477- 4C 38 29           JMP ERROR
0977                   *
0978  247A- A0 05              LDY =5
0979  247C- B1 97              LDA (LABPNT),Y  COMPARE IN PASS 2
0980  247E- C5 5C              CMP VALUE
0981  2480- D0 07              BNE *+9
0982  2482- C8                 INY
0983  2483- B1 97              LDA (LABPNT),Y
0984  2485- C5 5D              CMP VALUE+1
0985  2487- F0 05              BEQ *+7
0986  2489- A9 46              LDA =$46
0987  248B- 20 38 29           JSR ERROR
0988  248E- 4C 9C 24           JMP DEFL2
0989                   *
0990  2491- A5 5C      DEFL1   LDA VALUE       STORE ADDRESS
0991  2493- A0 05              LDY =5
0992  2495- 91 97              STA (LABPNT),Y
0993  2497- A5 5D              LDA VALUE+1
0994  2499- C8                 INY
0995  249A- 91 97              STA (LABPNT),Y
0996                   *
0997  249C- A5 A9      DEFL2   LDA PASSFL
0998  249E- F0 08              BEQ *+10
0999  24A0- A0 07              LDY =7
1000  24A2- B1 97              LDA (LABPNT),Y
1001  24A4- 09 80              ORA =$80        SET RFLAG
1002  24A6- 91 97              STA (LABPNT),Y
1003  24A8- 60                 RTS
1004                   *
1005                   *
1006                   * SUBROUTINE INTLIN:INTERPRET ONE LINE
1007                   **************************************
1008                   *OUTPUT: OBJECT,NUMBYT
1009                   *
1010  24A9- A2 00      INTLIN  LDX =0          CLEAR BUFFER POINTER
1011  24AB- 86 38              STX NUMBYT      CLEAR NUMBER OF BYTES
1012  24AD- 86 63              STX DEFLB       CLEAR LABEL DEF FLAG
1013  24AF- B5 00              LDA INBUFF,X    GET FIRST CHAR
1014  24B1- C9 2A              CMP =$2A        IF *
1015  24B3- D0 01              BNE *+3
1016  24B5- 60                 RTS             RETURN (COMMENT LINE)
1017                   *
1018  24B6- C9 20              CMP =$20        NOT A BLANK

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 25/10/23   R65 ASSEMBLER  PAGE 22

1019  24B8- F0 0F              BEQ INTL2
1020  24BA- 20 8C 20           JSR RDLAB       READ LABEL, NO STORING
1021  24BD- A9 FF              LDA =$FF        AT THIS MOMENT, BUT SET
1022  24BF- 85 63              STA DEFLB       LABEL DEFINITION FLAG
1023  24C1- A5 9E              LDA PCOLD       GET ADDRESS FOR LABEL
1024  24C3- 85 5C              STA VALUE
1025  24C5- A5 9F              LDA PCOLD+1
1026  24C7- 85 5D              STA VALUE+1
1027                   *
1028  24C9- 20 D2 20   INTL2   JSR RDBL        READ BLANKS
1029  24CC- 20 83 22           JSR RDOPC       READ NOW OPCODE
1030                   *
1031  24CF- A0 09              LDY =9          SEARCH IN PSEUDO TABLE
1032  24D1- A5 5E              LDA OPCODE
1033  24D3- D9 50 26           CMP PSEUDO,Y
1034  24D6- F0 05              BEQ *+7
1035  24D8- 88                 DEY
1036  24D9- 10 F8              BPL *-6
1037  24DB- 30 07              BMI *+9         BRANCH IF NOT FOUND
1038  24DD- A5 5F              LDA OPCODE+1
1039  24DF- D9 5A 26           CMP PSEUDO+10,Y
1040  24E2- D0 F4              BNE *-10
1041                   *
1042  24E4- 98                 TYA
1043  24E5- 48                 PHA
1044  24E6- D0 20              BNE INTL10      FOUND. IF EQU (0)
1045  24E8- A5 63              LDA DEFLB         TEST DEF FLAG
1046  24EA- D0 05              BNE *+7
1047  24EC- A9 47              LDA =$47        LABEL MISSING IN EQU
1048  24EE- 4C 38 29           JMP ERROR
1049                   *
1050  24F1- A0 04              LDY =4          SAVE LABEL
1051  24F3- B9 30 00   INTL5   LDA LABEL,Y
1052  24F6- 48                 PHA
1053  24F7- 88                 DEY
1054  24F8- 10 F9              BPL INTL5
1055                   *
1056  24FA- 20 64 26           JSR EXPDEF      GET VALUE FOR EQU
1057                   *
1058  24FD- A0 00              LDY =0
1059  24FF- 68        INTL6   PLA             GET BACK LABEL
1060  2500- 99 30 00           STA LABEL,Y
1061  2503- C8                 INY
1062  2504- C0 05              CPY =5
1063  2506- D0 F7              BNE INTL6
1064                   *
1065  2508- A5 63      INTL10  LDA DEFLB       IF LABEL DEFNITION
1066  250A- F0 03              BEQ *+5
1067  250C- 20 5A 24           JSR DEFLAB      DEFINE IT NOW
1068                   *

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 25/10/23   R65 ASSEMBLER  PAGE 23

1069  250F- 68                 PLA             GET AGAIN PSEUDO NUMBER
1070  2510- D0 01              BNE *+3
1071  2512- 60                 RTS             RETURN NOW FROM EQU
1072                   *
1073  2513- C9 01              CMP =1          IF ORG (1)
1074  2515- D0 0E              BNE INTL12
1075  2517- 20 64 26           JSR EXPDEF        GET NEW PC
1076  251A- A5 5C              LDA VALUE
1077  251C- 85 A0              STA PCNEW
1078  251E- A5 5D              LDA VALUE+1
1079  2520- 85 A1              STA PCNEW+1
1080  2522- 4C 62 28           JMP CLOSRC      CLOSE EXISTING OBJ. REC
1081                   *
1082  2525- C9 02      INTL12  CMP =2          IF BSS (2)
1083  2527- D0 13              BNE INTL13
1084  2529- 20 64 26           JSR EXPDEF        GET VALUE
1085  252C- 18                 CLC             ADD TO PCOLD
1086  252D- A5 9E              LDA PCOLD
1087  252F- 65 5C              ADC VALUE
1088  2531- 85 A0              STA PCNEW
1089  2533- A5 9F              LDA PCOLD+1
1090  2535- 65 5D              ADC VALUE+1
1091  2537- 85 A1              STA PCNEW+1
1092  2539- 4C 62 28           JMP CLOSRC      CLOSE EXISTING OBJ. REC
1093                   *
1094  253C- C9 03      INTL13  CMP =3          IF BYT (3)
1095  253E- D0 49              BNE INTL14
1096  2540- B5 00      BYT     LDA INBUFF,X    GET ONE BYTE
1097  2542- C9 27              CMP =$27        IF '
1098  2544- D0 29              BNE BYT3
1099  2546- E8                 INX             GET ASCII STRING
1100  2547- B5 00              LDA INBUFF,X
1101  2549- A4 38      BYT1    LDY NUMBYT
1102  254B- C0 20              CPY =$20
1103  254D- B0 35              BCS ERR18
1104  254F- 99 3C 00           STA OBJECT,Y    STORE
1105  2552- E6 38              INC NUMBYT
1106  2554- E8                 INX
1107  2555- E0 2E              CPX =$2E        TEST END OF INBUFF
1108  2557- B0 2B              BCS ERR18
1109  2559- B5 00              LDA INBUFF,X    TEST NEXT CHAR
1110  255B- C9 27              CMP =$27
1111  255D- D0 EA              BNE BYT1        CONTINUE STRING READ
1112  255F- E8                 INX
1113  2560- C6 38              DEC NUMBYT
1114  2562- B9 3C 00           LDA OBJECT,Y
1115  2565- 85 5C              STA VALUE
1116  2567- A9 00              LDA =0
1117  2569- 20 E2 20           JSR EXP1
1118  256C- 4C 72 25           JMP BYT2

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 25/10/23   R65 ASSEMBLER  PAGE 24

1119                   *
1120  256F- 20 DB 20   BYT3    JSR EXPRES
1121  2572- A5 5C      BYT2    LDA VALUE
1122  2574- A4 38              LDY NUMBYT
1123  2576- 99 3C 00           STA OBJECT,Y
1124  2579- E6 38              INC NUMBYT
1125  257B- B5 00              LDA INBUFF,X
1126  257D- E8                 INX
1127  257E- C9 2C              CMP =$2C
1128  2580- F0 BE              BEQ BYT
1129  2582- CA                 DEX
1130  2583- 60                 RTS
1131                   *
1132  2584- A9 48      ERR18   LDA =$48
1133  2586- 4C 38 29           JMP ERROR       RETURN AFTER ERROR
1134                   *
1135  2589- C9 04      INTL14  CMP =$04                IF WRD (4)
1136  258B- D0 1C              BNE INTL15
1137  258D- 20 DB 20   WRD     JSR EXPRES      GET WORD
1138  2590- A4 38              LDY NUMBYT
1139  2592- A5 5C              LDA VALUE
1140  2594- 99 3C 00           STA OBJECT,Y
1141  2597- C8                 INY
1142  2598- A5 5D              LDA VALUE+1
1143  259A- 99 3C 00           STA OBJECT,Y
1144  259D- C8                 INY
1145  259E- 84 38              STY NUMBYT
1146  25A0- B5 00              LDA INBUFF,X
1147  25A2- E8                 INX
1148  25A3- C9 2C              CMP =$2C        IF ,
1149  25A5- F0 E6              BEQ WRD         CONTINUE
1150  25A7- CA                 DEX
1151  25A8- 60                 RTS
1152                   *
1153  25A9- C9 05      INTL15  CMP =5          IF PAG (5)
1154  25AB- D0 07              BNE INTL16
1155  25AD- A5 AB      PAGE    LDA PAGELN      . SET BIT 7 (PAGE FLAG)
1156  25AF- 09 80              ORA =$80
1157  25B1- 85 AB              STA PAGELN
1158  25B3- 60                 RTS
1159                   *
1160  25B4- C9 06      INTL16  CMP =6          IF TIT (6)
1161  25B6- D0 0C              BNE INTL17
1162  25B8- A0 1F              LDY =$1F          LOAD 32 CHARS
1163  25BA- B5 00              LDA INBUFF,X
1164  25BC- 99 B2 00           STA TITLE,Y
1165  25BF- E8                 INX
1166  25C0- 88                 DEY
1167  25C1- 10 F7              BPL *-7
1168  25C3- 60                 RTS

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 25/10/23   R65 ASSEMBLER  PAGE 25

1169                   *
1170  25C4- C9 07      INTL17  CMP =7          IF END (7)
1171  25C6- D0 03              BNE *+5
1172  25C8- 4C CA 2B           JMP END         GO TO END
1173                   *
1174  25CB- C9 08      INTL18  CMP =$08        IF NPR (8)
1175  25CD- D0 05              BNE INTL19
1176  25CF- A9 00              LDA =0
1177  25D1- 85 AA              STA PRTFLG      INHIBIT PRINTING
1178  25D3- 60                 RTS
1179                   *
1180  25D4- C9 09      INTL19  CMP =$09        IF PRT (9)
1181  25D6- D0 09              BNE INTL20
1182  25D8- A5 A9              LDA PASSFL      DO NOTHIN IN FIRST PASS
1183  25DA- F0 04              BEQ *+6
1184  25DC- A9 80              LDA =$80        SET PRINTING FLAG
1185  25DE- 85 AA              STA PRTFLG
1186  25E0- 60                 RTS
1187                   *
1188  25E1- 20 98 23   INTL20  JSR OPER        MUST BE OPCODE
1189  25E4- 85 60              STA ADMODE      SAVE ADDRESSING MODE
1190  25E6- B5 00              LDA INBUFF,X
1191  25E8- C9 20              CMP =$20
1192  25EA- F0 05              BEQ *+7
1193  25EC- A9 51              LDA =$51
1194  25EE- 20 38 29           JSR ERROR
1195  25F1- A5 5C              LDA VALUE
1196  25F3- 85 3D              STA OBJECT+1
1197  25F5- A5 5D              LDA VALUE+1
1198  25F7- 85 3E              STA OBJECT+2
1199  25F9- 20 C0 22           JSR SROPC       SEARCH OPCODE
1200  25FC- A4 60              LDY ADMODE
1201  25FE- B9 66 E7          LDA MODE2,Y     COMPUTE NUMBYT
1202  2601- 29 03              AND =$03
1203  2603- AA                 TAX
1204  2604- E8                 INX
1205  2605- 86 38              STX NUMBYT
1206  2607- C0 0D              CPY =$0D        IF RELATIVE ADDRESSING
1207  2609- F0 01              BEQ *+3         GO TO COMPUTE OFFSET
1208  260B- 60                 RTS
1209                   *
1210  260C- A5 A9              LDA PASSFL
1211  260E- D0 2C              BNE BRAN2
1212  2610- A5 39              LDA RESOLV      IF OPERAND RESOLVED
1213  2612- F0 28              BEQ BRAN2
1214  2614- C9 02              CMP =2
1215  2616- 90 05              BCC *+7
1216  2618- A9 42              LDA =$42
1217  261A- 20 38 29           JSR ERROR       MORE THAN 1 UNRES LABEL
1218  261D- 20 0C 2D           JSR FORBR       INSERT FORWARD BRANCH

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 25/10/23   R65 ASSEMBLER  PAGE 26

1219  2620- A9 00              LDA =0
1220  2622- 85 3D              STA OBJECT+1
1221  2624- 60                 RTS
1222                   *
1223                   * SUBROUTINE TO COMPUTE RELATIVE ADDRESS
1224                   ****************************************
1225                   *
1226  2625- A5 3D      BRAN1   LDA OBJECT+1
1227  2627- 38                 SEC
1228  2628- E9 02              SBC =2
1229  262A- 48                 PHA
1230  262B- A5 3E              LDA OBJECT+2
1231  262D- E9 00              SBC =0
1232  262F- A8                 TAY
1233  2630- 68                 PLA
1234  2631- 38                 SEC
1235  2632- E5 9E              SBC PCOLD
1236  2634- 85 3D              STA OBJECT+1
1237  2636- 08                 PHP
1238  2637- 98                 TYA
1239  2638- E5 9F              SBC PCOLD+1
1240  263A- 28                 PLP
1241  263B- 60                 RTS
1242                   *
1243                   *
1244  263C- 20 25 26   BRAN2   JSR BRAN1
1245  263F- 30 0A              BMI BRAN3
1246  2641- C9 00              CMP =0
1247  2643- F0 05              BEQ *+7
1248  2645- A9 43              LDA =$43
1249  2647- 20 38 29           JSR ERROR
1250  264A- 60                 RTS
1251  264B- C9 FF      BRAN3   CMP =$FF
1252  264D- D0 F6              BNE *-8
1253  264F- 60                 RTS
1254                   *
1255                   *
1256                   * PSEUDO OPCODE TABLE
1257                   *
1258  2650- 34 84 1D   PSEUDO  BYT $34,$84,$1D,$1E,$C4,$88,$AA,$33
1258  2653- 1E C4 88 
1258  2656- AA 33 
1259  2658- 7C 8C              BYT $7C,$8C
1260  265A- AC D0 28           BYT $AC,$D0,$28,$AA,$CA,$90,$AA,$CA
1260  265D- AA CA 90 
1260  2660- AA CA 
1261  2662- 66 EA              BYT $66,$EA
1262                   *
1263                   *
1264                   * EXPDEF: GET A RESOLVED EXPRESSION

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 25/10/23   R65 ASSEMBLER  PAGE 27

1265                   ***********************************
1266                   *
1267  2664- 20 DB 20   EXPDEF  JSR EXPRES
1268  2667- A5 39              LDA RESOLV
1269  2669- F0 05              BEQ *+7
1270  266B- A9 49              LDA =$49
1271  266D- 20 38 29           JSR ERROR
1272  2670- 60                 RTS
1273                   *
1274                   *
1275                   * JSR PRINTLIN: PRINT A LINE
1276                   ****************************
1277                   * INPUT: OBJECT,NUMBYT,PCOLD,PCNEW,PAGELN
1278                   * PAGECN,LINCNT
1279                   *
1280  2671- A9 00      PRTLIN  LDA =0
1281  2673- 85 37              STA TEMP1       POINTER IN OBJ
1282  2675- F8                 SED
1283  2676- 18                 CLC             INCREMENT LINE COUNTER
1284  2677- A9 01              LDA =1
1285  2679- 65 A2              ADC LINCNT      DECIMAL INCREMENT
1286  267B- 85 A2              STA LINCNT
1287  267D- A5 A3              LDA LINCNT+1
1288  267F- 69 00              ADC =0
1289  2681- 85 A3              STA LINCNT+1
1290  2683- D8                 CLD
1291  2684- 24 AA      PRTL10  BIT PRTFLG
1292  2686- 10 28              BPL PRTL21-2
1293  2688- A5 A3              LDA LINCNT+1
1294  268A- A6 A2              LDX LINCNT
1295  268C- 20 30 E0           JSR PRTAX       PRINT LINE NUMBER
1296  268F- 20 27 E0           JSR PRTINF
1297  2692- 20 A0              BYT $20,$A0     PRINT 2 BLANKS
1298  2694- A5 A0              LDA PCNEW
1299  2696- C5 9E              CMP PCOLD
1300  2698- D0 06              BNE *+8
1301  269A- A5 A1              LDA PCNEW+1
1302  269C- C5 9F              CMP PCOLD+1
1303  269E- F0 0B              BEQ PRTL20
1304  26A0- A5 9F              LDA PCOLD+1
1305  26A2- A6 9E              LDX PCOLD
1306  26A4- 20 30 E0           JSR PRTAX       PRINT PROGRAM COUNTER
1307  26A7- 20 27 E0           JSR PRTINF
1308  26AA- AD                 BYT $AD         PRINT -
1309  26AB- A2 0B      PRTL20  LDX =$0B
1310  26AD- 20 05 27           JSR TAB
1311  26B0- A2 03              LDX =3          PRINT MAX 3 OBJ BYTES
1312  26B2- A4 37      PRTL21  LDY TEMP1
1313  26B4- B9 3C 00           LDA OBJECT,Y
1314  26B7- C4 38              CPY NUMBYT

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 25/10/23   R65 ASSEMBLER  PAGE 28

1315  26B9- F0 1A              BEQ PRTL25
1316  26BB- E6 37              INC TEMP1
1317  26BD- 24 AA              BIT PRTFLG
1318  26BF- 10 03              BPL *+5
1319  26C1- 20 2D E0           JSR PRTBYT
1320  26C4- E6 9E              INC PCOLD
1321  26C6- D0 02              BNE *+4
1322  26C8- E6 9F              INC PCOLD+1
1323  26CA- 24 AA              BIT PRTFLG
1324  26CC- 10 04              BPL *+6
1325  26CE- 20 27 E0           JSR PRTINF      PRINT BLANK
1326  26D1- A0                 BYT $A0
1327  26D2- CA                 DEX
1328  26D3- D0 DD              BNE PRTL21
1329  26D5- A4 37      PRTL25  LDY TEMP1
1330  26D7- C0 04              CPY =4
1331  26D9- B0 19              BCS PRTL30
1332  26DB- 24 AA              BIT PRTFLG
1333  26DD- 10 05              BPL *+7
1334  26DF- A2 16              LDX =$16
1335  26E1- 20 05 27           JSR TAB         TABULATE TO POS $16
1336  26E4- A2 00              LDX =0
1337  26E6- 24 AA      PRTL26  BIT PRTFLG
1338  26E8- 10 05              BPL *+7
1339  26EA- B5 00              LDA INBUFF,X
1340  26EC- 20 09 E0           JSR PRTCHR      PRINT TEXT
1341  26EF- E8                 INX
1342  26F0- E4 64              CPX INBFPN
1343  26F2- 90 F2              BCC PRTL26
1344  26F4- A5 38      PRTL30  LDA NUMBYT
1345  26F6- C5 37              CMP TEMP1
1346  26F8- F0 0A              BEQ *+12        RETURN
1347  26FA- 24 AA              BIT PRTFLG
1348  26FC- 10 03              BPL *+5
1349  26FE- 20 0F 27          JSR NEWLIN
1350  2701- 4C 84 26           JMP PRTL10
1351  2704- 60                 RTS
1352                   *
1353                   *
1354                   * SUBROUTINE TAB: TABULATOR (TO X)
1355                   **********************************
1356                   *
1357  2705- A9 20      TAB     LDA =$20
1358  2707- 20 09 E0           JSR PRTCHR
1359  270A- E4 EE              CPX CURPOS
1360  270C- B0 F9              BCS TAB+2
1361  270E- 60                 RTS
1362                   *
1363                   *
1364                   * SUBROUTINE NEWLIN: START NEW LINE

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 25/10/23   R65 ASSEMBLER  PAGE 29

1365                   ***********************************
1366                   *
1367  270F- 20 6E 27   NEWLIN  JSR CRLF
1368  2712- E6 AB              INC PAGELN
1369  2714- A5 AB              LDA PAGELN
1370  2716- 30 06              BMI NEWL06
1371  2718- CD 10 20           CMP TABLE       PRINTED LINES
1372  271B- B0 01              BCS NEWL06
1373  271D- 60                 RTS             RETURN IF NOT NEW PAGE
1374  271E- E6 AB      NEWL06  INC PAGELN
1375  2720- AD 80 17           LDA VFLAG       TEST AUTOPRINT FLAG
1376  2723- 29 08              AND =8
1377  2725- F0 06              BEQ *+8
1378  2727- AD 12 20           LDA TABLE+2     $D FOR IBM, $A FOR TTY
1379  272A- 20 0C E0           JSR VAUTOP      EXECUTE LFON HARD COPY
1380                   *
1381  272D- 20 6E 27   NEWL10  JSR CRLF
1382  2730- A9 00              LDA =0
1383  2732- 85 AB              STA PAGELN
1384  2734- F8                 SED
1385  2735- 38                 SEC
1386  2736- 65 A4              ADC PAGECN      INCREMENT PAGE NUMBER
1387  2738- 85 A4              STA PAGECN
1388  273A- D8                 CLD
1389  273B- A2 1F              LDX =$1F
1390  273D- B5 B2              LDA TITLE,X     PRINT TITLE
1391  273F- 20 09 E0           JSR PRTCHR
1392  2742- CA                 DEX
1393  2743- 10 F8              BPL *-6
1394  2745- A2 22              LDX =34
1395  2747- 20 05 27           JSR TAB
1396  274A- 20 0F F8           JSR PRTDAT
1397  274D- 20 27 E0           JSR PRTINF
1398  2750- 20 20 52           BYT '  R65 ASSEMBLER  PAGE',$A0
1398  2753- 36 35 20 
1398  2756- 41 53 53 
1398  2759- 45 4D 42 
1398  275C- 4C 45 52 
1398  275F- 20 20 50 
1398  2762- 41 47 45 
1398  2765- A0 
1399  2766- A5 A4              LDA PAGECN
1400  2768- 20 2D E0           JSR PRTBYT
1401  276B- 20 6E 27           JSR CRLF
1402  276E- 20 27 E0   CRLF    JSR PRTINF
1403  2771- 0D 8A              BYT $0D,$8A
1404                   *
1405  2773- 60         CRLF1   RTS
1406                   *
1407                   *

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 25/10/23   R65 ASSEMBLER  PAGE 30

1408                   *
1409                   * SUBROUTINE GET: GET A LINE FROM FILE
1410                   **************************************
1411                   *
1412  2774- A2 2F      GET     LDX =$2F        CLEAR INBUFF
1413  2776- A9 20              LDA =$20
1414  2778- 95 00              STA INBUFF,X
1415  277A- CA                 DEX
1416  277B- 10 FB              BPL GET+4
1417                   *
1418  277D- A2 00              LDX =0          POINTER IN INBUFF
1419  277F- 86 64      GET10   STX INBFPN
1420  2781- A6 9B              LDX INPFIL
1421  2783- A9 00              LDA =0
1422  2785- 85 DA              STA FILFLG
1423  2787- 20 18 F0           JSR READCH      GET ONE CHARACTER
1424  278A- F0 03              BEQ *+5
1425  278C- 4C 0B 28           JMP GETERR
1426  278F- C9 1F              CMP =$1F        EOF
1427  2791- F0 0D              BEQ GET20
1428  2793- C9 0D              CMP =$0D
1429  2795- D0 01              BNE *+3
1430  2797- 60                 RTS
1431  2798- A6 64              LDX INBFPN
1432  279A- 20 12 28           JSR STINB
1433  279D- 4C 7F 27           JMP GET10
1434                   *
1435  27A0- A6 9B      GET20   LDX INPFIL
1436  27A2- 20 12 F0           JSR CLOSE
1437  27A5- E6 A7              INC FILCNT
1438  27A7- A5 A9      GET25   LDA PASSFL
1439  27A9- F0 06              BEQ GET27
1440  27AB- 20 AA 29           JSR BACKNM      GET SAVED FILE NAME
1441  27AE- 4C F5 27           JMP GET28
1442                   *
1443  27B1- 20 27 E0   GET27   JSR PRTINF
1444  27B4- 0D 0A 4E           BYT $D,$A,'NEXT FILE? '+128
1444  27B7- 45 58 54 
1444  27BA- 20 46 49 
1444  27BD- 4C 45 3F 
1444  27C0- A0 
1445                   *
1446  27C1- A5 EE              LDA CURPOS
1447  27C3- 48                 PHA             SAVE CURPOS ON STACK
1448  27C4- A2 00              LDX =0
1449  27C6- BD 20 03   GET27A  LDA FILNM1,X
1450  27C9- C9 30              CMP ='0'        IF DIGIT
1451  27CB- 30 07              BMI GET27B
1452  27CD- C9 39              CMP ='9'
1453  27CF- 10 03              BPL GET27B

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 25/10/23   R65 ASSEMBLER  PAGE 31

1454  27D1- 18                 CLC
1455  27D2- 69 01              ADC =1          ADD 1
1456  27D4- C9 20      GET27B  CMP =$20
1457  27D6- F0 08              BEQ GET27C
1458  27D8- 20 09 E0           JSR PRTCHR
1459  27DB- E8                 INX
1460  27DC- E0 0F              CPX =15
1461  27DE- D0 E6              BNE GET27A
1462  27E0- 20 27 E0   GET27C  JSR PRTINF
1463  27E3- 2E 30 30           BYT '.00,'+128
1463  27E6- AC 
1464  27E7- 18                 CLC
1465  27E8- A5 DC              LDA FILDRV
1466  27EA- 69 30              ADC ='0'
1467  27EC- 20 09 E0           JSR PRTCHR
1468  27EF- 68                 PLA             RESTORE CURPOS
1469  27F0- 85 EE              STA CURPOS
1470                   *
1471  27F2- 20 7D 29           JSR INNAME
1472  27F5- A5 AA      GET28   LDA PRTFLG
1473  27F7- 10 04              BPL *+6
1474  27F9- 20 27 E0           JSR PRTINF
1475  27FC- 94                 BYT $94
1476  27FD- A9 00              LDA =0
1477  27FF- 85 DA             STA FILFLG
1478  2801- 20 0F F0           JSR OPEN
1479  2804- D0 06              BNE GETERR+1
1480                   *
1481  2806- 84 9B      GET30   STY INPFIL
1482  2808- 4C 74 27           JMP GET
1483                   *
1484  280B- 98         GETERR  TYA             INPUT ERROR
1485  280C- 20 38 29           JSR ERROR       THIS ERROR IS FATAL
1486  280F- 4C 17 2A           JMP WARMST
1487                   *
1488  2812- E0 30      STINB   CPX =$30                IF NOT OVERFLOW
1489  2814- F0 04              BEQ *+6
1490  2816- 95 00              STA INBUFF,X
1491  2818- E8                 INX
1492  2819- 60                 RTS
1493  281A- A9 50              LDA =$50
1494  281C- 4C 38 29           JMP ERROR       RETURN AFTER ERROR
1495                   *
1496                   *
1497                   * SUBROUTINE PUT: PUT OBJECT CODE INTO
1498                   **************************************
1499                   * OUTPUT BUFFER, RETURN IF FIRST PASS.
1500                   * IS ONLY CALLED, IF NUMBYT>0
1501                   *
1502  281F- A5 A9      PUT     LDA PASSFL

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 25/10/23   R65 ASSEMBLER  PAGE 32

1503  2821- D0 01              BNE *+3
1504  2823- 60                 RTS
1505                   *
1506  2824- 20 2B 29           JSR OBEMPT      IF BUFFER EMPTY
1507  2827- D0 08              BNE PUT10
1508  2829- A5 9E              LDA PCOLD       STORE PCOLD
1509  282B- 85 AE              STA OBADDR      AT BASE ADDRESS
1510  282D- A5 9F              LDA PCOLD+1
1511  282F- 85 AF              STA OBADDR+1
1512                   *
1513  2831- AD 08 20   PUT10   LDA OBEND       IF BUFFER FULL
1514  2834- 38                 SEC
1515  2835- E5 AC              SBC OBPNT
1516  2837- 85 37              STA TEMP1
1517  2839- AD 09 20           LDA OBEND+1
1518  283C- E5 AD              SBC OBPNT+1
1519  283E- 48                 PHA
1520  283F- A5 37              LDA TEMP1
1521  2841- C5 38              CMP NUMBYT
1522  2843- 68                 PLA
1523  2844- E9 00              SBC =0
1524  2846- B0 06              BCS *+8
1525  2848- 20 62 28           JSR CLOSRC      CLOSE RECORD
1526  284B- 4C 1F 28           JMP PUT         AND OPEN NEW ONE
1527                   *
1528  284E- A0 00              LDY =0          STORE OBJECT CODE
1529  2850- A2 00              LDX =0
1530  2852- B5 3C      PUT20   LDA OBJECT,X
1531  2854- 91 AC              STA (OBPNT),Y
1532  2856- E6 AC              INC OBPNT
1533  2858- D0 02              BNE *+4
1534  285A- E6 AD              INC OBPNT+1
1535  285C- E8                 INX
1536  285D- E4 38              CPX NUMBYT
1537  285F- D0 F1              BNE PUT20
1538  2861- 60                 RTS
1539                   *
1540                   *
1541  2862- A5 A9      CLOSRC  LDA PASSFL
1542  2864- D0 01              BNE *+3
1543  2866- 60                 RTS
1544  2867- 20 2B 29           JSR OBEMPT      IF BUFFER EMPTY
1545  286A- D0 01              BNE *+3
1546  286C- 60                 RTS             DO NOTHING
1547                   *
1548  286D- 8A                 TXA
1549  286E- 48                 PHA
1550  286F- 20 27 E0           JSR PRTINF
1551  2872- 14 0D 0A           BYT $14,$0D,$0A,$0E
1551  2875- 0E 

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 25/10/23   R65 ASSEMBLER  PAGE 33

1552  2876- 53 54 4F           BYT 'STORE OBJECT FILE:',$0B
1552  2879- 52 45 20 
1552  287C- 4F 42 4A 
1552  287F- 45 43 54 
1552  2882- 20 46 49 
1552  2885- 4C 45 3A 
1552  2888- 0B 
1553  2889- 0D 0A 46           BYT $0D,$0A,'FILENAME.CY,DRIVE,LOC?'
1553  288C- 49 4C 45 
1553  288F- 4E 41 4D 
1553  2892- 45 2E 43 
1553  2895- 59 2C 44 
1553  2898- 52 49 56 
1553  289B- 45 2C 4C 
1553  289E- 4F 43 3F 
1554  28A1- A0                 BYT $A0
1555  28A2- 20 06 E0           JSR GETLIN
1556                   *
1557  28A5- 20 24 E0           JSR ENDLIN      SKIP STORE IF INPUT EMP
1558  28A8- F0 6E              BEQ CLOSRC0     (USER DOES NOT WANT TO
1559                   *
1560  28AA- 20 15 F8           JSR GETNAM
1561  28AD- 20 19 20           JSR HARGUM
1562  28B0- 85 DC              STA FILDRV
1563  28B2- 20 19 20           JSR HARGUM
1564  28B5- 8D 13 03           STA FILLOC
1565  28B8- 8E 14 03           STX FILLOC+1
1566  28BB- A2 10              LDX =16
1567  28BD- BD 20 03           LDA FILNM1,X
1568  28C0- 9D 01 03           STA FILNAM,X
1569  28C3- CA                 DEX
1570  28C4- 10 F7              BPL *-7
1571                   *
1572  28C6- 20 27 E0           JSR PRTINF
1573  28C9- 0D 8A              BYT $D,$8A
1574                   *
1575  28CB- A5 AC              LDA OBPNT       SET FILE SIZE
1576  28CD- 38                 SEC
1577  28CE- ED 06 20           SBC OBSTR
1578  28D1- 8D 15 03           STA FILSIZ
1579  28D4- A5 AD              LDA OBPNT+1
1580  28D6- ED 07 20           SBC OBSTR+1
1581  28D9- 8D 16 03           STA FILSIZ+1
1582  28DC- AD 06 20           LDA OBSTR       SET START IN RAM
1583  28DF- 8D 31 03           STA FILSA1
1584  28E2- AD 07 20           LDA OBSTR+1
1585  28E5- 8D 32 03           STA FILSA1+1
1586  28E8- A9 00              LDA =0
1587  28EA- 85 DA              STA FILFLG
1588  28EC- A9 4D              LDA ='M         OBJECT FILE FROM

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 25/10/23   R65 ASSEMBLER  PAGE 34

1589  28EE- 8D 12 03           STA FILSTP      ASSEMBLER
1590  28F1- A5 AE              LDA OBADDR
1591  28F3- 8D 1A 03           STA FILSA
1592  28F6- 18                 CLC
1593  28F7- 6D 15 03           ADC FILSIZ
1594  28FA- 8D 1C 03           STA FILEA
1595  28FD- A5 AF              LDA OBADDR+1
1596  28FF- 8D 1B 03          STA FILSA+1
1597  2902- 6D 16 03           ADC FILSIZ+1
1598  2905- 8D 1D 03           STA FILEA+1
1599  2908- AD 1C 03           LDA FILEA
1600  290B- D0 03              BNE *+5
1601  290D- CE 1D 03           DEC FILEA+1
1602  2910- CE 1C 03           DEC FILEA
1603  2913- 20 16 20           JSR WRFILA
1604  2916- D0 0D              BNE PUTERR
1605  2918- AD 06 20   CLOSRC0 LDA OBSTR       RESET BUFFER
1606  291B- 85 AC              STA OBPNT
1607  291D- AD 07 20           LDA OBSTR+1
1608  2920- 85 AD              STA OBPNT+1
1609  2922- 68                 PLA
1610  2923- AA                 TAX
1611  2924- 60                 RTS
1612                   *
1613  2925- 68         PUTERR  PLA             WRITE ERROR
1614  2926- AA                 TAX
1615  2927- 98                 TYA
1616  2928- 4C 38 29           JMP ERROR
1617                   *
1618                   *
1619  292B- A5 AC      OBEMPT  LDA OBPNT
1620  292D- CD 06 20           CMP OBSTR
1621  2930- D0 05              BNE *+7
1622  2932- A5 AD              LDA OBPNT+1
1623  2934- CD 07 20           CMP OBSTR+1
1624  2937- 60                 RTS
1625                   *
1626                   *
1627                   * SUBROUTINE ERROR: PRINT ERROR MESSAGE
1628                   ***************************************
1629                   * SET PRINT FLAG; SAVED: X,Y
1630                   *
1631  2938- 48         ERROR   PHA
1632  2939- 20 27 E0           JSR PRTINF
1633  293C- 12                 BYT $12
1634  293D- 2A 2A 2A           BYT '*** ERROR',$A0
1634  2940- 20 45 52 
1634  2943- 52 4F 52 
1634  2946- A0 
1635  2947- 68                 PLA

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 25/10/23   R65 ASSEMBLER  PAGE 35

1636  2948- 20 2D E0           JSR PRTBYT
1637  294B- E6 A8              INC NUMERR
1638  294D- 8A                 TXA
1639  294E- 48                 PHA
1640  294F- A5 A9              LDA PASSFL
1641  2951- D0 14              BNE ENDERR
1642  2953- 20 27 E0           JSR PRTINF
1643  2956- 20 20 49           BYT '  IN LINE '+128
1643  2959- 4E 20 4C 
1643  295C- 49 4E 45 
1643  295F- A0 
1644  2960- A5 A3              LDA LINCNT+1
1645  2962- A6 A2              LDX LINCNT
1646  2964- 20 30 E0           JSR PRTAX
1647  2967- 20 6E 27   ENDERR  JSR CRLF
1648  296A- 68                 PLA
1649  296B- AA                 TAX
1650  296C- 60                 RTS
1651                   *
1652                   *
1653                   * CONFIGURATE PRINTER FOR 96 CHARS
1654                   *
1655  296D- A2 02      PRCON   LDX =2
1656  296F- BD E2 2A           LDA PRTAB,X
1657  2972- 86 37              STX TEMP1
1658  2974- 20 0C E0           JSR VAUTOP
1659  2977- A6 37              LDX TEMP1
1660  2979- CA                 DEX
1661  297A- 10 F3              BPL PRCON+2
1662  297C- 60                 RTS
1663                   *
1664                   *
1665                   * GET FILE NAME
1666                   *
1667  297D- 20 06 E0   INNAME  JSR GETLIN
1668  2980- 20 15 F8           JSR GETNAM
1669  2983- 20 19 20           JSR HARGUM
1670  2986- 48                 PHA
1671  2987- A4 A7              LDY FILCNT
1672  2989- AD 0A 20           LDA SAVNAM
1673  298C- 18         INNA5   CLC
1674  298D- 88                 DEY
1675  298E- 30 05              BMI INNA10
1676  2990- 69 14              ADC =20
1677  2992- 4C 8C 29           JMP INNA5
1678  2995- 85 9C      INNA10  STA SAVPNT
1679  2997- AD 0B 20           LDA SAVNAM+1
1680  299A- 85 9D              STA SAVPNT+1
1681  299C- A0 12              LDY =18
1682  299E- B9 1F 03   INNA20  LDA FILNM1-1,Y

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 25/10/23   R65 ASSEMBLER  PAGE 36

1683  29A1- 91 9C              STA (SAVPNT),Y
1684  29A3- 88                 DEY
1685  29A4- D0 F8              BNE INNA20
1686  29A6- 68                 PLA
1687  29A7- 91 9C              STA (SAVPNT),Y
1688  29A9- 60                 RTS
1689                   *
1690                   *
1691                   * GET FILE NAME BACK FROM BUFFER
1692                   *
1693  29AA- A4 A7      BACKNM  LDY FILCNT
1694  29AC- AD 0A 20           LDA SAVNAM
1695  29AF- 18         BACK10  CLC
1696  29B0- 88                 DEY
1697  29B1- 30 05              BMI BACK20      CALCULATE POINTER
1698  29B3- 69 14              ADC =20
1699  29B5- 4C AF 29           JMP BACK10
1700  29B8- 85 9C      BACK20  STA SAVPNT
1701  29BA- AD 0B 20           LDA SAVNAM+1
1702  29BD- 85 9D              STA SAVPNT+1
1703  29BF- A0 12              LDY =18
1704  29C1- B1 9C      BACK30  LDA (SAVPNT),Y
1705  29C3- 99 1F 03           STA FILNM1-1,Y
1706  29C6- 88                 DEY
1707  29C7- D0 F8              BNE BACK30
1708  29C9- B1 9C              LDA (SAVPNT),Y
1709  29CB- 85 DC              STA FILDRV
1710  29CD- 60                 RTS
1711                   *
1712                   *
1713                   * INITIALIZATION
1714                   ****************
1715                   *
1716  29CE- A9 20      COLDST  LDA =$20
1717  29D0- A2 1F              LDX =$1F
1718  29D2- 95 B2              STA TITLE,X     CLEAR TITLE
1719  29D4- CA                 DEX
1720  29D5- 10 FB              BPL *-3
1721                   *
1722  29D7- 20 27 E0           JSR PRTINF
1723  29DA- 0D 0A 09           BYT $D,$A,9,9,'R65 ASSEMBLER',$D,$A
1723  29DD- 09 52 36 
1723  29E0- 35 20 41 
1723  29E3- 53 53 45 
1723  29E6- 4D 42 4C 
1723  29E9- 45 52 0D 
1723  29EC- 0A 
1724  29ED- 0A 53 4F           BYT $A,'SOURCE FILE: ',$D
1724  29F0- 55 52 43 
1724  29F3- 45 20 46 

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 25/10/23   R65 ASSEMBLER  PAGE 37

1724  29F6- 49 4C 45 
1724  29F9- 3A 20 0D 
1725  29FC- 0A 46 49          BYT $A,'FILENAME.CY,DRIVE?',$A0
1725  29FF- 4C 45 4E 
1725  2A02- 41 4D 45 
1725  2A05- 2E 43 59 
1725  2A08- 2C 44 52 
1725  2A0B- 49 56 45 
1725  2A0E- 3F A0 
1726  2A10- A9 00              LDA =0
1727  2A12- 85 A7              STA FILCNT
1728  2A14- 20 7D 29           JSR INNAME
1729                   *
1730  2A17- 20 27 E0   WARMST  JSR PRTINF
1731  2A1A- 0D 0A 41           BYT $D,$A,'A*'+128
1731  2A1D- AA 
1732  2A1E- 20 6D 29           JSR PRCON
1733  2A21- 20 03 E0           JSR GETCHR
1734                   *
1735  2A24- C9 46              CMP =$46        F=FIRST PASS
1736  2A26- F0 03              BEQ *+5
1737  2A28- 4C B6 2A           JMP WARM10
1738  2A2B- AD 0C 20           LDA LABSTR
1739  2A2E- AE 0D 20           LDX LABSTR+1
1740  2A31- 85 B0              STA LABCNT
1741  2A33- 86 B1              STX LABCNT+1
1742  2A35- A9 00              LDA =0
1743  2A37- 85 A9              STA PASSFL
1744  2A39- 85 AA              STA PRTFLG      PRINTING OFF
1745  2A3B- AD 15 20   PASS    LDA TABLE+5     BOTH PASSES
1746  2A3E- 85 AB              STA PAGELN
1747  2A40- A9 00              LDA =0
1748  2A42- 85 A7              STA FILCNT      START WITH FIRST FILE
1749  2A44- 20 AA 29           JSR BACKNM
1750                   *
1751  2A47- A9 00              LDA =0
1752  2A49- 85 DA              STA FILFLG
1753  2A4B- 20 0F F0           JSR OPEN        OPEN SOURCE
1754  2A4E- F0 03              BEQ *+5
1755  2A50- 4C 0C 28           JMP GETERR+1
1756                   *
1757  2A53- 84 9B              STY INPFIL
1758  2A55- AD 06 20           LDA OBSTR       OBJECT START
1759  2A58- 85 AC              STA OBPNT
1760  2A5A- AD 07 20           LDA OBSTR+1
1761  2A5D- 85 AD              STA OBPNT+1
1762  2A5F- A2 0A              LDX =(NUMERR-PCOLD)  SET ALL TO 0
1763  2A61- A9 00              LDA =0
1764  2A63- 95 9E              STA PCOLD,X
1765  2A65- CA                 DEX

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 25/10/23   R65 ASSEMBLER  PAGE 38

1766  2A66- 10 FB              BPL *-3
1767  2A68- A9 80              LDA =$80
1768  2A6A- 85 A5              STA OUTREC
1769                   *
1770  2A6C- 20 27 E0   LINE    JSR PRTINF      AUTOPRINT OFF
1771  2A6F- 94                 BYT $94
1772  2A70- AD 81 17           LDA SFLAG       ESCAPE TEST
1773  2A73- 10 08              BPL LINE1
1774  2A75- 29 7F              AND =$7F
1775  2A77- 8D 81 17           STA SFLAG
1776  2A7A- 4C 17 2A           JMP WARMST
1777  2A7D- 20 74 27   LINE1   JSR GET
1778  2A80- 20 A9 24           JSR INTLIN
1779  2A83- 18                 CLC
1780  2A84- A5 A0              LDA PCNEW
1781  2A86- 65 38              ADC NUMBYT
1782  2A88- 85 A0              STA PCNEW
1783  2A8A- 90 06              BCC LINE2
1784  2A8C- E6 A1              INC PCNEW+1
1785  2A8E- 20 27 E0           JSR PRTINF      HEART BEAT
1786  2A91- AE                 BYT '.'+128
1787  2A92- A5 38      LINE2   LDA NUMBYT
1788  2A94- F0 03              BEQ *+5
1789  2A96- 20 1F 28           JSR PUT
1790  2A99- 24 AA              BIT PRTFLG
1791  2A9B- 10 04              BPL *+6
1792  2A9D- 20 27 E0           JSR PRTINF
1793  2AA0- 92                 BYT $92         AUTOPRINT ON
1794  2AA1- 20 71 26           JSR PRTLIN
1795  2AA4- 24 AA              BIT PRTFLG
1796  2AA6- 10 03              BPL *+5
1797  2AA8- 20 0F 27           JSR NEWLIN
1798  2AAB- A5 A0              LDA PCNEW
1799  2AAD- 85 9E              STA PCOLD
1800  2AAF- A5 A1              LDA PCNEW+1
1801  2AB1- 85 9F              STA PCOLD+1
1802  2AB3- 4C 6C 2A           JMP LINE        HANDLE LINES
1803                   *
1804  2AB6- C9 53      WARM10  CMP =$53        S=SECOND PASS
1805  2AB8- D0 16              BNE WARM20
1806  2ABA- A9 01              LDA =1
1807  2ABC- 85 A9              STA PASSFL
1808  2ABE- A9 80              LDA =$80
1809  2AC0- 85 AA              STA PRTFLG      PRINTING ON
1810  2AC2- 20 6D 29           JSR PRCON
1811  2AC5- 20 E5 2A           JSR CLRRFL      CLEAR R-FLAG
1812  2AC8- 20 27 E0           JSR PRTINF      PRINT EMPTY LINE TO
1813  2ACB- 0D 8D              BYT $0D,$8D       START HEADER
1814  2ACD- 4C 3B 2A           JMP PASS
1815                   *

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 25/10/23   R65 ASSEMBLER  PAGE 39

1816  2AD0- C9 0D      WARM20  CMP =$0D        <return>?
1817  2AD2- D0 03              BNE WARM30
1818  2AD4- 6C D5 17           JMP (VMON)      RETURN TO MONITOR
1819                   *
1820  2AD7- C9 52      WARM30  CMP =$52        R=REFERENCE TABLE
1821  2AD9- F0 30              BEQ MAP
1822  2ADB- 20 27 E0           JSR PRTINF
1823  2ADE- 87                 BYT $87         BELL
1824  2ADF- 4C 17 2A           JMP WARMST
1825                   *
1826                   *
1827  2AE2- 14 75 1B   PRTAB   BYT 20,117,27
1828                   *
1829                   *
1830                   * CLEAR R-FLAG
1831                   *
1832  2AE5- A0 07      CLRRFL  LDY =7
1833  2AE7- AD 0C 20           LDA LABSTR
1834  2AEA- AE 0D 20           LDX LABSTR+1
1835  2AED- 85 97      CLRRF1  STA LABPNT
1836  2AEF- 86 98              STX LABPNT+1
1837  2AF1- C5 B0              CMP LABCNT
1838  2AF3- 8A                 TXA
1839  2AF4- E5 B1              SBC LABCNT+1
1840  2AF6- 90 01              BCC *+3
1841  2AF8- 60                 RTS
1842                   *
1843  2AF9- B1 97              LDA (LABPNT),Y
1844  2AFB- 29 7F              AND =$7F
1845  2AFD- 91 97              STA (LABPNT),Y
1846  2AFF- A5 97             LDA LABPNT
1847  2B01- A6 98              LDX LABPNT+1
1848  2B03- 18                 CLC
1849  2B04- 69 08              ADC =8
1850  2B06- 90 E5              BCC CLRRF1
1851  2B08- E8                 INX
1852  2B09- B0 E2              BCS CLRRF1      ALWAYS TAKEN
1853                   *
1854                   *
1855                   * PRINT REFERENCE TABLE
1856                   ***********************
1857                   *
1858  2B0B- A5 A9      MAP     LDA PASSFL
1859  2B0D- F0 17              BEQ MAP1
1860  2B0F- A9 80              LDA =$80
1861  2B11- 85 AA              STA PRTFLG
1862  2B13- 20 27 E0           JSR PRTINF
1863  2B16- 4D 41 50           BYT 'MAP DESTROYED'+128
1863  2B19- 20 44 45 
1863  2B1C- 53 54 52 

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 25/10/23   R65 ASSEMBLER  PAGE 40

1863  2B1F- 4F 59 45 
1863  2B22- C4 
1864  2B23- 4C 17 2A           JMP WARMST
1865  2B26- 20 6D 29   MAP1    JSR PRCON
1866  2B29- AD 15 20           LDA TABLE+5
1867  2B2C- 85 AB              STA PAGELN
1868  2B2E- A9 00              LDA =0
1869  2B30- 85 A4              STA PAGECN
1870  2B32- 20 27 E0           JSR PRTINF
1871  2B35- 92                 BYT $92         AUTOPRINT ON
1872  2B36- 20 0F 27           JSR NEWLIN
1873  2B39- 20 27 E0           JSR PRTINF
1874  2B3C- 43 52 4F           BYT 'CROSS REFERENCE MAP',$BA
1874  2B3F- 53 53 20 
1874  2B42- 52 45 46 
1874  2B45- 45 52 45 
1874  2B48- 4E 43 45 
1874  2B4B- 20 4D 41 
1874  2B4E- 50 BA 
1875  2B50- 20 0F 27           JSR NEWLIN
1876  2B53- 20 E5 2A           JSR CLRRFL      CLEAR R-FLAG
1877                   *
1878  2B56- AD 0C 20   CROSS0  LDA LABSTR
1879  2B59- AE 0D 20           LDX LABSTR+1
1880  2B5C- 85 97      CROSS1  STA LABPNT
1881  2B5E- 86 98              STX LABPNT+1
1882  2B60- C5 B0              CMP LABCNT
1883  2B62- 8A                 TXA
1884  2B63- E5 B1              SBC LABCNT+1
1885  2B65- 90 0A              BCC CROSS2
1886  2B67- 20 0F 27           JSR NEWLIN
1887  2B6A- 20 27 E0           JSR PRTINF
1888  2B6D- 94                 BYT $94
1889  2B6E- 4C 17 2A           JMP WARMST
1890                   *
1891  2B71- A0 07      CROSS2  LDY =7
1892  2B73- B1 97              LDA (LABPNT),Y
1893  2B75- 10 0C              BPL CROSS3      SKIP, IF FOUND
1894  2B77- A5 97              LDA LABPNT
1895  2B79- A6 98              LDX LABPNT+1
1896  2B7B- 18                 CLC
1897  2B7C- 69 08              ADC =8
1898  2B7E- 90 DC              BCC CROSS1
1899  2B80- E8                 INX
1900  2B81- B0 D9              BCS CROSS1
1901                   *
1902  2B83- A5 97      CROSS3  LDA LABPNT
1903  2B85- A6 98              LDX LABPNT+1
1904  2B87- 18         CROSS4  CLC
1905  2B88- 69 08              ADC =8

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 25/10/23   R65 ASSEMBLER  PAGE 41

1906  2B8A- 85 99              STA LABPN1
1907  2B8C- 90 01              BCC *+3
1908  2B8E- E8                 INX
1909  2B8F- 86 9A              STX LABPN1+1
1910  2B91- C5 B0              CMP LABCNT
1911  2B93- 8A                 TXA
1912  2B94- E5 B1              SBC LABCNT+1
1913  2B96- B0 24              BCS CROSS7      SKIP, IF FOUND
1914                   *
1915  2B98- A0 07              LDY =7
1916  2B9A- B1 99              LDA (LABPN1),Y
1917  2B9C- 10 07              BPL CROSS6
1918  2B9E- A5 99      CROSS5  LDA LABPN1
1919  2BA0- A6 9A              LDX LABPN1+1
1920  2BA2- 4C 87 2B           JMP CROSS4
1921                   *
1922  2BA5- 38         CROSS6  SEC
1923  2BA6- A0 04              LDY =4
1924  2BA8- B1 97              LDA (LABPNT),Y  COMPARE NOW
1925  2BAA- F1 99              SBC (LABPN1),Y
1926  2BAC- 88                 DEY
1927  2BAD- 10 F9              BPL CROSS6+3
1928  2BAF- 90 ED              BCC CROSS5
1929  2BB1- A5 99              LDA LABPN1
1930  2BB3- A6 9A              LDX LABPN1+1
1931  2BB5- 85 97              STA LABPNT
1932  2BB7- 86 98              STX LABPNT+1
1933  2BB9- 4C 87 2B           JMP CROSS4
1934                   *
1935  2BBC- A0 07      CROSS7  LDY =7
1936  2BBE- B1 97              LDA (LABPNT),Y  SET R-FLAG
1937  2BC0- 09 80              ORA =$80
1938  2BC2- 91 97              STA (LABPNT),Y
1939  2BC4- 20 7B 2C           JSR PRLABN
1940  2BC7- 4C 56 2B           JMP CROSS0
1941                   *
1942                   *
1943                   * END OF SOURCE
1944                   *
1945  2BCA- A9 00      END     LDA =0
1946  2BCC- 85 A0              STA PCNEW
1947  2BCE- 85 A1              STA PCNEW+1
1948  2BD0- A5 A9              LDA PASSFL      ONLY IN SECOND PASS
1949  2BD2- F0 04              BEQ END0-3
1950  2BD4- 20 27 E0           JSR PRTINF      AUTOPRINT ON
1951  2BD7- 92                 BYT $92
1952  2BD8- 20 71 26           JSR PRTLIN
1953  2BDB- 20 0F 27   END0    JSR NEWLIN
1954  2BDE- 20 27 E0           JSR PRTINF
1955  2BE1- 4C 41 42           BYT 'LABELS',$BD

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 25/10/23   R65 ASSEMBLER  PAGE 42

1955  2BE4- 45 4C 53 
1955  2BE7- BD 
1956  2BE8- A9 00              LDA =0
1957  2BEA- 85 98              STA LABPNT+1
1958  2BEC- A5 B0              LDA LABCNT
1959  2BEE- 38                 SEC
1960  2BEF- ED 0C 20           SBC LABSTR
1961  2BF2- 85 97              STA LABPNT
1962  2BF4- A5 B1              LDA LABCNT+1
1963  2BF6- ED 0D 20           SBC LABSTR+1
1964  2BF9- A0 04              LDY =4
1965  2BFB- 06 97      END1    ASL LABPNT
1966  2BFD- 2A                 ROL A
1967  2BFE- 26 98             ROL LABPNT+1
1968  2C00- 88                 DEY
1969  2C01- 10 F8              BPL END1
1970  2C03- AA                 TAX
1971  2C04- A5 98              LDA LABPNT+1
1972  2C06- 20 30 E0           JSR PRTAX
1973  2C09- 20 0F 27           JSR NEWLIN
1974  2C0C- 20 27 E0           JSR PRTINF
1975  2C0F- 45 52 52           BYT 'ERRORS',$BD
1975  2C12- 4F 52 53 
1975  2C15- BD 
1976  2C16- A5 A8              LDA NUMERR
1977  2C18- 20 2D E0           JSR PRTBYT
1978  2C1B- 20 0F 27           JSR NEWLIN
1979  2C1E- 20 27 E0           JSR PRTINF
1980  2C21- 52 45 43           BYT 'RECORDS',$BD
1980  2C24- 4F 52 44 
1980  2C27- 53 BD 
1981  2C29- A6 9B              LDX INPFIL
1982  2C2B- BD 51 03           LDA FIRCTB,X
1983  2C2E- 20 2D E0           JSR PRTBYT
1984  2C31- 20 0F 27           JSR NEWLIN
1985  2C34- 20 62 28           JSR CLOSRC
1986  2C37- A6 9B              LDX INPFIL
1987  2C39- 20 12 F0           JSR CLOSE
1988  2C3C- 20 27 E0           JSR PRTINF
1989  2C3F- 55 4E 52           BYT 'UNRESOLVED',$BA
1989  2C42- 45 53 4F 
1989  2C45- 4C 56 45 
1989  2C48- 44 BA 
1990  2C4A- 20 E5 2A           JSR CLRRFL      CLEAR R-FLAG
1991  2C4D- AD 0C 20           LDA LABSTR
1992  2C50- AE 0D 20           LDX LABSTR+1
1993  2C53- 85 97      UNRES   STA LABPNT
1994  2C55- 86 98              STX LABPNT+1
1995  2C57- C5 B0              CMP LABCNT
1996  2C59- 8A                 TXA

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 25/10/23   R65 ASSEMBLER  PAGE 43

1997  2C5A- E5 B1              SBC LABCNT+1
1998  2C5C- 90 03              BCC *+5
1999  2C5E- 4C 56 2B           JMP CROSS0
2000  2C61- 20 79 22           JSR DEFIN
2001  2C64- F0 08              BEQ END2
2002  2C66- A0 07              LDY =7
2003  2C68- B1 97              LDA (LABPNT),Y
2004  2C6A- 09 80              ORA =$80
2005  2C6C- 91 97              STA (LABPNT),Y
2006  2C6E- A5 97      END2    LDA LABPNT
2007  2C70- A6 98              LDX LABPNT+1
2008  2C72- 18                 CLC
2009  2C73- 69 08              ADC =8
2010  2C75- 90 01              BCC *+3
2011  2C77- E8                 INX
2012  2C78- 4C 53 2C           JMP UNRES
2013                   *
2014                   *
2015                   * SUBROUTINE PRLABN: PRINT NAME OF LABEL
2016                   ****************************************
2017                   *
2018  2C7B- A0 00      PRLABN  LDY =0
2019  2C7D- B1 97              LDA (LABPNT),Y
2020  2C7F- 99 30 00           STA LABEL,Y
2021  2C82- C8                 INY
2022  2C83- C0 05              CPY =5
2023  2C85- D0 F6              BNE PRLABN+2
2024                   *
2025  2C87- 20 0F 27           JSR NEWLIN
2026  2C8A- A0 07              LDY =7          CHAR COUNTER
2027  2C8C- A2 06      PRLAB0  LDX =6
2028  2C8E- C0 06              CPY =6
2029  2C90- 90 01              BCC *+3
2030  2C92- CA                 DEX
2031  2C93- A9 00              LDA =0
2032  2C95- 26 34      PRLAB1  ROL LABEL+4
2033  2C97- 26 33              ROL LABEL+3
2034  2C99- 26 32              ROL LABEL+2
2035  2C9B- 26 31              ROL LABEL+1
2036  2C9D- 26 30              ROL LABEL
2037  2C9F- 2A                 ROL A
2038  2CA0- CA                 DEX
2039  2CA1- D0 F2              BNE PRLAB1
2040  2CA3- C9 00              CMP =0
2041  2CA5- F0 09              BEQ PRLAB3
2042  2CA7- C9 30              CMP =$30
2043  2CA9- 10 02              BPL *+4
2044  2CAB- 09 40              ORA =$40
2045  2CAD- 20 09 E0           JSR PRTCHR
2046  2CB0- 88         PRLAB3  DEY

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 25/10/23   R65 ASSEMBLER  PAGE 44

2047  2CB1- D0 D9              BNE PRLAB0
2048  2CB3- A2 08              LDX =8
2049  2CB5- 20 05 27           JSR TAB
2050  2CB8- 20 79 22           JSR DEFIN
2051  2CBB- D0 0A              BNE *+12
2052  2CBD- 20 27 E0           JSR PRTINF
2053  2CC0- 3F 3F 3F           BYT '???',$BF
2053  2CC3- BF 
2054  2CC4- 4C D4 2C           JMP *+16
2055                   *
2056  2CC7- A0 06              LDY =6
2057  2CC9- B1 97              LDA (LABPNT),Y
2058  2CCB- 20 2D E0           JSR PRTBYT
2059  2CCE- 88                 DEY
2060  2CCF- B1 97              LDA (LABPNT),Y
2061  2CD1- 20 2D E0           JSR PRTBYT
2062  2CD4- 20 99 2D           JSR CBASE
2063  2CD7- A0 07              LDY =7
2064  2CD9- B1 97              LDA (LABPNT),Y
2065  2CDB- 29 7F              AND =$7F
2066  2CDD- 0A                 ASL A
2067  2CDE- A8                 TAY             Y=2*NO OF REFERENCES
2068                   *
2069  2CDF- A9 0A      PRLAB4  LDA =10         REFERENCES PER LINE
2070  2CE1- 85 37              STA TEMP1
2071  2CE3- A2 10              LDX =16
2072  2CE5- 20 05 27           JSR TAB
2073  2CE8- C0 00      PRLAB5  CPY =0
2074  2CEA- F0 1F              BEQ PRLAB6
2075  2CEC- 88                 DEY
2076  2CED- B1 95              LDA (BASE),Y
2077  2CEF- 20 2D E0           JSR PRTBYT
2078  2CF2- 88                 DEY
2079  2CF3- B1 95              LDA (BASE),Y
2080  2CF5- 20 2D E0           JSR PRTBYT
2081  2CF8- 20 27 E0           JSR PRTINF
2082  2CFB- A0                 BYT $A0
2083  2CFC- C6 37              DEC TEMP1
2084  2CFE- 10 E8             BPL PRLAB5
2085  2D00- 98                 TYA
2086  2D01- F0 08              BEQ PRLAB6
2087  2D03- 48                 PHA
2088  2D04- 20 0F 27           JSR NEWLIN
2089  2D07- 68                 PLA
2090  2D08- A8                 TAY
2091  2D09- D0 D4              BNE PRLAB4
2092  2D0B- 60         PRLAB6  RTS
2093                   *
2094                   *
2095                   * SUBROUTINE FORBR: INSERT FORWARD BRANCH

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 25/10/23   R65 ASSEMBLER  PAGE 45

2096                   *****************************************
2097                   * INPUT: OBJECT, BRANTC, ONLY IN FIRST PASS
2098                   * RESOLV+1
2099                   *
2100  2D0C- A5 A6      FORBR   LDA BRANTC
2101  2D0E- C9 0C              CMP =12
2102  2D10- 90 05              BCC *+7
2103  2D12- A9 52              LDA =$52
2104  2D14- 4C 38 29           JMP ERROR
2105  2D17- A8                 TAY
2106  2D18- A5 3A              LDA RESOLV+1
2107  2D1A- 99 65 00           STA BRANTB,Y    STORE NO OF LABELS
2108  2D1D- A5 3B              LDA RESOLV+2
2109  2D1F- 99 71 00           STA BRANTB+12,Y
2110  2D22- 20 25 26           JSR BRAN1
2111  2D25- A4 A6              LDY BRANTC
2112  2D27- 99 89 00           STA BRANTB+36,Y STORE HIGH BYTE
2113  2D2A- A5 3D              LDA OBJECT+1
2114  2D2C- 99 7D 00           STA BRANTB+24,Y STORE LOW BYTE
2115  2D2F- E6 A6              INC BRANTC
2116  2D31- 60                 RTS
2117                   *
2118                   *
2119                   * SUBROUTINE RESFBR: RESOLVE FORWARD BRANCH
2120                   *******************************************
2121                   * INPUT: LABPNT; ONLY IN FIRST PASS
2122                   * SAVED: X,Y
2123                   *
2124  2D32- 8A         RESFBR  TXA
2125  2D33- 48                 PHA
2126  2D34- A6 A6      RESF1   LDX BRANTC
2127  2D36- F0 10              BEQ RESF0       TABLE EMPTY
2128  2D38- CA                 DEX
2129  2D39- A5 97      RESF8   LDA LABPNT
2130  2D3B- D5 65              CMP BRANTB,X
2131  2D3D- D0 06              BNE RESF6
2132  2D3F- A5 98              LDA LABPNT+1
2133  2D41- D5 71              CMP BRANTB+12,X
2134  2D43- F0 06              BEQ RESF7
2135  2D45- CA         RESF6   DEX
2136  2D46- 10 F1              BPL RESF8
2137  2D48- 68         RESF0   PLA
2138  2D49- AA                 TAX
2139  2D4A- 60                 RTS
2140                   *
2141  2D4B- 8A         RESF7   TXA
2142  2D4C- 48                 PHA
2143  2D4D- 20 55 2D           JSR RESF2
2144  2D50- 68                 PLA
2145  2D51- AA                 TAX

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 25/10/23   R65 ASSEMBLER  PAGE 46

2146  2D52- 4C 34 2D           JMP RESF1
2147                   *
2148  2D55- B5 7D      RESF2   LDA BRANTB+24,X
2149  2D57- 18                 CLC
2150  2D58- 65 5C              ADC VALUE
2151  2D5A- 08                 PHP
2152  2D5B- B5 89              LDA BRANTB+36,X
2153  2D5D- 65 5D              ADC VALUE+1
2154  2D5F- 28                 PLP
2155  2D60- 30 10              BMI RESF3
2156  2D62- C9 00              CMP =0
2157  2D64- F0 10              BEQ RESF4
2158  2D66- 98         ERR14   TYA
2159  2D67- 48                 PHA
2160  2D68- A9 44              LDA =$44
2161  2D6A- 20 38 29           JSR ERROR
2162  2D6D- 68                 PLA
2163  2D6E- A8                 TAY
2164  2D6F- 4C 76 2D           JMP RESF4
2165                   *
2166  2D72- C9 FF      RESF3   CMP =$FF
2167  2D74- D0 F0              BNE ERR14
2168                   *
2169  2D76- E8         RESF4   INX
2170  2D77- E4 A6              CPX BRANTC
2171  2D79- B0 13              BCS RESF5
2172  2D7B- B5 65              LDA BRANTB,X
2173  2D7D- 95 64              STA BRANTB-1,X
2174  2D7F- B5 71              LDA BRANTB+12,X
2175  2D81- 95 70              STA BRANTB+11,X
2176  2D83- B5 7D              LDA BRANTB+24,X
2177  2D85- 95 7C              STA BRANTB+23,X
2178  2D87- B5 89              LDA BRANTB+36,X
2179  2D89- 95 88              STA BRANTB+35,X
2180  2D8B- 4C 76 2D           JMP RESF4
2181                   *
2182  2D8E- C6 A6      RESF5   DEC BRANTC
2183  2D90- 60                 RTS
2184                   *
2185                   *
2186                   * SUBROUTINE CBASE: COMPUTE BASE
2187                   ********************************
2188                   * INPUT: LABCNT
2189                   *
2190  2D91- A5 B0      CBASE2  LDA LABCNT
2191  2D93- A6 B1              LDX LABCNT+1
2192  2D95- 85 97              STA LABPNT
2193  2D97- 86 98              STX LABPNT+1
2194                   *
2195  2D99- AD 06 20   CBASE   LDA OBSTR

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 25/10/23   R65 ASSEMBLER  PAGE 47

2196  2D9C- 85 95              STA BASE
2197  2D9E- AD 07 20           LDA OBSTR+1
2198  2DA1- 85 96              STA BASE+1
2199  2DA3- A5 97              LDA LABPNT
2200  2DA5- A6 98              LDX LABPNT+1
2201  2DA7- 38         CBASE1  SEC
2202  2DA8- E9 08              SBC =8
2203  2DAA- 85 99              STA LABPN1
2204  2DAC- B0 01              BCS *+3
2205  2DAE- CA                 DEX
2206  2DAF- 86 9A              STX LABPN1+1
2207  2DB1- CD 0C 20           CMP LABSTR
2208  2DB4- 8A                 TXA
2209  2DB5- ED 0D 20           SBC LABSTR+1
2210  2DB8- B0 01              BCS *+3
2211  2DBA- 60                 RTS
2212  2DBB- A0 07              LDY =7
2213  2DBD- B1 99              LDA (LABPN1),Y
2214  2DBF- 29 7F              AND =$7F
2215  2DC1- 0A                 ASL A
2216  2DC2- 65 95              ADC BASE
2217  2DC4- 85 95              STA BASE
2218  2DC6- 90 02              BCC *+4
2219  2DC8- E6 96              INC BASE+1
2220  2DCA- A5 99              LDA LABPN1
2221  2DCC- A6 9A              LDX LABPN1+1
2222  2DCE- 4C A7 2D           JMP CBASE1
2223                   *
2224                   *
2225                   * SUBROUTINE: SETREF: SET REFERENCE
2226                   ***********************************
2227                   * SAVED: X,Y; INPUT: LABPNT
2228                   *
2229  2DD1- 86 61      SETREF  STX INDEX1      SAVE X
2230  2DD3- 84 62              STY INDEX2
2231  2DD5- A5 A9              LDA PASSFL
2232  2DD7- F0 01              BEQ *+3
2233  2DD9- 60                 RTS
2234                   *
2235  2DDA- A0 07              LDY =7
2236  2DDC- B1 97              LDA (LABPNT),Y
2237  2DDE- 29 7F              AND =$7F
2238  2DE0- C9 7F              CMP =$7F
2239  2DE2- D0 03              BNE *+5
2240  2DE4- A4 62              LDY INDEX2      NOT INSERTED IN FULL
2241  2DE6- 60                 RTS
2242                   *
2243  2DE7- A5 97              LDA LABPNT
2244  2DE9- 48                 PHA
2245  2DEA- A5 98              LDA LABPNT+1

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 25/10/23   R65 ASSEMBLER  PAGE 48

2246  2DEC- 48                 PHA
2247  2DED- 20 91 2D           JSR CBASE2
2248  2DF0- 68                 PLA
2249  2DF1- 85 98              STA LABPNT+1
2250  2DF3- 68                 PLA
2251  2DF4- 85 97              STA LABPNT
2252                   *
2253  2DF6- A5 95              LDA BASE
2254  2DF8- 85 AC              STA OBPNT
2255  2DFA- CD 08 20           CMP OBEND
2256  2DFD- A5 96              LDA BASE+1
2257  2DFF- 85 AD             STA OBPNT+1
2258  2E01- ED 09 20           SBC OBEND+1
2259  2E04- B0 3C              BCS SETR1
2260                   *
2261  2E06- A6 37              LDX TEMP1
2262  2E08- A0 07              LDY =7
2263  2E0A- B1 97              LDA (LABPNT),Y
2264  2E0C- 18                 CLC
2265  2E0D- 69 01              ADC =1
2266  2E0F- 91 97              STA (LABPNT),Y
2267  2E11- 20 99 2D           JSR CBASE
2268  2E14- A5 AC      SETR2   LDA OBPNT
2269  2E16- C5 95              CMP BASE
2270  2E18- A5 AD              LDA OBPNT+1
2271  2E1A- E5 96              SBC BASE+1
2272  2E1C- 90 16              BCC SETR3
2273  2E1E- A0 00              LDY =0
2274  2E20- B1 AC              LDA (OBPNT),Y
2275  2E22- A0 02              LDY =2
2276  2E24- 91 AC              STA (OBPNT),Y
2277  2E26- 38                 SEC
2278  2E27- A5 AC              LDA OBPNT
2279  2E29- E9 01              SBC =1
2280  2E2B- 85 AC              STA OBPNT
2281  2E2D- B0 02              BCS *+4
2282  2E2F- C6 AD              DEC OBPNT+1
2283  2E31- 4C 14 2E           JMP SETR2
2284                   *
2285  2E34- 20 99 2D   SETR3   JSR CBASE
2286  2E37- A0 00              LDY =0
2287  2E39- A5 9E              LDA PCOLD
2288  2E3B- 91 95              STA (BASE),Y
2289  2E3D- C8                 INY
2290  2E3E- A5 9F              LDA PCOLD+1
2291  2E40- 91 95              STA (BASE),Y
2292  2E42- A4 62      SETR1   LDY INDEX2
2293  2E44- A6 61              LDX INDEX1
2294  2E46- 60                 RTS
2295                   *

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 25/10/23   R65 ASSEMBLER  PAGE 49

2296                   *
2297  2E47-                    END
LABELS=0104
ERRORS=00
RECORDS=84

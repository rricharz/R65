----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 18/03/18   R65 ASSEMBLER  PAGE 01

0001                   * 18/11/81
0002                   **********************************
0003                   * R65 COMPUTER SYSTEM: ASSEMBLER *
0004                   **********************************
0005                   *
0006                   * VERSION 8.0   WITH UNLIMITED NO OF LABELS
0007                   *               ADDITIONAL PSEUDO OP'S
0008                   *               NO RPINTING IN FIRST PASS
0009                   *               SOURCE MAY BE IN SEVERAL FILES
0010                   *               ONLY 'END' TERMINATES A PASS
0011                   * ASSEMBLER FOR R65 COMPUTER SYSTEM
0012                   * CC RRICHARZ, RBAUMANN 1978-1981
0013                   *       - 32 k MEMORY
0014                   *       - VIDEO INTERFACE WITH 4k VIDEO MEMORY
0015                   *       - HARDCOPY OUTPUT
0016                   *       - TAPE AND OR DISK DRIVE(S)
0017                   *
0018                   * INPUT FROM 2 DEVICES
0019                   *       - COMMAND INPUT FROM KEYBOARD
0020                   *       - SOURCE CODE INPUT FROM TAPE OR DISK
0021                   *
0022                   * OUTPUT TO 3 DEVICES
0023                   *       - MESSAGES AND LISTING TO VIDEO DISPLAY
0024                   *       - ERROR TABLE, CROSS REFERENCE MAP AND
0025                   *         LISTINGS TO HARD COPY
0026                   *       - OBJECT FILE(S) TO TAPE OR DISK
0027                   *
0028                   * COMMANDS (A* IS PRINTED IN COMMAND MODE)
0029                   *       F       FIRST PASS
0030                   *       S       SECOND PASS
0031                   *       C       CONTINUE SAME PASS
0032                   *       R       REFERENCE MAP
0033                   *
0034                   *
0035                   * SOURCE LINE FORMAT [] MEANS OPTIONAL
0036                   * [LABEL] OPCODE [OPERAND] [COMMENT]
0037                   * OR *[COMMENT]
0038                   *
0039                   * PSEUDO OPCODES (ASSEMBLER DIRECTIVES)
0040                   *
0041                   *       - EQU "EXPRESSION"      ASSIGN LABEL
0042                   *       - ORG "EXPRESSION"      ASSIGN PC
0043                   *       - BSS "EXPRESSION"      RESERVE BYTES
0044                   *       - BYT "EXPR","EXPR",..  ASSIGN BYTES
0045                   *               "EXPR" CAN BE 'STRING'
0046                   *       - WRD "EXPR","EXPR",..  ASSIGN WORDS
0047                   *       - PAG                   NEW PAGE
0048                   *       - TIT "MAX 32 CHARS"    ASSIGN TITLE
0049                   *       - END                   END OF SOURCE
0050                   *       - NPR                   NO PRINTING

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 18/03/18   R65 ASSEMBLER  PAGE 02

0051                   *       - PRT                   PRINTING
0052                   *
0053                   * ERROR CODES: (FULL ERROR ANALYSIS IN FIRST
0054                   * PASS INCLUDING FORWARD BRANCHES AND
0055                   * UNRESOLVED REFERENCES)
0056                   * FOR ERROR CODES <30 SEE SYSTEM ERRORS
0057                   *
0058                   * ERROR 31  CLOSING ) EXPECTED IN EXPRESSION
0059                   * ERROR 32  SYNTAX ERROR IN LABEL
0060                   * ERROR 33  HEX CHAR EXPECTED AFTER $
0061                   * ERROR 34  LABEL TABLE OVERFLOW
0062                   * ERROR 35  LOGICAL CHAR EXPECTED AFTER #
0063                   * ERROR 36  EXPRESSION NOT RESOLVED (PASS 2)
0064                   * ERROR 37  SYNTAX ERROR IN OPCODE
0065                   * ERROR 38  MNEMONIC OR ADDRESSING ILLEGAL
0066                   * ERROR 39  ILLEGAL ADDRESSING MODE
0067                   * ERROR 40  SYNTAX ERROR IN OPERAND
0068                   * ERROR 41  ABSOLUTE ADDRESS ILLEGAL
0069                   * ERROR 42  MORE THAN 1 UNRESOLVED LABEL IN
0070                   *               FORWARD BRANCH
0071                   * ERROR 43  BRANCH EXCEEDS BOUNDS
0072                   * ERROR 44  FORWARD BRANCH TO THIS LABEL
0073                   *               EXCEEDS BOUNDS
0074                   * ERROR 45  DOUBLE LABELDEFINITION
0075                   * ERROR 46  MISSMATCH IN SECOND PASS
0076                   * ERROR 47  LABEL MISSING IN EQU
0077                   * ERROR 48  OPERAND OF BYT TOO LONG
0078                   * ERROR 49  EXPRESSION MUST BE RESOLVED
0079                   * ERROR 50  LINE TOO LONG
0080                   * ERROR 51  CHAR FOLLOWS LOGICAL END OF OPERAND
0081                   * ERROR 52  TOO MANY UNRESOLVED BRANCHES
0082                   *               NOT INSERTED INTO TEST TABLE
0083                   *
0084                           TIT R65 ASSEMBLER V8.0
0085                   *
0086                           ORG 0
0087                   *
0088                   * PAGE ZERO ASSEMBLER VARIABLES
0089                   *******************************
0090                   *
0091                   * TEMPORARY BUFFERS
0092                   *
0093  0000-            INBUFF  BSS 48  LINE BUFFER
0094  0030-            LABEL   BSS 7   LABEL SHIFT REGISTER
0095  0037-            TEMP1   BSS 1   TEMPORARY REGISTER
0096  0038-            NUMBYT  BSS 1   NUMBER OF BYTES
0097  0039-            RESOLV  BSS 3   UNRESOLVED COUNTER
0098  003C-            OBJECT  BSS 32  OBJECT CODE LINE BUFFER
0099  005C-            VALUE   BSS 2   VALUE OF EXPRESSION
0100  005E-            OPCODE  BSS 2   OPCODE SAVE REGISTER

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 18/03/18   R65 ASSEMBLER  PAGE 03

0101  0060-            ADMODE  BSS 1   ADDRESSING MODE
0102  0061-            INDEX1  BSS 1   MNEMONIC TABLE INDEX
0103  0062-            INDEX2  BSS 1   CODE OFFSET INDEX
0104  0063-            DEFLB   BSS 1   LABEL DEFINITION FLAG
0105  0064-            INBFPN  BSS 1   END OF INPUT POINTER
0106  0065-            BRANTB  BSS 48  FORWARD BRANCH TABLE
0107  0095-            BASE    BSS 2   REFERENCE TABLE POINTER
0108  0097-            LABPNT  BSS 2   LABEL POINTER
0109  0099-            LABPN1  BSS 2   SECOND LABEL POINTER
0110  009B-            INPFIL  BSS 1   INPUT FILE NUMBER
0111  009C-            SAVPNT  BSS 2   SAVED FILE PAR POINTER
0112                   *
0113                   * PRESET TO 0 IN BOTH PASSES
0114                   *
0115  009E-            PCOLD   BSS 2   OLD PROGRAM COUNTER
0116  00A0-            PCNEW   BSS 2   NEW PROGRAMM COUNTER
0117  00A2-            LINCNT  BSS 2   LINE COUNTER
0118  00A4-            PAGECN  BSS 1   PAGE COUNTER
0119  00A5-            OUTREC  BSS 1   OUTPUT RECORD COUNTER
0120  00A6-            BRANTC  BSS 1   TABLE POINTER
0121  00A7-            FILCNT  BSS 1   INPUT FILE COUNTER
0122  00A8-            NUMERR  BSS 1   NUMBER OF ERRORS
0123                   *
0124                   * PRESET IN BOTH PASSES
0125                   *
0126  00A9-            PASSFL  BSS 1   PASS FLAG
0127  00AA-            PRTFLG  BSS 1   PRINT FLAG
0128  00AB-            PAGELN  BSS 1   PAGE LINE COUNTER
0129  00AC-            OBPNT   BSS 2   OBJECT BUFFER POINTER
0130  00AE-            OBADDR  BSS 2   OBJECT BASE ADDRESS
0131                   *
0132                   * PRESET ONLY IN FIRST BASS
0133                   *
0134  00B0-            LABCNT  BSS 2   LABEL COUNTER
0135  00B2-            TITLE   BSS 32  TITLE OF PROGRAM
0136                   *
0137                   *
0138                   *
0139                   * MONITOR LABELS:
0140                   *****************
0141                   *
0142                   FILFLG  EQU $DA         FILE ENTRY FLAG
0143                   FILDRV  EQU $DC         FILE DRIVE
0144                   CURPOS  EQU $EE         CURSOR HOR. POSITION
0145                   INL     EQU $F8         INPUT BUFFER MONITOR
0146                   *
0147                   FILNAM  EQU $0301       FILE NAME
0148                   FILSTP  EQU $0312       FILE SUBTYPE
0149                   FILLOC  EQU $0313       FILE LOCATION/SECTOR
0150                   FILSIZ  EQU $0315       FILE SIZE

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 18/03/18   R65 ASSEMBLER  PAGE 04

0151                   FILSA   EQU $031A       START ADDRESS
0152                   FILEA   EQU $031C       END ADDRESS
0153                   FILNM1  EQU $0320       SECOND FILE NAME
0154                   FILSA1  EQU $0331       SECOND START ADDRESS
0155                   FIRCTB  EQU $0351       ROCORD COUNTER
0156                   *
0157                   VFLAG   EQU $1780       VIDEO FLAG REGISTER
0158                   SFLAG   EQU $1781       SYSTEM FLAG REGISTER
0159                   NUMLIN  EQU $1789       VIDEO LINES
0160                   MNEMR   EQU $E7C0       MNEMONIC TABLE
0161                   MNEML   EQU $E780
0162                   DISMOD  EQU $E722       ADDRESSING MODE TABLE 1
0163                   MODE2   EQU $E766       ADDRESSING MODE TABLE
0164                   CLOSAL  EQU $F015
0165                   *
0166                           PAG

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 18/03/18   R65 ASSEMBLER  PAGE 05

0167                   *
0168                   * START OF PROGRAM ENTRY VECTORS
0169                   ********************************
0170                   *
0171  00D2-                    ORG $2000
0172                   *
0173  2000- 4C CE 29           JMP COLDST      COLD START ENTRY
0174  2003- 4C 17 2A           JMP WARMST      WARM START ENTRY
0175                   *
0176                   *
0177                   * ASSEMBLER BUFFERS AND CONSTANTS:
0178                   **********************************
0179                   *
0180  2006- 00 50      OBSTR   WRD $5000       START OF OBJECT BUFFER
0181  2008- FE 8F      OBEND   WRD $8FFE       END OF OBJECT BUFFER -1
0182                   *
0183  200A- 00 90      SAVNAM  WRD $9000       INPUT FILE NAME BUFFER
0184                   *
0185  200C- 00 30      LABSTR  WRD $3000       START OF LABEL TABLE
0186  200E- F0 4F      LABEND  WRD $4FF0       END OF LABEL TABLE
0187                   *
0188  2010- 32         TABLE   BYT 50          PRINTED LINES/PAGE
0189  2011- 45                 BYT 69          TOTAL LINES/PAGE
0190  2012- 0C                 BYT $0C         FORM FEED CODE
0191  2013- 00                 BYT 0           NO OF ADD. PAD CHARS
0192  2014- 41                 BYT 65          POSITION OF PAPER MARK
0193  2015- CE                 BYT $CE         START POSITION ON PAPER
0194                   *
0195                   * SUBROUTINE VECTORS
0196                   ********************
0197                   *
0198                   GETKEY  EQU $E000
0199                   GETCHR  EQU $E003
0200                   GETLIN  EQU $E006
0201                   PRTCHR  EQU $E009
0202                   VAUTOP  EQU $E00C
0203                   ENDLIN  EQU $E024
0204                   PRTINF  EQU $E027
0205                   PRTBYT  EQU $E02D
0206                   PRTAX   EQU $E030
0207  2016- 4C 20 EB   WRFILA  JMP WRFILE+12   SPECIAL ENTRY!
0208                   WRFILE  EQU $EB14
0209                   OPEN    EQU $F00F
0210                   CLOSE   EQU $F012
0211                   READCH  EQU $F018
0212                   PRTDAT  EQU $F80F
0213                   GETNAM  EQU $F815
0214  2019- 4C F2 FC   HARGUM  JMP $FCF2
0215                   PACKTS  EQU $F919
0216                   *

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 18/03/18   R65 ASSEMBLER  PAGE 06

0217                   *
0218                   * SUBROUTINE SRLAB: SEARCH LABEL
0219                   ********************************
0220                   * SEARCH IN LABTB, RETURN C0 IF NOT
0221                   * FOUND, ELSE LBAPNT=ADDRESS OF LABEL
0222                   * USED: TEMP1,A; SAVED: X,Y; OUPUT: A,Z
0223                   *
0224  201C- 84 37      SRLAB   STY TEMP1
0225  201E- AD 0C 20           LDA LABSTR      SET TO START OF TABLE
0226  2021- AC 0D 20           LDY LABSTR+1
0227                   *
0228  2024- 85 97      SRLAB1  STA LABPNT
0229  2026- 84 98              STY LABPNT+1
0230  2028- C5 B0              CMP LABCNT      COMPARE TABLE END
0231  202A- 98                 TYA
0232  202B- E5 B1              SBC LABCNT+1
0233  202D- B0 1C              BCS SRLAB4      SKIP, IF END OF TABLE
0234  202F- A0 04              LDY =4
0235  2031- B9 30 00   SRLAB2  LDA LABEL,Y     COMPARE NOW
0236  2034- D1 97              CMP (LABPNT),Y
0237  2036- D0 07              BNE SRLAB3
0238  2038- 88                 DEY
0239  2039- 10 F6              BPL SRLAB2      LOOP UNTIL DONE
0240  203B- 38                 SEC             LABEL FOUND
0241  203C- A4 37              LDY TEMP1
0242  203E- 60                 RTS
0243                   *
0244  203F- A5 97      SRLAB3  LDA LABPNT      DIFFERENCE FOUND
0245  2041- A4 98              LDY LABPNT+1
0246  2043- 18                 CLC
0247  2044- 69 08              ADC =8          NEXT ONE
0248  2046- 90 DC              BCC SRLAB1
0249  2048- C8                 INY
0250  2049- B0 D9              BCS SRLAB1      ALLWAYS TAKEN
0251                   *
0252  204B- 18         SRLAB4  CLC             NOT FOUND
0253  204C- A4 37              LDY TEMP1
0254  204E- 60                 RTS
0255                   *
0256                   *
0257                   * SUBROUTINE STLABN: STORE LABEL NAME
0258                   *************************************
0259                   * STORE IN LABTAB, ERROR IF TABLE OVERFLOW
0260                   * NO DUPLICATE LABEL TEST, LABTB7 SET TO 0
0261                   * USED: A,Y; SAVED: X; INPUT: LABCNT;
0262                   * OUTPUT: LABCNT, CALLED: ERROR 34
0263                   *
0264  204F- A5 B0      STLABN  LDA LABCNT      COMPUTE LABPNT
0265  2051- A4 B1              LDY LABCNT+1
0266  2053- 18                 CLC

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 18/03/18   R65 ASSEMBLER  PAGE 07

0267  2054- 69 08              ADC =8
0268  2056- 90 01              BCC *+3
0269  2058- C8                 INY
0270  2059- 48                 PHA
0271  205A- CD 0E 20           CMP LABEND      TEST TABLE OVERFLOW
0272  205D- 98                 TYA
0273  205E- ED 0F 20           SBC LABEND+1
0274  2061- 68                 PLA
0275  2062- 90 09              BCC STLAB1      SKIP, IF NOT FULL
0276                   *
0277  2064- A9 34              LDA =$34        ERROR 34: TOO MANY
0278  2066- 20 38 29           JSR ERROR       ERRORS
0279  2069- A5 B0              LDA LABCNT
0280  206B- A4 B1              LDY LABCNT+1
0281                   *
0282  206D- 85 B0      STLAB1  STA LABCNT
0283  206F- 84 B1              STY LABCNT+1
0284  2071- 38                 SEC
0285  2072- E9 08              SBC =8
0286  2074- B0 01              BCS *+3
0287  2076- 88                 DEY
0288  2077- 85 97              STA LABPNT
0289  2079- 84 98              STY LABPNT+1
0290                   *
0291  207B- A0 04              LDY =4
0292  207D- B9 30 00   STLAB2  LDA LABEL,Y
0293  2080- 91 97              STA (LABPNT),Y
0294  2082- 88                 DEY
0295  2083- 10 F8              BPL STLAB2
0296                   *
0297  2085- A9 00              LDA =0          CLEAR BYTE 7
0298  2087- A0 07              LDY =7
0299  2089- 91 97              STA (LABPNT),Y
0300  208B- 60                 RTS
0301                   *
0302                   *  SUBROUTINE RDLAB: READ LABEL FROM BUFFER
0303                   *******************************************
0304                   * READ 1-7 CHARS, SHIFT INTO 5 BYTES, STORE
0305                   * IN LABEL, TERMINATORS ARE NOT LETTERS OR
0306                   * NUMBERS. USED: A,X,Y,TEMP1; CALLED: ERROR;
0307                   * INPUT:X; OUTPUT: LABEL,X
0308                   *
0309  208C- A0 08      RDLAB   LDY =8          CHAR COUNTER
0310  208E- A9 06              LDA =6
0311  2090- 85 37              STA TEMP1       TEMP1 = BIT COUNTER
0312  2092- B5 00              LDA INBUFF,X    GET ONE CHAR
0313  2094- C9 30              CMP =$30        IF NOT LEGAL CODE
0314  2096- 90 04              BCC *+6         USE SAME NEXT LOOP
0315  2098- C9 5B              CMP =$5B        IF LEGAL
0316  209A- 90 03              BCC *+5         USE THIS CHAR

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 18/03/18   R65 ASSEMBLER  PAGE 08

0317  209C- CA                 DEX             USE SAME CHAR AGAIN
0318  209D- A9 00              LDA =0          USE 0 FILLER
0319  209F- 88                 DEY             COUNT CHAR
0320  20A0- F0 21              BEQ RDLAB2      LAST CHAR
0321  20A2- 0A                 ASL A
0322  20A3- 0A                 ASL A
0323  20A4- C0 06              CPY =6          IF X<6
0324  20A6- 90 08              BCC RDLAB1      USE 6 BITS
0325  20A8- C6 37              DEC TEMP1
0326  20AA- 0A                 ASL A           TAKE ONLY 5 BITS
0327  20AB- 90 03              BCC RDLAB1      LEGAL 5 BIT CODE
0328  20AD- A9 00              LDA =0          ELSE USE FILLER
0329  20AF- CA                 DEX
0330  20B0- 0A         RDLAB1  ASL A           SHIFT INTO LABEL
0331  20B1- 26 34              ROL LABEL+4
0332  20B3- 26 33              ROL LABEL+3
0333  20B5- 26 32              ROL LABEL+2
0334  20B7- 26 31              ROL LABEL+1
0335  20B9- 26 30              ROL LABEL
0336  20BB- C6 37              DEC TEMP1
0337  20BD- D0 F1              BNE RDLAB1      LOOP FOR BITS
0338  20BF- E8                 INX
0339  20C0- 4C 8E 20           JMP RDLAB+2
0340  20C3- C9 00      RDLAB2  CMP =0
0341  20C5- D0 06              BNE *+8         MORE THAN 6 CHARACTERS
0342  20C7- A5 30              LDA LABEL
0343  20C9- F0 02              BEQ *+4         FIRST CHAR NOT LETTER
0344  20CB- E8                 INX
0345  20CC- 60                 RTS
0346  20CD- A9 32              LDA =$32
0347  20CF- 4C 38 29           JMP ERROR       RETURN AFTER ERROR
0348                   *
0349                   *
0350                   * SUBROUTINE RDBL: READ BLANKS
0351                   ******************************
0352                   * USED: A; SAVED:Y; INPUT:X; OUTPUT:X
0353                   *
0354  20D2- B5 00      RDBL    LDA INBUFF,X
0355  20D4- E8                 INX
0356  20D5- C9 20              CMP =$20
0357  20D7- F0 F9              BEQ RDBL
0358  20D9- CA                 DEX
0359  20DA- 60                 RTS
0360                   *
0361                   *
0362                   * SUBROUTINE EXPRESSION
0363                   ***********************
0364                   * READ EXPRESSION FROM INBUFF,X.  COMPUTE
0365                   * VALUE AND RESOLV-FLAG (GIVES NUMBER OF
0366                   * UNRESOLVED REFERENCES USED

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 18/03/18   R65 ASSEMBLER  PAGE 09

0367                   * SYNTAX:
0368                   * EXPRESSION: FUNCTION [+-FUNCTION]
0369                   * FUNCTION:   <ARGUMENT OR >ARGUMENT OR
0370                   *               ARGUMENT
0371                   * ARGUMENT:   'CHAR['] OR $HEX OR #BINARY OR
0372                   *               DECIMAL OR * OR LABEL
0373                   * USED: A,X,Y; INPUT:X; OUTPUT: X,VALUE
0374                   *               RESOLVE,RESOLV+1;
0375                   *               CALLED: FUNC,ERROR
0376                   *
0377  20DB- A9 00      EXPRES  LDA =0          SET COUNTER FOR
0378  20DD- 85 39              STA RESOLV      UNRESOLVED LABELS
0379  20DF- 20 17 21           JSR FUNC
0380  20E2- 48         EXP1    PHA             PUSH RESULT ON STACK
0381  20E3- A5 5C              LDA VALUE
0382  20E5- 48                 PHA
0383  20E6- B5 00              LDA INBUFF,X    GET NEXT CHAR
0384  20E8- C9 2B              CMP =$2B        IF +
0385  20EA- D0 12              BNE MINUS
0386  20EC- E8                 INX
0387  20ED- 20 17 21           JSR FUNC        GET NEXT FUNCTION
0388  20F0- 68                 PLA             AND ADD TO SAVED VALUE
0389  20F1- 18                 CLC
0390  20F2- 65 5C              ADC VALUE
0391  20F4- 85 5C              STA VALUE
0392  20F6- 68                 PLA
0393  20F7- 65 5D              ADC VALUE+1
0394  20F9- 85 5D              STA VALUE+1
0395  20FB- 4C E2 20           JMP EXP1
0396  20FE- C9 2D     MINUS   CMP =$2D        IF -
0397  2100- D0 12              BNE EXP2
0398  2102- E8                 INX
0399  2103- 20 17 21           JSR FUNC        GET NEXT FUNCTION
0400  2106- 68                 PLA             AND SUBTRACT FROM SAVED
0401  2107- 38                 SEC
0402  2108- E5 5C              SBC VALUE
0403  210A- 85 5C              STA VALUE
0404  210C- 68                 PLA
0405  210D- E5 5D              SBC VALUE+1
0406  210F- 85 5D              STA VALUE+1
0407  2111- 4C E2 20           JMP EXP1
0408  2114- 68         EXP2    PLA             GET SAVED VALUE BACK
0409  2115- 68                 PLA
0410  2116- 60                 RTS
0411                   *
0412                   *
0413                   * SUBROUTINE FUNCTION
0414                   *********************
0415                   * CALLED: ARG
0416                   *

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 18/03/18   R65 ASSEMBLER  PAGE 10

0417  2117- B5 00      FUNC    LDA INBUFF,X
0418  2119- C9 3C              CMP =$3C        IF < (LOW BYTE)
0419  211B- D0 09              BNE *+11
0420  211D- E8                 INX
0421  211E- 20 33 21           JSR ARG         GET ARGUMENT
0422  2121- A9 00      FUNC1   LDA =0          AND SET HIGH BYTE TO 0
0423  2123- 85 5D              STA VALUE+1
0424  2125- 60                 RTS
0425                   *
0426  2126- C9 3E              CMP =$3E        IF > (HIGH BYTE)
0427  2128- D0 09              BNE ARG
0428  212A- E8                 INX
0429  212B- 20 33 21           JSR ARG         GET ARGUMENT
0430  212E- 85 5C              STA VALUE       STORE HIGH BYTE IN
0431  2130- 4C 21 21           JMP FUNC1       LOW BYTE AND CLEAR HIGH
0432                   *
0433                   *
0434                   * SUBROUTINE ARGUMENT
0435                   *********************
0436                   * CALLED: ERROR,PACKTS,TSTBIN,DIGTST,RDLAB,
0437                   * SRLAB,STLABN,SETREF
0438                   *
0439  2133- B5 00      ARG     LDA INBUFF,X
0440  2135- C9 28              CMP =$28        IF (
0441  2137- D0 13              BNE ARG05
0442  2139- E8                 INX
0443  213A- 20 DF 20           JSR EXPRES+4    GET EXPRESSION
0444  213D- B5 00              LDA INBUFF,X    MUST BE )
0445  213F- C9 29              CMP =$29
0446  2141- F0 05              BEQ *+7
0447  2143- A9 31              LDA =$31
0448  2145- 20 38 29           JSR ERROR
0449  2148- E8                 INX
0450  2149- A5 5D              LDA VALUE+1
0451  214B- 60                 RTS
0452                   *
0453  214C- C9 27      ARG05   CMP =$27        IF '
0454  214E- D0 12              BNE ARG10
0455  2150- E8                 INX
0456  2151- B5 00              LDA INBUFF,X    GET CHAR
0457  2153- 85 5C              STA VALUE
0458  2155- E8                 INX
0459  2156- B5 00              LDA INBUFF,X    IGNORE SECOND '
0460  2158- C9 27              CMP =$27
0461  215A- D0 01              BNE *+3
0462  215C- E8                 INX
0463  215D- A9 00              LDA =0
0464  215F- 85 5D              STA VALUE+1
0465  2161- 60                 RTS
0466                   *

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 18/03/18   R65 ASSEMBLER  PAGE 11

0467  2162- C9 24      ARG10   CMP =$24        IF $ (HEX)
0468  2164- D0 24              BNE ARG20
0469  2166- E8                 INX
0470  2167- A9 00              LDA =0
0471  2169- 85 F8              STA INL
0472  216B- 85 F9              STA INL+1
0473  216D- B5 00              LDA INBUFF,X
0474  216F- 20 1B F9           JSR PACKTS+2
0475  2172- F0 05              BEQ *+7
0476  2174- A9 33              LDA =$33
0477  2176- 20 38 29           JSR ERROR
0478  2179- E8                 INX
0479  217A- B5 00              LDA INBUFF,X
0480  217C- 20 1B F9           JSR PACKTS+2
0481  217F- F0 F8              BEQ *-6
0482  2181- A5 F8              LDA INL
0483  2183- 85 5C              STA VALUE
0484  2185- A5 F9              LDA INL+1
0485  2187- 85 5D              STA VALUE+1
0486  2189- 60                 RTS
0487                   *
0488  218A- C9 23      ARG20   CMP =$23        IF # (BINARY)
0489  218C- D0 1A              BNE ARG30
0490  218E- E8                 INX             READ BINARY NUMBER
0491  218F- A9 00              LDA =0
0492  2191- 85 5C              STA VALUE
0493  2193- 85 5D              STA VALUE+1
0494  2195- 20 2A 22           JSR TSTBIN
0495  2198- F0 05              BEQ *+7
0496  219A- A9 35              LDA =$35
0497  219C- 20 38 29           JSR ERROR
0498  219F- E8                 INX
0499  21A0- 20 2A 22           JSR TSTBIN
0500  21A3- F0 FA              BEQ *-4
0501  21A5- A5 5D              LDA VALUE+1
0502  21A7- 60                 RTS
0503                   *
0504  21A8- 20 3D 22   ARG30   JSR DIGTST      IF DECIMAL NUMBER
0505  21AB- B0 12              BCS ARG40
0506  21AD- A9 00              LDA =0          READ DECIMAL NUMBER
0507  21AF- 85 5C              STA VALUE
0508  21B1- 85 5D              STA VALUE+1
0509  21B3- 20 3D 22           JSR DIGTST
0510  21B6- E8                 INX
0511  21B7- 20 3D 22           JSR DIGTST
0512  21BA- 90 FA              BCC *-4
0513  21BC- A5 5D              LDA VALUE+1
0514  21BE- 60                 RTS
0515                   *
0516  21BF- C9 2A      ARG40   CMP =$2A        IF *

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 18/03/18   R65 ASSEMBLER  PAGE 12

0517  21C1- D0 0A              BNE ARG50
0518  21C3- E8                 INX             GET PROGRAM COUNTER
0519  21C4- A5 9E              LDA PCOLD
0520  21C6- 85 5C              STA VALUE
0521  21C8- A5 9F              LDA PCOLD+1
0522  21CA- 85 5D              STA VALUE+1
0523  21CC- 60                 RTS
0524                   *
0525  21CD- 20 8C 20   ARG50   JSR RDLAB       MUST BE LABEL
0526  21D0- 20 1C 20           JSR SRLAB
0527  21D3- 90 3A              BCC ARG52       BRANCH IF UNKNOWN
0528  21D5- 20 CF 2D           JSR SETREF      INSERT INTO REF TABLE
0529  21D8- 20 79 22           JSR DEFIN       IF DEFINED
0530  21DB- F0 18              BEQ ARG51
0531  21DD- A5 A9              LDA PASSFL
0532  21DF- F0 08              BEQ *+10
0533  21E1- A0 07              LDY =7
0534  21E3- B1 97              LDA (LABPNT),Y  GET RFLAG
0535  21E5- 30 02              BMI *+4
0536  21E7- E6 39              INC RESOLV
0537  21E9- A0 05              LDY =5
0538  21EB- B1 97              LDA (LABPNT),Y  GET VALUE
0539  21ED- 85 5C              STA VALUE
0540  21EF- C8                 INY
0541  21F0- B1 97              LDA (LABPNT),Y
0542  21F2- 85 5D              STA VALUE+1
0543  21F4- 60                 RTS
0544  21F5- E6 39      ARG51   INC RESOLV      COUNT UNRESOLVED REF
0545  21F7- A5 97              LDA LABPNT
0546  21F9- 85 3A              STA RESOLV+1
0547  21FB- A5 98              LDA LABPNT+1
0548  21FD- 85 3B              STA RESOLV+2    SAVE LABEL NUMBER
0549  21FF- A5 A9             LDA PASSFL
0550  2201- F0 05              BEQ *+7
0551  2203- A9 36              LDA =$36
0552  2205- 20 38 29           JSR ERROR
0553  2208- A9 00              LDA =0
0554  220A- 85 5C              STA VALUE       RETURN VALUE = 0
0555  220C- 85 5D              STA VALUE+1
0556  220E- 60                 RTS
0557  220F- 20 4F 20   ARG52   JSR STLABN      STORE LABEL NAME
0558  2212- A5 A9              LDA PASSFL
0559  2214- F0 05              BEQ *+7
0560  2216- A9 36              LDA =$36
0561  2218- 20 38 29           JSR ERROR
0562  221B- A9 FF              LDA =$FF        SET TO UNRESOLVED
0563  221D- A0 05              LDY =5
0564  221F- 91 97              STA (LABPNT),Y
0565  2221- C8                 INY
0566  2222- 91 97              STA (LABPNT),Y

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 18/03/18   R65 ASSEMBLER  PAGE 13

0567  2224- 20 CF 2D           JSR SETREF
0568  2227- 4C F5 21           JMP ARG51
0569                   *
0570                   *
0571                   * SUBROUTINE TSTBIN: GET AND TEST BINARY NUMBER
0572                   ***********************************************
0573                   *
0574  222A- B5 00      TSTBIN  LDA INBUFF,X
0575  222C- C9 30              CMP =$30
0576  222E- 18                 CLC
0577  222F- F0 05              BEQ *+7
0578  2231- C9 31              CMP =$31
0579  2233- D0 07              BNE *+9
0580  2235- 38                 SEC
0581  2236- 26 5C              ROL VALUE
0582  2238- 26 5D              ROL VALUE+1
0583  223A- A9 00              LDA =0          SET ZERO FLAG
0584  223C- 60                 RTS
0585                   *
0586                   *
0587                   * SUBROUTINE DIGTST: TEST AND GET DECIMAL
0588                   *****************************************
0589                   *
0590  223D- B5 00      DIGTST  LDA INBUFF,X
0591  223F- C9 30              CMP =$30
0592  2241- 90 04              BCC *+6
0593  2243- C9 3A              CMP =$3A
0594  2245- 90 02              BCC *+4
0595  2247- 38                 SEC             C=1 >> NOT DECIMAL
0596  2248- 60                 RTS
0597                   *
0598  2249- 06 5C              ASL VALUE       MULTIPLY VALUE BY 10
0599  224B- 26 5D              ROL VALUE+1
0600  224D- A5 5C              LDA VALUE       SAVE 2*VALUE
0601  224F- 85 F8              STA INL
0602  2251- A5 5D              LDA VALUE+1
0603  2253- 85 F9              STA INL+1
0604  2255- 06 5C              ASL VALUE
0605  2257- 26 5D              ROL VALUE+1
0606  2259- 06 5C              ASL VALUE
0607  225B- 26 5D              ROL VALUE+1     8*VALUE
0608  225D- A5 5C              LDA VALUE
0609  225F- 18                 CLC
0610  2260- 65 F8              ADC INL
0611  2262- 85 5C              STA VALUE
0612  2264- A5 5D              LDA VALUE+1
0613  2266- 65 F9              ADC INL+1
0614  2268- 85 5D              STA VALUE+1     10*VALUE
0615  226A- B5 00              LDA INBUFF,X
0616  226C- 29 0F              AND =$0F        CONVERT TO BCD

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 18/03/18   R65 ASSEMBLER  PAGE 14

0617  226E- 18                 CLC
0618  226F- 65 5C              ADC VALUE       ADD TO 10*VALUE
0619  2271- 85 5C              STA VALUE
0620  2273- 90 02              BCC *+4
0621  2275- E6 5D              INC VALUE+1
0622  2277- 18                 CLC             C=0 >> DECIMAL
0623  2278- 60                 RTS
0624                   *
0625                   *
0626                   * SUBROUTINE DEFIN
0627                   ******************
0628                   * RETURN Z=1 IF LABEL UNDEFINED
0629                   * INPUT: LABEL IN LABPNT
0630                   *
0631  2279- A0 05      DEFIN   LDY =5
0632  227B- B1 97              LDA (LABPNT),Y
0633  227D- C8                 INY
0634  227E- 31 97              AND (LABPNT),Y
0635  2280- C9 FF              CMP =$FF
0636  2282- 60                 RTS
0637                   *
0638                   *
0639                   * SUBROUTINE RDOPC: READ OPCODE FROM INBUFF
0640                   *******************************************
0641                   * PACK IN OPCODE WITH SAME FORMAT AS DISASSEM-
0642                   * BLER (5BIT/CHAR, OFFSET=$3F, LEFT SHIFTED 1)
0643                   * USED: A,X,Y,TEMP1; INPUT: X; OUTPUT; X,
0644                   * OPCODE; CALLED: ERROR
0645                   *
0646  2283- A9 03      RDOPC   LDA =3
0647  2285- 85 37              STA TEMP1       CHAR COUNTER
0648  2287- B5 00      RDOPC1  LDA INBUFF,X    GET A CHAR
0649  2289- C9 41              CMP =$41        TEST FOR LETTER
0650  228B- 90 04              BCC ERR7
0651  228D- C9 5B              CMP =$5B
0652  228F- 90 0B              BCC *+13
0653  2291- A0 00      ERR7    LDY =0
0654  2293- 84 5E              STY OPCODE
0655  2295- 84 5F              STY OPCODE+1
0656  2297- A9 37              LDA =$37
0657  2299- 4C 38 29           JMP ERROR
0658                   *
0659  229C- E8                 INX
0660  229D- 38                 SEC
0661  229E- E9 3F              SBC =$3F        SUBTRACT OFFSET
0662  22A0- 0A                 ASL A
0663  22A1- 0A                 ASL A
0664  22A2- 0A                 ASL A
0665  22A3- A0 05              LDY =5          BIT COUNTER
0666  22A5- 0A         RDOPC2  ASL A

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 18/03/18   R65 ASSEMBLER  PAGE 15

0667  22A6- 26 5F              ROL OPCODE+1
0668  22A8- 26 5E              ROL OPCODE
0669  22AA- 88                 DEY
0670  22AB- D0 F8              BNE RDOPC2
0671  22AD- C6 37              DEC TEMP1       NEXT CHAR
0672  22AF- D0 D6              BNE RDOPC1
0673  22B1- 06 5F              ASL OPCODE+1
0674  22B3- 26 5E              ROL OPCODE
0675  22B5- B5 00              LDA INBUFF,X    TEST NEXT CHAR
0676  22B7- E8                 INX
0677  22B8- C9 20              CMP =$20        MUST BE BLANK
0678  22BA- F0 03              BEQ *+5
0679  22BC- 20 97 22           JSR ERR7+6
0680  22BF- 60                 RTS
0681                   *
0682                   *
0683                   * SUBROUTINE SROPC: SEARCH OPCODE IN TABLE
0684                   ******************************************
0685                   * USE OPCODE AND ADDRESSING MODE FOR TEST
0686                   *
0687  22C0- A2 41      SROPC   LDX =$41        POINTER TO MNEMONIC TB
0688  22C2- CA                 DEX
0689  22C3- D0 0C              BNE *+14
0690  22C5- A9 38              LDA =$38
0691  22C7- 20 38 29           JSR ERROR
0692  22CA- A9 00              LDA =0
0693  22CC- 85 3C              STA OBJECT
0694  22CE- 4C FA 23           JMP ERR10+5     ASSUME ABS AND OPCODE=0
0695                   *                       IF NOT FOUND
0696  22D1- A5 5F              LDA OPCODE+1
0697  22D3- DD BF E7           CMP MNEMR-1,X
0698  22D6- D0 EA              BNE SROPC+2
0699  22D8- A5 5E              LDA OPCODE
0700  22DA- DD 7F E7           CMP MNEML-1,X
0701  22DD- D0 E3              BNE SROPC+2
0702  22DF- CA                 DEX
0703  22E0- 86 61              STX INDEX1
0704  22E2- 8A                 TXA
0705  22E3- 0A                 ASL A
0706  22E4- 0A                 ASL A
0707  22E5- 0A                 ASL A
0708  22E6- 85 62              STA INDEX2
0709  22E8- B0 0B              BCS SROP30
0710  22EA- 20 47 23   SROP20  JSR TSTADM      ITS XXXXX000 INST
0711  22ED- F0 05              BEQ *+7
0712  22EF- A9 39      ERR9    LDA =$39
0713  22F1- 20 38 29           JSR ERROR
0714  22F4- 60                 RTS
0715  22F5- 06 62      SROP30  ASL INDEX2
0716  22F7- B0 22              BCS SROP50

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 18/03/18   R65 ASSEMBLER  PAGE 16

0717  22F9- 10 06              BPL SROP40
0718  22FB- A5 62              LDA INDEX2      ITS 1XXX1010 INST
0719  22FD- 09 8A              ORA =$8A        COMPUTE OPCODE
0720  22FF- D0 E9             BNE SROP20
0721                   *
0722  2301- 06 62      SROP40  ASL INDEX2      ITS XXXYY100 INST
0723  2303- A0 03              LDY =3
0724  2305- 98                 TYA
0725  2306- 38                 SEC
0726  2307- 2A                 ROL A
0727  2308- 0A                 ASL A
0728  2309- 0A                 ASL A
0729  230A- 05 62              ORA INDEX2
0730  230C- 20 47 23           JSR TSTADM
0731  230F- D0 01              BNE *+3
0732  2311- 60                 RTS             RETURN, IF FOUND
0733  2312- 88                 DEY             TRY AGAIN
0734  2313- 10 F0              BPL SROP40+4
0735  2315- A6 61              LDX INDEX1      IF NOT FOUND, SEARCH
0736  2317- E8                 INX             CODE AGAIN (DOUBLE
0737  2318- 4C C2 22           JMP SROPC+2     CODES IN TABLE!)
0738                   *
0739  231B- 06 62      SROP50  ASL INDEX2
0740  231D- B0 14              BCS SROP60      IF XXXYYY10 INST
0741  231F- A0 07              LDY =7
0742  2321- 98                 TYA
0743  2322- 38                 SEC
0744  2323- 2A                 ROL A
0745  2324- 0A                 ASL A
0746  2325- 05 62              ORA INDEX2
0747  2327- 20 47 23           JSR TSTADM      TEST ADDRESSING
0748  232A- D0 01              BNE *+3
0749  232C- 60                 RTS             RETURN, IF FOUND
0750  232D- 88                 DEY             TRY NEXT Y
0751  232E- 10 F1              BPL SROP50+6
0752  2330- 4C EF 22           JMP ERR9
0753                   *
0754  2333- A0 07      SROP60  LDY =7
0755  2335- 98                 TYA
0756  2336- 0A                 ASL A
0757  2337- 38                 SEC
0758  2338- 2A                 ROL A
0759  2339- 05 62              ORA INDEX2
0760  233B- 20 47 23           JSR TSTADM
0761  233E- D0 01              BNE *+3
0762  2340- 60                 RTS             RETURN, IF FOUND
0763  2341- 88                 DEY
0764  2342- 10 F1              BPL SROP60+2
0765  2344- 4C EF 22           JMP ERR9
0766                   *

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 18/03/18   R65 ASSEMBLER  PAGE 17

0767                   *
0768                   * SUBROUTINE TSTADM: TEST ADDRESSING MODE
0769                   *****************************************
0770                   * ADDRESSING MODE CAN BE CHANGED IF NEEDED
0771                   *
0772  2347- 85 3C      TSTADM  STA OBJECT      SAVE OPCODE
0773  2349- 4A                 LSR A           COMPUTE ADDRESSING MODE
0774  234A- 90 05              BCC *+7         FOR THIS CODE
0775  234C- 4A                 LSR A
0776  234D- 29 07              AND =7
0777  234F- 09 80              ORA =$80
0778  2351- 4A                 LSR A
0779  2352- AA                 TAX
0780  2353- BD 22 E7           LDA DISMOD,X    LOAD MODE FROM TABLE
0781  2356- B0 04              BCS *+6
0782  2358- 4A                 LSR A
0783  2359- 4A                 LSR A
0784  235A- 4A                 LSR A
0785  235B- 4A                 LSR A
0786  235C- 29 0F              AND =$0F        COMPUTE MODE IN A
0787  235E- AA                 TAX             AND SAVE IN X
0788  235F- C9 0D              CMP =$0D                IF RELATIVE
0789  2361- D0 0D              BNE TSTAD1
0790  2363- A5 60              LDA ADMODE      CONVERT IT
0791  2365- C9 02              CMP =2          CAN BE ZERO PAGE
0792  2367- F0 04              BEQ *+6
0793  2369- C9 03              CMP =3          CAN BE ABSOLUTE
0794  236B- D0 03              BNE *+5
0795  236D- 86 60              STX ADMODE
0796  236F- 60                 RTS
0797                   *
0798  2370- A5 60      TSTAD1  LDA ADMODE
0799  2372- C9 02              CMP =2          ZERO PAGE
0800  2374- D0 11              BNE TSTAD3
0801  2376- A5 3C              LDA OBJECT
0802  2378- C9 4C              CMP =$4C        IF JMP
0803  237A- F0 04              BEQ *+6
0804  237C- C9 20              CMP =$20        OR JSR
0805  237E- D0 04              BNE TSTAD2
0806  2380- A9 03              LDA =3          SET TO ABSOLUTE
0807  2382- 85 60              STA ADMODE
0808  2384- E4 60      TSTAD2  CPX ADMODE      TEST NOW
0809  2386- 60                 RTS
0810                   *
0811  2387- C9 0C      TSTAD3  CMP =$0C        ZERO PAGE,Y
0812  2389- D0 F9              BNE TSTAD2
0813  238B- A5 3C              LDA OBJECT
0814  238D- 29 0F              AND =$0F
0815  238F- C9 09              CMP =$09
0816  2391- F0 F1              BEQ TSTAD2

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 18/03/18   R65 ASSEMBLER  PAGE 18

0817  2393- A9 0A              LDA =$A         CONVERT TO ABS,Y
0818  2395- 4C 82 23           JMP TSTAD2-2    IF CODE =X9
0819                   *
0820                   *
0821                   * SUBROUTINE OPER: INTERPRET OPERAND
0822                   ************************************
0823                   * USED: A,X,Y,TEMP1; INPUT:X; OUTPUT:RESOLV
0824                   * VALUE,D(ADDRESSING MODE); CALLED: EXPRES,
0825                   * ERROR,ZPAGE
0826                   *
0827  2398- B5 00      OPER    LDA INBUFF,X
0828  239A- C9 3D              CMP =$3D        IF =
0829  239C- D0 07              BNE *+9
0830  239E- E8                 INX             IMMEDIATE (1)
0831  239F- 20 DB 20           JSR EXPRES
0832  23A2- A9 01              LDA =1
0833  23A4- 60                 RTS
0834                   *
0835  23A5- C9 20              CMP =$20        IF BLANK
0836  23A7- D0 04              BNE *+6
0837  23A9- E8                 INX
0838  23AA- A9 04              LDA =4          IMPLIED (4)
0839  23AC- 60                 RTS
0840                   *
0841  23AD- C9 41              CMP =$41        IF A
0842  23AF- D0 0D              BNE OPER15
0843  23B1- E8                 INX
0844  23B2- B5 00              LDA INBUFF,X    AND BLANK
0845  23B4- C9 20              CMP =$20
0846  23B6- D0 03              BNE *+5
0847  23B8- A9 05              LDA =5          ACCUMULATOR (5)
0848  23BA- 60                 RTS
0849                   *
0850                   *
0851  23BB- CA                 DEX
0852  23BC- B5 00              LDA INBUFF,X
0853                   *
0854  23BE- C9 28      OPER15  CMP =$28        IF (
0855  23C0- D0 57              BNE OPER20
0856  23C2- E8                 INX
0857  23C3- 20 DB 20           JSR EXPRES      GET EXPRESSION
0858  23C6- B5 00              LDA INBUFF,X
0859  23C8- C9 2C              CMP =$2C        IF NOW ,
0860  23CA- D0 1A              BNE OPER16
0861  23CC- E8                 INX
0862  23CD- B5 00              LDA INBUFF,X
0863  23CF- C9 58              CMP =$58        MUST BE X
0864  23D1- D0 22              BNE ERR10
0865  23D3- E8                 INX
0866  23D4- B5 00              LDA INBUFF,X

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 18/03/18   R65 ASSEMBLER  PAGE 19

0867  23D6- C9 29              CMP =$29        AND )
0868  23D8- D0 1B              BNE ERR10
0869  23DA- 20 53 24           JSR ZPAGE       MUST BE ZERO PAGE
0870  23DD- F0 03              BEQ *+5
0871  23DF- 20 FD 23           JSR ERR11
0872  23E2- E8                 INX
0873  23E3- A9 06              LDA =6          (X.PAGE,X) (6)
0874  23E5- 60                 RTS
0875                   *
0876  23E6- C9 29      OPER16  CMP =$29        MUST BE )
0877  23E8- D0 0B              BNE ERR10
0878  23EA- E8                 INX
0879  23EB- B5 00              LDA INBUFF,X
0880  23ED- C9 20              CMP =$20        IF NOW BLANK
0881  23EF- D0 11              BNE OPER17
0882  23F1- E8                 INX
0883  23F2- A9 0B              LDA =$0B        (ABSOLUTE) (11)
0884  23F4- 60                 RTS
0885                   *
0886  23F5- A9 40      ERR10   LDA =$40        SYNTAX ERROR IN OPER
0887  23F7- 20 38 29           JSR ERROR
0888  23FA- A9 03              LDA =3          ASSUME ABSOLUTE
0889  23FC- 60                 RTS
0890                   *
0891  23FD- A9 41      ERR11   LDA =$41        MUST BE ZERO PAGE IND
0892  23FF- 4C 38 29          JMP ERROR
0893                   *
0894  2402- C9 2C      OPER17  CMP =$2C        MUST BE ,
0895  2404- D0 EF              BNE ERR10
0896  2406- E8                 INX
0897  2407- B5 00              LDA INBUFF,X
0898  2409- C9 59              CMP =$59        MUST BE Y
0899  240B- D0 E8              BNE ERR10
0900  240D- E8                 INX
0901  240E- 20 53 24           JSR ZPAGE
0902  2411- F0 03              BEQ *+5         MSU BE ZERO PAGE
0903  2413- 20 FD 23           JSR ERR11
0904  2416- A9 07              LDA =7          (ZERO PAGE),Y (7)
0905  2418- 60                 RTS
0906                   *
0907  2419- 20 DB 20   OPER20  JSR EXPRES      MUST BE EXPRESSION
0908  241C- B5 00              LDA INBUFF,X
0909  241E- C9 20              CMP =$20        IF NOW BLANK
0910  2420- D0 0B              BNE OPER25
0911  2422- 20 53 24           JSR ZPAGE
0912  2425- D0 03              BNE *+5
0913  2427- A9 02              LDA =2          ZERO PAGE (2)
0914  2429- 60                 RTS
0915                   *
0916  242A- A9 03              LDA =3          ABSOLUTE

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 18/03/18   R65 ASSEMBLER  PAGE 20

0917  242C- 60                 RTS
0918                   *
0919  242D- C9 2C      OPER25  CMP =$2C        MUST BE ,
0920  242F- D0 C4              BNE ERR10
0921  2431- E8                 INX
0922  2432- B5 00              LDA INBUFF,X
0923  2434- E8                 INX
0924  2435- C9 58              CMP =$58        IF NOW X
0925  2437- D0 0B              BNE OPER30
0926  2439- 20 53 24           JSR ZPAGE
0927  243C- D0 03              BNE *+5
0928  243E- A9 08              LDA =8          ZERO PAGE,X (8)
0929  2440- 60                 RTS
0930                   *
0931  2441- A9 09              LDA =9          ZERO PAGE,Y (12)
0932  2443- 60                 RTS
0933                   *
0934  2444- C9 59      OPER30  CMP =$59        MUST BE Y
0935  2446- D0 AD              BNE ERR10
0936  2448- 20 53 24           JSR ZPAGE
0937  244B- D0 03              BNE *+5
0938  244D- A9 0C              LDA =$0C        ZERO PAGE,Y (12)
0939  244F- 60                 RTS
0940                   *
0941  2450- A9 0A              LDA =$0A        ABSOLUTE,Y (10
0942  2452- 60                 RTS
0943                   *
0944                   *
0945                   * SUBROUTINE ZPAGE
0946                   ******************
0947                   * TEST FOR ZERO PAGE ADDRESSING
0948                   * RETURN Z=1 IF ZERO PAGE
0949                   *
0950  2453- A5 39      ZPAGE   LDA RESOLV
0951  2455- D0 02              BNE *+4         ASSUME ABS IF UNDEFINED
0952  2457- A5 5D              LDA VALUE+1
0953  2459- 60                 RTS
0954                   *
0955                   *
0956                   * SUBROUTINE DEFLAB: DEFINE LABEL
0957                   *********************************
0958                   * USED: A,Y; SAVED:X; INPUT: LABEL, VALUE,
0959                   * LABPNT; CALLED SRLAB,STLAB,ERROR,DEFIN
0960                   *
0961  245A- 20 1C 20   DEFLAB  JSR SRLAB       IF LABEL IN TAB;E
0962  245D- B0 06              BCS *+8           DO NOT STORE
0963  245F- 20 4F 20           JSR STLABN      ELSE STORE
0964  2462- 4C 91 24           JMP DEFL1
0965                   *
0966  2465- A5 A9              LDA PASSFL

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 18/03/18   R65 ASSEMBLER  PAGE 21

0967  2467- D0 03              BNE *+5
0968  2469- 20 30 2D           JSR RESFBR      RESOLVE BRANCHES
0969  246C- 20 79 22           JSR DEFIN
0970  246F- F0 20              BEQ DEFL1       IF DEFINED
0971  2471- A5 A9              LDA PASSFL        TEST PASS FLAG
0972  2473- D0 05              BNE *+7
0973  2475- A9 45              LDA =$45
0974  2477- 4C 38 29           JMP ERROR
0975                   *
0976  247A- A0 05              LDY =5
0977  247C- B1 97              LDA (LABPNT),Y  COMPARE IN PASS 2
0978  247E- C5 5C              CMP VALUE
0979  2480- D0 07              BNE *+9
0980  2482- C8                 INY
0981  2483- B1 97              LDA (LABPNT),Y
0982  2485- C5 5D              CMP VALUE+1
0983  2487- F0 05              BEQ *+7
0984  2489- A9 46              LDA =$46
0985  248B- 20 38 29           JSR ERROR
0986  248E- 4C 9C 24           JMP DEFL2
0987                   *
0988  2491- A5 5C      DEFL1   LDA VALUE       STORE ADDRESS
0989  2493- A0 05              LDY =5
0990  2495- 91 97              STA (LABPNT),Y
0991  2497- A5 5D              LDA VALUE+1
0992  2499- C8                 INY
0993  249A- 91 97              STA (LABPNT),Y
0994                   *
0995  249C- A5 A9      DEFL2   LDA PASSFL
0996  249E- F0 08              BEQ *+10
0997  24A0- A0 07              LDY =7
0998  24A2- B1 97              LDA (LABPNT),Y
0999  24A4- 09 80              ORA =$80        SET RFLAG
1000  24A6- 91 97              STA (LABPNT),Y
1001  24A8- 60                 RTS
1002                   *
1003                   *
1004                   * SUBROUTINE INTLIN:INTERPRET ONE LINE
1005                   **************************************
1006                   *OUTPUT: OBJECT,NUMBYT
1007                   *
1008  24A9- A2 00      INTLIN  LDX =0          CLEAR BUFFER POINTER
1009  24AB- 86 38              STX NUMBYT      CLEAR NUMBER OF BYTES
1010  24AD- 86 63              STX DEFLB       CLEAR LABEL DEF FLAG
1011  24AF- B5 00              LDA INBUFF,X    GET FIRST CHAR
1012  24B1- C9 2A              CMP =$2A        IF *
1013  24B3- D0 01              BNE *+3
1014  24B5- 60                 RTS             RETURN (COMMENT LINE)
1015                   *
1016  24B6- C9 20              CMP =$20        NOT A BLANK

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 18/03/18   R65 ASSEMBLER  PAGE 22

1017  24B8- F0 0F              BEQ INTL2
1018  24BA- 20 8C 20           JSR RDLAB       READ LABEL, NO STORING
1019  24BD- A9 FF              LDA =$FF        AT THIS MOMENT, BUT SET
1020  24BF- 85 63              STA DEFLB       LABEL DEFINITION FLAG
1021  24C1- A5 9E              LDA PCOLD       GET ADDRESS FOR LABEL
1022  24C3- 85 5C              STA VALUE
1023  24C5- A5 9F              LDA PCOLD+1
1024  24C7- 85 5D              STA VALUE+1
1025                   *
1026  24C9- 20 D2 20   INTL2   JSR RDBL        READ BLANKS
1027  24CC- 20 83 22           JSR RDOPC       READ NOW OPCODE
1028                   *
1029  24CF- A0 09              LDY =9          SEARCH IN PSEUDO TABLE
1030  24D1- A5 5E              LDA OPCODE
1031  24D3- D9 50 26           CMP PSEUDO,Y
1032  24D6- F0 05              BEQ *+7
1033  24D8- 88                 DEY
1034  24D9- 10 F8              BPL *-6
1035  24DB- 30 07              BMI *+9         BRANCH IF NOT FOUND
1036  24DD- A5 5F              LDA OPCODE+1
1037  24DF- D9 5A 26           CMP PSEUDO+10,Y
1038  24E2- D0 F4              BNE *-10
1039                   *
1040  24E4- 98                 TYA
1041  24E5- 48                 PHA
1042  24E6- D0 20              BNE INTL10      FOUND. IF EQU (0)
1043  24E8- A5 63              LDA DEFLB         TEST DEF FLAG
1044  24EA- D0 05              BNE *+7
1045  24EC- A9 47              LDA =$47        LABEL MISSING IN EQU
1046  24EE- 4C 38 29           JMP ERROR
1047                   *
1048  24F1- A0 04              LDY =4          SAVE LABEL
1049  24F3- B9 30 00   INTL5   LDA LABEL,Y
1050  24F6- 48                 PHA
1051  24F7- 88                 DEY
1052  24F8- 10 F9              BPL INTL5
1053                   *
1054  24FA- 20 64 26           JSR EXPDEF      GET VALUE FOR EQU
1055                   *
1056  24FD- A0 00              LDY =0
1057  24FF- 68        INTL6   PLA             GET BACK LABEL
1058  2500- 99 30 00           STA LABEL,Y
1059  2503- C8                 INY
1060  2504- C0 05              CPY =5
1061  2506- D0 F7              BNE INTL6
1062                   *
1063  2508- A5 63      INTL10  LDA DEFLB       IF LABEL DEFNITION
1064  250A- F0 03              BEQ *+5
1065  250C- 20 5A 24           JSR DEFLAB      DEFINE IT NOW
1066                   *

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 18/03/18   R65 ASSEMBLER  PAGE 23

1067  250F- 68                 PLA             GET AGAIN PSEUDO NUMBER
1068  2510- D0 01              BNE *+3
1069  2512- 60                 RTS             RETURN NOW FROM EQU
1070                   *
1071  2513- C9 01              CMP =1          IF ORG (1)
1072  2515- D0 0E              BNE INTL12
1073  2517- 20 64 26           JSR EXPDEF        GET NEW PC
1074  251A- A5 5C              LDA VALUE
1075  251C- 85 A0              STA PCNEW
1076  251E- A5 5D              LDA VALUE+1
1077  2520- 85 A1              STA PCNEW+1
1078  2522- 4C 62 28           JMP CLOSRC      CLOSE EXISTING OBJ. REC
1079                   *
1080  2525- C9 02      INTL12  CMP =2          IF BSS (2)
1081  2527- D0 13              BNE INTL13
1082  2529- 20 64 26           JSR EXPDEF        GET VALUE
1083  252C- 18                 CLC             ADD TO PCOLD
1084  252D- A5 9E              LDA PCOLD
1085  252F- 65 5C              ADC VALUE
1086  2531- 85 A0              STA PCNEW
1087  2533- A5 9F              LDA PCOLD+1
1088  2535- 65 5D              ADC VALUE+1
1089  2537- 85 A1              STA PCNEW+1
1090  2539- 4C 62 28           JMP CLOSRC      CLOSE EXISTING OBJ. REC
1091                   *
1092  253C- C9 03      INTL13  CMP =3          IF BYT (3)
1093  253E- D0 49              BNE INTL14
1094  2540- B5 00      BYT     LDA INBUFF,X    GET ONE BYTE
1095  2542- C9 27              CMP =$27        IF '
1096  2544- D0 29              BNE BYT3
1097  2546- E8                 INX             GET ASCII STRING
1098  2547- B5 00              LDA INBUFF,X
1099  2549- A4 38      BYT1    LDY NUMBYT
1100  254B- C0 20              CPY =$20
1101  254D- B0 35              BCS ERR18
1102  254F- 99 3C 00           STA OBJECT,Y    STORE
1103  2552- E6 38              INC NUMBYT
1104  2554- E8                 INX
1105  2555- E0 2E              CPX =$2E        TEST END OF INBUFF
1106  2557- B0 2B              BCS ERR18
1107  2559- B5 00              LDA INBUFF,X    TEST NEXT CHAR
1108  255B- C9 27              CMP =$27
1109  255D- D0 EA              BNE BYT1        CONTINUE STRING READ
1110  255F- E8                 INX
1111  2560- C6 38              DEC NUMBYT
1112  2562- B9 3C 00           LDA OBJECT,Y
1113  2565- 85 5C              STA VALUE
1114  2567- A9 00              LDA =0
1115  2569- 20 E2 20           JSR EXP1
1116  256C- 4C 72 25           JMP BYT2

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 18/03/18   R65 ASSEMBLER  PAGE 24

1117                   *
1118  256F- 20 DB 20   BYT3    JSR EXPRES
1119  2572- A5 5C      BYT2    LDA VALUE
1120  2574- A4 38              LDY NUMBYT
1121  2576- 99 3C 00           STA OBJECT,Y
1122  2579- E6 38              INC NUMBYT
1123  257B- B5 00              LDA INBUFF,X
1124  257D- E8                 INX
1125  257E- C9 2C              CMP =$2C
1126  2580- F0 BE              BEQ BYT
1127  2582- CA                 DEX
1128  2583- 60                 RTS
1129                   *
1130  2584- A9 48      ERR18   LDA =$48
1131  2586- 4C 38 29           JMP ERROR       RETURN AFTER ERROR
1132                   *
1133  2589- C9 04      INTL14  CMP =$04                IF WRD (4)
1134  258B- D0 1C              BNE INTL15
1135  258D- 20 DB 20   WRD     JSR EXPRES      GET WORD
1136  2590- A4 38              LDY NUMBYT
1137  2592- A5 5C              LDA VALUE
1138  2594- 99 3C 00           STA OBJECT,Y
1139  2597- C8                 INY
1140  2598- A5 5D              LDA VALUE+1
1141  259A- 99 3C 00           STA OBJECT,Y
1142  259D- C8                 INY
1143  259E- 84 38              STY NUMBYT
1144  25A0- B5 00              LDA INBUFF,X
1145  25A2- E8                 INX
1146  25A3- C9 2C              CMP =$2C        IF ,
1147  25A5- F0 E6              BEQ WRD         CONTINUE
1148  25A7- CA                 DEX
1149  25A8- 60                 RTS
1150                   *
1151  25A9- C9 05      INTL15  CMP =5          IF PAG (5)
1152  25AB- D0 07              BNE INTL16
1153  25AD- A5 AB      PAGE    LDA PAGELN      . SET BIT 7 (PAGE FLAG)
1154  25AF- 09 80              ORA =$80
1155  25B1- 85 AB              STA PAGELN
1156  25B3- 60                 RTS
1157                   *
1158  25B4- C9 06      INTL16  CMP =6          IF TIT (6)
1159  25B6- D0 0C              BNE INTL17
1160  25B8- A0 1F              LDY =$1F          LOAD 32 CHARS
1161  25BA- B5 00              LDA INBUFF,X
1162  25BC- 99 B2 00           STA TITLE,Y
1163  25BF- E8                 INX
1164  25C0- 88                 DEY
1165  25C1- 10 F7              BPL *-7
1166  25C3- 60                 RTS

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 18/03/18   R65 ASSEMBLER  PAGE 25

1167                   *
1168  25C4- C9 07      INTL17  CMP =7          IF END (7)
1169  25C6- D0 03              BNE *+5
1170  25C8- 4C CC 2B           JMP END         GO TO END
1171                   *
1172  25CB- C9 08      INTL18  CMP =$08        IF NPR (8)
1173  25CD- D0 05              BNE INTL19
1174  25CF- A9 00              LDA =0
1175  25D1- 85 AA              STA PRTFLG      INHIBIT PRINTING
1176  25D3- 60                 RTS
1177                   *
1178  25D4- C9 09      INTL19  CMP =$09        IF PRT (9)
1179  25D6- D0 09              BNE INTL20
1180  25D8- A5 A9              LDA PASSFL      DO NOTHIN IN FIRST PASS
1181  25DA- F0 04              BEQ *+6
1182  25DC- A9 80              LDA =$80        SET PRINTING FLAG
1183  25DE- 85 AA              STA PRTFLG
1184  25E0- 60                 RTS
1185                   *
1186  25E1- 20 98 23   INTL20  JSR OPER        MUST BE OPCODE
1187  25E4- 85 60              STA ADMODE      SAVE ADDRESSING MODE
1188  25E6- B5 00              LDA INBUFF,X
1189  25E8- C9 20              CMP =$20
1190  25EA- F0 05              BEQ *+7
1191  25EC- A9 51              LDA =$51
1192  25EE- 20 38 29           JSR ERROR
1193  25F1- A5 5C              LDA VALUE
1194  25F3- 85 3D              STA OBJECT+1
1195  25F5- A5 5D              LDA VALUE+1
1196  25F7- 85 3E              STA OBJECT+2
1197  25F9- 20 C0 22           JSR SROPC       SEARCH OPCODE
1198  25FC- A4 60              LDY ADMODE
1199  25FE- B9 66 E7          LDA MODE2,Y     COMPUTE NUMBYT
1200  2601- 29 03              AND =$03
1201  2603- AA                 TAX
1202  2604- E8                 INX
1203  2605- 86 38              STX NUMBYT
1204  2607- C0 0D              CPY =$0D        IF RELATIVE ADDRESSING
1205  2609- F0 01              BEQ *+3         GO TO COMPUTE OFFSET
1206  260B- 60                 RTS
1207                   *
1208  260C- A5 A9              LDA PASSFL
1209  260E- D0 2C              BNE BRAN2
1210  2610- A5 39              LDA RESOLV      IF OPERAND RESOLVED
1211  2612- F0 28              BEQ BRAN2
1212  2614- C9 02              CMP =2
1213  2616- 90 05              BCC *+7
1214  2618- A9 42              LDA =$42
1215  261A- 20 38 29           JSR ERROR       MORE THAN 1 UNRES LABEL
1216  261D- 20 0A 2D           JSR FORBR       INSERT FORWARD BRANCH

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 18/03/18   R65 ASSEMBLER  PAGE 26

1217  2620- A9 00              LDA =0
1218  2622- 85 3D              STA OBJECT+1
1219  2624- 60                 RTS
1220                   *
1221                   * SUBROUTINE TO COMPUTE RELATIVE ADDRESS
1222                   ****************************************
1223                   *
1224  2625- A5 3D      BRAN1   LDA OBJECT+1
1225  2627- 38                 SEC
1226  2628- E9 02              SBC =2
1227  262A- 48                 PHA
1228  262B- A5 3E              LDA OBJECT+2
1229  262D- E9 00              SBC =0
1230  262F- A8                 TAY
1231  2630- 68                 PLA
1232  2631- 38                 SEC
1233  2632- E5 9E              SBC PCOLD
1234  2634- 85 3D              STA OBJECT+1
1235  2636- 08                 PHP
1236  2637- 98                 TYA
1237  2638- E5 9F              SBC PCOLD+1
1238  263A- 28                 PLP
1239  263B- 60                 RTS
1240                   *
1241                   *
1242  263C- 20 25 26   BRAN2   JSR BRAN1
1243  263F- 30 0A              BMI BRAN3
1244  2641- C9 00              CMP =0
1245  2643- F0 05              BEQ *+7
1246  2645- A9 43              LDA =$43
1247  2647- 20 38 29           JSR ERROR
1248  264A- 60                 RTS
1249  264B- C9 FF      BRAN3   CMP =$FF
1250  264D- D0 F6              BNE *-8
1251  264F- 60                 RTS
1252                   *
1253                   *
1254                   * PSEUDO OPCODE TABLE
1255                   *
1256  2650- 34 84 1D   PSEUDO  BYT $34,$84,$1D,$1E,$C4,$88,$AA,$33
1256  2653- 1E C4 88 
1256  2656- AA 33 
1257  2658- 7C 8C              BYT $7C,$8C
1258  265A- AC D0 28           BYT $AC,$D0,$28,$AA,$CA,$90,$AA,$CA
1258  265D- AA CA 90 
1258  2660- AA CA 
1259  2662- 66 EA              BYT $66,$EA
1260                   *
1261                   *
1262                   * EXPDEF: GET A RESOLVED EXPRESSION

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 18/03/18   R65 ASSEMBLER  PAGE 27

1263                   ***********************************
1264                   *
1265  2664- 20 DB 20   EXPDEF  JSR EXPRES
1266  2667- A5 39              LDA RESOLV
1267  2669- F0 05              BEQ *+7
1268  266B- A9 49              LDA =$49
1269  266D- 20 38 29           JSR ERROR
1270  2670- 60                 RTS
1271                   *
1272                   *
1273                   * JSR PRINTLIN: PRINT A LINE
1274                   ****************************
1275                   * INPUT: OBJECT,NUMBYT,PCOLD,PCNEW,PAGELN
1276                   * PAGECN,LINCNT
1277                   *
1278  2671- A9 00      PRTLIN  LDA =0
1279  2673- 85 37              STA TEMP1       POINTER IN OBJ
1280  2675- F8                 SED
1281  2676- 18                 CLC             INCREMENT LINE COUNTER
1282  2677- A9 01              LDA =1
1283  2679- 65 A2              ADC LINCNT      DECIMAL INCREMENT
1284  267B- 85 A2              STA LINCNT
1285  267D- A5 A3              LDA LINCNT+1
1286  267F- 69 00              ADC =0
1287  2681- 85 A3              STA LINCNT+1
1288  2683- D8                 CLD
1289  2684- 24 AA      PRTL10  BIT PRTFLG
1290  2686- 10 28              BPL PRTL21-2
1291  2688- A5 A3              LDA LINCNT+1
1292  268A- A6 A2              LDX LINCNT
1293  268C- 20 30 E0           JSR PRTAX       PRINT LINE NUMBER
1294  268F- 20 27 E0           JSR PRTINF
1295  2692- 20 A0              BYT $20,$A0     PRINT 2 BLANKS
1296  2694- A5 A0              LDA PCNEW
1297  2696- C5 9E              CMP PCOLD
1298  2698- D0 06              BNE *+8
1299  269A- A5 A1              LDA PCNEW+1
1300  269C- C5 9F              CMP PCOLD+1
1301  269E- F0 0B              BEQ PRTL20
1302  26A0- A5 9F              LDA PCOLD+1
1303  26A2- A6 9E              LDX PCOLD
1304  26A4- 20 30 E0           JSR PRTAX       PRINT PROGRAM COUNTER
1305  26A7- 20 27 E0           JSR PRTINF
1306  26AA- AD                 BYT $AD         PRINT -
1307  26AB- A2 0B      PRTL20  LDX =$0B
1308  26AD- 20 05 27           JSR TAB
1309  26B0- A2 03              LDX =3          PRINT MAX 3 OBJ BYTES
1310  26B2- A4 37      PRTL21  LDY TEMP1
1311  26B4- B9 3C 00           LDA OBJECT,Y
1312  26B7- C4 38              CPY NUMBYT

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 18/03/18   R65 ASSEMBLER  PAGE 28

1313  26B9- F0 1A              BEQ PRTL25
1314  26BB- E6 37              INC TEMP1
1315  26BD- 24 AA              BIT PRTFLG
1316  26BF- 10 03              BPL *+5
1317  26C1- 20 2D E0           JSR PRTBYT
1318  26C4- E6 9E              INC PCOLD
1319  26C6- D0 02              BNE *+4
1320  26C8- E6 9F              INC PCOLD+1
1321  26CA- 24 AA              BIT PRTFLG
1322  26CC- 10 04              BPL *+6
1323  26CE- 20 27 E0           JSR PRTINF      PRINT BLANK
1324  26D1- A0                 BYT $A0
1325  26D2- CA                 DEX
1326  26D3- D0 DD              BNE PRTL21
1327  26D5- A4 37      PRTL25  LDY TEMP1
1328  26D7- C0 04              CPY =4
1329  26D9- B0 19              BCS PRTL30
1330  26DB- 24 AA              BIT PRTFLG
1331  26DD- 10 05              BPL *+7
1332  26DF- A2 16              LDX =$16
1333  26E1- 20 05 27           JSR TAB         TABULATE TO POS $16
1334  26E4- A2 00              LDX =0
1335  26E6- 24 AA      PRTL26  BIT PRTFLG
1336  26E8- 10 05              BPL *+7
1337  26EA- B5 00              LDA INBUFF,X
1338  26EC- 20 09 E0           JSR PRTCHR      PRINT TEXT
1339  26EF- E8                 INX
1340  26F0- E4 64              CPX INBFPN
1341  26F2- 90 F2              BCC PRTL26
1342  26F4- A5 38      PRTL30  LDA NUMBYT
1343  26F6- C5 37              CMP TEMP1
1344  26F8- F0 0A              BEQ *+12        RETURN
1345  26FA- 24 AA              BIT PRTFLG
1346  26FC- 10 03              BPL *+5
1347  26FE- 20 0F 27          JSR NEWLIN
1348  2701- 4C 84 26           JMP PRTL10
1349  2704- 60                 RTS
1350                   *
1351                   *
1352                   * SUBROUTINE TAB: TABULATOR (TO X)
1353                   **********************************
1354                   *
1355  2705- A9 20      TAB     LDA =$20
1356  2707- 20 09 E0           JSR PRTCHR
1357  270A- E4 EE              CPX CURPOS
1358  270C- B0 F9              BCS TAB+2
1359  270E- 60                 RTS
1360                   *
1361                   *
1362                   * SUBROUTINE NEWLIN: START NEW LINE

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 18/03/18   R65 ASSEMBLER  PAGE 29

1363                   ***********************************
1364                   *
1365  270F- 20 6E 27   NEWLIN  JSR CRLF
1366  2712- E6 AB              INC PAGELN
1367  2714- A5 AB              LDA PAGELN
1368  2716- 30 06              BMI NEWL06
1369  2718- CD 10 20           CMP TABLE       PRINTED LINES
1370  271B- B0 01              BCS NEWL06
1371  271D- 60                 RTS             RETURN IF NOT NEW PAGE
1372  271E- E6 AB      NEWL06  INC PAGELN
1373  2720- AD 80 17           LDA VFLAG       TEST AUTOPRINT FLAG
1374  2723- 29 08              AND =8
1375  2725- F0 06              BEQ *+8
1376  2727- AD 12 20           LDA TABLE+2     $D FOR IBM, $A FOR TTY
1377  272A- 20 0C E0           JSR VAUTOP      EXECUTE LFON HARD COPY
1378                   *
1379  272D- 20 6E 27   NEWL10  JSR CRLF
1380  2730- A9 00              LDA =0
1381  2732- 85 AB              STA PAGELN
1382  2734- F8                 SED
1383  2735- 38                 SEC
1384  2736- 65 A4              ADC PAGECN      INCREMENT PAGE NUMBER
1385  2738- 85 A4              STA PAGECN
1386  273A- D8                 CLD
1387  273B- A2 1F              LDX =$1F
1388  273D- B5 B2              LDA TITLE,X     PRINT TITLE
1389  273F- 20 09 E0           JSR PRTCHR
1390  2742- CA                 DEX
1391  2743- 10 F8              BPL *-6
1392  2745- A2 22              LDX =34
1393  2747- 20 05 27           JSR TAB
1394  274A- 20 0F F8           JSR PRTDAT
1395  274D- 20 27 E0           JSR PRTINF
1396  2750- 20 20 52           BYT '  R65 ASSEMBLER  PAGE',$A0
1396  2753- 36 35 20 
1396  2756- 41 53 53 
1396  2759- 45 4D 42 
1396  275C- 4C 45 52 
1396  275F- 20 20 50 
1396  2762- 41 47 45 
1396  2765- A0 
1397  2766- A5 A4              LDA PAGECN
1398  2768- 20 2D E0           JSR PRTBYT
1399  276B- 20 6E 27           JSR CRLF
1400  276E- 20 27 E0   CRLF    JSR PRTINF
1401  2771- 0D 8A              BYT $0D,$8A
1402                   *       LDX =16         (16 LOADING BLANKS)
1403                   *       TXA             *** REMOVED ***
1404                   *       PHA             *** REMOVED ***
1405                   *       LDA =$20        *** REMOVED ***

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 18/03/18   R65 ASSEMBLER  PAGE 30

1406                   *       JSR VAUTOP      *** REMOVED ***
1407                   *       PLA             *** REMOVED ***
1408                   *       TAX             *** REMOVED ***
1409                   *       DEX             *** REMOVED ***
1410                   *       BNE *-10        *** REMOVED ***
1411  2773- 60         CRLF1   RTS
1412                   *
1413                   *
1414                   *
1415                   * SUBROUTINE GET: GET A LINE FROM FILE
1416                   **************************************
1417                   *
1418  2774- A2 2F      GET     LDX =$2F        CLEAR INBUFF
1419  2776- A9 20              LDA =$20
1420  2778- 95 00              STA INBUFF,X
1421  277A- CA                 DEX
1422  277B- 10 FB              BPL GET+4
1423                   *
1424  277D- A2 00              LDX =0          POINTER IN INBUFF
1425  277F- 86 64      GET10   STX INBFPN
1426  2781- A6 9B              LDX INPFIL
1427  2783- A9 00              LDA =0
1428  2785- 85 DA              STA FILFLG
1429  2787- 20 18 F0           JSR READCH      GET ONE CHARACTER
1430  278A- F0 03              BEQ *+5
1431  278C- 4C 0B 28           JMP GETERR
1432  278F- C9 1F              CMP =$1F        EOF
1433  2791- F0 0D              BEQ GET20
1434  2793- C9 0D              CMP =$0D
1435  2795- D0 01              BNE *+3
1436  2797- 60                 RTS
1437  2798- A6 64              LDX INBFPN
1438  279A- 20 12 28           JSR STINB
1439  279D- 4C 7F 27           JMP GET10
1440                   *
1441  27A0- A6 9B      GET20   LDX INPFIL
1442  27A2- 20 12 F0           JSR CLOSE
1443  27A5- E6 A7              INC FILCNT
1444  27A7- A5 A9      GET25   LDA PASSFL
1445  27A9- F0 06              BEQ GET27
1446  27AB- 20 AA 29           JSR BACKNM      GET SAVED FILE NAME
1447  27AE- 4C F5 27           JMP GET28
1448                   *
1449  27B1- 20 27 E0   GET27   JSR PRTINF
1450  27B4- 0D 0A 4E           BYT $D,$A,'NEXT FILE? '+128
1450  27B7- 45 58 54 
1450  27BA- 20 46 49 
1450  27BD- 4C 45 3F 
1450  27C0- A0 
1451                   *

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 18/03/18   R65 ASSEMBLER  PAGE 31

1452  27C1- A5 EE              LDA CURPOS
1453  27C3- 48                 PHA             SAVE CURPOS ON STACK
1454  27C4- A2 00              LDX =0
1455  27C6- BD 20 03   GET27A  LDA FILNM1,X
1456  27C9- C9 30              CMP ='0'        IF DIGIT
1457  27CB- 30 07              BMI GET27B
1458  27CD- C9 39              CMP ='9'
1459  27CF- 10 03              BPL GET27B
1460  27D1- 18                 CLC
1461  27D2- 69 01              ADC =1          ADD 1
1462  27D4- C9 20      GET27B  CMP =$20
1463  27D6- F0 08              BEQ GET27C
1464  27D8- 20 09 E0           JSR PRTCHR
1465  27DB- E8                 INX
1466  27DC- E0 0F              CPX =15
1467  27DE- D0 E6              BNE GET27A
1468  27E0- 20 27 E0   GET27C  JSR PRTINF
1469  27E3- 2E 30 30           BYT '.00,'+128
1469  27E6- AC 
1470  27E7- 18                 CLC
1471  27E8- A5 DC              LDA FILDRV
1472  27EA- 69 30              ADC ='0'
1473  27EC- 20 09 E0           JSR PRTCHR
1474  27EF- 68                 PLA             RESTORE CURPOS
1475  27F0- 85 EE              STA CURPOS
1476                   *
1477  27F2- 20 7D 29           JSR INNAME
1478  27F5- A5 AA      GET28   LDA PRTFLG
1479  27F7- 10 04              BPL *+6
1480  27F9- 20 27 E0           JSR PRTINF
1481  27FC- 94                 BYT $94
1482  27FD- A9 00              LDA =0
1483  27FF- 85 DA             STA FILFLG
1484  2801- 20 0F F0           JSR OPEN
1485  2804- D0 06              BNE GETERR+1
1486                   *
1487  2806- 84 9B      GET30   STY INPFIL
1488  2808- 4C 74 27           JMP GET
1489                   *
1490  280B- 98         GETERR  TYA             INPUT ERROR
1491  280C- 20 38 29           JSR ERROR       THIS ERROR IS FATAL
1492  280F- 4C 17 2A           JMP WARMST
1493                   *
1494  2812- E0 30      STINB   CPX =$30                IF NOT OVERFLOW
1495  2814- F0 04              BEQ *+6
1496  2816- 95 00              STA INBUFF,X
1497  2818- E8                 INX
1498  2819- 60                 RTS
1499  281A- A9 50              LDA =$50
1500  281C- 4C 38 29           JMP ERROR       RETURN AFTER ERROR

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 18/03/18   R65 ASSEMBLER  PAGE 32

1501                   *
1502                   *
1503                   * SUBROUTINE PUT: PUT OBJECT CODE INTO
1504                   **************************************
1505                   * OUTPUT BUFFER, RETURN IF FIRST PASS.
1506                   * IS ONLY CALLED, IF NUMBYT>0
1507                   *
1508  281F- A5 A9      PUT     LDA PASSFL
1509  2821- D0 01              BNE *+3
1510  2823- 60                 RTS
1511                   *
1512  2824- 20 2B 29           JSR OBEMPT      IF BUFFER EMPTY
1513  2827- D0 08              BNE PUT10
1514  2829- A5 9E              LDA PCOLD       STORE PCOLD
1515  282B- 85 AE              STA OBADDR      AT BASE ADDRESS
1516  282D- A5 9F              LDA PCOLD+1
1517  282F- 85 AF              STA OBADDR+1
1518                   *
1519  2831- AD 08 20   PUT10   LDA OBEND       IF BUFFER FULL
1520  2834- 38                 SEC
1521  2835- E5 AC              SBC OBPNT
1522  2837- 85 37              STA TEMP1
1523  2839- AD 09 20           LDA OBEND+1
1524  283C- E5 AD              SBC OBPNT+1
1525  283E- 48                 PHA
1526  283F- A5 37              LDA TEMP1
1527  2841- C5 38              CMP NUMBYT
1528  2843- 68                 PLA
1529  2844- E9 00              SBC =0
1530  2846- B0 06              BCS *+8
1531  2848- 20 62 28           JSR CLOSRC      CLOSE RECORD
1532  284B- 4C 1F 28           JMP PUT         AND OPEN NEW ONE
1533                   *
1534  284E- A0 00              LDY =0          STORE OBJECT CODE
1535  2850- A2 00              LDX =0
1536  2852- B5 3C      PUT20   LDA OBJECT,X
1537  2854- 91 AC              STA (OBPNT),Y
1538  2856- E6 AC              INC OBPNT
1539  2858- D0 02              BNE *+4
1540  285A- E6 AD              INC OBPNT+1
1541  285C- E8                 INX
1542  285D- E4 38              CPX NUMBYT
1543  285F- D0 F1              BNE PUT20
1544  2861- 60                 RTS
1545                   *
1546                   *
1547  2862- A5 A9      CLOSRC  LDA PASSFL
1548  2864- D0 01              BNE *+3
1549  2866- 60                 RTS
1550  2867- 20 2B 29           JSR OBEMPT      IF BUFFER EMPTY

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 18/03/18   R65 ASSEMBLER  PAGE 33

1551  286A- D0 01              BNE *+3
1552  286C- 60                 RTS             DO NOTHING
1553                   *
1554  286D- 8A                 TXA
1555  286E- 48                 PHA
1556  286F- 20 27 E0           JSR PRTINF
1557  2872- 14 0D 0A           BYT $14,$0D,$0A,$0E
1557  2875- 0E 
1558  2876- 53 54 4F           BYT 'STORE OBJECT FILE:',$0B
1558  2879- 52 45 20 
1558  287C- 4F 42 4A 
1558  287F- 45 43 54 
1558  2882- 20 46 49 
1558  2885- 4C 45 3A 
1558  2888- 0B 
1559  2889- 0D 0A 46           BYT $0D,$0A,'FILENAME.CY,DRIVE,LOC?'
1559  288C- 49 4C 45 
1559  288F- 4E 41 4D 
1559  2892- 45 2E 43 
1559  2895- 59 2C 44 
1559  2898- 52 49 56 
1559  289B- 45 2C 4C 
1559  289E- 4F 43 3F 
1560  28A1- A0                 BYT $A0
1561  28A2- 20 06 E0           JSR GETLIN
1562                   *
1563  28A5- 20 24 E0           JSR ENDLIN      SKIP STORE IF INPUT EMP
1564  28A8- F0 6E              BEQ CLOSRC0     (USER DOES NOT WANT TO
1565                   *
1566  28AA- 20 15 F8           JSR GETNAM
1567  28AD- 20 19 20           JSR HARGUM
1568  28B0- 85 DC              STA FILDRV
1569  28B2- 20 19 20           JSR HARGUM
1570  28B5- 8D 13 03           STA FILLOC
1571  28B8- 8E 14 03           STX FILLOC+1
1572  28BB- A2 10              LDX =16
1573  28BD- BD 20 03           LDA FILNM1,X
1574  28C0- 9D 01 03           STA FILNAM,X
1575  28C3- CA                 DEX
1576  28C4- 10 F7              BPL *-7
1577                   *
1578  28C6- 20 27 E0           JSR PRTINF
1579  28C9- 0D 8A              BYT $D,$8A
1580                   *
1581  28CB- A5 AC              LDA OBPNT       SET FILE SIZE
1582  28CD- 38                 SEC
1583  28CE- ED 06 20           SBC OBSTR
1584  28D1- 8D 15 03           STA FILSIZ
1585  28D4- A5 AD              LDA OBPNT+1
1586  28D6- ED 07 20           SBC OBSTR+1

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 18/03/18   R65 ASSEMBLER  PAGE 34

1587  28D9- 8D 16 03           STA FILSIZ+1
1588  28DC- AD 06 20           LDA OBSTR       SET START IN RAM
1589  28DF- 8D 31 03           STA FILSA1
1590  28E2- AD 07 20           LDA OBSTR+1
1591  28E5- 8D 32 03           STA FILSA1+1
1592  28E8- A9 00              LDA =0
1593  28EA- 85 DA              STA FILFLG
1594  28EC- A9 4D              LDA ='M         OBJECT FILE FROM
1595  28EE- 8D 12 03           STA FILSTP      ASSEMBLER
1596  28F1- A5 AE              LDA OBADDR
1597  28F3- 8D 1A 03           STA FILSA
1598  28F6- 18                 CLC
1599  28F7- 6D 15 03           ADC FILSIZ
1600  28FA- 8D 1C 03           STA FILEA
1601  28FD- A5 AF              LDA OBADDR+1
1602  28FF- 8D 1B 03          STA FILSA+1
1603  2902- 6D 16 03           ADC FILSIZ+1
1604  2905- 8D 1D 03           STA FILEA+1
1605  2908- AD 1C 03           LDA FILEA
1606  290B- D0 03              BNE *+5
1607  290D- CE 1D 03           DEC FILEA+1
1608  2910- CE 1C 03           DEC FILEA
1609  2913- 20 16 20           JSR WRFILA
1610  2916- D0 0D              BNE PUTERR
1611  2918- AD 06 20   CLOSRC0 LDA OBSTR       RESET BUFFER
1612  291B- 85 AC              STA OBPNT
1613  291D- AD 07 20           LDA OBSTR+1
1614  2920- 85 AD              STA OBPNT+1
1615  2922- 68                 PLA
1616  2923- AA                 TAX
1617  2924- 60                 RTS
1618                   *
1619  2925- 68         PUTERR  PLA             WRITE ERROR
1620  2926- AA                 TAX
1621  2927- 98                 TYA
1622  2928- 4C 38 29           JMP ERROR
1623                   *
1624                   *
1625  292B- A5 AC      OBEMPT  LDA OBPNT
1626  292D- CD 06 20           CMP OBSTR
1627  2930- D0 05              BNE *+7
1628  2932- A5 AD              LDA OBPNT+1
1629  2934- CD 07 20           CMP OBSTR+1
1630  2937- 60                 RTS
1631                   *
1632                   *
1633                   * SUBROUTINE ERROR: PRINT ERROR MESSAGE
1634                   ***************************************
1635                   * SET PRINT FLAG; SAVED: X,Y
1636                   *

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 18/03/18   R65 ASSEMBLER  PAGE 35

1637  2938- 48         ERROR   PHA
1638  2939- 20 27 E0           JSR PRTINF
1639  293C- 12                 BYT $12
1640  293D- 2A 2A 2A           BYT '*** ERROR',$A0
1640  2940- 20 45 52 
1640  2943- 52 4F 52 
1640  2946- A0 
1641  2947- 68                 PLA
1642  2948- 20 2D E0           JSR PRTBYT
1643  294B- E6 A8              INC NUMERR
1644  294D- 8A                 TXA
1645  294E- 48                 PHA
1646  294F- A5 A9              LDA PASSFL
1647  2951- D0 14              BNE ENDERR
1648  2953- 20 27 E0           JSR PRTINF
1649  2956- 20 20 49           BYT '  IN LINE '+128
1649  2959- 4E 20 4C 
1649  295C- 49 4E 45 
1649  295F- A0 
1650  2960- A5 A3              LDA LINCNT+1
1651  2962- A6 A2              LDX LINCNT
1652  2964- 20 30 E0           JSR PRTAX
1653  2967- 20 6E 27   ENDERR  JSR CRLF
1654  296A- 68                 PLA
1655  296B- AA                 TAX
1656  296C- 60                 RTS
1657                   *
1658                   *
1659                   * CONFIGURATE PRINTER FOR 96 CHARS
1660                   *
1661  296D- A2 02      PRCON   LDX =2
1662  296F- BD E4 2A           LDA PRTAB,X
1663  2972- 86 37              STX TEMP1
1664  2974- 20 0C E0           JSR VAUTOP
1665  2977- A6 37              LDX TEMP1
1666  2979- CA                 DEX
1667  297A- 10 F3              BPL PRCON+2
1668  297C- 60                 RTS
1669                   *
1670                   *
1671                   * GET FILE NAME
1672                   *
1673  297D- 20 06 E0   INNAME  JSR GETLIN
1674  2980- 20 15 F8           JSR GETNAM
1675  2983- 20 19 20           JSR HARGUM
1676  2986- 48                 PHA
1677  2987- A4 A7              LDY FILCNT
1678  2989- AD 0A 20           LDA SAVNAM
1679  298C- 18         INNA5   CLC
1680  298D- 88                 DEY

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 18/03/18   R65 ASSEMBLER  PAGE 36

1681  298E- 30 05              BMI INNA10
1682  2990- 69 14              ADC =20
1683  2992- 4C 8C 29           JMP INNA5
1684  2995- 85 9C      INNA10  STA SAVPNT
1685  2997- AD 0B 20           LDA SAVNAM+1
1686  299A- 85 9D              STA SAVPNT+1
1687  299C- A0 12              LDY =18
1688  299E- B9 1F 03   INNA20  LDA FILNM1-1,Y
1689  29A1- 91 9C              STA (SAVPNT),Y
1690  29A3- 88                 DEY
1691  29A4- D0 F8              BNE INNA20
1692  29A6- 68                 PLA
1693  29A7- 91 9C              STA (SAVPNT),Y
1694  29A9- 60                 RTS
1695                   *
1696                   *
1697                   * GET FILE NAME BACK FROM BUFFER
1698                   *
1699  29AA- A4 A7      BACKNM  LDY FILCNT
1700  29AC- AD 0A 20           LDA SAVNAM
1701  29AF- 18         BACK10  CLC
1702  29B0- 88                 DEY
1703  29B1- 30 05              BMI BACK20      CALCULATE POINTER
1704  29B3- 69 14              ADC =20
1705  29B5- 4C AF 29           JMP BACK10
1706  29B8- 85 9C      BACK20  STA SAVPNT
1707  29BA- AD 0B 20           LDA SAVNAM+1
1708  29BD- 85 9D              STA SAVPNT+1
1709  29BF- A0 12              LDY =18
1710  29C1- B1 9C      BACK30  LDA (SAVPNT),Y
1711  29C3- 99 1F 03           STA FILNM1-1,Y
1712  29C6- 88                 DEY
1713  29C7- D0 F8              BNE BACK30
1714  29C9- B1 9C              LDA (SAVPNT),Y
1715  29CB- 85 DC              STA FILDRV
1716  29CD- 60                 RTS
1717                   *
1718                   *
1719                   * INITIALIZATION
1720                   ****************
1721                   *
1722  29CE- A9 20      COLDST  LDA =$20
1723  29D0- A2 1F              LDX =$1F
1724  29D2- 95 B2              STA TITLE,X     CLEAR TITLE
1725  29D4- CA                 DEX
1726  29D5- 10 FB              BPL *-3
1727                   *
1728  29D7- 20 27 E0           JSR PRTINF
1729  29DA- 0D 0A 09           BYT $D,$A,9,9,'R65 ASSEMBLER',$D,$A
1729  29DD- 09 52 36 

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 18/03/18   R65 ASSEMBLER  PAGE 37

1729  29E0- 35 20 41 
1729  29E3- 53 53 45 
1729  29E6- 4D 42 4C 
1729  29E9- 45 52 0D 
1729  29EC- 0A 
1730  29ED- 0A 53 4F           BYT $A,'SOURCE FILE: ',$D
1730  29F0- 55 52 43 
1730  29F3- 45 20 46 
1730  29F6- 49 4C 45 
1730  29F9- 3A 20 0D 
1731  29FC- 0A 46 49          BYT $A,'FILENAME.CY,DRIVE?',$A0
1731  29FF- 4C 45 4E 
1731  2A02- 41 4D 45 
1731  2A05- 2E 43 59 
1731  2A08- 2C 44 52 
1731  2A0B- 49 56 45 
1731  2A0E- 3F A0 
1732  2A10- A9 00              LDA =0
1733  2A12- 85 A7              STA FILCNT
1734  2A14- 20 7D 29           JSR INNAME
1735                   *
1736  2A17- 20 27 E0   WARMST  JSR PRTINF
1737  2A1A- 0D 0A 41           BYT $D,$A,'A*'+128
1737  2A1D- AA 
1738  2A1E- 20 6D 29           JSR PRCON
1739  2A21- 20 03 E0           JSR GETCHR
1740                   *
1741  2A24- C9 46              CMP =$46        F=FIRST PASS
1742  2A26- F0 03              BEQ *+5
1743  2A28- 4C BD 2A           JMP WARM10
1744  2A2B- AD 0C 20           LDA LABSTR
1745  2A2E- AE 0D 20           LDX LABSTR+1
1746  2A31- 85 B0              STA LABCNT
1747  2A33- 86 B1              STX LABCNT+1
1748  2A35- A9 00              LDA =0
1749  2A37- 85 A9              STA PASSFL
1750  2A39- 85 AA              STA PRTFLG
1751  2A3B- AD 15 20   PASS    LDA TABLE+5     BOTH PASSES
1752  2A3E- 85 AB              STA PAGELN
1753  2A40- A9 00              LDA =0
1754  2A42- 85 A7              STA FILCNT      START WITH FIRST FILE
1755  2A44- 20 AA 29           JSR BACKNM
1756                   *
1757  2A47- A9 00              LDA =0
1758  2A49- 85 DA              STA FILFLG
1759  2A4B- 20 0F F0           JSR OPEN        OPEN SOURCE
1760  2A4E- F0 03              BEQ *+5
1761  2A50- 4C 0C 28           JMP GETERR+1
1762                   *
1763  2A53- 84 9B              STY INPFIL

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 18/03/18   R65 ASSEMBLER  PAGE 38

1764  2A55- AD 06 20           LDA OBSTR       OBJECT START
1765  2A58- 85 AC              STA OBPNT
1766  2A5A- AD 07 20           LDA OBSTR+1
1767  2A5D- 85 AD              STA OBPNT+1
1768  2A5F- A2 0A              LDX =(NUMERR-PCOLD)  SET ALL TO 0
1769  2A61- A9 00              LDA =0
1770  2A63- 95 9E              STA PCOLD,X
1771  2A65- CA                 DEX
1772  2A66- 10 FB              BPL *-3
1773  2A68- A9 80              LDA =$80
1774  2A6A- 85 A5              STA OUTREC
1775  2A6C- 20 27 E0           JSR PRTINF      ** AUTOPRINT ON
1776  2A6F- 92                 BYT $92         **
1777  2A70- 20 0F 27           JSR NEWLIN      ** DELETE THIS
1778                   *
1779  2A73- 20 27 E0   LINE    JSR PRTINF      AUTOPRINT OFF
1780  2A76- 94                 BYT $94
1781  2A77- AD 81 17           LDA SFLAG       ESCAPE TEST
1782  2A7A- 10 08              BPL LINE1
1783  2A7C- 29 7F              AND =$7F
1784  2A7E- 8D 81 17           STA SFLAG
1785  2A81- 4C 17 2A           JMP WARMST
1786  2A84- 20 74 27   LINE1   JSR GET
1787  2A87- 20 A9 24           JSR INTLIN
1788  2A8A- 18                 CLC
1789  2A8B- A5 A0              LDA PCNEW
1790  2A8D- 65 38              ADC NUMBYT
1791  2A8F- 85 A0              STA PCNEW
1792  2A91- 90 06              BCC LINE2
1793  2A93- E6 A1              INC PCNEW+1
1794  2A95- 20 27 E0           JSR PRTINF      HEART BEAT
1795  2A98- AE                 BYT '.'+128
1796  2A99- A5 38      LINE2   LDA NUMBYT
1797  2A9B- F0 03              BEQ *+5
1798  2A9D- 20 1F 28           JSR PUT
1799  2AA0- 24 AA              BIT PRTFLG
1800  2AA2- 10 04              BPL *+6
1801  2AA4- 20 27 E0           JSR PRTINF
1802  2AA7- 92                 BYT $92         AUTOPRINT ON
1803  2AA8- 20 71 26           JSR PRTLIN
1804  2AAB- 24 AA              BIT PRTFLG
1805  2AAD- 10 03              BPL *+5
1806  2AAF- 20 0F 27           JSR NEWLIN
1807  2AB2- A5 A0              LDA PCNEW
1808  2AB4- 85 9E              STA PCOLD
1809  2AB6- A5 A1              LDA PCNEW+1
1810  2AB8- 85 9F              STA PCOLD+1
1811  2ABA- 4C 73 2A           JMP LINE        HANDLE LINES
1812                   *
1813  2ABD- C9 53      WARM10  CMP =$53        S=SECOND PASS

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 18/03/18   R65 ASSEMBLER  PAGE 39

1814  2ABF- D0 11              BNE WARM20
1815  2AC1- A9 01              LDA =1
1816  2AC3- 85 A9              STA PASSFL
1817  2AC5- A9 80              LDA =$80
1818  2AC7- 85 AA              STA PRTFLG      PRINTING ON
1819  2AC9- 20 6D 29           JSR PRCON
1820  2ACC- 20 E7 2A           JSR CLRRFL      CLEAR R-FLAG
1821  2ACF- 4C 3B 2A           JMP PASS
1822                   *
1823  2AD2- C9 43      WARM20  CMP =$43        C=CONTINUE
1824  2AD4- D0 03              BNE WARM30
1825  2AD6- 4C 73 2A           JMP LINE        HANDLE LINES
1826                   *
1827  2AD9- C9 52      WARM30  CMP =$52        R=REFERENCE TABLE
1828  2ADB- F0 30              BEQ MAP
1829  2ADD- 20 27 E0           JSR PRTINF
1830  2AE0- 87                 BYT $87         BELL
1831  2AE1- 4C 17 2A           JMP WARMST
1832                   *
1833                   *
1834  2AE4- 14 75 1B   PRTAB   BYT 20,117,27
1835                   *
1836                   *
1837                   * CLEAR R-FLAG
1838                   *
1839  2AE7- A0 07      CLRRFL  LDY =7
1840  2AE9- AD 0C 20           LDA LABSTR
1841  2AEC- AE 0D 20           LDX LABSTR+1
1842  2AEF- 85 97      CLRRF1  STA LABPNT
1843  2AF1- 86 98              STX LABPNT+1
1844  2AF3- C5 B0              CMP LABCNT
1845  2AF5- 8A                 TXA
1846  2AF6- E5 B1              SBC LABCNT+1
1847  2AF8- 90 01              BCC *+3
1848  2AFA- 60                 RTS
1849                   *
1850  2AFB- B1 97              LDA (LABPNT),Y
1851  2AFD- 29 7F              AND =$7F
1852  2AFF- 91 97             STA (LABPNT),Y
1853  2B01- A5 97              LDA LABPNT
1854  2B03- A6 98              LDX LABPNT+1
1855  2B05- 18                 CLC
1856  2B06- 69 08              ADC =8
1857  2B08- 90 E5              BCC CLRRF1
1858  2B0A- E8                 INX
1859  2B0B- B0 E2              BCS CLRRF1      ALWAYS TAKEN
1860                   *
1861                   *
1862                   * PRINT REFERENCE TABLE
1863                   ***********************

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 18/03/18   R65 ASSEMBLER  PAGE 40

1864                   *
1865  2B0D- A5 A9      MAP     LDA PASSFL
1866  2B0F- F0 17              BEQ MAP1
1867  2B11- A9 80              LDA =$80
1868  2B13- 85 AA              STA PRTFLG
1869  2B15- 20 27 E0           JSR PRTINF
1870  2B18- 4D 41 50           BYT 'MAP DESTROYED'+128
1870  2B1B- 20 44 45 
1870  2B1E- 53 54 52 
1870  2B21- 4F 59 45 
1870  2B24- C4 
1871  2B25- 4C 17 2A           JMP WARMST
1872  2B28- 20 6D 29   MAP1    JSR PRCON
1873  2B2B- AD 15 20           LDA TABLE+5
1874  2B2E- 85 AB              STA PAGELN
1875  2B30- A9 00              LDA =0
1876  2B32- 85 A4              STA PAGECN
1877  2B34- 20 27 E0           JSR PRTINF
1878  2B37- 92                 BYT $92         AUTOPRINT ON
1879  2B38- 20 0F 27           JSR NEWLIN
1880  2B3B- 20 27 E0           JSR PRTINF
1881  2B3E- 43 52 4F           BYT 'CROSS REFERENCE MAP',$BA
1881  2B41- 53 53 20 
1881  2B44- 52 45 46 
1881  2B47- 45 52 45 
1881  2B4A- 4E 43 45 
1881  2B4D- 20 4D 41 
1881  2B50- 50 BA 
1882  2B52- 20 0F 27           JSR NEWLIN
1883  2B55- 20 E7 2A           JSR CLRRFL      CLEAR R-FLAG
1884                   *
1885  2B58- AD 0C 20   CROSS0  LDA LABSTR
1886  2B5B- AE 0D 20           LDX LABSTR+1
1887  2B5E- 85 97      CROSS1  STA LABPNT
1888  2B60- 86 98              STX LABPNT+1
1889  2B62- C5 B0              CMP LABCNT
1890  2B64- 8A                 TXA
1891  2B65- E5 B1              SBC LABCNT+1
1892  2B67- 90 0A              BCC CROSS2
1893  2B69- 20 0F 27           JSR NEWLIN
1894  2B6C- 20 27 E0           JSR PRTINF
1895  2B6F- 94                 BYT $94
1896  2B70- 4C 17 2A           JMP WARMST
1897                   *
1898  2B73- A0 07      CROSS2  LDY =7
1899  2B75- B1 97              LDA (LABPNT),Y
1900  2B77- 10 0C              BPL CROSS3      SKIP, IF FOUND
1901  2B79- A5 97              LDA LABPNT
1902  2B7B- A6 98              LDX LABPNT+1
1903  2B7D- 18                 CLC

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 18/03/18   R65 ASSEMBLER  PAGE 41

1904  2B7E- 69 08              ADC =8
1905  2B80- 90 DC              BCC CROSS1
1906  2B82- E8                 INX
1907  2B83- B0 D9              BCS CROSS1
1908                   *
1909  2B85- A5 97      CROSS3  LDA LABPNT
1910  2B87- A6 98              LDX LABPNT+1
1911  2B89- 18         CROSS4  CLC
1912  2B8A- 69 08              ADC =8
1913  2B8C- 85 99              STA LABPN1
1914  2B8E- 90 01              BCC *+3
1915  2B90- E8                 INX
1916  2B91- 86 9A              STX LABPN1+1
1917  2B93- C5 B0              CMP LABCNT
1918  2B95- 8A                 TXA
1919  2B96- E5 B1              SBC LABCNT+1
1920  2B98- B0 24              BCS CROSS7      SKIP, IF FOUND
1921                   *
1922  2B9A- A0 07              LDY =7
1923  2B9C- B1 99              LDA (LABPN1),Y
1924  2B9E- 10 07              BPL CROSS6
1925  2BA0- A5 99      CROSS5  LDA LABPN1
1926  2BA2- A6 9A              LDX LABPN1+1
1927  2BA4- 4C 89 2B           JMP CROSS4
1928                   *
1929  2BA7- 38         CROSS6  SEC
1930  2BA8- A0 04              LDY =4
1931  2BAA- B1 97              LDA (LABPNT),Y  COMPARE NOW
1932  2BAC- F1 99              SBC (LABPN1),Y
1933  2BAE- 88                 DEY
1934  2BAF- 10 F9              BPL CROSS6+3
1935  2BB1- 90 ED              BCC CROSS5
1936  2BB3- A5 99              LDA LABPN1
1937  2BB5- A6 9A              LDX LABPN1+1
1938  2BB7- 85 97              STA LABPNT
1939  2BB9- 86 98              STX LABPNT+1
1940  2BBB- 4C 89 2B           JMP CROSS4
1941                   *
1942  2BBE- A0 07      CROSS7  LDY =7
1943  2BC0- B1 97              LDA (LABPNT),Y  SET R-FLAG
1944  2BC2- 09 80              ORA =$80
1945  2BC4- 91 97              STA (LABPNT),Y
1946  2BC6- 20 79 2C           JSR PRLABN
1947  2BC9- 4C 58 2B           JMP CROSS0
1948                   *
1949                   *
1950                   * END OF SOURCE
1951                   *
1952  2BCC- A9 00      END     LDA =0
1953  2BCE- 85 A0              STA PCNEW

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 18/03/18   R65 ASSEMBLER  PAGE 42

1954  2BD0- 85 A1              STA PCNEW+1
1955  2BD2- 20 27 E0           JSR PRTINF      AUTOPRINT ON
1956  2BD5- 92                 BYT $92
1957  2BD6- 20 71 26           JSR PRTLIN
1958  2BD9- 20 0F 27   END0    JSR NEWLIN
1959  2BDC- 20 27 E0           JSR PRTINF
1960  2BDF- 4C 41 42           BYT 'LABELS',$BD
1960  2BE2- 45 4C 53 
1960  2BE5- BD 
1961  2BE6- A9 00              LDA =0
1962  2BE8- 85 98              STA LABPNT+1
1963  2BEA- A5 B0              LDA LABCNT
1964  2BEC- 38                 SEC
1965  2BED- ED 0C 20           SBC LABSTR
1966  2BF0- 85 97              STA LABPNT
1967  2BF2- A5 B1              LDA LABCNT+1
1968  2BF4- ED 0D 20           SBC LABSTR+1
1969  2BF7- A0 04              LDY =4
1970  2BF9- 06 97      END1    ASL LABPNT
1971  2BFB- 2A                 ROL A
1972  2BFC- 26 98              ROL LABPNT+1
1973  2BFE- 88                 DEY
1974  2BFF- 10 F8             BPL END1
1975  2C01- AA                 TAX
1976  2C02- A5 98              LDA LABPNT+1
1977  2C04- 20 30 E0           JSR PRTAX
1978  2C07- 20 0F 27           JSR NEWLIN
1979  2C0A- 20 27 E0           JSR PRTINF
1980  2C0D- 45 52 52           BYT 'ERRORS',$BD
1980  2C10- 4F 52 53 
1980  2C13- BD 
1981  2C14- A5 A8              LDA NUMERR
1982  2C16- 20 2D E0           JSR PRTBYT
1983  2C19- 20 0F 27           JSR NEWLIN
1984  2C1C- 20 27 E0           JSR PRTINF
1985  2C1F- 52 45 43           BYT 'RECORDS',$BD
1985  2C22- 4F 52 44 
1985  2C25- 53 BD 
1986  2C27- A6 9B              LDX INPFIL
1987  2C29- BD 51 03           LDA FIRCTB,X
1988  2C2C- 20 2D E0           JSR PRTBYT
1989  2C2F- 20 0F 27           JSR NEWLIN
1990  2C32- 20 62 28           JSR CLOSRC
1991  2C35- A6 9B              LDX INPFIL
1992  2C37- 20 12 F0           JSR CLOSE
1993  2C3A- 20 27 E0           JSR PRTINF
1994  2C3D- 55 4E 52           BYT 'UNRESOLVED',$BA
1994  2C40- 45 53 4F 
1994  2C43- 4C 56 45 
1994  2C46- 44 BA 

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 18/03/18   R65 ASSEMBLER  PAGE 43

1995  2C48- 20 E7 2A           JSR CLRRFL      CLEAR R-FLAG
1996  2C4B- AD 0C 20           LDA LABSTR
1997  2C4E- AE 0D 20           LDX LABSTR+1
1998  2C51- 85 97      UNRES   STA LABPNT
1999  2C53- 86 98              STX LABPNT+1
2000  2C55- C5 B0              CMP LABCNT
2001  2C57- 8A                 TXA
2002  2C58- E5 B1              SBC LABCNT+1
2003  2C5A- 90 03              BCC *+5
2004  2C5C- 4C 58 2B           JMP CROSS0
2005  2C5F- 20 79 22           JSR DEFIN
2006  2C62- F0 08              BEQ END2
2007  2C64- A0 07              LDY =7
2008  2C66- B1 97              LDA (LABPNT),Y
2009  2C68- 09 80              ORA =$80
2010  2C6A- 91 97              STA (LABPNT),Y
2011  2C6C- A5 97      END2    LDA LABPNT
2012  2C6E- A6 98              LDX LABPNT+1
2013  2C70- 18                 CLC
2014  2C71- 69 08              ADC =8
2015  2C73- 90 01              BCC *+3
2016  2C75- E8                 INX
2017  2C76- 4C 51 2C           JMP UNRES
2018                   *
2019                   *
2020                   * SUBROUTINE PRLABN: PRINT NAME OF LABEL
2021                   ****************************************
2022                   *
2023  2C79- A0 00      PRLABN  LDY =0
2024  2C7B- B1 97              LDA (LABPNT),Y
2025  2C7D- 99 30 00           STA LABEL,Y
2026  2C80- C8                 INY
2027  2C81- C0 05              CPY =5
2028  2C83- D0 F6              BNE PRLABN+2
2029                   *
2030  2C85- 20 0F 27           JSR NEWLIN
2031  2C88- A0 07              LDY =7          CHAR COUNTER
2032  2C8A- A2 06      PRLAB0  LDX =6
2033  2C8C- C0 06              CPY =6
2034  2C8E- 90 01              BCC *+3
2035  2C90- CA                 DEX
2036  2C91- A9 00              LDA =0
2037  2C93- 26 34      PRLAB1  ROL LABEL+4
2038  2C95- 26 33              ROL LABEL+3
2039  2C97- 26 32              ROL LABEL+2
2040  2C99- 26 31              ROL LABEL+1
2041  2C9B- 26 30              ROL LABEL
2042  2C9D- 2A                 ROL A
2043  2C9E- CA                 DEX
2044  2C9F- D0 F2              BNE PRLAB1

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 18/03/18   R65 ASSEMBLER  PAGE 44

2045  2CA1- C9 00              CMP =0
2046  2CA3- F0 09              BEQ PRLAB3
2047  2CA5- C9 30              CMP =$30
2048  2CA7- 10 02              BPL *+4
2049  2CA9- 09 40              ORA =$40
2050  2CAB- 20 09 E0           JSR PRTCHR
2051  2CAE- 88         PRLAB3  DEY
2052  2CAF- D0 D9              BNE PRLAB0
2053  2CB1- A2 08              LDX =8
2054  2CB3- 20 05 27           JSR TAB
2055  2CB6- 20 79 22           JSR DEFIN
2056  2CB9- D0 0A              BNE *+12
2057  2CBB- 20 27 E0           JSR PRTINF
2058  2CBE- 3F 3F 3F           BYT '???',$BF
2058  2CC1- BF 
2059  2CC2- 4C D2 2C           JMP *+16
2060                   *
2061  2CC5- A0 06              LDY =6
2062  2CC7- B1 97              LDA (LABPNT),Y
2063  2CC9- 20 2D E0           JSR PRTBYT
2064  2CCC- 88                 DEY
2065  2CCD- B1 97              LDA (LABPNT),Y
2066  2CCF- 20 2D E0           JSR PRTBYT
2067  2CD2- 20 97 2D           JSR CBASE
2068  2CD5- A0 07              LDY =7
2069  2CD7- B1 97              LDA (LABPNT),Y
2070  2CD9- 29 7F              AND =$7F
2071  2CDB- 0A                 ASL A
2072  2CDC- A8                 TAY             Y=2*NO OF REFERENCES
2073                   *
2074  2CDD- A9 0A      PRLAB4  LDA =10         REFERENCES PER LINE
2075  2CDF- 85 37              STA TEMP1
2076  2CE1- A2 10              LDX =16
2077  2CE3- 20 05 27           JSR TAB
2078  2CE6- C0 00      PRLAB5  CPY =0
2079  2CE8- F0 1F              BEQ PRLAB6
2080  2CEA- 88                 DEY
2081  2CEB- B1 95              LDA (BASE),Y
2082  2CED- 20 2D E0           JSR PRTBYT
2083  2CF0- 88                 DEY
2084  2CF1- B1 95              LDA (BASE),Y
2085  2CF3- 20 2D E0           JSR PRTBYT
2086  2CF6- 20 27 E0           JSR PRTINF
2087  2CF9- A0                 BYT $A0
2088  2CFA- C6 37              DEC TEMP1
2089  2CFC- 10 E8              BPL PRLAB5
2090  2CFE- 98                 TYA
2091  2CFF- F0 08             BEQ PRLAB6
2092  2D01- 48                 PHA
2093  2D02- 20 0F 27           JSR NEWLIN

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 18/03/18   R65 ASSEMBLER  PAGE 45

2094  2D05- 68                 PLA
2095  2D06- A8                 TAY
2096  2D07- D0 D4              BNE PRLAB4
2097  2D09- 60         PRLAB6  RTS
2098                   *
2099                   *
2100                   * SUBROUTINE FORBR: INSERT FORWARD BRANCH
2101                   *****************************************
2102                   * INPUT: OBJECT, BRANTC, ONLY IN FIRST PASS
2103                   * RESOLV+1
2104                   *
2105  2D0A- A5 A6      FORBR   LDA BRANTC
2106  2D0C- C9 0C              CMP =12
2107  2D0E- 90 05              BCC *+7
2108  2D10- A9 52              LDA =$52
2109  2D12- 4C 38 29           JMP ERROR
2110  2D15- A8                 TAY
2111  2D16- A5 3A              LDA RESOLV+1
2112  2D18- 99 65 00           STA BRANTB,Y    STORE NO OF LABELS
2113  2D1B- A5 3B              LDA RESOLV+2
2114  2D1D- 99 71 00           STA BRANTB+12,Y
2115  2D20- 20 25 26           JSR BRAN1
2116  2D23- A4 A6              LDY BRANTC
2117  2D25- 99 89 00           STA BRANTB+36,Y STORE HIGH BYTE
2118  2D28- A5 3D              LDA OBJECT+1
2119  2D2A- 99 7D 00           STA BRANTB+24,Y STORE LOW BYTE
2120  2D2D- E6 A6              INC BRANTC
2121  2D2F- 60                 RTS
2122                   *
2123                   *
2124                   * SUBROUTINE RESFBR: RESOLVE FORWARD BRANCH
2125                   *******************************************
2126                   * INPUT: LABPNT; ONLY IN FIRST PASS
2127                   * SAVED: X,Y
2128                   *
2129  2D30- 8A         RESFBR  TXA
2130  2D31- 48                 PHA
2131  2D32- A6 A6      RESF1   LDX BRANTC
2132  2D34- F0 10              BEQ RESF0       TABLE EMPTY
2133  2D36- CA                 DEX
2134  2D37- A5 97      RESF8   LDA LABPNT
2135  2D39- D5 65              CMP BRANTB,X
2136  2D3B- D0 06              BNE RESF6
2137  2D3D- A5 98              LDA LABPNT+1
2138  2D3F- D5 71              CMP BRANTB+12,X
2139  2D41- F0 06              BEQ RESF7
2140  2D43- CA         RESF6   DEX
2141  2D44- 10 F1              BPL RESF8
2142  2D46- 68         RESF0   PLA
2143  2D47- AA                 TAX

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 18/03/18   R65 ASSEMBLER  PAGE 46

2144  2D48- 60                 RTS
2145                   *
2146  2D49- 8A         RESF7   TXA
2147  2D4A- 48                 PHA
2148  2D4B- 20 53 2D           JSR RESF2
2149  2D4E- 68                 PLA
2150  2D4F- AA                 TAX
2151  2D50- 4C 32 2D           JMP RESF1
2152                   *
2153  2D53- B5 7D      RESF2   LDA BRANTB+24,X
2154  2D55- 18                 CLC
2155  2D56- 65 5C              ADC VALUE
2156  2D58- 08                 PHP
2157  2D59- B5 89              LDA BRANTB+36,X
2158  2D5B- 65 5D              ADC VALUE+1
2159  2D5D- 28                 PLP
2160  2D5E- 30 10              BMI RESF3
2161  2D60- C9 00              CMP =0
2162  2D62- F0 10              BEQ RESF4
2163  2D64- 98         ERR14   TYA
2164  2D65- 48                 PHA
2165  2D66- A9 44              LDA =$44
2166  2D68- 20 38 29           JSR ERROR
2167  2D6B- 68                 PLA
2168  2D6C- A8                 TAY
2169  2D6D- 4C 74 2D           JMP RESF4
2170                   *
2171  2D70- C9 FF      RESF3   CMP =$FF
2172  2D72- D0 F0              BNE ERR14
2173                   *
2174  2D74- E8         RESF4   INX
2175  2D75- E4 A6              CPX BRANTC
2176  2D77- B0 13              BCS RESF5
2177  2D79- B5 65              LDA BRANTB,X
2178  2D7B- 95 64              STA BRANTB-1,X
2179  2D7D- B5 71              LDA BRANTB+12,X
2180  2D7F- 95 70              STA BRANTB+11,X
2181  2D81- B5 7D              LDA BRANTB+24,X
2182  2D83- 95 7C              STA BRANTB+23,X
2183  2D85- B5 89              LDA BRANTB+36,X
2184  2D87- 95 88              STA BRANTB+35,X
2185  2D89- 4C 74 2D           JMP RESF4
2186                   *
2187  2D8C- C6 A6      RESF5   DEC BRANTC
2188  2D8E- 60                 RTS
2189                   *
2190                   *
2191                   * SUBROUTINE CBASE: COMPUTE BASE
2192                   ********************************
2193                   * INPUT: LABCNT

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 18/03/18   R65 ASSEMBLER  PAGE 47

2194                   *
2195  2D8F- A5 B0      CBASE2  LDA LABCNT
2196  2D91- A6 B1              LDX LABCNT+1
2197  2D93- 85 97              STA LABPNT
2198  2D95- 86 98              STX LABPNT+1
2199                   *
2200  2D97- AD 06 20   CBASE   LDA OBSTR
2201  2D9A- 85 95              STA BASE
2202  2D9C- AD 07 20           LDA OBSTR+1
2203  2D9F- 85 96              STA BASE+1
2204  2DA1- A5 97              LDA LABPNT
2205  2DA3- A6 98              LDX LABPNT+1
2206  2DA5- 38         CBASE1  SEC
2207  2DA6- E9 08              SBC =8
2208  2DA8- 85 99              STA LABPN1
2209  2DAA- B0 01              BCS *+3
2210  2DAC- CA                 DEX
2211  2DAD- 86 9A              STX LABPN1+1
2212  2DAF- CD 0C 20           CMP LABSTR
2213  2DB2- 8A                 TXA
2214  2DB3- ED 0D 20           SBC LABSTR+1
2215  2DB6- B0 01              BCS *+3
2216  2DB8- 60                 RTS
2217  2DB9- A0 07              LDY =7
2218  2DBB- B1 99              LDA (LABPN1),Y
2219  2DBD- 29 7F              AND =$7F
2220  2DBF- 0A                 ASL A
2221  2DC0- 65 95              ADC BASE
2222  2DC2- 85 95              STA BASE
2223  2DC4- 90 02              BCC *+4
2224  2DC6- E6 96              INC BASE+1
2225  2DC8- A5 99              LDA LABPN1
2226  2DCA- A6 9A              LDX LABPN1+1
2227  2DCC- 4C A5 2D           JMP CBASE1
2228                   *
2229                   *
2230                   * SUBROUTINE: SETREF: SET REFERENCE
2231                   ***********************************
2232                   * SAVED: X,Y; INPUT: LABPNT
2233                   *
2234  2DCF- 86 61      SETREF  STX INDEX1      SAVE X
2235  2DD1- 84 62              STY INDEX2
2236  2DD3- A5 A9              LDA PASSFL
2237  2DD5- F0 01              BEQ *+3
2238  2DD7- 60                 RTS
2239                   *
2240  2DD8- A0 07              LDY =7
2241  2DDA- B1 97              LDA (LABPNT),Y
2242  2DDC- 29 7F              AND =$7F
2243  2DDE- C9 7F              CMP =$7F

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 18/03/18   R65 ASSEMBLER  PAGE 48

2244  2DE0- D0 03              BNE *+5
2245  2DE2- A4 62              LDY INDEX2      NOT INSERTED IN FULL
2246  2DE4- 60                 RTS
2247                   *
2248  2DE5- A5 97              LDA LABPNT
2249  2DE7- 48                 PHA
2250  2DE8- A5 98              LDA LABPNT+1
2251  2DEA- 48                 PHA
2252  2DEB- 20 8F 2D           JSR CBASE2
2253  2DEE- 68                 PLA
2254  2DEF- 85 98              STA LABPNT+1
2255  2DF1- 68                 PLA
2256  2DF2- 85 97              STA LABPNT
2257                   *
2258  2DF4- A5 95              LDA BASE
2259  2DF6- 85 AC              STA OBPNT
2260  2DF8- CD 08 20           CMP OBEND
2261  2DFB- A5 96              LDA BASE+1
2262  2DFD- 85 AD              STA OBPNT+1
2263  2DFF- ED 09 20          SBC OBEND+1
2264  2E02- B0 3C              BCS SETR1
2265                   *
2266  2E04- A6 37              LDX TEMP1
2267  2E06- A0 07              LDY =7
2268  2E08- B1 97              LDA (LABPNT),Y
2269  2E0A- 18                 CLC
2270  2E0B- 69 01              ADC =1
2271  2E0D- 91 97              STA (LABPNT),Y
2272  2E0F- 20 97 2D           JSR CBASE
2273  2E12- A5 AC      SETR2   LDA OBPNT
2274  2E14- C5 95              CMP BASE
2275  2E16- A5 AD              LDA OBPNT+1
2276  2E18- E5 96              SBC BASE+1
2277  2E1A- 90 16              BCC SETR3
2278  2E1C- A0 00              LDY =0
2279  2E1E- B1 AC              LDA (OBPNT),Y
2280  2E20- A0 02              LDY =2
2281  2E22- 91 AC              STA (OBPNT),Y
2282  2E24- 38                 SEC
2283  2E25- A5 AC              LDA OBPNT
2284  2E27- E9 01              SBC =1
2285  2E29- 85 AC              STA OBPNT
2286  2E2B- B0 02              BCS *+4
2287  2E2D- C6 AD              DEC OBPNT+1
2288  2E2F- 4C 12 2E           JMP SETR2
2289                   *
2290  2E32- 20 97 2D   SETR3   JSR CBASE
2291  2E35- A0 00              LDY =0
2292  2E37- A5 9E              LDA PCOLD
2293  2E39- 91 95              STA (BASE),Y

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 18/03/18   R65 ASSEMBLER  PAGE 49

2294  2E3B- C8                 INY
2295  2E3C- A5 9F              LDA PCOLD+1
2296  2E3E- 91 95              STA (BASE),Y
2297  2E40- A4 62      SETR1   LDY INDEX2
2298  2E42- A6 61              LDX INDEX1
2299  2E44- 60                 RTS
2300                   *
2301                   *
2302  2E45-                    END
LABELS=0103
ERRORS=00
RECORDS=85


R65 COMPILE 4.3: program CHKDSK           22/2/24 page 1


   1 (    4) { ***************************************
   2 (    4)   * chkdsk: check and fix a floppy disk *
   3 (    4)   ***************************************
   4 (    4) 
   5 (    4)   usage: chkdsk [d]      check drive d
   6 (    4)          chkdsk [d] /f   check and fix drive d
   7 (    4) 
   8 (    4)          Default for d is disk 1
   9 (    4) 
  10 (    4)   2024   rricharz                        }
  11 (    4) 
  12 (    4) program chkdsk;
  13 (    4) uses syslib,arglib;
  14 ( 1093) 
  15 ( 1093) const aprepdo  = $f4a7;
  16 ( 1096)       aenddo   = $f625;
  17 ( 1096)       agetentx = $f63a;
  18 ( 1096)       maxent   = 255;
  19 ( 1096)       tsectors = 2560;
  20 ( 1096) 
  21 ( 1096) mem   filerr   = $00db:integer&;
  22 ( 1096)       filtyp   = $0300:char&;
  23 ( 1096)       filcyc   = $0311:integer&;
  24 ( 1096)       filloc   = $0313:integer;
  25 ( 1096)       filsiz   = $0315:integer;
  26 ( 1096)       fillnk   = $031e:integer;
  27 ( 1096)       scyfc    = $037c:integer&;
  28 ( 1096) 
  29 ( 1096) var entry, sector,drive: integer;
  30 ( 1096)     done,fixit,default,notok: boolean;
  31 ( 1096) 
  32 ( 1096) {$I IOPTION:P}
IOPTION:P       .02  SP 0000-0200 00F2 22/02/24
{I}    1 ( 1096) { ioption - check and set option }
{I}    2 ( 1096) 
{I}    3 ( 1096) func option(opt:char):boolean;
{I}    4 ( 1096) var i,dummy,savecarg:integer;
{I}    5 ( 1099)     options:array[15] of char;
{I}    6 ( 1099)     default:boolean;
{I}    7 ( 1099) begin
{I}    8 ( 1099)   savecarg:=carg; { save for next call to option }
{I}    9 ( 1109)   agetstring(options,default,dummy,dummy);
{I}   10 ( 1149)   option:=false;
{I}   11 ( 1151)   if not default then begin
{I}   12 ( 1160)     if options[0]<>'/' then argerror(103);
{I}   13 ( 1183)     for i:=1 to 15 do
{I}   14 ( 1191)       if options[i]=opt then option:=true;
{I}   15 ( 1218)   end;
{I}   16 ( 1236)   carg:=savecarg;
{I}   17 ( 1236) end;
  33 ( 1245) 
  34 ( 1245) proc checkfilerr;
  35 ( 1245) begin
  36 ( 1245)   if filerr<>0 then begin
  37 ( 1256)     call(aenddo);
  38 ( 1263)     writeln('Cannot read directory');
  39 ( 1291)     abort;
  40 ( 1295)   end;
  41 ( 1295) end;
  42 ( 1295) 

----------------------------------------------------------------------

R65 COMPILE 4.3: program CHKDSK           22/2/24 page 2

  43 ( 1296) func hex(d:integer):char;
  44 ( 1296) { convert hex digit to hex char }
  45 ( 1296) begin
  46 ( 1296)   if (d>=0) and (d<10) then
  47 ( 1315)     hex:=chr(d+ord('0'))
  48 ( 1325)   else if (d>=10) and (d<16) then
  49 ( 1348)     hex:=chr(d+ord('A')-10)
  50 ( 1361)   else hex:='?';
  51 ( 1372) end;
  52 ( 1376) 
  53 ( 1377) proc getdrive;
  54 ( 1377) var i:integer;
  55 ( 1380) { get drive number, default drive 1 }
  56 ( 1380) begin
  57 ( 1380)   drive:=1; {default drive}
  58 ( 1388)   filerr:=0;
  59 ( 1390)   if argtype[carg]='i' then agetval(drive,default);
  60 ( 1428)   if (drive<0) or (drive>1) then begin
  61 ( 1443)     writeln('Drive must be 0 or 1');
  62 ( 1473)     abort
  63 ( 1473)   end;
  64 ( 1477)   fildrv:=drive;
  65 ( 1477)   write('Checking drive ',drive,': ');
  66 ( 1509)   call(aprepdo);
  67 ( 1513)   checkfilerr;
  68 ( 1517)   scyfc:=255; { disk name }
  69 ( 1524)   call(agetentx);
  70 ( 1528)   checkfilerr;
  71 ( 1532)   for i:=0 to 15 do
  72 ( 1540)     write(filnam[i]);
  73 ( 1559)   writeln;
  74 ( 1573) end;
  75 ( 1579) 
  76 ( 1580) proc check;
  77 ( 1580) { check one entry }
  78 ( 1580) var i:integer;
  79 ( 1583)     ok:boolean;
  80 ( 1583) begin
  81 ( 1583)   write(entry+1,' ');
  82 ( 1595)   if (fillnk and 255) >= 128 then
  83 ( 1604)     write('DELETED SPACE       ')
  84 ( 1629)   else begin
  85 ( 1632)     for i:=0 to 15 do
  86 ( 1640)       write(filnam[i]);
  87 ( 1659)     write('.',hex(filcyc shr 4),
  88 ( 1690)       hex(filcyc and 15),' ');
  89 ( 1709)   end;
  90 ( 1709)   ok:=(sector=filloc);
  91 ( 1718)   sector:=sector+(filsiz shr 8);
  92 ( 1733)   if sector>tsectors then begin
  93 ( 1746)     writeln(invvid,'FILE SIZE TOO LONG',norvid);
  94 ( 1780)     notok:=true;
  95 ( 1782)   end else if (ok) then writeln('OK')
  96 ( 1799)   else begin
  97 ( 1808)     writeln(invvid,'SECTOR START INCONSISTENT',norvid);
  98 ( 1846)     notok:=true;
  99 ( 1848)   end;
 100 ( 1852) end;
 101 ( 1852) 
 102 ( 1853) begin

----------------------------------------------------------------------

R65 COMPILE 4.3: program CHKDSK           22/2/24 page 3

 103 ( 1853)   done:=false;
 104 ( 1857)   sector:=0;
 105 ( 1863)   entry:=0;
 106 ( 1869)   getdrive;
 107 ( 1877)   if option('H') then begin
 108 ( 1887)     writeln('/F    fix errors');
 109 ( 1913)     call(aenddo);
 110 ( 1917)     exit;
 111 ( 1918)   end;
 112 ( 1918)   fixit:=option('F');
 113 ( 1928)   if fixit then begin
 114 ( 1936)     writeln('Fix errors not yet implemented');
 115 ( 1976)     call(aenddo);
 116 ( 1980)     exit;
 117 ( 1981)   end;
 118 ( 1981)   notok:=false;
 119 ( 1983)   scyfc:=entry;
 120 ( 1987)   call(agetentx);
 121 ( 2000)   checkfilerr;
 122 ( 2004)   repeat
 123 ( 2004)     check;
 124 ( 2008)     entry:=entry+1;
 125 ( 2014)     scyfc:=entry;
 126 ( 2019)     call(agetentx);
 127 ( 2032)     checkfilerr;
 128 ( 2036)     until (filtyp=chr(0)) or (entry>maxent);
 129 ( 2051)   if notok then
 130 ( 2055)     writeln(invvid,'INCONSISTENCY FOUND',norvid);
 131 ( 2094)   call(aenddo);
 132 ( 2098) end.

End compile

Code lenght:          2097
Compiler stack size:  46
Ident stack size:     97
Pascal errors:        0

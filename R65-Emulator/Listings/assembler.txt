

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 02/11/23   R65 ASSEMBLER  PAGE 01

0001                    * 18/11/81,25/10/23
0002                   **********************************
0003                   * R65 COMPUTER SYSTEM: ASSEMBLER *
0004                   **********************************
0005                   *
0006                   * VERSION 8.0   WITH UNLIMITED NO OF LABELS
0007                   *               ADDITIONAL PSEUDO OP'S
0008                   *               NO RPINTING IN FIRST PASS
0009                   *               SOURCE MAY BE IN SEVERAL FILES
0010                   *               ONLY 'END' TERMINATES A PASS
0011                   * ASSEMBLER FOR R65 COMPUTER SYSTEM
0012                   * CC RRICHARZ, RBAUMANN 1978-1981
0013                   *       - 32 k MEMORY
0014                   *       - VIDEO INTERFACE WITH 4k VIDEO MEMORY
0015                   *       - HARDCOPY OUTPUT
0016                   *       - TAPE AND OR DISK DRIVE(S)
0017                   *
0018                   * INPUT FROM 2 DEVICES
0019                   *       - COMMAND INPUT FROM KEYBOARD
0020                   *       - SOURCE CODE INPUT FROM TAPE OR DISK
0021                   *
0022                   * OUTPUT TO 3 DEVICES
0023                   *       - MESSAGES AND LISTING TO VIDEO DISPLAY
0024                   *       - ERROR TABLE, CROSS REFERENCE MAP AND
0025                   *         LISTINGS TO HARD COPY
0026                   *       - OBJECT FILE(S) TO TAPE OR DISK
0027                   *
0028                   * COMMANDS (A* IS PRINTED IN COMMAND MODE)
0029                   *       F       FIRST PASS
0030                   *       S       SECOND PASS
0031                   *       C       CONTINUE SAME PASS
0032                   *       R       REFERENCE MAP
0033                   *       <CR>    EXIT ASSEMBLER
0034                   *       <ESC>   EXIT ASSEMBLER
0035                   *
0036                   *
0037                   * SOURCE LINE FORMAT [] MEANS OPTIONAL
0038                   * [LABEL] OPCODE [OPERAND] [COMMENT]
0039                   * OR *[COMMENT]
0040                   *
0041                   * PSEUDO OPCODES (ASSEMBLER DIRECTIVES)
0042                   *
0043                   *       - EQU "EXPRESSION"      ASSIGN LABEL
0044                   *       - ORG "EXPRESSION"      ASSIGN PC
0045                   *       - BSS "EXPRESSION"      RESERVE BYTES
0046                   *       - BYT "EXPR","EXPR",..  ASSIGN BYTES
0047                   *               "EXPR" CAN BE 'STRING'
0048                   *       - WRD "EXPR","EXPR",..  ASSIGN WORDS
0049                   *       - PAG                   NEW PAGE
0050                   *       - TIT "MAX 32 CHARS"    ASSIGN TITLE

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 02/11/23   R65 ASSEMBLER  PAGE 01

0051                   *       - END                   END OF SOURCE
0052                   *       - NPR                   NO PRINTING
0053                   *       - PRT                   PRINTING
0054                   *
0055                   * ERROR CODES: (FULL ERROR ANALYSIS IN FIRST
0056                   * PASS INCLUDING FORWARD BRANCHES AND
0057                   * UNRESOLVED REFERENCES)
0058                   * FOR ERROR CODES <30 SEE SYSTEM ERRORS
0059                   *
0060                   * ERROR 31  CLOSING ) EXPECTED IN EXPRESSION
0061                   * ERROR 32  SYNTAX ERROR IN LABEL
0062                   * ERROR 33  HEX CHAR EXPECTED AFTER $
0063                   * ERROR 34  LABEL TABLE OVERFLOW
0064                   * ERROR 35  LOGICAL CHAR EXPECTED AFTER #
0065                   * ERROR 36  EXPRESSION NOT RESOLVED (PASS 2)
0066                   * ERROR 37  SYNTAX ERROR IN OPCODE
0067                   * ERROR 38  MNEMONIC OR ADDRESSING ILLEGAL
0068                   * ERROR 39  ILLEGAL ADDRESSING MODE
0069                   * ERROR 40  SYNTAX ERROR IN OPERAND
0070                   * ERROR 41  ABSOLUTE ADDRESS ILLEGAL
0071                   * ERROR 42  MORE THAN 1 UNRESOLVED LABEL IN
0072                   *               FORWARD BRANCH
0073                   * ERROR 43  BRANCH EXCEEDS BOUNDS
0074                   * ERROR 44  FORWARD BRANCH TO THIS LABEL
0075                   *               EXCEEDS BOUNDS
0076                   * ERROR 45  DOUBLE LABELDEFINITION
0077                   * ERROR 46  MISSMATCH IN SECOND PASS
0078                   * ERROR 47  LABEL MISSING IN EQU
0079                   * ERROR 48  OPERAND OF BYT TOO LONG
0080                   * ERROR 49  EXPRESSION MUST BE RESOLVED
0081                   * ERROR 50  LINE TOO LONG
0082                   * ERROR 51  CHAR FOLLOWS LOGICAL END OF OPERAND
0083                   * ERROR 52  TOO MANY UNRESOLVED BRANCHES
0084                   *               NOT INSERTED INTO TEST TABLE
0085                   *
0086                           TIT R65 ASSEMBLER V8.0
0087                   *
0088                           ORG 0
0089                   *
0090                   * PAGE ZERO ASSEMBLER VARIABLES
0091                   *******************************
0092                   *
0093                   * TEMPORARY BUFFERS
0094                   *
0095  0000-            INBUFF  BSS 48  LINE BUFFER
0096  0030-            LABEL   BSS 7   LABEL SHIFT REGISTER
0097  0037-            TEMP1   BSS 1   TEMPORARY REGISTER
0098  0038-            NUMBYT  BSS 1   NUMBER OF BYTES
0099  0039-            RESOLV  BSS 3   UNRESOLVED COUNTER
0100  003C-            OBJECT  BSS 32  OBJECT CODE LINE BUFFER

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 02/11/23   R65 ASSEMBLER  PAGE 02

0101  005C-            VALUE   BSS 2   VALUE OF EXPRESSION
0102  005E-            OPCODE  BSS 2   OPCODE SAVE REGISTER
0103  0060-            ADMODE  BSS 1   ADDRESSING MODE
0104  0061-            INDEX1  BSS 1   MNEMONIC TABLE INDEX
0105  0062-            INDEX2  BSS 1   CODE OFFSET INDEX
0106  0063-            DEFLB   BSS 1   LABEL DEFINITION FLAG
0107  0064-            INBFPN  BSS 1   END OF INPUT POINTER
0108  0065-            BRANTB  BSS 48  FORWARD BRANCH TABLE
0109  0095-            BASE    BSS 2   REFERENCE TABLE POINTER
0110  0097-            LABPNT  BSS 2   LABEL POINTER
0111  0099-            LABPN1  BSS 2   SECOND LABEL POINTER
0112  009B-            INPFIL  BSS 1   INPUT FILE NUMBER
0113  009C-            SAVPNT  BSS 2   SAVED FILE PAR POINTER
0114                   *
0115                   * PRESET TO 0 IN BOTH PASSES
0116                   *
0117  009E-            PCOLD   BSS 2   OLD PROGRAM COUNTER
0118  00A0-            PCNEW   BSS 2   NEW PROGRAMM COUNTER
0119  00A2-            LINCNT  BSS 2   LINE COUNTER
0120  00A4-            PAGECN  BSS 1   PAGE COUNTER
0121  00A5-            OUTREC  BSS 1   OUTPUT RECORD COUNTER
0122  00A6-            BRANTC  BSS 1   TABLE POINTER
0123  00A7-            FILCNT  BSS 1   INPUT FILE COUNTER
0124  00A8-            NUMERR  BSS 1   NUMBER OF ERRORS
0125                   *
0126                   * PRESET IN BOTH PASSES
0127                   *
0128  00A9-            PASSFL  BSS 1   PASS FLAG
0129  00AA-            PRTFLG  BSS 1   PRINT FLAG
0130  00AB-            PAGELN  BSS 1   PAGE LINE COUNTER
0131  00AC-            OBPNT   BSS 2   OBJECT BUFFER POINTER
0132  00AE-            OBADDR  BSS 2   OBJECT BASE ADDRESS
0133                   *
0134                   * PRESET ONLY IN FIRST BASS
0135                   *
0136  00B0-            LABCNT  BSS 2   LABEL COUNTER
0137  00B2-            TITLE   BSS 32  TITLE OF PROGRAM
0138                   *
0139                   *
0140                   *
0141                   * MONITOR LABELS:
0142                   *****************
0143                   *
0144                   FILFLG  EQU $DA         FILE ENTRY FLAG
0145                   FILDRV  EQU $DC         FILE DRIVE
0146                   CURPOS  EQU $EE         CURSOR HOR. POSITION
0147                   INL     EQU $F8         INPUT BUFFER MONITOR
0148                   *
0149                   FILNAM  EQU $0301       FILE NAME
0150                   FILSTP  EQU $0312       FILE SUBTYPE

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 02/11/23   R65 ASSEMBLER  PAGE 03

0151                   FILLOC  EQU $0313       FILE LOCATION/SECTOR
0152                   FILSIZ  EQU $0315       FILE SIZE
0153                   FILSA   EQU $031A       START ADDRESS
0154                   FILEA   EQU $031C       END ADDRESS
0155                   FILNM1  EQU $0320       SECOND FILE NAME
0156                   FILSA1  EQU $0331       SECOND START ADDRESS
0157                   FIRCTB  EQU $0351       ROCORD COUNTER
0158                   *
0159                   VFLAG   EQU $1780       VIDEO FLAG REGISTER
0160                   SFLAG   EQU $1781       SYSTEM FLAG REGISTER
0161                   NUMLIN  EQU $1789       VIDEO LINES
0162                   VMON    EQU $17D5       ADDRESS OF MONITOR START
0163                   MNEMR   EQU $E7C0       MNEMONIC TABLE
0164                   MNEML   EQU $E780
0165                   DISMOD  EQU $E722       ADDRESSING MODE TABLE 1
0166                   MODE2   EQU $E766       ADDRESSING MODE TABLE
0167                   CLOSAL  EQU $F015
0168                   *
0169                   EMUCOM  EQU $1430       SIMULATOR COMMAND
0170                   *
0171                           PAG

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 02/11/23   R65 ASSEMBLER  PAGE 04

0172                   *
0173                   * START OF PROGRAM ENTRY VECTORS
0174                   ********************************
0175                   *
0176  00D2-                    ORG $2000
0177                   *
0178  2000- 4C CE 29           JMP COLDST      COLD START ENTRY
0179  2003- 4C 17 2A           JMP WARMST      WARM START ENTRY
0180                   *
0181                   *
0182                   * ASSEMBLER BUFFERS AND CONSTANTS:
0183                   **********************************
0184                   *
0185  2006- 00 50      OBSTR   WRD $5000       START OF OBJECT BUFFER
0186  2008- FE 8F      OBEND   WRD $8FFE       END OF OBJECT BUFFER -1
0187                   *
0188  200A- 00 90      SAVNAM  WRD $9000       INPUT FILE NAME BUFFER
0189                   *
0190  200C- 00 30      LABSTR  WRD $3000       START OF LABEL TABLE
0191  200E- F0 4F      LABEND  WRD $4FF0       END OF LABEL TABLE
0192                   *
0193  2010- 32         TABLE   BYT 50          PRINTED LINES/PAGE
0194  2011- 45                 BYT 69          TOTAL LINES/PAGE
0195  2012- 0C                 BYT $0C         FORM FEED CODE
0196  2013- 00                 BYT 0           NO OF ADD. PAD CHARS
0197  2014- 41                 BYT 65          POSITION OF PAPER MARK
0198  2015- CE                 BYT $CE         START POSITION ON PAPER
0199                   *
0200                   * SUBROUTINE VECTORS
0201                   ********************
0202                   *
0203                   GETKEY  EQU $E000
0204                   GETCHR  EQU $E003
0205                   GETLIN  EQU $E006
0206                   PRTCHR  EQU $E009
0207                   VAUTOP  EQU $E00C
0208                   ENDLIN  EQU $E024
0209                   PRTINF  EQU $E027
0210                   PRTBYT  EQU $E02D
0211                   PRTAX   EQU $E030
0212  2016- 4C 20 EB   WRFILA  JMP WRFILE+12   SPECIAL ENTRY!
0213                   WRFILE  EQU $EB14
0214                   OPEN    EQU $F00F
0215                   CLOSE   EQU $F012
0216                   READCH  EQU $F018
0217                   PRTDAT  EQU $F80F
0218                   GETNAM  EQU $F815
0219  2019- 4C F2 FC   HARGUM  JMP $FCF2
0220                   PACKTS  EQU $F919
0221                   *

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 02/11/23   R65 ASSEMBLER  PAGE 05

0222                   *
0223                   * SUBROUTINE SRLAB: SEARCH LABEL
0224                   ********************************
0225                   * SEARCH IN LABTB, RETURN C0 IF NOT
0226                   * FOUND, ELSE LBAPNT=ADDRESS OF LABEL
0227                   * USED: TEMP1,A; SAVED: X,Y; OUPUT: A,Z
0228                   *
0229  201C- 84 37      SRLAB   STY TEMP1
0230  201E- AD 0C 20           LDA LABSTR      SET TO START OF TABLE
0231  2021- AC 0D 20           LDY LABSTR+1
0232                   *
0233  2024- 85 97      SRLAB1  STA LABPNT
0234  2026- 84 98              STY LABPNT+1
0235  2028- C5 B0              CMP LABCNT      COMPARE TABLE END
0236  202A- 98                 TYA
0237  202B- E5 B1              SBC LABCNT+1
0238  202D- B0 1C              BCS SRLAB4      SKIP, IF END OF TABLE
0239  202F- A0 04              LDY =4
0240  2031- B9 30 00   SRLAB2  LDA LABEL,Y     COMPARE NOW
0241  2034- D1 97              CMP (LABPNT),Y
0242  2036- D0 07              BNE SRLAB3
0243  2038- 88                 DEY
0244  2039- 10 F6              BPL SRLAB2      LOOP UNTIL DONE
0245  203B- 38                 SEC             LABEL FOUND
0246  203C- A4 37              LDY TEMP1
0247  203E- 60                 RTS
0248                   *
0249  203F- A5 97      SRLAB3  LDA LABPNT      DIFFERENCE FOUND
0250  2041- A4 98              LDY LABPNT+1
0251  2043- 18                 CLC
0252  2044- 69 08              ADC =8          NEXT ONE
0253  2046- 90 DC              BCC SRLAB1
0254  2048- C8                 INY
0255  2049- B0 D9              BCS SRLAB1      ALLWAYS TAKEN
0256                   *
0257  204B- 18         SRLAB4  CLC             NOT FOUND
0258  204C- A4 37              LDY TEMP1
0259  204E- 60                 RTS
0260                   *
0261                   *
0262                   * SUBROUTINE STLABN: STORE LABEL NAME
0263                   *************************************
0264                   * STORE IN LABTAB, ERROR IF TABLE OVERFLOW
0265                   * NO DUPLICATE LABEL TEST, LABTB7 SET TO 0
0266                   * USED: A,Y; SAVED: X; INPUT: LABCNT;
0267                   * OUTPUT: LABCNT, CALLED: ERROR 34
0268                   *
0269  204F- A5 B0      STLABN  LDA LABCNT      COMPUTE LABPNT
0270  2051- A4 B1              LDY LABCNT+1
0271  2053- 18                 CLC

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 02/11/23   R65 ASSEMBLER  PAGE 06

0272  2054- 69 08              ADC =8
0273  2056- 90 01              BCC *+3
0274  2058- C8                 INY
0275  2059- 48                 PHA
0276  205A- CD 0E 20           CMP LABEND      TEST TABLE OVERFLOW
0277  205D- 98                 TYA
0278  205E- ED 0F 20           SBC LABEND+1
0279  2061- 68                 PLA
0280  2062- 90 09              BCC STLAB1      SKIP, IF NOT FULL
0281                   *
0282  2064- A9 34              LDA =$34        ERROR 34: TOO MANY
0283  2066- 20 38 29           JSR ERROR       ERRORS
0284  2069- A5 B0              LDA LABCNT
0285  206B- A4 B1              LDY LABCNT+1
0286                   *
0287  206D- 85 B0      STLAB1  STA LABCNT
0288  206F- 84 B1              STY LABCNT+1
0289  2071- 38                 SEC
0290  2072- E9 08              SBC =8
0291  2074- B0 01              BCS *+3
0292  2076- 88                 DEY
0293  2077- 85 97              STA LABPNT
0294  2079- 84 98              STY LABPNT+1
0295                   *
0296  207B- A0 04              LDY =4
0297  207D- B9 30 00   STLAB2  LDA LABEL,Y
0298  2080- 91 97              STA (LABPNT),Y
0299  2082- 88                 DEY
0300  2083- 10 F8              BPL STLAB2
0301                   *
0302  2085- A9 00              LDA =0          CLEAR BYTE 7
0303  2087- A0 07              LDY =7
0304  2089- 91 97              STA (LABPNT),Y
0305  208B- 60                 RTS
0306                   *
0307                   *  SUBROUTINE RDLAB: READ LABEL FROM BUFFER
0308                   *******************************************
0309                   * READ 1-7 CHARS, SHIFT INTO 5 BYTES, STORE
0310                   * IN LABEL, TERMINATORS ARE NOT LETTERS OR
0311                   * NUMBERS. USED: A,X,Y,TEMP1; CALLED: ERROR;
0312                   * INPUT:X; OUTPUT: LABEL,X
0313                   *
0314  208C- A0 08      RDLAB   LDY =8          CHAR COUNTER
0315  208E- A9 06              LDA =6
0316  2090- 85 37              STA TEMP1       TEMP1 = BIT COUNTER
0317  2092- B5 00              LDA INBUFF,X    GET ONE CHAR
0318  2094- C9 30              CMP =$30        IF NOT LEGAL CODE
0319  2096- 90 04              BCC *+6         USE SAME NEXT LOOP
0320  2098- C9 5B              CMP =$5B        IF LEGAL
0321  209A- 90 03              BCC *+5         USE THIS CHAR

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 02/11/23   R65 ASSEMBLER  PAGE 07

0322  209C- CA                 DEX             USE SAME CHAR AGAIN
0323  209D- A9 00              LDA =0          USE 0 FILLER
0324  209F- 88                 DEY             COUNT CHAR
0325  20A0- F0 21              BEQ RDLAB2      LAST CHAR
0326  20A2- 0A                 ASL A
0327  20A3- 0A                 ASL A
0328  20A4- C0 06              CPY =6          IF X<6
0329  20A6- 90 08              BCC RDLAB1      USE 6 BITS
0330  20A8- C6 37              DEC TEMP1
0331  20AA- 0A                 ASL A           TAKE ONLY 5 BITS
0332  20AB- 90 03              BCC RDLAB1      LEGAL 5 BIT CODE
0333  20AD- A9 00              LDA =0          ELSE USE FILLER
0334  20AF- CA                 DEX
0335  20B0- 0A         RDLAB1  ASL A           SHIFT INTO LABEL
0336  20B1- 26 34              ROL LABEL+4
0337  20B3- 26 33              ROL LABEL+3
0338  20B5- 26 32              ROL LABEL+2
0339  20B7- 26 31              ROL LABEL+1
0340  20B9- 26 30              ROL LABEL
0341  20BB- C6 37              DEC TEMP1
0342  20BD- D0 F1              BNE RDLAB1      LOOP FOR BITS
0343  20BF- E8                 INX
0344  20C0- 4C 8E 20           JMP RDLAB+2
0345  20C3- C9 00      RDLAB2  CMP =0
0346  20C5- D0 06              BNE *+8         MORE THAN 6 CHARACTERS
0347  20C7- A5 30              LDA LABEL
0348  20C9- F0 02              BEQ *+4         FIRST CHAR NOT LETTER
0349  20CB- E8                 INX
0350  20CC- 60                 RTS
0351  20CD- A9 32              LDA =$32
0352  20CF- 4C 38 29           JMP ERROR       RETURN AFTER ERROR
0353                   *
0354                   *
0355                   * SUBROUTINE RDBL: READ BLANKS
0356                   ******************************
0357                   * USED: A; SAVED:Y; INPUT:X; OUTPUT:X
0358                   *
0359  20D2- B5 00      RDBL    LDA INBUFF,X
0360  20D4- E8                 INX
0361  20D5- C9 20              CMP =$20
0362  20D7- F0 F9              BEQ RDBL
0363  20D9- CA                 DEX
0364  20DA- 60                 RTS
0365                   *
0366                   *
0367                   * SUBROUTINE EXPRESSION
0368                   ***********************
0369                   * READ EXPRESSION FROM INBUFF,X.  COMPUTE
0370                   * VALUE AND RESOLV-FLAG (GIVES NUMBER OF
0371                   * UNRESOLVED REFERENCES USED

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 02/11/23   R65 ASSEMBLER  PAGE 08

0372                   * SYNTAX:
0373                   * EXPRESSION: FUNCTION [+-FUNCTION]
0374                   * FUNCTION:   <ARGUMENT OR >ARGUMENT OR
0375                   *               ARGUMENT
0376                   * ARGUMENT:   'CHAR['] OR $HEX OR #BINARY OR
0377                   *               DECIMAL OR * OR LABEL
0378                   * USED: A,X,Y; INPUT:X; OUTPUT: X,VALUE
0379                   *               RESOLVE,RESOLV+1;
0380                   *               CALLED: FUNC,ERROR
0381                   *
0382  20DB- A9 00      EXPRES  LDA =0          SET COUNTER FOR
0383  20DD- 85 39              STA RESOLV      UNRESOLVED LABELS
0384  20DF- 20 17 21           JSR FUNC
0385  20E2- 48         EXP1    PHA             PUSH RESULT ON STACK
0386  20E3- A5 5C              LDA VALUE
0387  20E5- 48                 PHA
0388  20E6- B5 00              LDA INBUFF,X    GET NEXT CHAR
0389  20E8- C9 2B              CMP =$2B        IF +
0390  20EA- D0 12              BNE MINUS
0391  20EC- E8                 INX
0392  20ED- 20 17 21           JSR FUNC        GET NEXT FUNCTION
0393  20F0- 68                 PLA             AND ADD TO SAVED VALUE
0394  20F1- 18                 CLC
0395  20F2- 65 5C              ADC VALUE
0396  20F4- 85 5C              STA VALUE
0397  20F6- 68                 PLA
0398  20F7- 65 5D              ADC VALUE+1
0399  20F9- 85 5D              STA VALUE+1
0400  20FB- 4C E2 20           JMP EXP1
0401  20FE- C9 2D     MINUS   CMP =$2D        IF -
0402  2100- D0 12              BNE EXP2
0403  2102- E8                 INX
0404  2103- 20 17 21           JSR FUNC        GET NEXT FUNCTION
0405  2106- 68                 PLA             AND SUBTRACT FROM SAVED
0406  2107- 38                 SEC
0407  2108- E5 5C              SBC VALUE
0408  210A- 85 5C              STA VALUE
0409  210C- 68                 PLA
0410  210D- E5 5D              SBC VALUE+1
0411  210F- 85 5D              STA VALUE+1
0412  2111- 4C E2 20           JMP EXP1
0413  2114- 68         EXP2    PLA             GET SAVED VALUE BACK
0414  2115- 68                 PLA
0415  2116- 60                 RTS
0416                   *
0417                   *
0418                   * SUBROUTINE FUNCTION
0419                   *********************
0420                   * CALLED: ARG
0421                   *

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 02/11/23   R65 ASSEMBLER  PAGE 09

0422  2117- B5 00      FUNC    LDA INBUFF,X
0423  2119- C9 3C              CMP =$3C        IF < (LOW BYTE)
0424  211B- D0 09              BNE *+11
0425  211D- E8                 INX
0426  211E- 20 33 21           JSR ARG         GET ARGUMENT
0427  2121- A9 00      FUNC1   LDA =0          AND SET HIGH BYTE TO 0
0428  2123- 85 5D              STA VALUE+1
0429  2125- 60                 RTS
0430                   *
0431  2126- C9 3E              CMP =$3E        IF > (HIGH BYTE)
0432  2128- D0 09              BNE ARG
0433  212A- E8                 INX
0434  212B- 20 33 21           JSR ARG         GET ARGUMENT
0435  212E- 85 5C              STA VALUE       STORE HIGH BYTE IN
0436  2130- 4C 21 21           JMP FUNC1       LOW BYTE AND CLEAR HIGH
0437                   *
0438                   *
0439                   * SUBROUTINE ARGUMENT
0440                   *********************
0441                   * CALLED: ERROR,PACKTS,TSTBIN,DIGTST,RDLAB,
0442                   * SRLAB,STLABN,SETREF
0443                   *
0444  2133- B5 00      ARG     LDA INBUFF,X
0445  2135- C9 28              CMP =$28        IF (
0446  2137- D0 13              BNE ARG05
0447  2139- E8                 INX
0448  213A- 20 DF 20           JSR EXPRES+4    GET EXPRESSION
0449  213D- B5 00              LDA INBUFF,X    MUST BE )
0450  213F- C9 29              CMP =$29
0451  2141- F0 05              BEQ *+7
0452  2143- A9 31              LDA =$31
0453  2145- 20 38 29           JSR ERROR
0454  2148- E8                 INX
0455  2149- A5 5D              LDA VALUE+1
0456  214B- 60                 RTS
0457                   *
0458  214C- C9 27      ARG05   CMP =$27        IF '
0459  214E- D0 12              BNE ARG10
0460  2150- E8                 INX
0461  2151- B5 00              LDA INBUFF,X    GET CHAR
0462  2153- 85 5C              STA VALUE
0463  2155- E8                 INX
0464  2156- B5 00              LDA INBUFF,X    IGNORE SECOND '
0465  2158- C9 27              CMP =$27
0466  215A- D0 01              BNE *+3
0467  215C- E8                 INX
0468  215D- A9 00              LDA =0
0469  215F- 85 5D              STA VALUE+1
0470  2161- 60                 RTS
0471                   *

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 02/11/23   R65 ASSEMBLER  PAGE 10

0472  2162- C9 24      ARG10   CMP =$24        IF $ (HEX)
0473  2164- D0 24              BNE ARG20
0474  2166- E8                 INX
0475  2167- A9 00              LDA =0
0476  2169- 85 F8              STA INL
0477  216B- 85 F9              STA INL+1
0478  216D- B5 00              LDA INBUFF,X
0479  216F- 20 1B F9           JSR PACKTS+2
0480  2172- F0 05              BEQ *+7
0481  2174- A9 33              LDA =$33
0482  2176- 20 38 29           JSR ERROR
0483  2179- E8                 INX
0484  217A- B5 00              LDA INBUFF,X
0485  217C- 20 1B F9           JSR PACKTS+2
0486  217F- F0 F8              BEQ *-6
0487  2181- A5 F8              LDA INL
0488  2183- 85 5C              STA VALUE
0489  2185- A5 F9              LDA INL+1
0490  2187- 85 5D              STA VALUE+1
0491  2189- 60                 RTS
0492                   *
0493  218A- C9 23      ARG20   CMP =$23        IF # (BINARY)
0494  218C- D0 1A              BNE ARG30
0495  218E- E8                 INX             READ BINARY NUMBER
0496  218F- A9 00              LDA =0
0497  2191- 85 5C              STA VALUE
0498  2193- 85 5D              STA VALUE+1
0499  2195- 20 2A 22           JSR TSTBIN
0500  2198- F0 05              BEQ *+7
0501  219A- A9 35              LDA =$35
0502  219C- 20 38 29           JSR ERROR
0503  219F- E8                 INX
0504  21A0- 20 2A 22           JSR TSTBIN
0505  21A3- F0 FA              BEQ *-4
0506  21A5- A5 5D              LDA VALUE+1
0507  21A7- 60                 RTS
0508                   *
0509  21A8- 20 3D 22   ARG30   JSR DIGTST      IF DECIMAL NUMBER
0510  21AB- B0 12              BCS ARG40
0511  21AD- A9 00              LDA =0          READ DECIMAL NUMBER
0512  21AF- 85 5C              STA VALUE
0513  21B1- 85 5D              STA VALUE+1
0514  21B3- 20 3D 22           JSR DIGTST
0515  21B6- E8                 INX
0516  21B7- 20 3D 22           JSR DIGTST
0517  21BA- 90 FA              BCC *-4
0518  21BC- A5 5D              LDA VALUE+1
0519  21BE- 60                 RTS
0520                   *
0521  21BF- C9 2A      ARG40   CMP =$2A        IF *

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 02/11/23   R65 ASSEMBLER  PAGE 11

0522  21C1- D0 0A              BNE ARG50
0523  21C3- E8                 INX             GET PROGRAM COUNTER
0524  21C4- A5 9E              LDA PCOLD
0525  21C6- 85 5C              STA VALUE
0526  21C8- A5 9F              LDA PCOLD+1
0527  21CA- 85 5D              STA VALUE+1
0528  21CC- 60                 RTS
0529                   *
0530  21CD- 20 8C 20   ARG50   JSR RDLAB       MUST BE LABEL
0531  21D0- 20 1C 20           JSR SRLAB
0532  21D3- 90 3A              BCC ARG52       BRANCH IF UNKNOWN
0533  21D5- 20 01 2E           JSR SETREF      INSERT INTO REF TABLE
0534  21D8- 20 79 22           JSR DEFIN       IF DEFINED
0535  21DB- F0 18              BEQ ARG51
0536  21DD- A5 A9              LDA PASSFL
0537  21DF- F0 08              BEQ *+10
0538  21E1- A0 07              LDY =7
0539  21E3- B1 97              LDA (LABPNT),Y  GET RFLAG
0540  21E5- 30 02              BMI *+4
0541  21E7- E6 39              INC RESOLV
0542  21E9- A0 05              LDY =5
0543  21EB- B1 97              LDA (LABPNT),Y  GET VALUE
0544  21ED- 85 5C              STA VALUE
0545  21EF- C8                 INY
0546  21F0- B1 97              LDA (LABPNT),Y
0547  21F2- 85 5D              STA VALUE+1
0548  21F4- 60                 RTS
0549  21F5- E6 39      ARG51   INC RESOLV      COUNT UNRESOLVED REF
0550  21F7- A5 97              LDA LABPNT
0551  21F9- 85 3A              STA RESOLV+1
0552  21FB- A5 98              LDA LABPNT+1
0553  21FD- 85 3B              STA RESOLV+2    SAVE LABEL NUMBER
0554  21FF- A5 A9             LDA PASSFL
0555  2201- F0 05              BEQ *+7
0556  2203- A9 36              LDA =$36
0557  2205- 20 38 29           JSR ERROR
0558  2208- A9 00              LDA =0
0559  220A- 85 5C              STA VALUE       RETURN VALUE = 0
0560  220C- 85 5D              STA VALUE+1
0561  220E- 60                 RTS
0562  220F- 20 4F 20   ARG52   JSR STLABN      STORE LABEL NAME
0563  2212- A5 A9              LDA PASSFL
0564  2214- F0 05              BEQ *+7
0565  2216- A9 36              LDA =$36
0566  2218- 20 38 29           JSR ERROR
0567  221B- A9 FF              LDA =$FF        SET TO UNRESOLVED
0568  221D- A0 05              LDY =5
0569  221F- 91 97              STA (LABPNT),Y
0570  2221- C8                 INY
0571  2222- 91 97              STA (LABPNT),Y

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 02/11/23   R65 ASSEMBLER  PAGE 12

0572  2224- 20 01 2E           JSR SETREF
0573  2227- 4C F5 21           JMP ARG51
0574                   *
0575                   *
0576                   * SUBROUTINE TSTBIN: GET AND TEST BINARY NUMBER
0577                   ***********************************************
0578                   *
0579  222A- B5 00      TSTBIN  LDA INBUFF,X
0580  222C- C9 30              CMP =$30
0581  222E- 18                 CLC
0582  222F- F0 05              BEQ *+7
0583  2231- C9 31              CMP =$31
0584  2233- D0 07              BNE *+9
0585  2235- 38                 SEC
0586  2236- 26 5C              ROL VALUE
0587  2238- 26 5D              ROL VALUE+1
0588  223A- A9 00              LDA =0          SET ZERO FLAG
0589  223C- 60                 RTS
0590                   *
0591                   *
0592                   * SUBROUTINE DIGTST: TEST AND GET DECIMAL
0593                   *****************************************
0594                   *
0595  223D- B5 00      DIGTST  LDA INBUFF,X
0596  223F- C9 30              CMP =$30
0597  2241- 90 04              BCC *+6
0598  2243- C9 3A              CMP =$3A
0599  2245- 90 02              BCC *+4
0600  2247- 38                 SEC             C=1 >> NOT DECIMAL
0601  2248- 60                 RTS
0602                   *
0603  2249- 06 5C              ASL VALUE       MULTIPLY VALUE BY 10
0604  224B- 26 5D              ROL VALUE+1
0605  224D- A5 5C              LDA VALUE       SAVE 2*VALUE
0606  224F- 85 F8              STA INL
0607  2251- A5 5D              LDA VALUE+1
0608  2253- 85 F9              STA INL+1
0609  2255- 06 5C              ASL VALUE
0610  2257- 26 5D              ROL VALUE+1
0611  2259- 06 5C              ASL VALUE
0612  225B- 26 5D              ROL VALUE+1     8*VALUE
0613  225D- A5 5C              LDA VALUE
0614  225F- 18                 CLC
0615  2260- 65 F8              ADC INL
0616  2262- 85 5C              STA VALUE
0617  2264- A5 5D              LDA VALUE+1
0618  2266- 65 F9              ADC INL+1
0619  2268- 85 5D              STA VALUE+1     10*VALUE
0620  226A- B5 00              LDA INBUFF,X
0621  226C- 29 0F              AND =$0F        CONVERT TO BCD

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 02/11/23   R65 ASSEMBLER  PAGE 13

0622  226E- 18                 CLC
0623  226F- 65 5C              ADC VALUE       ADD TO 10*VALUE
0624  2271- 85 5C              STA VALUE
0625  2273- 90 02              BCC *+4
0626  2275- E6 5D              INC VALUE+1
0627  2277- 18                 CLC             C=0 >> DECIMAL
0628  2278- 60                 RTS
0629                   *
0630                   *
0631                   * SUBROUTINE DEFIN
0632                   ******************
0633                   * RETURN Z=1 IF LABEL UNDEFINED
0634                   * INPUT: LABEL IN LABPNT
0635                   *
0636  2279- A0 05      DEFIN   LDY =5
0637  227B- B1 97              LDA (LABPNT),Y
0638  227D- C8                 INY
0639  227E- 31 97              AND (LABPNT),Y
0640  2280- C9 FF              CMP =$FF
0641  2282- 60                 RTS
0642                   *
0643                   *
0644                   * SUBROUTINE RDOPC: READ OPCODE FROM INBUFF
0645                   *******************************************
0646                   * PACK IN OPCODE WITH SAME FORMAT AS DISASSEM-
0647                   * BLER (5BIT/CHAR, OFFSET=$3F, LEFT SHIFTED 1)
0648                   * USED: A,X,Y,TEMP1; INPUT: X; OUTPUT; X,
0649                   * OPCODE; CALLED: ERROR
0650                   *
0651  2283- A9 03      RDOPC   LDA =3
0652  2285- 85 37              STA TEMP1       CHAR COUNTER
0653  2287- B5 00      RDOPC1  LDA INBUFF,X    GET A CHAR
0654  2289- C9 41              CMP =$41        TEST FOR LETTER
0655  228B- 90 04              BCC ERR7
0656  228D- C9 5B              CMP =$5B
0657  228F- 90 0B              BCC *+13
0658  2291- A0 00      ERR7    LDY =0
0659  2293- 84 5E              STY OPCODE
0660  2295- 84 5F              STY OPCODE+1
0661  2297- A9 37              LDA =$37
0662  2299- 4C 38 29           JMP ERROR
0663                   *
0664  229C- E8                 INX
0665  229D- 38                 SEC
0666  229E- E9 3F              SBC =$3F        SUBTRACT OFFSET
0667  22A0- 0A                 ASL A
0668  22A1- 0A                 ASL A
0669  22A2- 0A                 ASL A
0670  22A3- A0 05              LDY =5          BIT COUNTER
0671  22A5- 0A         RDOPC2  ASL A

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 02/11/23   R65 ASSEMBLER  PAGE 14

0672  22A6- 26 5F              ROL OPCODE+1
0673  22A8- 26 5E              ROL OPCODE
0674  22AA- 88                 DEY
0675  22AB- D0 F8              BNE RDOPC2
0676  22AD- C6 37              DEC TEMP1       NEXT CHAR
0677  22AF- D0 D6              BNE RDOPC1
0678  22B1- 06 5F              ASL OPCODE+1
0679  22B3- 26 5E              ROL OPCODE
0680  22B5- B5 00              LDA INBUFF,X    TEST NEXT CHAR
0681  22B7- E8                 INX
0682  22B8- C9 20              CMP =$20        MUST BE BLANK
0683  22BA- F0 03              BEQ *+5
0684  22BC- 20 97 22           JSR ERR7+6
0685  22BF- 60                 RTS
0686                   *
0687                   *
0688                   * SUBROUTINE SROPC: SEARCH OPCODE IN TABLE
0689                   ******************************************
0690                   * USE OPCODE AND ADDRESSING MODE FOR TEST
0691                   *
0692  22C0- A2 41      SROPC   LDX =$41        POINTER TO MNEMONIC TB
0693  22C2- CA                 DEX
0694  22C3- D0 0C              BNE *+14
0695  22C5- A9 38              LDA =$38
0696  22C7- 20 38 29           JSR ERROR
0697  22CA- A9 00              LDA =0
0698  22CC- 85 3C              STA OBJECT
0699  22CE- 4C FA 23           JMP ERR10+5     ASSUME ABS AND OPCODE=0
0700                   *                       IF NOT FOUND
0701  22D1- A5 5F              LDA OPCODE+1
0702  22D3- DD BF E7           CMP MNEMR-1,X
0703  22D6- D0 EA              BNE SROPC+2
0704  22D8- A5 5E              LDA OPCODE
0705  22DA- DD 7F E7           CMP MNEML-1,X
0706  22DD- D0 E3              BNE SROPC+2
0707  22DF- CA                 DEX
0708  22E0- 86 61              STX INDEX1
0709  22E2- 8A                 TXA
0710  22E3- 0A                 ASL A
0711  22E4- 0A                 ASL A
0712  22E5- 0A                 ASL A
0713  22E6- 85 62              STA INDEX2
0714  22E8- B0 0B              BCS SROP30
0715  22EA- 20 47 23   SROP20  JSR TSTADM      ITS XXXXX000 INST
0716  22ED- F0 05              BEQ *+7
0717  22EF- A9 39      ERR9    LDA =$39
0718  22F1- 20 38 29           JSR ERROR
0719  22F4- 60                 RTS
0720  22F5- 06 62      SROP30  ASL INDEX2
0721  22F7- B0 22              BCS SROP50

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 02/11/23   R65 ASSEMBLER  PAGE 15

0722  22F9- 10 06              BPL SROP40
0723  22FB- A5 62              LDA INDEX2      ITS 1XXX1010 INST
0724  22FD- 09 8A              ORA =$8A        COMPUTE OPCODE
0725  22FF- D0 E9             BNE SROP20
0726                   *
0727  2301- 06 62      SROP40  ASL INDEX2      ITS XXXYY100 INST
0728  2303- A0 03              LDY =3
0729  2305- 98                 TYA
0730  2306- 38                 SEC
0731  2307- 2A                 ROL A
0732  2308- 0A                 ASL A
0733  2309- 0A                 ASL A
0734  230A- 05 62              ORA INDEX2
0735  230C- 20 47 23           JSR TSTADM
0736  230F- D0 01              BNE *+3
0737  2311- 60                 RTS             RETURN, IF FOUND
0738  2312- 88                 DEY             TRY AGAIN
0739  2313- 10 F0              BPL SROP40+4
0740  2315- A6 61              LDX INDEX1      IF NOT FOUND, SEARCH
0741  2317- E8                 INX             CODE AGAIN (DOUBLE
0742  2318- 4C C2 22           JMP SROPC+2     CODES IN TABLE!)
0743                   *
0744  231B- 06 62      SROP50  ASL INDEX2
0745  231D- B0 14              BCS SROP60      IF XXXYYY10 INST
0746  231F- A0 07              LDY =7
0747  2321- 98                 TYA
0748  2322- 38                 SEC
0749  2323- 2A                 ROL A
0750  2324- 0A                 ASL A
0751  2325- 05 62              ORA INDEX2
0752  2327- 20 47 23           JSR TSTADM      TEST ADDRESSING
0753  232A- D0 01              BNE *+3
0754  232C- 60                 RTS             RETURN, IF FOUND
0755  232D- 88                 DEY             TRY NEXT Y
0756  232E- 10 F1              BPL SROP50+6
0757  2330- 4C EF 22           JMP ERR9
0758                   *
0759  2333- A0 07      SROP60  LDY =7
0760  2335- 98                 TYA
0761  2336- 0A                 ASL A
0762  2337- 38                 SEC
0763  2338- 2A                 ROL A
0764  2339- 05 62              ORA INDEX2
0765  233B- 20 47 23           JSR TSTADM
0766  233E- D0 01              BNE *+3
0767  2340- 60                 RTS             RETURN, IF FOUND
0768  2341- 88                 DEY
0769  2342- 10 F1              BPL SROP60+2
0770  2344- 4C EF 22           JMP ERR9
0771                   *

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 02/11/23   R65 ASSEMBLER  PAGE 16

0772                   *
0773                   * SUBROUTINE TSTADM: TEST ADDRESSING MODE
0774                   *****************************************
0775                   * ADDRESSING MODE CAN BE CHANGED IF NEEDED
0776                   *
0777  2347- 85 3C      TSTADM  STA OBJECT      SAVE OPCODE
0778  2349- 4A                 LSR A           COMPUTE ADDRESSING MODE
0779  234A- 90 05              BCC *+7         FOR THIS CODE
0780  234C- 4A                 LSR A
0781  234D- 29 07              AND =7
0782  234F- 09 80              ORA =$80
0783  2351- 4A                 LSR A
0784  2352- AA                 TAX
0785  2353- BD 22 E7           LDA DISMOD,X    LOAD MODE FROM TABLE
0786  2356- B0 04              BCS *+6
0787  2358- 4A                 LSR A
0788  2359- 4A                 LSR A
0789  235A- 4A                 LSR A
0790  235B- 4A                 LSR A
0791  235C- 29 0F              AND =$0F        COMPUTE MODE IN A
0792  235E- AA                 TAX             AND SAVE IN X
0793  235F- C9 0D              CMP =$0D                IF RELATIVE
0794  2361- D0 0D              BNE TSTAD1
0795  2363- A5 60              LDA ADMODE      CONVERT IT
0796  2365- C9 02              CMP =2          CAN BE ZERO PAGE
0797  2367- F0 04              BEQ *+6
0798  2369- C9 03              CMP =3          CAN BE ABSOLUTE
0799  236B- D0 03              BNE *+5
0800  236D- 86 60              STX ADMODE
0801  236F- 60                 RTS
0802                   *
0803  2370- A5 60      TSTAD1  LDA ADMODE
0804  2372- C9 02              CMP =2          ZERO PAGE
0805  2374- D0 11              BNE TSTAD3
0806  2376- A5 3C              LDA OBJECT
0807  2378- C9 4C              CMP =$4C        IF JMP
0808  237A- F0 04              BEQ *+6
0809  237C- C9 20              CMP =$20        OR JSR
0810  237E- D0 04              BNE TSTAD2
0811  2380- A9 03              LDA =3          SET TO ABSOLUTE
0812  2382- 85 60              STA ADMODE
0813  2384- E4 60      TSTAD2  CPX ADMODE      TEST NOW
0814  2386- 60                 RTS
0815                   *
0816  2387- C9 0C      TSTAD3  CMP =$0C        ZERO PAGE,Y
0817  2389- D0 F9              BNE TSTAD2
0818  238B- A5 3C              LDA OBJECT
0819  238D- 29 0F              AND =$0F
0820  238F- C9 09              CMP =$09
0821  2391- F0 F1              BEQ TSTAD2

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 02/11/23   R65 ASSEMBLER  PAGE 17

0822  2393- A9 0A              LDA =$A         CONVERT TO ABS,Y
0823  2395- 4C 82 23           JMP TSTAD2-2    IF CODE =X9
0824                   *
0825                   *
0826                   * SUBROUTINE OPER: INTERPRET OPERAND
0827                   ************************************
0828                   * USED: A,X,Y,TEMP1; INPUT:X; OUTPUT:RESOLV
0829                   * VALUE,D(ADDRESSING MODE); CALLED: EXPRES,
0830                   * ERROR,ZPAGE
0831                   *
0832  2398- B5 00      OPER    LDA INBUFF,X
0833  239A- C9 3D              CMP =$3D        IF =
0834  239C- D0 07              BNE *+9
0835  239E- E8                 INX             IMMEDIATE (1)
0836  239F- 20 DB 20           JSR EXPRES
0837  23A2- A9 01              LDA =1
0838  23A4- 60                 RTS
0839                   *
0840  23A5- C9 20              CMP =$20        IF BLANK
0841  23A7- D0 04              BNE *+6
0842  23A9- E8                 INX
0843  23AA- A9 04              LDA =4          IMPLIED (4)
0844  23AC- 60                 RTS
0845                   *
0846  23AD- C9 41              CMP =$41        IF A
0847  23AF- D0 0D              BNE OPER15
0848  23B1- E8                 INX
0849  23B2- B5 00              LDA INBUFF,X    AND BLANK
0850  23B4- C9 20              CMP =$20
0851  23B6- D0 03              BNE *+5
0852  23B8- A9 05              LDA =5          ACCUMULATOR (5)
0853  23BA- 60                 RTS
0854                   *
0855                   *
0856  23BB- CA                 DEX
0857  23BC- B5 00              LDA INBUFF,X
0858                   *
0859  23BE- C9 28      OPER15  CMP =$28        IF (
0860  23C0- D0 57              BNE OPER20
0861  23C2- E8                 INX
0862  23C3- 20 DB 20           JSR EXPRES      GET EXPRESSION
0863  23C6- B5 00              LDA INBUFF,X
0864  23C8- C9 2C              CMP =$2C        IF NOW ,
0865  23CA- D0 1A              BNE OPER16
0866  23CC- E8                 INX
0867  23CD- B5 00              LDA INBUFF,X
0868  23CF- C9 58              CMP =$58        MUST BE X
0869  23D1- D0 22              BNE ERR10
0870  23D3- E8                 INX
0871  23D4- B5 00              LDA INBUFF,X

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 02/11/23   R65 ASSEMBLER  PAGE 18

0872  23D6- C9 29              CMP =$29        AND )
0873  23D8- D0 1B              BNE ERR10
0874  23DA- 20 53 24           JSR ZPAGE       MUST BE ZERO PAGE
0875  23DD- F0 03              BEQ *+5
0876  23DF- 20 FD 23           JSR ERR11
0877  23E2- E8                 INX
0878  23E3- A9 06              LDA =6          (X.PAGE,X) (6)
0879  23E5- 60                 RTS
0880                   *
0881  23E6- C9 29      OPER16  CMP =$29        MUST BE )
0882  23E8- D0 0B              BNE ERR10
0883  23EA- E8                 INX
0884  23EB- B5 00              LDA INBUFF,X
0885  23ED- C9 20              CMP =$20        IF NOW BLANK
0886  23EF- D0 11              BNE OPER17
0887  23F1- E8                 INX
0888  23F2- A9 0B              LDA =$0B        (ABSOLUTE) (11)
0889  23F4- 60                 RTS
0890                   *
0891  23F5- A9 40      ERR10   LDA =$40        SYNTAX ERROR IN OPER
0892  23F7- 20 38 29           JSR ERROR
0893  23FA- A9 03              LDA =3          ASSUME ABSOLUTE
0894  23FC- 60                 RTS
0895                   *
0896  23FD- A9 41      ERR11   LDA =$41        MUST BE ZERO PAGE IND
0897  23FF- 4C 38 29          JMP ERROR
0898                   *
0899  2402- C9 2C      OPER17  CMP =$2C        MUST BE ,
0900  2404- D0 EF              BNE ERR10
0901  2406- E8                 INX
0902  2407- B5 00              LDA INBUFF,X
0903  2409- C9 59              CMP =$59        MUST BE Y
0904  240B- D0 E8              BNE ERR10
0905  240D- E8                 INX
0906  240E- 20 53 24           JSR ZPAGE
0907  2411- F0 03              BEQ *+5         MSU BE ZERO PAGE
0908  2413- 20 FD 23           JSR ERR11
0909  2416- A9 07              LDA =7          (ZERO PAGE),Y (7)
0910  2418- 60                 RTS
0911                   *
0912  2419- 20 DB 20   OPER20  JSR EXPRES      MUST BE EXPRESSION
0913  241C- B5 00              LDA INBUFF,X
0914  241E- C9 20              CMP =$20        IF NOW BLANK
0915  2420- D0 0B              BNE OPER25
0916  2422- 20 53 24           JSR ZPAGE
0917  2425- D0 03              BNE *+5
0918  2427- A9 02              LDA =2          ZERO PAGE (2)
0919  2429- 60                 RTS
0920                   *
0921  242A- A9 03              LDA =3          ABSOLUTE

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 02/11/23   R65 ASSEMBLER  PAGE 19

0922  242C- 60                 RTS
0923                   *
0924  242D- C9 2C      OPER25  CMP =$2C        MUST BE ,
0925  242F- D0 C4              BNE ERR10
0926  2431- E8                 INX
0927  2432- B5 00              LDA INBUFF,X
0928  2434- E8                 INX
0929  2435- C9 58              CMP =$58        IF NOW X
0930  2437- D0 0B              BNE OPER30
0931  2439- 20 53 24           JSR ZPAGE
0932  243C- D0 03              BNE *+5
0933  243E- A9 08              LDA =8          ZERO PAGE,X (8)
0934  2440- 60                 RTS
0935                   *
0936  2441- A9 09              LDA =9          ZERO PAGE,Y (12)
0937  2443- 60                 RTS
0938                   *
0939  2444- C9 59      OPER30  CMP =$59        MUST BE Y
0940  2446- D0 AD              BNE ERR10
0941  2448- 20 53 24           JSR ZPAGE
0942  244B- D0 03              BNE *+5
0943  244D- A9 0C              LDA =$0C        ZERO PAGE,Y (12)
0944  244F- 60                 RTS
0945                   *
0946  2450- A9 0A              LDA =$0A        ABSOLUTE,Y (10
0947  2452- 60                 RTS
0948                   *
0949                   *
0950                   * SUBROUTINE ZPAGE
0951                   ******************
0952                   * TEST FOR ZERO PAGE ADDRESSING
0953                   * RETURN Z=1 IF ZERO PAGE
0954                   *
0955  2453- A5 39      ZPAGE   LDA RESOLV
0956  2455- D0 02              BNE *+4         ASSUME ABS IF UNDEFINED
0957  2457- A5 5D              LDA VALUE+1
0958  2459- 60                 RTS
0959                   *
0960                   *
0961                   * SUBROUTINE DEFLAB: DEFINE LABEL
0962                   *********************************
0963                   * USED: A,Y; SAVED:X; INPUT: LABEL, VALUE,
0964                   * LABPNT; CALLED SRLAB,STLAB,ERROR,DEFIN
0965                   *
0966  245A- 20 1C 20   DEFLAB  JSR SRLAB       IF LABEL IN TAB;E
0967  245D- B0 06              BCS *+8           DO NOT STORE
0968  245F- 20 4F 20           JSR STLABN      ELSE STORE
0969  2462- 4C 91 24           JMP DEFL1
0970                   *
0971  2465- A5 A9              LDA PASSFL

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 02/11/23   R65 ASSEMBLER  PAGE 20

0972  2467- D0 03              BNE *+5
0973  2469- 20 62 2D           JSR RESFBR      RESOLVE BRANCHES
0974  246C- 20 79 22           JSR DEFIN
0975  246F- F0 20              BEQ DEFL1       IF DEFINED
0976  2471- A5 A9              LDA PASSFL        TEST PASS FLAG
0977  2473- D0 05              BNE *+7
0978  2475- A9 45              LDA =$45
0979  2477- 4C 38 29           JMP ERROR
0980                   *
0981  247A- A0 05              LDY =5
0982  247C- B1 97              LDA (LABPNT),Y  COMPARE IN PASS 2
0983  247E- C5 5C              CMP VALUE
0984  2480- D0 07              BNE *+9
0985  2482- C8                 INY
0986  2483- B1 97              LDA (LABPNT),Y
0987  2485- C5 5D              CMP VALUE+1
0988  2487- F0 05              BEQ *+7
0989  2489- A9 46              LDA =$46
0990  248B- 20 38 29           JSR ERROR
0991  248E- 4C 9C 24           JMP DEFL2
0992                   *
0993  2491- A5 5C      DEFL1   LDA VALUE       STORE ADDRESS
0994  2493- A0 05              LDY =5
0995  2495- 91 97              STA (LABPNT),Y
0996  2497- A5 5D              LDA VALUE+1
0997  2499- C8                 INY
0998  249A- 91 97              STA (LABPNT),Y
0999                   *
1000  249C- A5 A9      DEFL2   LDA PASSFL
1001  249E- F0 08              BEQ *+10
1002  24A0- A0 07              LDY =7
1003  24A2- B1 97              LDA (LABPNT),Y
1004  24A4- 09 80              ORA =$80        SET RFLAG
1005  24A6- 91 97              STA (LABPNT),Y
1006  24A8- 60                 RTS
1007                   *
1008                   *
1009                   * SUBROUTINE INTLIN:INTERPRET ONE LINE
1010                   **************************************
1011                   *OUTPUT: OBJECT,NUMBYT
1012                   *
1013  24A9- A2 00      INTLIN  LDX =0          CLEAR BUFFER POINTER
1014  24AB- 86 38              STX NUMBYT      CLEAR NUMBER OF BYTES
1015  24AD- 86 63              STX DEFLB       CLEAR LABEL DEF FLAG
1016  24AF- B5 00              LDA INBUFF,X    GET FIRST CHAR
1017  24B1- C9 2A              CMP =$2A        IF *
1018  24B3- D0 01              BNE *+3
1019  24B5- 60                 RTS             RETURN (COMMENT LINE)
1020                   *
1021  24B6- C9 20              CMP =$20        NOT A BLANK

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 02/11/23   R65 ASSEMBLER  PAGE 21

1022  24B8- F0 0F              BEQ INTL2
1023  24BA- 20 8C 20           JSR RDLAB       READ LABEL, NO STORING
1024  24BD- A9 FF              LDA =$FF        AT THIS MOMENT, BUT SET
1025  24BF- 85 63              STA DEFLB       LABEL DEFINITION FLAG
1026  24C1- A5 9E              LDA PCOLD       GET ADDRESS FOR LABEL
1027  24C3- 85 5C              STA VALUE
1028  24C5- A5 9F              LDA PCOLD+1
1029  24C7- 85 5D              STA VALUE+1
1030                   *
1031  24C9- 20 D2 20   INTL2   JSR RDBL        READ BLANKS
1032  24CC- 20 83 22           JSR RDOPC       READ NOW OPCODE
1033                   *
1034  24CF- A0 09              LDY =9          SEARCH IN PSEUDO TABLE
1035  24D1- A5 5E              LDA OPCODE
1036  24D3- D9 50 26           CMP PSEUDO,Y
1037  24D6- F0 05              BEQ *+7
1038  24D8- 88                 DEY
1039  24D9- 10 F8              BPL *-6
1040  24DB- 30 07              BMI *+9         BRANCH IF NOT FOUND
1041  24DD- A5 5F              LDA OPCODE+1
1042  24DF- D9 5A 26           CMP PSEUDO+10,Y
1043  24E2- D0 F4              BNE *-10
1044                   *
1045  24E4- 98                 TYA
1046  24E5- 48                 PHA
1047  24E6- D0 20              BNE INTL10      FOUND. IF EQU (0)
1048  24E8- A5 63              LDA DEFLB         TEST DEF FLAG
1049  24EA- D0 05              BNE *+7
1050  24EC- A9 47              LDA =$47        LABEL MISSING IN EQU
1051  24EE- 4C 38 29           JMP ERROR
1052                   *
1053  24F1- A0 04              LDY =4          SAVE LABEL
1054  24F3- B9 30 00   INTL5   LDA LABEL,Y
1055  24F6- 48                 PHA
1056  24F7- 88                 DEY
1057  24F8- 10 F9              BPL INTL5
1058                   *
1059  24FA- 20 64 26           JSR EXPDEF      GET VALUE FOR EQU
1060                   *
1061  24FD- A0 00              LDY =0
1062  24FF- 68        INTL6   PLA             GET BACK LABEL
1063  2500- 99 30 00           STA LABEL,Y
1064  2503- C8                 INY
1065  2504- C0 05              CPY =5
1066  2506- D0 F7              BNE INTL6
1067                   *
1068  2508- A5 63      INTL10  LDA DEFLB       IF LABEL DEFNITION
1069  250A- F0 03              BEQ *+5
1070  250C- 20 5A 24           JSR DEFLAB      DEFINE IT NOW
1071                   *

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 02/11/23   R65 ASSEMBLER  PAGE 22

1072  250F- 68                 PLA             GET AGAIN PSEUDO NUMBER
1073  2510- D0 01              BNE *+3
1074  2512- 60                 RTS             RETURN NOW FROM EQU
1075                   *
1076  2513- C9 01              CMP =1          IF ORG (1)
1077  2515- D0 0E              BNE INTL12
1078  2517- 20 64 26           JSR EXPDEF        GET NEW PC
1079  251A- A5 5C              LDA VALUE
1080  251C- 85 A0              STA PCNEW
1081  251E- A5 5D              LDA VALUE+1
1082  2520- 85 A1              STA PCNEW+1
1083  2522- 4C 62 28           JMP CLOSRC      CLOSE EXISTING OBJ. REC
1084                   *
1085  2525- C9 02      INTL12  CMP =2          IF BSS (2)
1086  2527- D0 13              BNE INTL13
1087  2529- 20 64 26           JSR EXPDEF        GET VALUE
1088  252C- 18                 CLC             ADD TO PCOLD
1089  252D- A5 9E              LDA PCOLD
1090  252F- 65 5C              ADC VALUE
1091  2531- 85 A0              STA PCNEW
1092  2533- A5 9F              LDA PCOLD+1
1093  2535- 65 5D              ADC VALUE+1
1094  2537- 85 A1              STA PCNEW+1
1095  2539- 4C 62 28           JMP CLOSRC      CLOSE EXISTING OBJ. REC
1096                   *
1097  253C- C9 03      INTL13  CMP =3          IF BYT (3)
1098  253E- D0 49              BNE INTL14
1099  2540- B5 00      BYT     LDA INBUFF,X    GET ONE BYTE
1100  2542- C9 27              CMP =$27        IF '
1101  2544- D0 29              BNE BYT3
1102  2546- E8                 INX             GET ASCII STRING
1103  2547- B5 00              LDA INBUFF,X
1104  2549- A4 38      BYT1    LDY NUMBYT
1105  254B- C0 20              CPY =$20
1106  254D- B0 35              BCS ERR18
1107  254F- 99 3C 00           STA OBJECT,Y    STORE
1108  2552- E6 38              INC NUMBYT
1109  2554- E8                 INX
1110  2555- E0 2E              CPX =$2E        TEST END OF INBUFF
1111  2557- B0 2B              BCS ERR18
1112  2559- B5 00              LDA INBUFF,X    TEST NEXT CHAR
1113  255B- C9 27              CMP =$27
1114  255D- D0 EA              BNE BYT1        CONTINUE STRING READ
1115  255F- E8                 INX
1116  2560- C6 38              DEC NUMBYT
1117  2562- B9 3C 00           LDA OBJECT,Y
1118  2565- 85 5C              STA VALUE
1119  2567- A9 00              LDA =0
1120  2569- 20 E2 20           JSR EXP1
1121  256C- 4C 72 25           JMP BYT2

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 02/11/23   R65 ASSEMBLER  PAGE 23

1122                   *
1123  256F- 20 DB 20   BYT3    JSR EXPRES
1124  2572- A5 5C      BYT2    LDA VALUE
1125  2574- A4 38              LDY NUMBYT
1126  2576- 99 3C 00           STA OBJECT,Y
1127  2579- E6 38              INC NUMBYT
1128  257B- B5 00              LDA INBUFF,X
1129  257D- E8                 INX
1130  257E- C9 2C              CMP =$2C
1131  2580- F0 BE              BEQ BYT
1132  2582- CA                 DEX
1133  2583- 60                 RTS
1134                   *
1135  2584- A9 48      ERR18   LDA =$48
1136  2586- 4C 38 29           JMP ERROR       RETURN AFTER ERROR
1137                   *
1138  2589- C9 04      INTL14  CMP =$04                IF WRD (4)
1139  258B- D0 1C              BNE INTL15
1140  258D- 20 DB 20   WRD     JSR EXPRES      GET WORD
1141  2590- A4 38              LDY NUMBYT
1142  2592- A5 5C              LDA VALUE
1143  2594- 99 3C 00           STA OBJECT,Y
1144  2597- C8                 INY
1145  2598- A5 5D              LDA VALUE+1
1146  259A- 99 3C 00           STA OBJECT,Y
1147  259D- C8                 INY
1148  259E- 84 38              STY NUMBYT
1149  25A0- B5 00              LDA INBUFF,X
1150  25A2- E8                 INX
1151  25A3- C9 2C              CMP =$2C        IF ,
1152  25A5- F0 E6              BEQ WRD         CONTINUE
1153  25A7- CA                 DEX
1154  25A8- 60                 RTS
1155                   *
1156  25A9- C9 05      INTL15  CMP =5          IF PAG (5)
1157  25AB- D0 07              BNE INTL16
1158  25AD- A5 AB      PAGE    LDA PAGELN      . SET BIT 7 (PAGE FLAG)
1159  25AF- 09 80              ORA =$80
1160  25B1- 85 AB              STA PAGELN
1161  25B3- 60                 RTS
1162                   *
1163  25B4- C9 06      INTL16  CMP =6          IF TIT (6)
1164  25B6- D0 0C              BNE INTL17
1165  25B8- A0 1F              LDY =$1F          LOAD 32 CHARS
1166  25BA- B5 00              LDA INBUFF,X
1167  25BC- 99 B2 00           STA TITLE,Y
1168  25BF- E8                 INX
1169  25C0- 88                 DEY
1170  25C1- 10 F7              BPL *-7
1171  25C3- 60                 RTS

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 02/11/23   R65 ASSEMBLER  PAGE 24

1172                   *
1173  25C4- C9 07      INTL17  CMP =7          IF END (7)
1174  25C6- D0 03              BNE *+5
1175  25C8- 4C F5 2B           JMP END         GO TO END
1176                   *
1177  25CB- C9 08      INTL18  CMP =$08        IF NPR (8)
1178  25CD- D0 05              BNE INTL19
1179  25CF- A9 00              LDA =0
1180  25D1- 85 AA              STA PRTFLG      INHIBIT PRINTING
1181  25D3- 60                 RTS
1182                   *
1183  25D4- C9 09      INTL19  CMP =$09        IF PRT (9)
1184  25D6- D0 09              BNE INTL20
1185  25D8- A5 A9              LDA PASSFL      DO NOTHIN IN FIRST PASS
1186  25DA- F0 04              BEQ *+6
1187  25DC- A9 80              LDA =$80        SET PRINTING FLAG
1188  25DE- 85 AA              STA PRTFLG
1189  25E0- 60                 RTS
1190                   *
1191  25E1- 20 98 23   INTL20  JSR OPER        MUST BE OPCODE
1192  25E4- 85 60              STA ADMODE      SAVE ADDRESSING MODE
1193  25E6- B5 00              LDA INBUFF,X
1194  25E8- C9 20              CMP =$20
1195  25EA- F0 05              BEQ *+7
1196  25EC- A9 51              LDA =$51
1197  25EE- 20 38 29           JSR ERROR
1198  25F1- A5 5C              LDA VALUE
1199  25F3- 85 3D              STA OBJECT+1
1200  25F5- A5 5D              LDA VALUE+1
1201  25F7- 85 3E              STA OBJECT+2
1202  25F9- 20 C0 22           JSR SROPC       SEARCH OPCODE
1203  25FC- A4 60              LDY ADMODE
1204  25FE- B9 66 E7          LDA MODE2,Y     COMPUTE NUMBYT
1205  2601- 29 03              AND =$03
1206  2603- AA                 TAX
1207  2604- E8                 INX
1208  2605- 86 38              STX NUMBYT
1209  2607- C0 0D              CPY =$0D        IF RELATIVE ADDRESSING
1210  2609- F0 01              BEQ *+3         GO TO COMPUTE OFFSET
1211  260B- 60                 RTS
1212                   *
1213  260C- A5 A9              LDA PASSFL
1214  260E- D0 2C              BNE BRAN2
1215  2610- A5 39              LDA RESOLV      IF OPERAND RESOLVED
1216  2612- F0 28              BEQ BRAN2
1217  2614- C9 02              CMP =2
1218  2616- 90 05              BCC *+7
1219  2618- A9 42              LDA =$42
1220  261A- 20 38 29           JSR ERROR       MORE THAN 1 UNRES LABEL
1221  261D- 20 3C 2D           JSR FORBR       INSERT FORWARD BRANCH

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 02/11/23   R65 ASSEMBLER  PAGE 25

1222  2620- A9 00              LDA =0
1223  2622- 85 3D              STA OBJECT+1
1224  2624- 60                 RTS
1225                   *
1226                   * SUBROUTINE TO COMPUTE RELATIVE ADDRESS
1227                   ****************************************
1228                   *
1229  2625- A5 3D      BRAN1   LDA OBJECT+1
1230  2627- 38                 SEC
1231  2628- E9 02              SBC =2
1232  262A- 48                 PHA
1233  262B- A5 3E              LDA OBJECT+2
1234  262D- E9 00              SBC =0
1235  262F- A8                 TAY
1236  2630- 68                 PLA
1237  2631- 38                 SEC
1238  2632- E5 9E              SBC PCOLD
1239  2634- 85 3D              STA OBJECT+1
1240  2636- 08                 PHP
1241  2637- 98                 TYA
1242  2638- E5 9F              SBC PCOLD+1
1243  263A- 28                 PLP
1244  263B- 60                 RTS
1245                   *
1246                   *
1247  263C- 20 25 26   BRAN2   JSR BRAN1
1248  263F- 30 0A              BMI BRAN3
1249  2641- C9 00              CMP =0
1250  2643- F0 05              BEQ *+7
1251  2645- A9 43              LDA =$43
1252  2647- 20 38 29           JSR ERROR
1253  264A- 60                 RTS
1254  264B- C9 FF      BRAN3   CMP =$FF
1255  264D- D0 F6              BNE *-8
1256  264F- 60                 RTS
1257                   *
1258                   *
1259                   * PSEUDO OPCODE TABLE
1260                   *
1261  2650- 34 84 1D   PSEUDO  BYT $34,$84,$1D,$1E,$C4,$88,$AA,$33
1261  2653- 1E C4 88 
1261  2656- AA 33 
1262  2658- 7C 8C              BYT $7C,$8C
1263  265A- AC D0 28           BYT $AC,$D0,$28,$AA,$CA,$90,$AA,$CA
1263  265D- AA CA 90 
1263  2660- AA CA 
1264  2662- 66 EA              BYT $66,$EA
1265                   *
1266                   *
1267                   * EXPDEF: GET A RESOLVED EXPRESSION

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 02/11/23   R65 ASSEMBLER  PAGE 26

1268                   ***********************************
1269                   *
1270  2664- 20 DB 20   EXPDEF  JSR EXPRES
1271  2667- A5 39              LDA RESOLV
1272  2669- F0 05              BEQ *+7
1273  266B- A9 49              LDA =$49
1274  266D- 20 38 29           JSR ERROR
1275  2670- 60                 RTS
1276                   *
1277                   *
1278                   * JSR PRINTLIN: PRINT A LINE
1279                   ****************************
1280                   * INPUT: OBJECT,NUMBYT,PCOLD,PCNEW,PAGELN
1281                   * PAGECN,LINCNT
1282                   *
1283  2671- A9 00      PRTLIN  LDA =0
1284  2673- 85 37              STA TEMP1       POINTER IN OBJ
1285  2675- F8                 SED
1286  2676- 18                 CLC             INCREMENT LINE COUNTER
1287  2677- A9 01              LDA =1
1288  2679- 65 A2              ADC LINCNT      DECIMAL INCREMENT
1289  267B- 85 A2              STA LINCNT
1290  267D- A5 A3              LDA LINCNT+1
1291  267F- 69 00              ADC =0
1292  2681- 85 A3              STA LINCNT+1
1293  2683- D8                 CLD
1294  2684- 24 AA      PRTL10  BIT PRTFLG
1295  2686- 10 28              BPL PRTL21-2
1296  2688- A5 A3              LDA LINCNT+1
1297  268A- A6 A2              LDX LINCNT
1298  268C- 20 30 E0           JSR PRTAX       PRINT LINE NUMBER
1299  268F- 20 27 E0           JSR PRTINF
1300  2692- 20 A0              BYT $20,$A0     PRINT 2 BLANKS
1301  2694- A5 A0              LDA PCNEW
1302  2696- C5 9E              CMP PCOLD
1303  2698- D0 06              BNE *+8
1304  269A- A5 A1              LDA PCNEW+1
1305  269C- C5 9F              CMP PCOLD+1
1306  269E- F0 0B              BEQ PRTL20
1307  26A0- A5 9F              LDA PCOLD+1
1308  26A2- A6 9E              LDX PCOLD
1309  26A4- 20 30 E0           JSR PRTAX       PRINT PROGRAM COUNTER
1310  26A7- 20 27 E0           JSR PRTINF
1311  26AA- AD                 BYT $AD         PRINT -
1312  26AB- A2 0B      PRTL20  LDX =$0B
1313  26AD- 20 05 27           JSR TAB
1314  26B0- A2 03              LDX =3          PRINT MAX 3 OBJ BYTES
1315  26B2- A4 37      PRTL21  LDY TEMP1
1316  26B4- B9 3C 00           LDA OBJECT,Y
1317  26B7- C4 38              CPY NUMBYT

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 02/11/23   R65 ASSEMBLER  PAGE 27

1318  26B9- F0 1A              BEQ PRTL25
1319  26BB- E6 37              INC TEMP1
1320  26BD- 24 AA              BIT PRTFLG
1321  26BF- 10 03              BPL *+5
1322  26C1- 20 2D E0           JSR PRTBYT
1323  26C4- E6 9E              INC PCOLD
1324  26C6- D0 02              BNE *+4
1325  26C8- E6 9F              INC PCOLD+1
1326  26CA- 24 AA              BIT PRTFLG
1327  26CC- 10 04              BPL *+6
1328  26CE- 20 27 E0           JSR PRTINF      PRINT BLANK
1329  26D1- A0                 BYT $A0
1330  26D2- CA                 DEX
1331  26D3- D0 DD              BNE PRTL21
1332  26D5- A4 37      PRTL25  LDY TEMP1
1333  26D7- C0 04              CPY =4
1334  26D9- B0 19              BCS PRTL30
1335  26DB- 24 AA              BIT PRTFLG
1336  26DD- 10 05              BPL *+7
1337  26DF- A2 16              LDX =$16
1338  26E1- 20 05 27           JSR TAB         TABULATE TO POS $16
1339  26E4- A2 00              LDX =0
1340  26E6- 24 AA      PRTL26  BIT PRTFLG
1341  26E8- 10 05              BPL *+7
1342  26EA- B5 00              LDA INBUFF,X
1343  26EC- 20 09 E0           JSR PRTCHR      PRINT TEXT
1344  26EF- E8                 INX
1345  26F0- E4 64              CPX INBFPN
1346  26F2- 90 F2              BCC PRTL26
1347  26F4- A5 38      PRTL30  LDA NUMBYT
1348  26F6- C5 37              CMP TEMP1
1349  26F8- F0 0A              BEQ *+12        RETURN
1350  26FA- 24 AA              BIT PRTFLG
1351  26FC- 10 03              BPL *+5
1352  26FE- 20 0F 27          JSR NEWLIN
1353  2701- 4C 84 26           JMP PRTL10
1354  2704- 60                 RTS
1355                   *
1356                   *
1357                   * SUBROUTINE TAB: TABULATOR (TO X)
1358                   **********************************
1359                   *
1360  2705- A9 20      TAB     LDA =$20
1361  2707- 20 09 E0           JSR PRTCHR
1362  270A- E4 EE              CPX CURPOS
1363  270C- B0 F9              BCS TAB+2
1364  270E- 60                 RTS
1365                   *
1366                   *
1367                   * SUBROUTINE NEWLIN: START NEW LINE

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 02/11/23   R65 ASSEMBLER  PAGE 28

1368                   ***********************************
1369                   *
1370  270F- 20 6E 27   NEWLIN  JSR CRLF
1371  2712- E6 AB              INC PAGELN
1372  2714- A5 AB              LDA PAGELN
1373  2716- 30 06              BMI NEWL06
1374  2718- CD 10 20           CMP TABLE       PRINTED LINES
1375  271B- B0 01              BCS NEWL06
1376  271D- 60                 RTS             RETURN IF NOT NEW PAGE
1377  271E- E6 AB      NEWL06  INC PAGELN
1378  2720- AD 80 17           LDA VFLAG       TEST AUTOPRINT FLAG
1379  2723- 29 08              AND =8
1380  2725- F0 06              BEQ *+8
1381  2727- AD 12 20           LDA TABLE+2     $D FOR IBM, $A FOR TTY
1382  272A- 20 0C E0           JSR VAUTOP      EXECUTE LFON HARD COPY
1383                   *
1384  272D- 20 6E 27   NEWL10  JSR CRLF
1385  2730- A9 00              LDA =0
1386  2732- 85 AB              STA PAGELN
1387  2734- F8                 SED
1388  2735- 38                 SEC
1389  2736- 65 A4              ADC PAGECN      INCREMENT PAGE NUMBER
1390  2738- 85 A4              STA PAGECN
1391  273A- D8                 CLD
1392  273B- A2 1F              LDX =$1F
1393  273D- B5 B2              LDA TITLE,X     PRINT TITLE
1394  273F- 20 09 E0           JSR PRTCHR
1395  2742- CA                 DEX
1396  2743- 10 F8              BPL *-6
1397  2745- A2 22              LDX =34
1398  2747- 20 05 27           JSR TAB
1399  274A- 20 0F F8           JSR PRTDAT
1400  274D- 20 27 E0           JSR PRTINF
1401  2750- 20 20 52           BYT '  R65 ASSEMBLER  PAGE',$A0
1401  2753- 36 35 20 
1401  2756- 41 53 53 
1401  2759- 45 4D 42 
1401  275C- 4C 45 52 
1401  275F- 20 20 50 
1401  2762- 41 47 45 
1401  2765- A0 
1402  2766- A5 A4              LDA PAGECN
1403  2768- 20 2D E0           JSR PRTBYT
1404  276B- 20 6E 27           JSR CRLF
1405  276E- 20 27 E0   CRLF    JSR PRTINF
1406  2771- 0D 8A              BYT $0D,$8A
1407                   *
1408  2773- 60         CRLF1   RTS
1409                   *
1410                   *

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 02/11/23   R65 ASSEMBLER  PAGE 29

1411                   *
1412                   * SUBROUTINE GET: GET A LINE FROM FILE
1413                   **************************************
1414                   *
1415  2774- A2 2F      GET     LDX =$2F        CLEAR INBUFF
1416  2776- A9 20              LDA =$20
1417  2778- 95 00              STA INBUFF,X
1418  277A- CA                 DEX
1419  277B- 10 FB              BPL GET+4
1420                   *
1421  277D- A2 00              LDX =0          POINTER IN INBUFF
1422  277F- 86 64      GET10   STX INBFPN
1423  2781- A6 9B              LDX INPFIL
1424  2783- A9 00              LDA =0
1425  2785- 85 DA              STA FILFLG
1426  2787- 20 18 F0           JSR READCH      GET ONE CHARACTER
1427  278A- F0 03              BEQ *+5
1428  278C- 4C 0B 28           JMP GETERR
1429  278F- C9 1F              CMP =$1F        EOF
1430  2791- F0 0D              BEQ GET20
1431  2793- C9 0D              CMP =$0D
1432  2795- D0 01              BNE *+3
1433  2797- 60                 RTS
1434  2798- A6 64              LDX INBFPN
1435  279A- 20 12 28           JSR STINB
1436  279D- 4C 7F 27           JMP GET10
1437                   *
1438  27A0- A6 9B      GET20   LDX INPFIL
1439  27A2- 20 12 F0           JSR CLOSE
1440  27A5- E6 A7              INC FILCNT
1441  27A7- A5 A9      GET25   LDA PASSFL
1442  27A9- F0 06              BEQ GET27
1443  27AB- 20 AA 29           JSR BACKNM      GET SAVED FILE NAME
1444  27AE- 4C F5 27           JMP GET28
1445                   *
1446  27B1- 20 27 E0   GET27   JSR PRTINF
1447  27B4- 0D 0A 4E           BYT $D,$A,'NEXT FILE? '+128
1447  27B7- 45 58 54 
1447  27BA- 20 46 49 
1447  27BD- 4C 45 3F 
1447  27C0- A0 
1448                   *
1449  27C1- A5 EE              LDA CURPOS
1450  27C3- 48                 PHA             SAVE CURPOS ON STACK
1451  27C4- A2 00              LDX =0
1452  27C6- BD 20 03   GET27A  LDA FILNM1,X
1453  27C9- C9 30              CMP ='0'        IF DIGIT
1454  27CB- 30 07              BMI GET27B
1455  27CD- C9 39              CMP ='9'
1456  27CF- 10 03              BPL GET27B

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 02/11/23   R65 ASSEMBLER  PAGE 30

1457  27D1- 18                 CLC
1458  27D2- 69 01              ADC =1          ADD 1
1459  27D4- C9 20      GET27B  CMP =$20
1460  27D6- F0 08              BEQ GET27C
1461  27D8- 20 09 E0           JSR PRTCHR
1462  27DB- E8                 INX
1463  27DC- E0 0F              CPX =15
1464  27DE- D0 E6              BNE GET27A
1465  27E0- 20 27 E0   GET27C  JSR PRTINF
1466  27E3- 2E 30 30           BYT '.00,'+128
1466  27E6- AC 
1467  27E7- 18                 CLC
1468  27E8- A5 DC              LDA FILDRV
1469  27EA- 69 30              ADC ='0'
1470  27EC- 20 09 E0           JSR PRTCHR
1471  27EF- 68                 PLA             RESTORE CURPOS
1472  27F0- 85 EE              STA CURPOS
1473                   *
1474  27F2- 20 7D 29           JSR INNAME
1475  27F5- A5 AA      GET28   LDA PRTFLG
1476  27F7- 10 04              BPL *+6
1477  27F9- 20 27 E0           JSR PRTINF
1478  27FC- 94                 BYT $94
1479  27FD- A9 00              LDA =0
1480  27FF- 85 DA             STA FILFLG
1481  2801- 20 0F F0           JSR OPEN
1482  2804- D0 06              BNE GETERR+1
1483                   *
1484  2806- 84 9B      GET30   STY INPFIL
1485  2808- 4C 74 27           JMP GET
1486                   *
1487  280B- 98         GETERR  TYA             INPUT ERROR
1488  280C- 20 38 29           JSR ERROR       THIS ERROR IS FATAL
1489  280F- 4C 17 2A           JMP WARMST
1490                   *
1491  2812- E0 30      STINB   CPX =$30                IF NOT OVERFLOW
1492  2814- F0 04              BEQ *+6
1493  2816- 95 00              STA INBUFF,X
1494  2818- E8                 INX
1495  2819- 60                 RTS
1496  281A- A9 50              LDA =$50
1497  281C- 4C 38 29           JMP ERROR       RETURN AFTER ERROR
1498                   *
1499                   *
1500                   * SUBROUTINE PUT: PUT OBJECT CODE INTO
1501                   **************************************
1502                   * OUTPUT BUFFER, RETURN IF FIRST PASS.
1503                   * IS ONLY CALLED, IF NUMBYT>0
1504                   *
1505  281F- A5 A9      PUT     LDA PASSFL

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 02/11/23   R65 ASSEMBLER  PAGE 31

1506  2821- D0 01              BNE *+3
1507  2823- 60                 RTS
1508                   *
1509  2824- 20 2B 29           JSR OBEMPT      IF BUFFER EMPTY
1510  2827- D0 08              BNE PUT10
1511  2829- A5 9E              LDA PCOLD       STORE PCOLD
1512  282B- 85 AE              STA OBADDR      AT BASE ADDRESS
1513  282D- A5 9F              LDA PCOLD+1
1514  282F- 85 AF              STA OBADDR+1
1515                   *
1516  2831- AD 08 20   PUT10   LDA OBEND       IF BUFFER FULL
1517  2834- 38                 SEC
1518  2835- E5 AC              SBC OBPNT
1519  2837- 85 37              STA TEMP1
1520  2839- AD 09 20           LDA OBEND+1
1521  283C- E5 AD              SBC OBPNT+1
1522  283E- 48                 PHA
1523  283F- A5 37              LDA TEMP1
1524  2841- C5 38              CMP NUMBYT
1525  2843- 68                 PLA
1526  2844- E9 00              SBC =0
1527  2846- B0 06              BCS *+8
1528  2848- 20 62 28           JSR CLOSRC      CLOSE RECORD
1529  284B- 4C 1F 28           JMP PUT         AND OPEN NEW ONE
1530                   *
1531  284E- A0 00              LDY =0          STORE OBJECT CODE
1532  2850- A2 00              LDX =0
1533  2852- B5 3C      PUT20   LDA OBJECT,X
1534  2854- 91 AC              STA (OBPNT),Y
1535  2856- E6 AC              INC OBPNT
1536  2858- D0 02              BNE *+4
1537  285A- E6 AD              INC OBPNT+1
1538  285C- E8                 INX
1539  285D- E4 38              CPX NUMBYT
1540  285F- D0 F1              BNE PUT20
1541  2861- 60                 RTS
1542                   *
1543                   *
1544  2862- A5 A9      CLOSRC  LDA PASSFL
1545  2864- D0 01              BNE *+3
1546  2866- 60                 RTS
1547  2867- 20 2B 29           JSR OBEMPT      IF BUFFER EMPTY
1548  286A- D0 01              BNE *+3
1549  286C- 60                 RTS             DO NOTHING
1550                   *
1551  286D- 8A                 TXA
1552  286E- 48                 PHA
1553  286F- 20 27 E0           JSR PRTINF
1554  2872- 14 0D 0A           BYT $14,$0D,$0A,$0E
1554  2875- 0E 

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 02/11/23   R65 ASSEMBLER  PAGE 32

1555  2876- 53 54 4F           BYT 'STORE OBJECT FILE:',$0B
1555  2879- 52 45 20 
1555  287C- 4F 42 4A 
1555  287F- 45 43 54 
1555  2882- 20 46 49 
1555  2885- 4C 45 3A 
1555  2888- 0B 
1556  2889- 0D 0A 46           BYT $0D,$0A,'FILENAME.CY,DRIVE,LOC?'
1556  288C- 49 4C 45 
1556  288F- 4E 41 4D 
1556  2892- 45 2E 43 
1556  2895- 59 2C 44 
1556  2898- 52 49 56 
1556  289B- 45 2C 4C 
1556  289E- 4F 43 3F 
1557  28A1- A0                 BYT $A0
1558  28A2- 20 06 E0           JSR GETLIN
1559                   *
1560  28A5- 20 24 E0           JSR ENDLIN      SKIP STORE IF INPUT EMP
1561  28A8- F0 6E              BEQ CLOSRC0     (USER DOES NOT WANT TO
1562                   *
1563  28AA- 20 15 F8           JSR GETNAM
1564  28AD- 20 19 20           JSR HARGUM
1565  28B0- 85 DC              STA FILDRV
1566  28B2- 20 19 20           JSR HARGUM
1567  28B5- 8D 13 03           STA FILLOC
1568  28B8- 8E 14 03           STX FILLOC+1
1569  28BB- A2 10              LDX =16
1570  28BD- BD 20 03           LDA FILNM1,X
1571  28C0- 9D 01 03           STA FILNAM,X
1572  28C3- CA                 DEX
1573  28C4- 10 F7              BPL *-7
1574                   *
1575  28C6- 20 27 E0           JSR PRTINF
1576  28C9- 0D 8A              BYT $D,$8A
1577                   *
1578  28CB- A5 AC              LDA OBPNT       SET FILE SIZE
1579  28CD- 38                 SEC
1580  28CE- ED 06 20           SBC OBSTR
1581  28D1- 8D 15 03           STA FILSIZ
1582  28D4- A5 AD              LDA OBPNT+1
1583  28D6- ED 07 20           SBC OBSTR+1
1584  28D9- 8D 16 03           STA FILSIZ+1
1585  28DC- AD 06 20           LDA OBSTR       SET START IN RAM
1586  28DF- 8D 31 03           STA FILSA1
1587  28E2- AD 07 20           LDA OBSTR+1
1588  28E5- 8D 32 03           STA FILSA1+1
1589  28E8- A9 00              LDA =0
1590  28EA- 85 DA              STA FILFLG
1591  28EC- A9 4D              LDA ='M         OBJECT FILE FROM

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 02/11/23   R65 ASSEMBLER  PAGE 33

1592  28EE- 8D 12 03           STA FILSTP      ASSEMBLER
1593  28F1- A5 AE              LDA OBADDR
1594  28F3- 8D 1A 03           STA FILSA
1595  28F6- 18                 CLC
1596  28F7- 6D 15 03           ADC FILSIZ
1597  28FA- 8D 1C 03           STA FILEA
1598  28FD- A5 AF              LDA OBADDR+1
1599  28FF- 8D 1B 03          STA FILSA+1
1600  2902- 6D 16 03           ADC FILSIZ+1
1601  2905- 8D 1D 03           STA FILEA+1
1602  2908- AD 1C 03           LDA FILEA
1603  290B- D0 03              BNE *+5
1604  290D- CE 1D 03           DEC FILEA+1
1605  2910- CE 1C 03           DEC FILEA
1606  2913- 20 16 20           JSR WRFILA
1607  2916- D0 0D              BNE PUTERR
1608  2918- AD 06 20   CLOSRC0 LDA OBSTR       RESET BUFFER
1609  291B- 85 AC              STA OBPNT
1610  291D- AD 07 20           LDA OBSTR+1
1611  2920- 85 AD              STA OBPNT+1
1612  2922- 68                 PLA
1613  2923- AA                 TAX
1614  2924- 60                 RTS
1615                   *
1616  2925- 68         PUTERR  PLA             WRITE ERROR
1617  2926- AA                 TAX
1618  2927- 98                 TYA
1619  2928- 4C 38 29           JMP ERROR
1620                   *
1621                   *
1622  292B- A5 AC      OBEMPT  LDA OBPNT
1623  292D- CD 06 20           CMP OBSTR
1624  2930- D0 05              BNE *+7
1625  2932- A5 AD              LDA OBPNT+1
1626  2934- CD 07 20           CMP OBSTR+1
1627  2937- 60                 RTS
1628                   *
1629                   *
1630                   * SUBROUTINE ERROR: PRINT ERROR MESSAGE
1631                   ***************************************
1632                   * SET PRINT FLAG; SAVED: X,Y
1633                   *
1634  2938- 48         ERROR   PHA
1635  2939- 20 27 E0           JSR PRTINF
1636  293C- 12                 BYT $12
1637  293D- 2A 2A 2A           BYT '*** ERROR',$A0
1637  2940- 20 45 52 
1637  2943- 52 4F 52 
1637  2946- A0 
1638  2947- 68                 PLA

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 02/11/23   R65 ASSEMBLER  PAGE 34

1639  2948- 20 2D E0           JSR PRTBYT
1640  294B- E6 A8              INC NUMERR
1641  294D- 8A                 TXA
1642  294E- 48                 PHA
1643  294F- A5 A9              LDA PASSFL
1644  2951- D0 14              BNE ENDERR
1645  2953- 20 27 E0           JSR PRTINF
1646  2956- 20 20 49           BYT '  IN LINE '+128
1646  2959- 4E 20 4C 
1646  295C- 49 4E 45 
1646  295F- A0 
1647  2960- A5 A3              LDA LINCNT+1
1648  2962- A6 A2              LDX LINCNT
1649  2964- 20 30 E0           JSR PRTAX
1650  2967- 20 6E 27   ENDERR  JSR CRLF
1651  296A- 68                 PLA
1652  296B- AA                 TAX
1653  296C- 60                 RTS
1654                   *
1655                   *
1656                   * CONFIGURATE PRINTER FOR 96 CHARS
1657                   *
1658  296D- A2 02      PRCON   LDX =2
1659  296F- BD 0D 2B           LDA PRTAB,X
1660  2972- 86 37              STX TEMP1
1661  2974- 20 0C E0           JSR VAUTOP
1662  2977- A6 37              LDX TEMP1
1663  2979- CA                 DEX
1664  297A- 10 F3              BPL PRCON+2
1665  297C- 60                 RTS
1666                   *
1667                   *
1668                   * GET FILE NAME
1669                   *
1670  297D- 20 06 E0   INNAME  JSR GETLIN
1671  2980- 20 15 F8           JSR GETNAM
1672  2983- 20 19 20           JSR HARGUM
1673  2986- 48                 PHA
1674  2987- A4 A7              LDY FILCNT
1675  2989- AD 0A 20           LDA SAVNAM
1676  298C- 18         INNA5   CLC
1677  298D- 88                 DEY
1678  298E- 30 05              BMI INNA10
1679  2990- 69 14              ADC =20
1680  2992- 4C 8C 29           JMP INNA5
1681  2995- 85 9C      INNA10  STA SAVPNT
1682  2997- AD 0B 20           LDA SAVNAM+1
1683  299A- 85 9D              STA SAVPNT+1
1684  299C- A0 12              LDY =18
1685  299E- B9 1F 03   INNA20  LDA FILNM1-1,Y

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 02/11/23   R65 ASSEMBLER  PAGE 35

1686  29A1- 91 9C              STA (SAVPNT),Y
1687  29A3- 88                 DEY
1688  29A4- D0 F8              BNE INNA20
1689  29A6- 68                 PLA
1690  29A7- 91 9C              STA (SAVPNT),Y
1691  29A9- 60                 RTS
1692                   *
1693                   *
1694                   * GET FILE NAME BACK FROM BUFFER
1695                   *
1696  29AA- A4 A7      BACKNM  LDY FILCNT
1697  29AC- AD 0A 20           LDA SAVNAM
1698  29AF- 18         BACK10  CLC
1699  29B0- 88                 DEY
1700  29B1- 30 05              BMI BACK20      CALCULATE POINTER
1701  29B3- 69 14              ADC =20
1702  29B5- 4C AF 29           JMP BACK10
1703  29B8- 85 9C      BACK20  STA SAVPNT
1704  29BA- AD 0B 20           LDA SAVNAM+1
1705  29BD- 85 9D              STA SAVPNT+1
1706  29BF- A0 12              LDY =18
1707  29C1- B1 9C      BACK30  LDA (SAVPNT),Y
1708  29C3- 99 1F 03           STA FILNM1-1,Y
1709  29C6- 88                 DEY
1710  29C7- D0 F8              BNE BACK30
1711  29C9- B1 9C              LDA (SAVPNT),Y
1712  29CB- 85 DC              STA FILDRV
1713  29CD- 60                 RTS
1714                   *
1715                   *
1716                   * INITIALIZATION
1717                   ****************
1718                   *
1719  29CE- A9 20      COLDST  LDA =$20
1720  29D0- A2 1F              LDX =$1F
1721  29D2- 95 B2              STA TITLE,X     CLEAR TITLE
1722  29D4- CA                 DEX
1723  29D5- 10 FB              BPL *-3
1724                   *
1725  29D7- 20 27 E0           JSR PRTINF
1726  29DA- 0D 0A 09           BYT $D,$A,9,9,'R65 ASSEMBLER',$D,$A
1726  29DD- 09 52 36 
1726  29E0- 35 20 41 
1726  29E3- 53 53 45 
1726  29E6- 4D 42 4C 
1726  29E9- 45 52 0D 
1726  29EC- 0A 
1727  29ED- 0A 53 4F           BYT $A,'SOURCE FILE: ',$D
1727  29F0- 55 52 43 
1727  29F3- 45 20 46 

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 02/11/23   R65 ASSEMBLER  PAGE 36

1727  29F6- 49 4C 45 
1727  29F9- 3A 20 0D 
1728  29FC- 0A 46 49          BYT $A,'FILENAME.CY,DRIVE?',$A0
1728  29FF- 4C 45 4E 
1728  2A02- 41 4D 45 
1728  2A05- 2E 43 59 
1728  2A08- 2C 44 52 
1728  2A0B- 49 56 45 
1728  2A0E- 3F A0 
1729  2A10- A9 00              LDA =0
1730  2A12- 85 A7              STA FILCNT
1731  2A14- 20 7D 29           JSR INNAME
1732                   *
1733  2A17- 20 27 E0   WARMST  JSR PRTINF
1734  2A1A- 0D 0A 41           BYT $D,$A,'A*'+128
1734  2A1D- AA 
1735  2A1E- 20 6D 29           JSR PRCON
1736  2A21- 20 03 E0           JSR GETCHR
1737                   *
1738  2A24- C9 46              CMP =$46        F=FIRST PASS
1739  2A26- F0 03              BEQ *+5
1740  2A28- 4C B6 2A           JMP WARM10
1741  2A2B- AD 0C 20           LDA LABSTR
1742  2A2E- AE 0D 20           LDX LABSTR+1
1743  2A31- 85 B0              STA LABCNT
1744  2A33- 86 B1              STX LABCNT+1
1745  2A35- A9 00              LDA =0
1746  2A37- 85 A9              STA PASSFL
1747  2A39- 85 AA              STA PRTFLG      PRINTING OFF
1748  2A3B- AD 15 20           LDA TABLE+5
1749  2A3E- 85 AB              STA PAGELN
1750  2A40- A9 00      PASS    LDA =0
1751  2A42- 85 A7              STA FILCNT      START WITH FIRST FILE
1752  2A44- 20 AA 29           JSR BACKNM
1753                   *
1754  2A47- A9 00              LDA =0
1755  2A49- 85 DA              STA FILFLG
1756  2A4B- 20 0F F0           JSR OPEN        OPEN SOURCE
1757  2A4E- F0 03              BEQ *+5
1758  2A50- 4C 0C 28           JMP GETERR+1
1759                   *
1760  2A53- 84 9B              STY INPFIL
1761  2A55- AD 06 20           LDA OBSTR       OBJECT START
1762  2A58- 85 AC              STA OBPNT
1763  2A5A- AD 07 20           LDA OBSTR+1
1764  2A5D- 85 AD              STA OBPNT+1
1765  2A5F- A2 0A              LDX =(NUMERR-PCOLD)  SET ALL TO 0
1766  2A61- A9 00              LDA =0
1767  2A63- 95 9E              STA PCOLD,X
1768  2A65- CA                 DEX

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 02/11/23   R65 ASSEMBLER  PAGE 37

1769  2A66- 10 FB              BPL *-3
1770  2A68- A9 80              LDA =$80
1771  2A6A- 85 A5              STA OUTREC
1772                   *
1773  2A6C- 20 27 E0   LINE    JSR PRTINF      AUTOPRINT OFF
1774  2A6F- 94                 BYT $94
1775  2A70- AD 81 17           LDA SFLAG       ESCAPE TEST
1776  2A73- 10 08              BPL LINE1
1777  2A75- 29 7F              AND =$7F
1778  2A77- 8D 81 17           STA SFLAG
1779  2A7A- 4C 17 2A           JMP WARMST
1780  2A7D- 20 74 27   LINE1   JSR GET
1781  2A80- 20 A9 24           JSR INTLIN
1782  2A83- 18                 CLC
1783  2A84- A5 A0              LDA PCNEW
1784  2A86- 65 38              ADC NUMBYT
1785  2A88- 85 A0              STA PCNEW
1786  2A8A- 90 06              BCC LINE2
1787  2A8C- E6 A1              INC PCNEW+1
1788  2A8E- 20 27 E0           JSR PRTINF      HEART BEAT
1789  2A91- AE                 BYT '.'+128
1790  2A92- A5 38      LINE2   LDA NUMBYT
1791  2A94- F0 03              BEQ *+5
1792  2A96- 20 1F 28           JSR PUT
1793  2A99- 24 AA              BIT PRTFLG
1794  2A9B- 10 04              BPL *+6
1795  2A9D- 20 27 E0           JSR PRTINF
1796  2AA0- 92                 BYT $92         AUTOPRINT ON
1797  2AA1- 20 71 26           JSR PRTLIN
1798  2AA4- 24 AA              BIT PRTFLG
1799  2AA6- 10 03              BPL *+5
1800  2AA8- 20 0F 27           JSR NEWLIN
1801  2AAB- A5 A0              LDA PCNEW
1802  2AAD- 85 9E              STA PCOLD
1803  2AAF- A5 A1              LDA PCNEW+1
1804  2AB1- 85 9F              STA PCOLD+1
1805  2AB3- 4C 6C 2A           JMP LINE        HANDLE LINES
1806                   *
1807  2AB6- C9 53      WARM10  CMP =$53        S=SECOND PASS
1808  2AB8- D0 2A              BNE WARM20
1809  2ABA- A9 01              LDA =1
1810  2ABC- 85 A9              STA PASSFL
1811  2ABE- A9 80              LDA =$80
1812  2AC0- 85 AA              STA PRTFLG      PRINTING ON
1813  2AC2- A9 08              LDA =8
1814  2AC4- 8D 30 14           STA EMUCOM      PREPARE LISTING TO FILE
1815  2AC7- 20 6D 29           JSR PRCON
1816  2ACA- 20 10 2B           JSR CLRRFL      CLEAR R-FLAG
1817  2ACD- AD 15 20           LDA TABLE+5
1818  2AD0- 85 AB              STA PAGELN

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 02/11/23   R65 ASSEMBLER  PAGE 38

1819  2AD2- A9 00              LDA =0
1820  2AD4- 85 A4              STA PAGECN
1821  2AD6- 20 27 E0           JSR PRTINF
1822  2AD9- 92                 BYT $92         AUTOPRINT ON
1823  2ADA- 20 0F 27           JSR NEWLIN
1824  2ADD- 20 27 E0           JSR PRTINF
1825  2AE0- 94                 BYT $94         AUTOPRINT OFF
1826  2AE1- 4C 40 2A           JMP PASS
1827                   *
1828  2AE4- C9 0D      WARM20  CMP =$0D        <CR>?
1829  2AE6- D0 16              BNE WARM30
1830                   *
1831  2AE8- 20 27 E0   EXIT    JSR PRTINF
1832  2AEB- 0D 0A 45           BYT $D,$A,'EXIT ASSEMBLER'+128
1832  2AEE- 58 49 54 
1832  2AF1- 20 41 53 
1832  2AF4- 53 45 4D 
1832  2AF7- 42 4C 45 
1832  2AFA- D2 
1833  2AFB- 6C D5 17           JMP (VMON)      GO TO MONITOR
1834                   *
1835  2AFE- C9 00     WARM30  CMP =$00         <ESC>
1836  2B00- F0 E6              BEQ EXIT
1837                   *
1838  2B02- C9 52              CMP =$52        R=REFERENCE TABLE
1839  2B04- F0 30              BEQ MAP
1840  2B06- 20 27 E0           JSR PRTINF
1841  2B09- 87                 BYT $87         BELL
1842  2B0A- 4C 17 2A           JMP WARMST
1843                   *
1844                   *
1845  2B0D- 14 75 1B   PRTAB   BYT 20,117,27
1846                   *
1847                   *
1848                   * CLEAR R-FLAG
1849                   *
1850  2B10- A0 07      CLRRFL  LDY =7
1851  2B12- AD 0C 20           LDA LABSTR
1852  2B15- AE 0D 20           LDX LABSTR+1
1853  2B18- 85 97      CLRRF1  STA LABPNT
1854  2B1A- 86 98              STX LABPNT+1
1855  2B1C- C5 B0              CMP LABCNT
1856  2B1E- 8A                 TXA
1857  2B1F- E5 B1              SBC LABCNT+1
1858  2B21- 90 01              BCC *+3
1859  2B23- 60                 RTS
1860                   *
1861  2B24- B1 97              LDA (LABPNT),Y
1862  2B26- 29 7F              AND =$7F
1863  2B28- 91 97              STA (LABPNT),Y

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 02/11/23   R65 ASSEMBLER  PAGE 39

1864  2B2A- A5 97              LDA LABPNT
1865  2B2C- A6 98              LDX LABPNT+1
1866  2B2E- 18                 CLC
1867  2B2F- 69 08              ADC =8
1868  2B31- 90 E5              BCC CLRRF1
1869  2B33- E8                 INX
1870  2B34- B0 E2              BCS CLRRF1      ALWAYS TAKEN
1871                   *
1872                   *
1873                   * PRINT REFERENCE TABLE
1874                   ***********************
1875                   *
1876  2B36- A5 A9      MAP     LDA PASSFL
1877  2B38- F0 17              BEQ MAP1
1878  2B3A- A9 80              LDA =$80
1879  2B3C- 85 AA              STA PRTFLG
1880  2B3E- 20 27 E0           JSR PRTINF
1881  2B41- 4D 41 50           BYT 'MAP DESTROYED'+128
1881  2B44- 20 44 45 
1881  2B47- 53 54 52 
1881  2B4A- 4F 59 45 
1881  2B4D- C4 
1882  2B4E- 4C 17 2A           JMP WARMST
1883  2B51- 20 6D 29   MAP1    JSR PRCON
1884  2B54- AD 15 20           LDA TABLE+5
1885  2B57- 85 AB              STA PAGELN
1886  2B59- A9 00              LDA =0
1887  2B5B- 85 A4              STA PAGECN
1888  2B5D- 20 27 E0           JSR PRTINF
1889  2B60- 92                 BYT $92         AUTOPRINT ON
1890  2B61- 20 0F 27           JSR NEWLIN
1891  2B64- 20 27 E0           JSR PRTINF
1892  2B67- 43 52 4F           BYT 'CROSS REFERENCE MAP',$BA
1892  2B6A- 53 53 20 
1892  2B6D- 52 45 46 
1892  2B70- 45 52 45 
1892  2B73- 4E 43 45 
1892  2B76- 20 4D 41 
1892  2B79- 50 BA 
1893  2B7B- 20 0F 27           JSR NEWLIN
1894  2B7E- 20 10 2B           JSR CLRRFL      CLEAR R-FLAG
1895                   *
1896  2B81- AD 0C 20   CROSS0  LDA LABSTR
1897  2B84- AE 0D 20           LDX LABSTR+1
1898  2B87- 85 97      CROSS1  STA LABPNT
1899  2B89- 86 98              STX LABPNT+1
1900  2B8B- C5 B0              CMP LABCNT
1901  2B8D- 8A                 TXA
1902  2B8E- E5 B1              SBC LABCNT+1
1903  2B90- 90 0A              BCC CROSS2

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 02/11/23   R65 ASSEMBLER  PAGE 40

1904  2B92- 20 0F 27           JSR NEWLIN
1905  2B95- 20 27 E0           JSR PRTINF
1906  2B98- 94                 BYT $94
1907  2B99- 4C 17 2A           JMP WARMST
1908                   *
1909  2B9C- A0 07      CROSS2  LDY =7
1910  2B9E- B1 97              LDA (LABPNT),Y
1911  2BA0- 10 0C              BPL CROSS3      SKIP, IF FOUND
1912  2BA2- A5 97              LDA LABPNT
1913  2BA4- A6 98              LDX LABPNT+1
1914  2BA6- 18                 CLC
1915  2BA7- 69 08              ADC =8
1916  2BA9- 90 DC              BCC CROSS1
1917  2BAB- E8                 INX
1918  2BAC- B0 D9              BCS CROSS1
1919                   *
1920  2BAE- A5 97      CROSS3  LDA LABPNT
1921  2BB0- A6 98              LDX LABPNT+1
1922  2BB2- 18         CROSS4  CLC
1923  2BB3- 69 08              ADC =8
1924  2BB5- 85 99              STA LABPN1
1925  2BB7- 90 01              BCC *+3
1926  2BB9- E8                 INX
1927  2BBA- 86 9A              STX LABPN1+1
1928  2BBC- C5 B0              CMP LABCNT
1929  2BBE- 8A                 TXA
1930  2BBF- E5 B1              SBC LABCNT+1
1931  2BC1- B0 24              BCS CROSS7      SKIP, IF FOUND
1932                   *
1933  2BC3- A0 07              LDY =7
1934  2BC5- B1 99              LDA (LABPN1),Y
1935  2BC7- 10 07              BPL CROSS6
1936  2BC9- A5 99      CROSS5  LDA LABPN1
1937  2BCB- A6 9A              LDX LABPN1+1
1938  2BCD- 4C B2 2B           JMP CROSS4
1939                   *
1940  2BD0- 38         CROSS6  SEC
1941  2BD1- A0 04              LDY =4
1942  2BD3- B1 97              LDA (LABPNT),Y  COMPARE NOW
1943  2BD5- F1 99              SBC (LABPN1),Y
1944  2BD7- 88                 DEY
1945  2BD8- 10 F9              BPL CROSS6+3
1946  2BDA- 90 ED              BCC CROSS5
1947  2BDC- A5 99              LDA LABPN1
1948  2BDE- A6 9A              LDX LABPN1+1
1949  2BE0- 85 97              STA LABPNT
1950  2BE2- 86 98              STX LABPNT+1
1951  2BE4- 4C B2 2B           JMP CROSS4
1952                   *
1953  2BE7- A0 07      CROSS7  LDY =7

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 02/11/23   R65 ASSEMBLER  PAGE 41

1954  2BE9- B1 97              LDA (LABPNT),Y  SET R-FLAG
1955  2BEB- 09 80              ORA =$80
1956  2BED- 91 97              STA (LABPNT),Y
1957  2BEF- 20 AB 2C           JSR PRLABN
1958  2BF2- 4C 81 2B           JMP CROSS0
1959                   *
1960                   *
1961                   * END OF SOURCE
1962                   *
1963  2BF5- A9 00      END     LDA =0
1964  2BF7- 85 A0              STA PCNEW
1965  2BF9- 85 A1              STA PCNEW+1
1966  2BFB- A5 A9              LDA PASSFL      ONLY IN SECOND PASS
1967  2BFD- F0 04              BEQ END0-3
1968  2BFF- 20 27 E0          JSR PRTINF      AUTOPRINT ON
1969  2C02- 92                 BYT $92
1970  2C03- 20 71 26           JSR PRTLIN
1971  2C06- 20 0F 27   END0    JSR NEWLIN
1972  2C09- 20 27 E0           JSR PRTINF
1973  2C0C- 4C 41 42           BYT 'LABELS',$BD
1973  2C0F- 45 4C 53 
1973  2C12- BD 
1974  2C13- A9 00              LDA =0
1975  2C15- 85 98              STA LABPNT+1
1976  2C17- A5 B0              LDA LABCNT
1977  2C19- 38                 SEC
1978  2C1A- ED 0C 20           SBC LABSTR
1979  2C1D- 85 97              STA LABPNT
1980  2C1F- A5 B1              LDA LABCNT+1
1981  2C21- ED 0D 20           SBC LABSTR+1
1982  2C24- A0 04              LDY =4
1983  2C26- 06 97      END1    ASL LABPNT
1984  2C28- 2A                 ROL A
1985  2C29- 26 98              ROL LABPNT+1
1986  2C2B- 88                 DEY
1987  2C2C- 10 F8              BPL END1
1988  2C2E- AA                 TAX
1989  2C2F- A5 98              LDA LABPNT+1
1990  2C31- 20 30 E0           JSR PRTAX
1991  2C34- 20 0F 27           JSR NEWLIN
1992  2C37- 20 27 E0           JSR PRTINF
1993  2C3A- 45 52 52           BYT 'ERRORS',$BD
1993  2C3D- 4F 52 53 
1993  2C40- BD 
1994  2C41- A5 A8              LDA NUMERR
1995  2C43- 20 2D E0           JSR PRTBYT
1996  2C46- 20 0F 27           JSR NEWLIN
1997  2C49- 20 27 E0           JSR PRTINF
1998  2C4C- 52 45 43           BYT 'RECORDS',$BD
1998  2C4F- 4F 52 44 

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 02/11/23   R65 ASSEMBLER  PAGE 42

1998  2C52- 53 BD 
1999  2C54- A6 9B              LDX INPFIL
2000  2C56- BD 51 03           LDA FIRCTB,X
2001  2C59- 20 2D E0           JSR PRTBYT
2002  2C5C- 20 0F 27           JSR NEWLIN
2003  2C5F- 20 62 28           JSR CLOSRC
2004  2C62- A6 9B              LDX INPFIL
2005  2C64- 20 12 F0           JSR CLOSE
2006  2C67- 20 27 E0           JSR PRTINF
2007  2C6A- 55 4E 52           BYT 'UNRESOLVED',$BA
2007  2C6D- 45 53 4F 
2007  2C70- 4C 56 45 
2007  2C73- 44 BA 
2008  2C75- A9 09              LDA =9          FINISH LISTING
2009  2C77- 8D 30 14           STA EMUCOM
2010  2C7A- 20 10 2B           JSR CLRRFL      CLEAR R-FLAG
2011  2C7D- AD 0C 20           LDA LABSTR
2012  2C80- AE 0D 20           LDX LABSTR+1
2013  2C83- 85 97      UNRES   STA LABPNT
2014  2C85- 86 98              STX LABPNT+1
2015  2C87- C5 B0              CMP LABCNT
2016  2C89- 8A                 TXA
2017  2C8A- E5 B1              SBC LABCNT+1
2018  2C8C- 90 03              BCC *+5
2019  2C8E- 4C 81 2B           JMP CROSS0
2020  2C91- 20 79 22           JSR DEFIN
2021  2C94- F0 08              BEQ END2
2022  2C96- A0 07              LDY =7
2023  2C98- B1 97              LDA (LABPNT),Y
2024  2C9A- 09 80              ORA =$80
2025  2C9C- 91 97              STA (LABPNT),Y
2026  2C9E- A5 97      END2    LDA LABPNT
2027  2CA0- A6 98              LDX LABPNT+1
2028  2CA2- 18                 CLC
2029  2CA3- 69 08              ADC =8
2030  2CA5- 90 01              BCC *+3
2031  2CA7- E8                 INX
2032  2CA8- 4C 83 2C           JMP UNRES
2033                   *
2034                   *
2035                   * SUBROUTINE PRLABN: PRINT NAME OF LABEL
2036                   ****************************************
2037                   *
2038  2CAB- A0 00      PRLABN  LDY =0
2039  2CAD- B1 97              LDA (LABPNT),Y
2040  2CAF- 99 30 00           STA LABEL,Y
2041  2CB2- C8                 INY
2042  2CB3- C0 05              CPY =5
2043  2CB5- D0 F6              BNE PRLABN+2
2044                   *

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 02/11/23   R65 ASSEMBLER  PAGE 43

2045  2CB7- 20 0F 27           JSR NEWLIN
2046  2CBA- A0 07              LDY =7          CHAR COUNTER
2047  2CBC- A2 06      PRLAB0  LDX =6
2048  2CBE- C0 06              CPY =6
2049  2CC0- 90 01              BCC *+3
2050  2CC2- CA                 DEX
2051  2CC3- A9 00              LDA =0
2052  2CC5- 26 34      PRLAB1  ROL LABEL+4
2053  2CC7- 26 33              ROL LABEL+3
2054  2CC9- 26 32              ROL LABEL+2
2055  2CCB- 26 31              ROL LABEL+1
2056  2CCD- 26 30              ROL LABEL
2057  2CCF- 2A                 ROL A
2058  2CD0- CA                 DEX
2059  2CD1- D0 F2              BNE PRLAB1
2060  2CD3- C9 00              CMP =0
2061  2CD5- F0 09              BEQ PRLAB3
2062  2CD7- C9 30              CMP =$30
2063  2CD9- 10 02              BPL *+4
2064  2CDB- 09 40              ORA =$40
2065  2CDD- 20 09 E0           JSR PRTCHR
2066  2CE0- 88         PRLAB3  DEY
2067  2CE1- D0 D9              BNE PRLAB0
2068  2CE3- A2 08              LDX =8
2069  2CE5- 20 05 27           JSR TAB
2070  2CE8- 20 79 22           JSR DEFIN
2071  2CEB- D0 0A              BNE *+12
2072  2CED- 20 27 E0           JSR PRTINF
2073  2CF0- 3F 3F 3F           BYT '???',$BF
2073  2CF3- BF 
2074  2CF4- 4C 04 2D           JMP *+16
2075                   *
2076  2CF7- A0 06              LDY =6
2077  2CF9- B1 97              LDA (LABPNT),Y
2078  2CFB- 20 2D E0           JSR PRTBYT
2079  2CFE- 88                 DEY
2080  2CFF- B1 97             LDA (LABPNT),Y
2081  2D01- 20 2D E0           JSR PRTBYT
2082  2D04- 20 C9 2D           JSR CBASE
2083  2D07- A0 07              LDY =7
2084  2D09- B1 97              LDA (LABPNT),Y
2085  2D0B- 29 7F              AND =$7F
2086  2D0D- 0A                 ASL A
2087  2D0E- A8                 TAY             Y=2*NO OF REFERENCES
2088                   *
2089  2D0F- A9 0A      PRLAB4  LDA =10         REFERENCES PER LINE
2090  2D11- 85 37              STA TEMP1
2091  2D13- A2 10              LDX =16
2092  2D15- 20 05 27           JSR TAB
2093  2D18- C0 00      PRLAB5  CPY =0

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 02/11/23   R65 ASSEMBLER  PAGE 44

2094  2D1A- F0 1F              BEQ PRLAB6
2095  2D1C- 88                 DEY
2096  2D1D- B1 95              LDA (BASE),Y
2097  2D1F- 20 2D E0           JSR PRTBYT
2098  2D22- 88                 DEY
2099  2D23- B1 95              LDA (BASE),Y
2100  2D25- 20 2D E0           JSR PRTBYT
2101  2D28- 20 27 E0           JSR PRTINF
2102  2D2B- A0                 BYT $A0
2103  2D2C- C6 37              DEC TEMP1
2104  2D2E- 10 E8              BPL PRLAB5
2105  2D30- 98                 TYA
2106  2D31- F0 08              BEQ PRLAB6
2107  2D33- 48                 PHA
2108  2D34- 20 0F 27           JSR NEWLIN
2109  2D37- 68                 PLA
2110  2D38- A8                 TAY
2111  2D39- D0 D4              BNE PRLAB4
2112  2D3B- 60         PRLAB6  RTS
2113                   *
2114                   *
2115                   * SUBROUTINE FORBR: INSERT FORWARD BRANCH
2116                   *****************************************
2117                   * INPUT: OBJECT, BRANTC, ONLY IN FIRST PASS
2118                   * RESOLV+1
2119                   *
2120  2D3C- A5 A6      FORBR   LDA BRANTC
2121  2D3E- C9 0C              CMP =12
2122  2D40- 90 05              BCC *+7
2123  2D42- A9 52              LDA =$52
2124  2D44- 4C 38 29           JMP ERROR
2125  2D47- A8                 TAY
2126  2D48- A5 3A              LDA RESOLV+1
2127  2D4A- 99 65 00           STA BRANTB,Y    STORE NO OF LABELS
2128  2D4D- A5 3B              LDA RESOLV+2
2129  2D4F- 99 71 00           STA BRANTB+12,Y
2130  2D52- 20 25 26           JSR BRAN1
2131  2D55- A4 A6              LDY BRANTC
2132  2D57- 99 89 00           STA BRANTB+36,Y STORE HIGH BYTE
2133  2D5A- A5 3D              LDA OBJECT+1
2134  2D5C- 99 7D 00           STA BRANTB+24,Y STORE LOW BYTE
2135  2D5F- E6 A6              INC BRANTC
2136  2D61- 60                 RTS
2137                   *
2138                   *
2139                   * SUBROUTINE RESFBR: RESOLVE FORWARD BRANCH
2140                   *******************************************
2141                   * INPUT: LABPNT; ONLY IN FIRST PASS
2142                   * SAVED: X,Y
2143                   *

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 02/11/23   R65 ASSEMBLER  PAGE 45

2144  2D62- 8A         RESFBR  TXA
2145  2D63- 48                 PHA
2146  2D64- A6 A6      RESF1   LDX BRANTC
2147  2D66- F0 10              BEQ RESF0       TABLE EMPTY
2148  2D68- CA                 DEX
2149  2D69- A5 97      RESF8   LDA LABPNT
2150  2D6B- D5 65              CMP BRANTB,X
2151  2D6D- D0 06              BNE RESF6
2152  2D6F- A5 98              LDA LABPNT+1
2153  2D71- D5 71              CMP BRANTB+12,X
2154  2D73- F0 06              BEQ RESF7
2155  2D75- CA         RESF6   DEX
2156  2D76- 10 F1              BPL RESF8
2157  2D78- 68         RESF0   PLA
2158  2D79- AA                 TAX
2159  2D7A- 60                 RTS
2160                   *
2161  2D7B- 8A         RESF7   TXA
2162  2D7C- 48                 PHA
2163  2D7D- 20 85 2D           JSR RESF2
2164  2D80- 68                 PLA
2165  2D81- AA                 TAX
2166  2D82- 4C 64 2D           JMP RESF1
2167                   *
2168  2D85- B5 7D      RESF2   LDA BRANTB+24,X
2169  2D87- 18                 CLC
2170  2D88- 65 5C              ADC VALUE
2171  2D8A- 08                 PHP
2172  2D8B- B5 89              LDA BRANTB+36,X
2173  2D8D- 65 5D              ADC VALUE+1
2174  2D8F- 28                 PLP
2175  2D90- 30 10              BMI RESF3
2176  2D92- C9 00              CMP =0
2177  2D94- F0 10              BEQ RESF4
2178  2D96- 98         ERR14   TYA
2179  2D97- 48                 PHA
2180  2D98- A9 44              LDA =$44
2181  2D9A- 20 38 29           JSR ERROR
2182  2D9D- 68                 PLA
2183  2D9E- A8                 TAY
2184  2D9F- 4C A6 2D           JMP RESF4
2185                   *
2186  2DA2- C9 FF      RESF3   CMP =$FF
2187  2DA4- D0 F0              BNE ERR14
2188                   *
2189  2DA6- E8         RESF4   INX
2190  2DA7- E4 A6              CPX BRANTC
2191  2DA9- B0 13              BCS RESF5
2192  2DAB- B5 65              LDA BRANTB,X
2193  2DAD- 95 64              STA BRANTB-1,X

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 02/11/23   R65 ASSEMBLER  PAGE 46

2194  2DAF- B5 71              LDA BRANTB+12,X
2195  2DB1- 95 70              STA BRANTB+11,X
2196  2DB3- B5 7D              LDA BRANTB+24,X
2197  2DB5- 95 7C              STA BRANTB+23,X
2198  2DB7- B5 89              LDA BRANTB+36,X
2199  2DB9- 95 88              STA BRANTB+35,X
2200  2DBB- 4C A6 2D           JMP RESF4
2201                   *
2202  2DBE- C6 A6      RESF5   DEC BRANTC
2203  2DC0- 60                 RTS
2204                   *
2205                   *
2206                   * SUBROUTINE CBASE: COMPUTE BASE
2207                   ********************************
2208                   * INPUT: LABCNT
2209                   *
2210  2DC1- A5 B0      CBASE2  LDA LABCNT
2211  2DC3- A6 B1              LDX LABCNT+1
2212  2DC5- 85 97              STA LABPNT
2213  2DC7- 86 98              STX LABPNT+1
2214                   *
2215  2DC9- AD 06 20   CBASE   LDA OBSTR
2216  2DCC- 85 95              STA BASE
2217  2DCE- AD 07 20           LDA OBSTR+1
2218  2DD1- 85 96              STA BASE+1
2219  2DD3- A5 97              LDA LABPNT
2220  2DD5- A6 98              LDX LABPNT+1
2221  2DD7- 38         CBASE1  SEC
2222  2DD8- E9 08              SBC =8
2223  2DDA- 85 99              STA LABPN1
2224  2DDC- B0 01              BCS *+3
2225  2DDE- CA                 DEX
2226  2DDF- 86 9A              STX LABPN1+1
2227  2DE1- CD 0C 20           CMP LABSTR
2228  2DE4- 8A                 TXA
2229  2DE5- ED 0D 20           SBC LABSTR+1
2230  2DE8- B0 01              BCS *+3
2231  2DEA- 60                 RTS
2232  2DEB- A0 07              LDY =7
2233  2DED- B1 99              LDA (LABPN1),Y
2234  2DEF- 29 7F              AND =$7F
2235  2DF1- 0A                 ASL A
2236  2DF2- 65 95              ADC BASE
2237  2DF4- 85 95              STA BASE
2238  2DF6- 90 02              BCC *+4
2239  2DF8- E6 96              INC BASE+1
2240  2DFA- A5 99              LDA LABPN1
2241  2DFC- A6 9A              LDX LABPN1+1
2242  2DFE- 4C D7 2D          JMP CBASE1
2243                   *

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 02/11/23   R65 ASSEMBLER  PAGE 47

2244                   *
2245                   * SUBROUTINE: SETREF: SET REFERENCE
2246                   ***********************************
2247                   * SAVED: X,Y; INPUT: LABPNT
2248                   *
2249  2E01- 86 61      SETREF  STX INDEX1      SAVE X
2250  2E03- 84 62              STY INDEX2
2251  2E05- A5 A9              LDA PASSFL
2252  2E07- F0 01              BEQ *+3
2253  2E09- 60                 RTS
2254                   *
2255  2E0A- A0 07              LDY =7
2256  2E0C- B1 97              LDA (LABPNT),Y
2257  2E0E- 29 7F              AND =$7F
2258  2E10- C9 7F              CMP =$7F
2259  2E12- D0 03              BNE *+5
2260  2E14- A4 62              LDY INDEX2      NOT INSERTED IN FULL
2261  2E16- 60                 RTS
2262                   *
2263  2E17- A5 97              LDA LABPNT
2264  2E19- 48                 PHA
2265  2E1A- A5 98              LDA LABPNT+1
2266  2E1C- 48                 PHA
2267  2E1D- 20 C1 2D           JSR CBASE2
2268  2E20- 68                 PLA
2269  2E21- 85 98              STA LABPNT+1
2270  2E23- 68                 PLA
2271  2E24- 85 97              STA LABPNT
2272                   *
2273  2E26- A5 95              LDA BASE
2274  2E28- 85 AC              STA OBPNT
2275  2E2A- CD 08 20           CMP OBEND
2276  2E2D- A5 96              LDA BASE+1
2277  2E2F- 85 AD              STA OBPNT+1
2278  2E31- ED 09 20           SBC OBEND+1
2279  2E34- B0 3C              BCS SETR1
2280                   *
2281  2E36- A6 37              LDX TEMP1
2282  2E38- A0 07              LDY =7
2283  2E3A- B1 97              LDA (LABPNT),Y
2284  2E3C- 18                 CLC
2285  2E3D- 69 01              ADC =1
2286  2E3F- 91 97              STA (LABPNT),Y
2287  2E41- 20 C9 2D           JSR CBASE
2288  2E44- A5 AC      SETR2   LDA OBPNT
2289  2E46- C5 95              CMP BASE
2290  2E48- A5 AD              LDA OBPNT+1
2291  2E4A- E5 96              SBC BASE+1
2292  2E4C- 90 16              BCC SETR3
2293  2E4E- A0 00              LDY =0

----------------------------------------------------------------------

R65 ASSEMBLER V8.0                 02/11/23   R65 ASSEMBLER  PAGE 48

2294  2E50- B1 AC              LDA (OBPNT),Y
2295  2E52- A0 02              LDY =2
2296  2E54- 91 AC              STA (OBPNT),Y
2297  2E56- 38                 SEC
2298  2E57- A5 AC              LDA OBPNT
2299  2E59- E9 01              SBC =1
2300  2E5B- 85 AC              STA OBPNT
2301  2E5D- B0 02              BCS *+4
2302  2E5F- C6 AD              DEC OBPNT+1
2303  2E61- 4C 44 2E           JMP SETR2
2304                   *
2305  2E64- 20 C9 2D   SETR3   JSR CBASE
2306  2E67- A0 00              LDY =0
2307  2E69- A5 9E              LDA PCOLD
2308  2E6B- 91 95              STA (BASE),Y
2309  2E6D- C8                 INY
2310  2E6E- A5 9F              LDA PCOLD+1
2311  2E70- 91 95              STA (BASE),Y
2312  2E72- A4 62      SETR1   LDY INDEX2
2313  2E74- A6 61              LDX INDEX1
2314  2E76- 60                 RTS
2315                   *
2316                   *
2317  2E77-                    END
LABELS=0106
ERRORS=00
RECORDS=85

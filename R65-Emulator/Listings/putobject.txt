
R65 COMPILE 4.2: program PUTOBJECT        11/2/24 page 1


   1 (    4) {
   2 (    4)          *****************
   3 (    4)          *               *
   4 (    4)          *   putobject   *
   5 (    4)          *               *
   6 (    4)          *****************
   7 (    4) 
   8 (    4)     move a object file from
   9 (    4)     the WORK disk on the disk PASCAL
  10 (    4) 
  11 (    4)     usage: putobject filename
  12 (    4) 
  13 (    4)     2019 rricharz (r77@bluewin.ch)
  14 (    4) }
  15 (    4) 
  16 (    4) program putobject;
  17 (    4) uses syslib,arglib;
  18 ( 1093) 
  19 ( 1093) const afloppy=$c827; { exdos vector }
  20 ( 1096) 
  21 ( 1096) mem filerr=$db: integer&;
  22 ( 1096) 
  23 ( 1096) var cyclus,drive,k: integer;
  24 ( 1096)     fname,dname: array[15] of char;
  25 ( 1096)     default,ok,libflag: boolean;
  26 ( 1096) 
  27 ( 1096) {$I IFILE:P}
IFILE:P         .07  SP 0000-0600 00F8 11/02/24
{I}    1 ( 1096) { IFILE:P - common file handling procedures }
{I}    2 ( 1096) 
{I}    3 ( 1096) proc runprog
{I}    4 ( 1096)   (name: array[15] of char;
{I}    5 ( 1096)    cyc: integer; drv: integer);
{I}    6 ( 1096) var i: integer;
{I}    7 ( 1099) begin
{I}    8 ( 1099)   for i:=0 to 15 do filnm1[i]:=name[i];
{I}    9 ( 1126)   filcy1:=cyc; fildrv:=drv; filflg:=$40;
{I}   10 ( 1170)   run
{I}   11 ( 1174) end;
{I}   12 ( 1175) 
{I}   13 ( 1176) proc writename(text: array[15] of char);
{I}   14 ( 1176) { write name without blanks }
{I}   15 ( 1176) var i: integer;
{I}   16 ( 1179) 
{I}   17 ( 1179) begin
{I}   18 ( 1179)   for i:=0 to 15 do
{I}   19 ( 1189)     if text[i]<>' ' then write(text[i]);
{I}   20 ( 1221) end;
{I}   21 ( 1235) 
{I}   22 ( 1236) proc setsubtype(subtype:char);
{I}   23 ( 1236) var i:integer;
{I}   24 ( 1239) begin
{I}   25 ( 1239)   i:=0;
{I}   26 ( 1243)   repeat
{I}   27 ( 1247)     i:=i+1;
{I}   28 ( 1253)   until (fname[i]=':') or
{I}   29 ( 1269)     (fname[i]=' ') or (i>=14);
{I}   30 ( 1288)   fname[i]:=':';
{I}   31 ( 1298)   fname[i+1]:=subtype;
{I}   32 ( 1309) end;
{I}   33 ( 1317) 
{I}   34 ( 1318) func contains(t:array[7] of char):boolean;
{I}   35 ( 1318) { check for substring in fname }
{I}   36 ( 1318) { the substring must end with a blank }
{I}   37 ( 1318) var i,i1,j:integer;
{I}   38 ( 1321)     found:boolean;
{I}   39 ( 1321) begin
{I}   40 ( 1321)   i:=0; found:=false;
{I}   41 ( 1331)   repeat
{I}   42 ( 1335)     j:=0;
{I}   43 ( 1337)     if fname[i]=t[j] then begin
{I}   44 ( 1358)       i1:=i;
{I}   45 ( 1361)       repeat
{I}   46 ( 1369)         i1:=i1+1;
{I}   47 ( 1375)         j:=j+1;
{I}   48 ( 1386)         found:=t[j]=' ';
{I}   49 ( 1401)       until (i1>14) or (fname[i1]<>t[j])
{I}   50 ( 1425)                              or found;
{I}   51 ( 1431)     end;
{I}   52 ( 1439)     i:=i+1;
{I}   53 ( 1445)   until found or (i>15);
{I}   54 ( 1461)   contains:=found;
{I}   55 ( 1465) end;
{I}   56 ( 1473) 
{I}   57 ( 1474) 
{I}   58 ( 1474) func letter(ch:char):boolean;
{I}   59 ( 1474) begin
{I}   60 ( 1474)   letter:=(ch>='A') and (ch<='Z');
{I}   61 ( 1493) end;
{I}   62 ( 1498) 
{I}   63 ( 1499) proc setargs(name:array[15] of char;
{I}   64 ( 1499)   carg,cyc,drv:integer);
{I}   65 ( 1499) var k:integer;
{I}   66 ( 1502) begin
{I}   67 ( 1502)   argtype[carg]:='s';
{I}   68 ( 1510)     for k:=0 to 7 do
{I}   69 ( 1524)       arglist[carg+k]:=
{I}   70 ( 1542)         ord(packed(fname[2*k+1],
{I}   71 ( 1552)                     fname[2*k]));
{I}   72 ( 1568)     argtype[carg+8]:='i';
{I}   73 ( 1599)     arglist[carg+8]:=cyc;
{I}   74 ( 1612)     argtype[carg+9]:='i';
{I}   75 ( 1633)     arglist[carg+9]:=drv;
{I}   76 ( 1646) end;
{I}   77 ( 1658) 
{I}   78 ( 1659) proc setargi(val,carg:integer);
{I}   79 ( 1659) begin
{I}   80 ( 1659)   argtype[carg]:='i';
{I}   81 ( 1670)   arglist[carg]:=val;
{I}   82 ( 1680) end;
  28 ( 1693) 
  29 ( 1693) begin
  30 ( 1693)   ok:=true;
  31 ( 1697)   filerr:=0;
  32 ( 1703)   { get the argument (file name) }
  33 ( 1707)   cyclus:=0; drive:=0;
  34 ( 1715)   agetstring(fname,default,cyclus,drive);
  35 ( 1759)   if default or not letter(fname[0]) then
  36 ( 1777)     writeln('Usage: putobject filename')
  37 ( 1808)   else begin
  38 ( 1817)     { make sure that WORK is on drive 1 }
  39 ( 1817)     writeln('Putting disk WORK in drive 1');
  40 ( 1852)     cyclus:=0; drive:=1;
  41 ( 1860)     asetfile('WORK            ',cyclus,drive,' ');
  42 ( 1898)     call(afloppy);
  43 ( 1902)     if (filerr<>0) then ok:=false;
  44 ( 1913)     { make sure that PASCAL is on drive 0 }
  45 ( 1917)     writeln('Putting disk PASCAL in drive 0');
  46 ( 1954)     cyclus:=0; drive:=0;
  47 ( 1962)     asetfile('PASCAL          ',cyclus,drive,' ');
  48 ( 2000)     call(afloppy);
  49 ( 2004)     if (filerr<>0) then ok:=false;
  50 ( 2015)     { find out which files to copy }
  51 ( 2019)     libflag := contains('LIB     ');
  52 ( 2037)     { copy the object file(s) }
  53 ( 2041)     argtype[10]:='i';
  54 ( 2045)     arglist[10]:=0; {copy to drive 0}
  55 ( 2063)     argtype[11]:=chr(0);
  56 ( 2067)     cyclus:=0; drive:=0; filerr:=0;
  57 ( 2088)     writeln('Copying the file(s)');
  58 ( 2118)     if libflag then begin
  59 ( 2122)       setsubtype('L');
  60 ( 2133)       setargs(fname,0,0,1);
  61 ( 2151)       runprog('COPY:R          ',cyclus,drive);
  62 ( 2183)       if (filerr<>0) or (runerr<>0) then begin
  63 ( 2196)         ok:=false;
  64 ( 2201)       end else begin
  65 ( 2208)         setsubtype('T');
  66 ( 2216)         setargs(fname,0,0,1);
  67 ( 2234)         runprog('COPY:R          ',cyclus,drive);
  68 ( 2266)       end
  69 ( 2266)     end else begin  { not a library }
  70 ( 2269)       setsubtype('R');
  71 ( 2277)       setargs(fname,0,0,1);
  72 ( 2295)       runprog('COPY:R          ',cyclus,drive);
  73 ( 2327)     end;
  74 ( 2327)     if (filerr<>0) or (runerr<>0) then begin
  75 ( 2340)       ok:=false;
  76 ( 2345)       if filerr=6 then
  77 ( 2354)         writeln(invvid,
  78 ( 2360)              'Object file not found',norvid)
  79 ( 2385)       else
  80 ( 2392)         writeln(invvid,'Copy failed',norvid);
  81 ( 2419)     end else begin {if successfull}
  82 ( 2422)       { delete the original file }
  83 ( 2422)       setargi(0,8);
  84 ( 2432)       writeln('Deleting the original file(s)');
  85 ( 2468)       drive:=0; filerr:=0;
  86 ( 2476)       runprog('DELETE:R        ',cyclus,drive);
  87 ( 2512)       if (filerr<>0) or (runerr<>0) then begin
  88 ( 2525)         writeln(invvid,
  89 ( 2530)           'Deleting original failed',norvid);
  90 ( 2565)         ok:=false;
  91 ( 2567)       end;
  92 ( 2571)       if libflag then begin
  93 ( 2575)         setsubtype('L');
  94 ( 2586)         setargs(fname,0,0,1);
  95 ( 2604)         runprog('DELETE:R        ',cyclus,drive);
  96 ( 2636)         if (filerr<>0) or (runerr<>0) then begin
  97 ( 2649)           writeln(invvid,
  98 ( 2654)             'Deleting original failed',norvid);
  99 ( 2689)           ok:=false;
 100 ( 2691)         end;
 101 ( 2695)       end;
 102 ( 2695)       { delete any remaining :Q files }
 103 ( 2695)       writeln('Deleting any remaining temporary files');
 104 ( 2740)        setsubtype('Q');
 105 ( 2748)       fname[0]:='*';
 106 ( 2752)       setargs(fname,0,0,1);
 107 ( 2774)       runprog('DELETE:R        ',cyclus,drive);
 108 ( 2806)       { clean the destination drive }
 109 ( 2806)       setargi(0,0);
 110 ( 2816)       argtype[1]:=chr(0);
 111 ( 2820)       cyclus:=0; drive:=0; filerr:=0;
 112 ( 2841)       runprog('CLEAN:R         ',cyclus,drive);
 113 ( 2877)       if (filerr<>0) or (runerr<>0) then
 114 ( 2889)          ok:=false;
 115 ( 2895)       { pack the destination drive }
 116 ( 2899)       setargi(0,0);
 117 ( 2909)       argtype[1]:=chr(0);
 118 ( 2913)       cyclus:=0; drive:=0; filerr:=0;
 119 ( 2934)       runprog('PACK:R          ',cyclus,drive);
 120 ( 2970)       if (filerr<>0) or (runerr<>0) then
 121 ( 2982)          ok:=false;
 122 ( 2988)     end;
 123 ( 2992)   end;
 124 ( 2992)   if (not ok) or (runerr<>0) then begin
 125 ( 3004)     writeln(invvid,'Putobject failed',norvid);
 126 ( 3036)     filerr:=0; runerr:=0;
 127 ( 3044)   end;
 128 ( 3048) end.
 129 ( 3048) 

End compile

Code lenght:          3047
Compiler stack size:  68
Ident stack size:     92
Pascal errors:        0

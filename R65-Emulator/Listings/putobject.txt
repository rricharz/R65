
R65 Pascal program PUTOBJECT       7/11/23     page 1


                   1 (    4) {
                   2 (    4)          *****************
                   3 (    4)          *               *
                   4 (    4)          *   putobject   *
                   5 (    4)          *               *
                   6 (    4)          *****************
                   7 (    4) 
                   8 (    4)     move a object file from
                   9 (    4)     the WORK disk on the disk PASCAL
                  10 (    4) 
                  11 (    4)     usage: putobject filename
                  12 (    4) 
                  13 (    4)     2019 rricharz (r77@bluewin.ch)
                  14 (    4) }
                  15 (    4) 
                  16 (    4) program putobject;
                  17 (    4) uses syslib,arglib,disklib;
                  18 ( 1369) 
                  19 ( 1369) const afloppy=$c827; { exdos vector }
                  20 ( 1372) 
                  21 ( 1372) mem filerr=$db: integer&;
                  22 ( 1372) 
                  23 ( 1372) var cyclus,drive,k,dummy: integer;
                  24 ( 1372)     fname,dname: array[15] of char;
                  25 ( 1372)     default,ok,libflag: boolean;
                  26 ( 1372) 
                  27 ( 1372) func contains(t:array[7] of char):boolean;
                  28 ( 1372) { check for substring in fname }
                  29 ( 1372) { the substring must end with a blank }
                  30 ( 1372) var i,i1,j:integer;
                  31 ( 1375)     found:boolean;
                  32 ( 1375) begin
                  33 ( 1375)   i:=0; found:=false;
                  34 ( 1385)   repeat
                  35 ( 1389)     j:=0;
                  36 ( 1391)     if fname[i]=t[j] then begin
                  37 ( 1412)       i1:=i;
                  38 ( 1415)       repeat
                  39 ( 1423)         i1:=i1+1;
                  40 ( 1429)         j:=j+1;
                  41 ( 1440)         found:=t[j]=' ';
                  42 ( 1455)       until (i1>14) or (fname[i1]<>t[j])
                  43 ( 1479)                              or found;
                  44 ( 1485)     end;
                  45 ( 1493)     i:=i+1;
                  46 ( 1499)   until found or (i>15);
                  47 ( 1515)   contains:=found;
                  48 ( 1519) end;
                  49 ( 1527) 
                  50 ( 1528) proc runprog
                  51 ( 1528)   (name: array[15] of char;
                  52 ( 1528)    cyc: integer; drv: integer);
                  53 ( 1528) var i: integer;
                  54 ( 1531) begin
                  55 ( 1531)   for i:=0 to 15 do filnm1[i]:=name[i];
                  56 ( 1558)   filcy1:=cyc; fildrv:=drv; filflg:=$40;
                  57 ( 1602)   run
                  58 ( 1606) end;
                  59 ( 1607) 

----------------------------------------------------------------------

R65 Pascal program PUTOBJECT       7/11/23     page 2

                  60 ( 1608) proc writename(text: array[15] of char);
                  61 ( 1608) { write name without blanks }
                  62 ( 1608) var i: integer;
                  63 ( 1611) begin
                  64 ( 1611)   for i:=0 to 15 do
                  65 ( 1621)     if text[i]<>' ' then write(text[i]);
                  66 ( 1653) end;
                  67 ( 1667) 
                  68 ( 1668) proc setsubtype(subtype:char);
                  69 ( 1668) var i:integer;
                  70 ( 1671) begin
                  71 ( 1671)   i:=0;
                  72 ( 1675)   repeat
                  73 ( 1679)     i:=i+1;
                  74 ( 1685)   until (fname[i]=':') or
                  75 ( 1701)     (fname[i]=' ') or (i>=14);
                  76 ( 1720)   fname[i]:=':';
                  77 ( 1730)   fname[i+1]:=subtype;
                  78 ( 1741) end;
                  79 ( 1749) 
                  80 ( 1750) func letter(ch:char):boolean;
                  81 ( 1750) begin
                  82 ( 1750)   letter:=(ch>='A') and (ch<='Z');
                  83 ( 1769) end;
                  84 ( 1774) 
                  85 ( 1775) proc setargs(name:array[15] of char;
                  86 ( 1775)   carg,cyc,drv:integer);
                  87 ( 1775) var k:integer;
                  88 ( 1778) begin
                  89 ( 1778)   argtype[carg]:='s';
                  90 ( 1786)     for k:=0 to 7 do
                  91 ( 1800)       arglist[carg+k]:=
                  92 ( 1818)         ord(packed(fname[2*k+1],
                  93 ( 1828)                     fname[2*k]));
                  94 ( 1844)     argtype[carg+8]:='i';
                  95 ( 1875)     arglist[carg+8]:=cyc;
                  96 ( 1888)     argtype[carg+9]:='i';
                  97 ( 1909)     arglist[carg+9]:=drv;
                  98 ( 1922) end;
                  99 ( 1934) 
                 100 ( 1935) proc setargi(val,carg:integer);
                 101 ( 1935) begin
                 102 ( 1935)   argtype[carg]:='i';
                 103 ( 1946)   arglist[carg]:=val;
                 104 ( 1956) end;
                 105 ( 1968) 
                 106 ( 1969) begin
                 107 ( 1969)   ok:=true;
                 108 ( 1973)   filerr:=0;
                 109 ( 1979)   { get the argument (file name) }
                 110 ( 1983)   cyclus:=0; drive:=0;
                 111 ( 1991)   agetstring(fname,default,cyclus,drive);
                 112 ( 2035)   if default or not letter(fname[0]) then
                 113 ( 2053)     writeln('Usage: putobject filename')
                 114 ( 2084)   else begin
                 115 ( 2093)     { make sure that WORK is on drive 1 }
                 116 ( 2093)     writeln('Putting disk WORK in drive 1');
                 117 ( 2128)     cyclus:=0; drive:=1;
                 118 ( 2136)     asetfile('WORK            ',cyclus,drive,' ');
                 119 ( 2174)     call(afloppy);

----------------------------------------------------------------------

R65 Pascal program PUTOBJECT       7/11/23     page 3

                 120 ( 2178)     if (filerr<>0) then ok:=false;
                 121 ( 2189)     { make sure that PASCAL is on drive 0 }
                 122 ( 2193)     writeln('Putting disk PASCAL in drive 0');
                 123 ( 2230)     cyclus:=0; drive:=0;
                 124 ( 2238)     asetfile('PASCAL          ',cyclus,drive,' ');
                 125 ( 2276)     call(afloppy);
                 126 ( 2280)     if (filerr<>0) then ok:=false;
                 127 ( 2291)     { find out which files to copy }
                 128 ( 2295)     libflag := contains('LIB     ');
                 129 ( 2313)     { clean WORK }
                 130 ( 2317)     setargi(1,0);
                 131 ( 2327)     argtype[1]:=chr(0);
                 132 ( 2331)     cyclus:=0; drive:=0; filerr:=0;
                 133 ( 2352)     runprog('CLEAN:R         ',cyclus,drive);
                 134 ( 2388)     if (filerr<>0) or (runerr<>0) then
                 135 ( 2400)       ok:=false;
                 136 ( 2406)     { copy the object file(s) }
                 137 ( 2410)     argtype[10]:='i';
                 138 ( 2414)     arglist[10]:=0; {copy to drive 0}
                 139 ( 2432)     argtype[11]:=chr(0);
                 140 ( 2436)     cyclus:=0; drive:=0; filerr:=0;
                 141 ( 2457)     if libflag then begin
                 142 ( 2465)       setsubtype('L');
                 143 ( 2476)       setargs(fname,0,0,1);
                 144 ( 2494)       runprog('COPY:R          ',cyclus,drive);
                 145 ( 2526)       if (filerr<>0) or (runerr<>0) then begin
                 146 ( 2539)         ok:=false;
                 147 ( 2544)       end else begin
                 148 ( 2551)         setsubtype('T');
                 149 ( 2559)         setargs(fname,0,0,1);
                 150 ( 2577)         runprog('COPY:R          ',cyclus,drive);
                 151 ( 2609)       end
                 152 ( 2609)     end else begin  { not a library }
                 153 ( 2612)       setsubtype('R');
                 154 ( 2620)       setargs(fname,0,0,1);
                 155 ( 2638)       runprog('COPY:R          ',cyclus,drive);
                 156 ( 2670)     end;
                 157 ( 2670)     if (filerr<>0) or (runerr<>0) then begin
                 158 ( 2683)       ok:=false;
                 159 ( 2688)       if filerr=6 then
                 160 ( 2697)         writeln(invvid,
                 161 ( 2703)              'Object file not found',norvid)
                 162 ( 2728)       else
                 163 ( 2735)         writeln(invvid,'Copy failed',norvid);
                 164 ( 2762)     end else begin {if successfull}
                 165 ( 2765)       { delete the original file }
                 166 ( 2765)       setargi(filcyc,8);
                 167 ( 2777)       writeln;
                 168 ( 2777)       writeln('Deleting the original file(s)');
                 169 ( 2819)       drive:=0; filerr:=0;
                 170 ( 2827)       runprog('DELETE:R        ',cyclus,drive);
                 171 ( 2863)       if (filerr<>0) or (runerr<>0) then begin
                 172 ( 2876)         writeln(invvid,
                 173 ( 2881)           'Deleting original failed',norvid);
                 174 ( 2916)         ok:=false;
                 175 ( 2918)       end;
                 176 ( 2922)       if libflag then begin
                 177 ( 2926)         setsubtype('L');
                 178 ( 2937)         setargs(fname,0,0,1);
                 179 ( 2955)         runprog('DELETE:R        ',cyclus,drive);

----------------------------------------------------------------------

R65 Pascal program PUTOBJECT       7/11/23     page 4

                 180 ( 2987)         if (filerr<>0) or (runerr<>0) then begin
                 181 ( 3000)           writeln(invvid,
                 182 ( 3005)             'Deleting original failed',norvid);
                 183 ( 3040)           ok:=false;
                 184 ( 3042)         end;
                 185 ( 3046)       end;
                 186 ( 3046)       { clean the destination drive }
                 187 ( 3046)       setargi(0,0);
                 188 ( 3056)       argtype[1]:=chr(0);
                 189 ( 3060)       cyclus:=0; drive:=0; filerr:=0;
                 190 ( 3081)       runprog('CLEAN:R         ',cyclus,drive);
                 191 ( 3117)       if (filerr<>0) or (runerr<>0) then
                 192 ( 3129)          ok:=false;
                 193 ( 3135)       { pack the destination drive }
                 194 ( 3139)       setargi(0,0);
                 195 ( 3149)       argtype[1]:=chr(0);
                 196 ( 3153)       cyclus:=0; drive:=0; filerr:=0;
                 197 ( 3174)       runprog('PACK:R          ',cyclus,drive);
                 198 ( 3210)       if (filerr<>0) or (runerr<>0) then
                 199 ( 3222)          ok:=false;
                 200 ( 3228)     end;
                 201 ( 3232)   end;
                 202 ( 3232)   if (not ok) or (runerr<>0) then begin
                 203 ( 3244)     writeln(invvid,'Putobject failed',norvid);
                 204 ( 3276)     filerr:=0; runerr:=0;
                 205 ( 3284)   end;
                 206 ( 3288)   dummy:=freedsk(0,true);                           
                 207 ( 3304) end.
                 208 ( 3304) 

End compile

Code lenght:          3303
Compiler stack size:  71
Ident stack size:     96
Pascal errors:        0

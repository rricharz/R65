
R65 Pascal program PUTOBJECT       8/11/23     page 1


                   1 (    4) {
                   2 (    4)          *****************
                   3 (    4)          *               *
                   4 (    4)          *   putobject   *
                   5 (    4)          *               *
                   6 (    4)          *****************
                   7 (    4) 
                   8 (    4)     move a object file from
                   9 (    4)     the WORK disk on the disk PASCAL
                  10 (    4) 
                  11 (    4)     usage: putobject filename
                  12 (    4) 
                  13 (    4)     2019 rricharz (r77@bluewin.ch)
                  14 (    4) }
                  15 (    4) 
                  16 (    4) program putobject;
                  17 (    4) uses syslib,arglib;
                  18 ( 1093) 
                  19 ( 1093) const afloppy=$c827; { exdos vector }
                  20 ( 1096) 
                  21 ( 1096) mem filerr=$db: integer&;
                  22 ( 1096) 
                  23 ( 1096) var cyclus,drive,k: integer;
                  24 ( 1096)     fname,dname: array[15] of char;
                  25 ( 1096)     default,ok,libflag: boolean;
                  26 ( 1096) 
                  27 ( 1096) func contains(t:array[7] of char):boolean;
                  28 ( 1096) { check for substring in fname }
                  29 ( 1096) { the substring must end with a blank }
                  30 ( 1096) var i,i1,j:integer;
                  31 ( 1099)     found:boolean;
                  32 ( 1099) begin
                  33 ( 1099)   i:=0; found:=false;
                  34 ( 1109)   repeat
                  35 ( 1113)     j:=0;
                  36 ( 1115)     if fname[i]=t[j] then begin
                  37 ( 1136)       i1:=i;
                  38 ( 1139)       repeat
                  39 ( 1147)         i1:=i1+1;
                  40 ( 1153)         j:=j+1;
                  41 ( 1164)         found:=t[j]=' ';
                  42 ( 1179)       until (i1>14) or (fname[i1]<>t[j])
                  43 ( 1203)                              or found;
                  44 ( 1209)     end;
                  45 ( 1217)     i:=i+1;
                  46 ( 1223)   until found or (i>15);
                  47 ( 1239)   contains:=found;
                  48 ( 1243) end;
                  49 ( 1251) 
                  50 ( 1252) proc runprog
                  51 ( 1252)   (name: array[15] of char;
                  52 ( 1252)    cyc: integer; drv: integer);
                  53 ( 1252) var i: integer;
                  54 ( 1255) begin
                  55 ( 1255)   for i:=0 to 15 do filnm1[i]:=name[i];
                  56 ( 1282)   filcy1:=cyc; fildrv:=drv; filflg:=$40;
                  57 ( 1326)   run
                  58 ( 1330) end;
                  59 ( 1331) 

----------------------------------------------------------------------

R65 Pascal program PUTOBJECT       8/11/23     page 2

                  60 ( 1332) proc writename(text: array[15] of char);
                  61 ( 1332) { write name without blanks }
                  62 ( 1332) var i: integer;
                  63 ( 1335) begin
                  64 ( 1335)   for i:=0 to 15 do
                  65 ( 1345)     if text[i]<>' ' then write(text[i]);
                  66 ( 1377) end;
                  67 ( 1391) 
                  68 ( 1392) proc setsubtype(subtype:char);
                  69 ( 1392) var i:integer;
                  70 ( 1395) begin
                  71 ( 1395)   i:=0;
                  72 ( 1399)   repeat
                  73 ( 1403)     i:=i+1;
                  74 ( 1409)   until (fname[i]=':') or
                  75 ( 1425)     (fname[i]=' ') or (i>=14);
                  76 ( 1444)   fname[i]:=':';
                  77 ( 1454)   fname[i+1]:=subtype;
                  78 ( 1465) end;
                  79 ( 1473) 
                  80 ( 1474) func letter(ch:char):boolean;
                  81 ( 1474) begin
                  82 ( 1474)   letter:=(ch>='A') and (ch<='Z');
                  83 ( 1493) end;
                  84 ( 1498) 
                  85 ( 1499) proc setargs(name:array[15] of char;
                  86 ( 1499)   carg,cyc,drv:integer);
                  87 ( 1499) var k:integer;
                  88 ( 1502) begin
                  89 ( 1502)   argtype[carg]:='s';
                  90 ( 1510)     for k:=0 to 7 do
                  91 ( 1524)       arglist[carg+k]:=
                  92 ( 1542)         ord(packed(fname[2*k+1],
                  93 ( 1552)                     fname[2*k]));
                  94 ( 1568)     argtype[carg+8]:='i';
                  95 ( 1599)     arglist[carg+8]:=cyc;
                  96 ( 1612)     argtype[carg+9]:='i';
                  97 ( 1633)     arglist[carg+9]:=drv;
                  98 ( 1646) end;
                  99 ( 1658) 
                 100 ( 1659) proc setargi(val,carg:integer);
                 101 ( 1659) begin
                 102 ( 1659)   argtype[carg]:='i';
                 103 ( 1670)   arglist[carg]:=val;
                 104 ( 1680) end;
                 105 ( 1692) 
                 106 ( 1693) begin
                 107 ( 1693)   ok:=true;
                 108 ( 1697)   filerr:=0;
                 109 ( 1703)   { get the argument (file name) }
                 110 ( 1707)   cyclus:=0; drive:=0;
                 111 ( 1715)   agetstring(fname,default,cyclus,drive);
                 112 ( 1759)   if default or not letter(fname[0]) then
                 113 ( 1777)     writeln('Usage: putobject filename')
                 114 ( 1808)   else begin
                 115 ( 1817)     { make sure that WORK is on drive 1 }
                 116 ( 1817)     writeln('Putting disk WORK in drive 1');
                 117 ( 1852)     cyclus:=0; drive:=1;
                 118 ( 1860)     asetfile('WORK            ',cyclus,drive,' ');
                 119 ( 1898)     call(afloppy);

----------------------------------------------------------------------

R65 Pascal program PUTOBJECT       8/11/23     page 3

                 120 ( 1902)     if (filerr<>0) then ok:=false;
                 121 ( 1913)     { make sure that PASCAL is on drive 0 }
                 122 ( 1917)     writeln('Putting disk PASCAL in drive 0');
                 123 ( 1954)     cyclus:=0; drive:=0;
                 124 ( 1962)     asetfile('PASCAL          ',cyclus,drive,' ');
                 125 ( 2000)     call(afloppy);
                 126 ( 2004)     if (filerr<>0) then ok:=false;
                 127 ( 2015)     { find out which files to copy }
                 128 ( 2019)     libflag := contains('LIB     ');
                 129 ( 2037)     { copy the object file(s) }
                 130 ( 2041)     argtype[10]:='i';
                 131 ( 2045)     arglist[10]:=0; {copy to drive 0}
                 132 ( 2063)     argtype[11]:=chr(0);
                 133 ( 2067)     cyclus:=0; drive:=0; filerr:=0;
                 134 ( 2088)     writeln('Copying the file(s)');
                 135 ( 2118)     if libflag then begin
                 136 ( 2122)       setsubtype('L');
                 137 ( 2133)       setargs(fname,0,0,1);
                 138 ( 2151)       runprog('COPY:R          ',cyclus,drive);
                 139 ( 2183)       if (filerr<>0) or (runerr<>0) then begin
                 140 ( 2196)         ok:=false;
                 141 ( 2201)       end else begin
                 142 ( 2208)         setsubtype('T');
                 143 ( 2216)         setargs(fname,0,0,1);
                 144 ( 2234)         runprog('COPY:R          ',cyclus,drive);
                 145 ( 2266)       end
                 146 ( 2266)     end else begin  { not a library }
                 147 ( 2269)       setsubtype('R');
                 148 ( 2277)       setargs(fname,0,0,1);
                 149 ( 2295)       runprog('COPY:R          ',cyclus,drive);
                 150 ( 2327)     end;
                 151 ( 2327)     if (filerr<>0) or (runerr<>0) then begin
                 152 ( 2340)       ok:=false;
                 153 ( 2345)       if filerr=6 then
                 154 ( 2354)         writeln(invvid,
                 155 ( 2360)              'Object file not found',norvid)
                 156 ( 2385)       else
                 157 ( 2392)         writeln(invvid,'Copy failed',norvid);
                 158 ( 2419)     end else begin {if successfull}
                 159 ( 2422)       { delete the original file }
                 160 ( 2422)       setargi(0,8);
                 161 ( 2432)       writeln('Deleting the original file(s)');
                 162 ( 2468)       drive:=0; filerr:=0;
                 163 ( 2476)       runprog('DELETE:R        ',cyclus,drive);
                 164 ( 2512)       if (filerr<>0) or (runerr<>0) then begin
                 165 ( 2525)         writeln(invvid,
                 166 ( 2530)           'Deleting original failed',norvid);
                 167 ( 2565)         ok:=false;
                 168 ( 2567)       end;
                 169 ( 2571)       if libflag then begin
                 170 ( 2575)         setsubtype('L');
                 171 ( 2586)         setargs(fname,0,0,1);
                 172 ( 2604)         runprog('DELETE:R        ',cyclus,drive);
                 173 ( 2636)         if (filerr<>0) or (runerr<>0) then begin
                 174 ( 2649)           writeln(invvid,
                 175 ( 2654)             'Deleting original failed',norvid);
                 176 ( 2689)           ok:=false;
                 177 ( 2691)         end;
                 178 ( 2695)       end;
                 179 ( 2695)       { clean the destination drive }

----------------------------------------------------------------------

R65 Pascal program PUTOBJECT       8/11/23     page 4

                 180 ( 2695)       setargi(0,0);
                 181 ( 2705)       argtype[1]:=chr(0);
                 182 ( 2709)       cyclus:=0; drive:=0; filerr:=0;
                 183 ( 2730)       runprog('CLEAN:R         ',cyclus,drive);
                 184 ( 2766)       if (filerr<>0) or (runerr<>0) then
                 185 ( 2778)          ok:=false;
                 186 ( 2784)       { pack the destination drive }
                 187 ( 2788)       setargi(0,0);
                 188 ( 2798)       argtype[1]:=chr(0);
                 189 ( 2802)       cyclus:=0; drive:=0; filerr:=0;
                 190 ( 2823)       runprog('PACK:R          ',cyclus,drive);
                 191 ( 2859)       if (filerr<>0) or (runerr<>0) then
                 192 ( 2871)          ok:=false;
                 193 ( 2877)     end;
                 194 ( 2881)   end;
                 195 ( 2881)   if (not ok) or (runerr<>0) then begin
                 196 ( 2893)     writeln(invvid,'Putobject failed',norvid);
                 197 ( 2925)     filerr:=0; runerr:=0;
                 198 ( 2933)   end;
                 199 ( 2937) end.
                 200 ( 2937) 

End compile

Code lenght:          2936
Compiler stack size:  68
Ident stack size:     92
Pascal errors:        0

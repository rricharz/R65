
R65 COMPILE 4.2: program COMPILE1         11/2/24 page 1


   1 (    4) {   ********************************
   2 (    4)     *                              *
   3 (    4)     *  R65 "Tiny" Pascal Compiler  *
   4 (    4)     *            Pass 1            *
   5 (    4)     *                              *
   6 (    4)     ********************************
   7 (    4) 
   8 (    4) First version 1978 by rricharz
   9 (    4) Version 3.7 (20K)  01/08/82 rricharz
  10 (    4) 
  11 (    4) Recovered 2018 by rricharz (r77@bluewin.ch)
  12 (    4) Improved 2018-2024 by rricharz
  13 (    4) Version 4 with cpnt strings and exit statement
  14 (    4) Version 4.3 with include compiler directive
  15 (    4) 
  16 (    4) Original derived from the publication by
  17 (    4) Kin-Man Chung and Herbert Yen in
  18 (    4) Byte, Volume 3, Number 9 and Number 10, 1978
  19 (    4) 
  20 (    4) Adapted for the R65 computer system and
  21 (    4) substantially enhanced by rricharz 1978-2023
  22 (    4) 
  23 (    4) This is a Pascal derivative optimized for 8-bit
  24 (    4) microprocessors (integer type is 16 bit) with
  25 (    4) additional features (mem) to interact directly
  26 (    4) with the microprocessor hardware. Only one
  27 (    4) dimensional arrays and no records or user
  28 (    4) defined types. Floating point numbers (real)
  29 (    4) and file io to floppy disks are supported.
  30 (    4) 
  31 (    4) Precompiled libraries are merged in the loader.
  32 (    4) The table of reserved words and the library
  33 (    4) tables are loaded from the same drive as
  34 (    4) the compiler.
  35 (    4) 
  36 (    4) The output of the program is a loader file for
  37 (    4) the Pascal loader (compile2).
  38 (    4) 
  39 (    4) usage:
  40 (    4)  compile1 name[.cy[,drv]] [xxx]
  41 (    4)   where x:       l,p: no hard copy print
  42 (    4)                  i,r: index bound checking
  43 (    4)                  n: no loader file
  44 (    4)   [] means not required
  45 (    4) 
  46 (    4) The compiler uses 2 fixed memory areas to store
  47 (    4) the table of reserved words and the table of
  48 (    4) idents. The top of the Pascal stack (endstk) is
  49 (    4) adjusted accordingly. The reason for this hack
  50 (    4) is speed and convenience. A normal Pascal array
  51 (    4) of chars would store the chars as 16 bit
  52 (    4) numers and would therefore require twice the
  53 (    4) space. An array of packed chars would require
  54 (    4) more coding and slow the scanner module of the
  55 (    4) compiler down.                                }
  56 (    4) 
  57 (    4) program compile1;
  58 (    4) 
  59 (    4) uses syslib, arglib;
  60 ( 1093) 
  61 ( 1093) const version='4.3';
  62 ( 1100) 
  63 ( 1100)     table     =$97ff; {user ident table -1}
  64 ( 1100)     idtab     =$95ff; {resword table -1}
  65 ( 1100)     idlength  =64;    {max. length of ident}
  66 ( 1100)     stacksize =256;   {stack size}
  67 ( 1100)     pagelenght=60;    {no of lines per page}
  68 ( 1100)     nooutput  =@0;
  69 ( 1100)     maxfi     =3;     {max number of ins fls}
  70 ( 1100) 
  71 ( 1100)     nresw=63;   {number of res. words, max 64}
  72 ( 1100)     symbsize=256;     {id table entries}
  73 ( 1100)     reswtabpos=$c600; { up to $c7ff }
  74 ( 1100)     idtabpos=$be00;   { up to $c5ff }
  75 ( 1100) 
  76 ( 1100)     yesoutput=@255;
  77 ( 1100) 
  78 ( 1100) mem endstk  =$000e: integer;
  79 ( 1100)     reswtab =reswtabpos: array[$200] of char&;
  80 ( 1100)     idtab   =idtabpos: array[$800] of char&;
  81 ( 1100) 
  82 ( 1100) var tpos,pc,level,line,offset,dpnt,spnt,fipnt,
  83 ( 1100)     npara,i,stackpnt,stackmax,spntmax,numerr,
  84 ( 1100)     lineinc,linepage                 :integer;
  85 ( 1100) 
  86 ( 1100)     scyclus,sdrive,cdrive: integer;
  87 ( 1100) 
  88 ( 1100)     pname: array[15] of char;
  89 ( 1100) 
  90 ( 1100)     value: array[1] of integer;
  91 ( 1100) 
  92 ( 1100)     ch,restype,vartype:char;
  93 ( 1100) 
  94 ( 1100)     token: packed char;
  95 ( 1100) 
  96 ( 1100)     prt,libflg,icheck,ateof,lineflg,nlflg: boolean;
  97 ( 1100) 
  98 ( 1100)     fno,ofno,savefno: file;
  99 ( 1100) 
 100 ( 1100)     filstk: array[maxfi] of file;
 101 ( 1100) 
 102 ( 1100)     ident: array[idlength] of char;
 103 ( 1100)     { Only the first 8 characters are
 104 ( 1100)       used to find and differentiate ids }
 105 ( 1100) 
 106 ( 1100)     t0: array[symbsize] of packed char;
 107 ( 1100)            {type of symbol}
 108 ( 1100) 
 109 ( 1100)         {High letter:
 110 ( 1100)          a:array, c:constant, d;const parameter
 111 ( 1100)          e:constant array parameter, f:function
 112 ( 1100)          g:array function, h;8-bit memory var
 113 ( 1100)          i:8-bit array memory variable
 114 ( 1100)          m:16-bit memory variable
 115 ( 1100)          n:16-bit array memory variable
 116 ( 1100)          p:procedure
 117 ( 1100)          q:indexed cpnt
 118 ( 1100)          r,t:function result
 119 ( 1100)          s,u:array function result
 120 ( 1100)          v:variable, w:variable parameter
 121 ( 1100)          x:variable array parameter
 122 ( 1100) 
 123 ( 1100)          Low letter:
 124 ( 1100)          i:integer, c:char, p:packed char
 125 ( 1100)          q:cpnt (pointer to chars)
 126 ( 1100)          r:real(array multiple of two)
 127 ( 1100)          s:const cpnt
 128 ( 1100)          f:file, b:boolean, u:undefined  }
 129 ( 1100) 
 130 ( 1100)     t1: array[symbsize] of integer;
 131 ( 1100)          {level}
 132 ( 1100)     t2: array[symbsize] of integer;
 133 ( 1100)          {val,dis,addr}
 134 ( 1100)     t3: array[symbsize] of integer;
 135 ( 1100)          {stack pointer,size of array}
 136 ( 1100) 
 137 ( 1100)     reswcod:array[nresw] of packed char;
 138 ( 1100) 
 139 ( 1100)     stack: array[stacksize] of integer;
 140 ( 1100) 
 141 ( 1100) 
 142 ( 1100) {       * savebyte *    (global)        }
 143 ( 1100) 
 144 ( 1100) proc savebyte(x: integer);
 145 ( 1100) 
 146 ( 1100) begin
 147 ( 1100)     if ofno<>nooutput then begin
 148 ( 1112)       write(@ofno,
 149 ( 1115)         chr(((x and 255) shr 4)+ord('0')));
 150 ( 1136)       write(@ofno,chr((x and 15)+ord('0')))
 151 ( 1151)     end
 152 ( 1154) end {savebyte};
 153 ( 1154) 
 154 ( 1155) {       * crlf *        (global)        }
 155 ( 1155) 
 156 ( 1155) proc newpage; forward;
 157 ( 1158) 
 158 ( 1158) proc crlf;
 159 ( 1158)   var i: integer;
 160 ( 1161) begin
 161 ( 1161)   writeln;
 162 ( 1163)   line:=succ(line); lineinc:=succ(lineinc);
 163 ( 1182)   linepage:=succ(linepage);
 164 ( 1191)   if ((linepage div pagelenght)
 165 ( 1202)     * pagelength)=linepage then newpage;
 166 ( 1218) end {crlf};
 167 ( 1218) 
 168 ( 1219) {       error message   (global)        }
 169 ( 1219) 
 170 ( 1219) proc merror(x: integer; code: packed char);
 171 ( 1219) 
 172 ( 1219) var i: integer;
 173 ( 1222)     answer: char;
 174 ( 1222) 
 175 ( 1222) begin
 176 ( 1222)   crlf; numerr:=succ(numerr);
 177 ( 1232)   for i:=2 to tpos do write(' ');
 178 ( 1258)   write('^'); crlf;
 179 ( 1278)   write('*** (',numerr,',',pc,')   ');
 180 ( 1301)   case x of
 181 ( 1301)     01: write('Ident');
 182 ( 1318)     02: write('Ident ',code,' expected');
 183 ( 1354)     03: write('Var declaration');
 184 ( 1380)     04: write('Const expected');
 185 ( 1405)     05: write('Ident unknown');
 186 ( 1429)     06: write('Cannot be assigned');
 187 ( 1458)     07: write('Symbol table overflow');
 188 ( 1490)     08: write('Stack overflow');
 189 ( 1515)     09: write('Expression');
 190 ( 1536)     10: write('Statement');
 191 ( 1556)     11: write('Declaration');
 192 ( 1578)     12: write('Constant');
 193 ( 1597)     13: write('Forward reference: ',code);
 194 ( 1636)     14: write('Type mismatch: ',code);
 195 ( 1671)     15: write('Array size');
 196 ( 1692)     16: write('Array (8-bit)');
 197 ( 1716)     17: write('Real');
 198 ( 1731)     18: write('File table overflow');
 199 ( 1761)     19: write('Parameter');
 200 ( 1781)     20: write('Compiler directive syntax');
 201 ( 1817)     21: write('Nested include files');
 202 ( 1848)     22: write('Unexpected eof')
 203 ( 1873)   end {case};
 204 ( 1875)   writeln;
 205 ( 1875)   write('Continue?');
 206 ( 1891)   read(@key,answer);
 207 ( 1899)   if answer<>'Y' then begin
 208 ( 1907)     crlf; write(prtoff); setemucom(9); close(fno);
 209 ( 1931)     if (ofno<>nooutput) and (ofno<>yesoutput)
 210 ( 1944)       then close(ofno);
 211 ( 1955)     writeln('Aborting compile1 on request');
 212 ( 1990)     abort
 213 ( 1990)   end
 214 ( 1994)   else crlf;
 215 ( 2001)   if (ofno<>nooutput) and (ofno<>yesoutput)
 216 ( 2014)     then close(ofno);
 217 ( 2025)   ofno:=nooutput;
 218 ( 2027) end {merror};
 219 ( 2031) 
 220 ( 2032) proc error(x: integer);
 221 ( 2032) 
 222 ( 2032) begin
 223 ( 2032)   merror(x,'##')
 224 ( 2044) end;
 225 ( 2050) 
 226 ( 2051) {       * push & pop *  (global) }
 227 ( 2051) 
 228 ( 2051) proc push(x: %integer);
 229 ( 2051) 
 230 ( 2051) begin
 231 ( 2051)   if stackpnt>=stacksize then error(8)
 232 ( 2069)   else stackpnt:=succ(stackpnt);
 233 ( 2082)   if stackpnt>stackmax then stackmax:=stackpnt;
 234 ( 2099)   stack[stackpnt]:=x;
 235 ( 2111) end {push};
 236 ( 2119) 
 237 ( 2120) func pop: integer;
 238 ( 2120) 
 239 ( 2120) begin
 240 ( 2120)   pop:=stack[stackpnt];
 241 ( 2129)   stackpnt:=prec(stackpnt)
 242 ( 2137) end {pop};
 243 ( 2146) 
 244 ( 2147) {       * newpage *     (global) }
 245 ( 2147) 
 246 ( 2147) proc newpage;
 247 ( 2147) 
 248 ( 2147) var i: integer;
 249 ( 2150) 
 250 ( 2150) begin
 251 ( 2150)   if ((linepage)<>0) and prt then
 252 ( 2159)     write(@printer,formfeed);
 253 ( 2174)   writeln; { Do not count this line}
 254 ( 2180)   if pname[0]<>'x' then begin
 255 ( 2189)     write('R65 COMPILE ');
 256 ( 2205)     write(version);
 257 ( 2210)     if libflg then write(': library ')
 258 ( 2228)     else write(': program ');
 259 ( 2242)     prtext16(output,pname);
 260 ( 2256)   end;
 261 ( 2256)   write(' ');
 262 ( 2258)   prtdate(output);
 263 ( 2266)   writeln(' page ',
 264 ( 2273)     (linepage div pagelenght)+1);
 265 ( 2290)   writeln;
 266 ( 2290) end {newpage};
 267 ( 2296) 
 268 ( 2297) {        * code1 *      (global) }
 269 ( 2297) 
 270 ( 2297) proc code1(x: %integer);  {set one byte p-code}
 271 ( 2297) begin
 272 ( 2297)   savebyte(x); pc:=succ(pc)
 273 ( 2312) end;
 274 ( 2321) 
 275 ( 2322) {       * writenum *      (global) }
 276 ( 2322) 
 277 ( 2322) proc writenum(i: integer);
 278 ( 2322) begin
 279 ( 2322)   if i<=999 then write(' ');
 280 ( 2340)   if i<=99 then write(' ');
 281 ( 2352)   if i<=9 then write(' ');
 282 ( 2364)   write(i);
 283 ( 2369) end;
 284 ( 2369) 
 285 ( 2370) {       * nextline *      (global) }
 286 ( 2370) 
 287 ( 2370) proc nextline;
 288 ( 2370) begin
 289 ( 2370)   nlflg:=true;
 290 ( 2377)   if savefno=@0 then writenum(line)
 291 ( 2391)   else begin
 292 ( 2404)     write('{I} ');
 293 ( 2409)     line:=line-1; { do not count line }
 294 ( 2420)     writenum(lineinc);
 295 ( 2430)   end;
 296 ( 2430)   write(' (');
 297 ( 2433)   if (pc+2)<9999 then write(' ');
 298 ( 2449)   writenum(pc+2); write(') ');
 299 ( 2465) end;
 300 ( 2465) 
 301 ( 2466) {       * getchr *      (global) }
 302 ( 2466) 
 303 ( 2466) proc getchr;
 304 ( 2466) begin
 305 ( 2466)   if ateof then begin
 306 ( 2475)     if savefno<>@0 then begin
 307 ( 2485)       { end of include file, close it }
 308 ( 2488)       close(fno);
 309 ( 2494)       fno:=savefno;
 310 ( 2494)       { switch back to normal input file }
 311 ( 2502)       savefno:=@0;
 312 ( 2504)       ateof:=false;
 313 ( 2510)       if ch=cr then ch:=' ';
 314 ( 2526)     end else begin
 315 ( 2533)       error(22);
 316 ( 2541)       abort
 317 ( 2541)     end
 318 ( 2545)   end else begin
 319 ( 2548)     read(@fno,ch);
 320 ( 2558)     if ch=cr then begin
 321 ( 2566)       crlf;
 322 ( 2573)       nextline;
 323 ( 2577)       ch:=' ';
 324 ( 2579)     end {if}
 325 ( 2583)     else if ch=eof then begin
 326 ( 2593)       ateof:=true;
 327 ( 2598)       { we need to suppy one more char }
 328 ( 2602)       { for end. at end of file to work properly }
 329 ( 2602)       ch:=' ';
 330 ( 2604)     end {else if}
 331 ( 2608)     else write(ch);
 332 ( 2616)   end;
 333 ( 2616) end {getchr};
 334 ( 2616) 
 335 ( 2617) {       * splitconv *   (global) }
 336 ( 2617) 
 337 ( 2617) proc splitconv(a: array[1] of %integer;
 338 ( 2617)   var b:array[1] of %integer);
 339 ( 2617) 
 340 ( 2617) begin
 341 ( 2617)   b:=a;
 342 ( 2622) end;
 343 ( 2634) 
 344 ( 2635) {       * init *        (global) }
 345 ( 2635) 
 346 ( 2635) proc init;
 347 ( 2635) 
 348 ( 2635) const char96=chr(20);
 349 ( 2638) 
 350 ( 2638) var i,j,dummy: integer;
 351 ( 2638)     dch: char;
 352 ( 2638)     pch: packed char;
 353 ( 2638)     request: array[15] of char;
 354 ( 2638)     default: boolean;
 355 ( 2638) 
 356 ( 2638) begin {init}
 357 ( 2638)   writeln('R65 PASCAL COMPILER version ', version,
 358 ( 2672)     ', Pass  1');
 359 ( 2690)   ateof:=false; savefno:=@0;
 360 ( 2698)   cdrive:=fildrv; { drive of compile program }
 361 ( 2709)   fipnt:=-1;
 362 ( 2711)   endstk:=idtabpos-144;
 363 ( 2721)   pc:=2; dpnt:=0; spnt:=0; offset:=2;
 364 ( 2745)   npara:=0; level:=0;
 365 ( 2757)   stackpnt:=0; libflg:=false;
 366 ( 2769)   stackmax:=0;spntmax:=0; numerr:=0;
 367 ( 2787)   t0[0]:='vi'; t1[0]:=0; t2[0]:=0; t3[0]:=0;
 368 ( 2820)   { prepare resword table }
 369 ( 2824)   writeln('Reading list of reserved words');
 370 ( 2861)   asetfile('RESWORDS:W      ',0,cdrive,'W');
 371 ( 2893)   openr(fno);
 372 ( 2899)   for i:=0 to nresw do begin
 373 ( 2916)     read(@fno,pch,dch);
 374 ( 2933)     reswcod[i]:=pch;
 375 ( 2938)     for j:=0 to 7 do reswtab[8*i+j]:=' ';
 376 ( 2977)     j:=0;
 377 ( 3000)     while (j<8) and (dch<>cr) do begin
 378 ( 3022)       read(@fno,dch);
 379 ( 3032)       if (dch<>cr) then
 380 ( 3040)         reswtab[8*i+j]:=dch;
 381 ( 3055)       j:=succ(j)
 382 ( 3066)     end;
 383 ( 3075)     while (dch<>cr) and (dch<>eof) do
 384 ( 3092)       read(@fno,dch)
 385 ( 3101)   end;
 386 ( 3110)   close(fno);
 387 ( 3130) 
 388 ( 3130)   writeln;
 389 ( 3130) 
 390 ( 3136)   sdrive:=1; {default drive for source }
 391 ( 3142)   scyclus:=0;
 392 ( 3144)   agetstring(pname,default,scyclus,sdrive);
 393 ( 3188) 
 394 ( 3188)   agetstring(request,default,dummy,dummy);
 395 ( 3228)   icheck:=false;
 396 ( 3230)   prt:=true; ofno:=yesoutput; lineflg:=false;
 397 ( 3248)   if not default then begin
 398 ( 3257)     if request[0]<>'/' then argerror(103);
 399 ( 3280)     for i:=1 to 8 do
 400 ( 3288)       case request[i] of
 401 ( 3301)         'P': prt:=false;
 402 ( 3314)         'L': lineflg:=true;
 403 ( 3330)         'I','R': icheck:=true;
 404 ( 3353)         'N': ofno:=nooutput;
 405 ( 3369)         ' ': begin end
 406 ( 3383)         else argerror(104)
 407 ( 3388)       end; {case}
 408 ( 3410)   end;
 409 ( 3410) 
 410 ( 3410)   asetfile(pname,scyclus,sdrive,'P');
 411 ( 3432)   openr(fno);
 412 ( 3438)   scyclus:=filcyc; { may have changed }
 413 ( 3446) 
 414 ( 3446)   {save cyclus and drive for compile2}
 415 ( 3446)   arglist[8]:=scyclus;
 416 ( 3448)   arglist[9]:=sdrive;
 417 ( 3462)   numarg:=1;
 418 ( 3476) 
 419 ( 3480)   if prt then begin
 420 ( 3484)     write(prton);
 421 ( 3490)     setemucom(8);
 422 ( 3498)   end
 423 ( 3498) 
 424 ( 3498)   line:=0; lineinc:=0; linepage:=0;
 425 ( 3512)   newpage; crlf; line:=1; linepage:=1;
 426 ( 3532)   write('   1 (    4) '); getchr
 427 ( 3550) end {init};
 428 ( 3554) 
 429 ( 3555) 
 430 ( 3555) { ############################# }
 431 ( 3555) {       *scan*              (global)    }
 432 ( 3555) { ############################# }
 433 ( 3555) { scan input and make tokens }
 434 ( 3555) 
 435 ( 3555) proc scan;
 436 ( 3555) 
 437 ( 3555) var count,ll,hh,i,i1,co: integer;
 438 ( 3558)     name: array[7] of char;
 439 ( 3558) 
 440 ( 3558) {       * compresw*     (of scan)       }
 441 ( 3558) 
 442 ( 3558) func compresw(index: integer);
 443 ( 3558) 
 444 ( 3558) var addr,ci,i: integer;
 445 ( 3561) 
 446 ( 3561) begin
 447 ( 3561)   addr:=8*index; i:=0;
 448 ( 3576)   repeat
 449 ( 3580)     ci:=ord(ident[i+1])-ord(reswtab[addr+i]);
 450 ( 3605)     i:=succ(i)
 451 ( 3610)   until (ci<>0) or (i>=8);
 452 ( 3633)   compresw:=ci
 453 ( 3637) end {compresw};
 454 ( 3645) 
 455 ( 3646) {       * clear *       (of scan)              }
 456 ( 3646) 
 457 ( 3646) proc clear; {clears 8 chars of identifier}
 458 ( 3646) 
 459 ( 3646) var i: integer;
 460 ( 3649) 
 461 ( 3649) begin
 462 ( 3649)   for i:=1 to 8 do ident[i]:=' '
 463 ( 3672) end;
 464 ( 3692) 
 465 ( 3693) {       * pack *        (of scan)              }
 466 ( 3693) 
 467 ( 3693) proc pack;  {packs token and ch to token }
 468 ( 3693) 
 469 ( 3693) begin
 470 ( 3693)   token:=packed(low(token),ch); getchr
 471 ( 3712) end;
 472 ( 3716) 
 473 ( 3717) {       * setval *      (of scan)              }
 474 ( 3717) 
 475 ( 3717) proc setval;
 476 ( 3717) 
 477 ( 3717) var r: real;
 478 ( 3720)     n,n1: integer;
 479 ( 3720)     ems: boolean;
 480 ( 3720) 
 481 ( 3720)   func times10(r:real):real;
 482 ( 3720)   { slightly more accurate than 10.0*r }
 483 ( 3720)   var r2,r4:real;
 484 ( 3723)   begin
 485 ( 3723)     r2:=r+r;
 486 ( 3731)     r4:=r2+r2;
 487 ( 3750)     times10:=r2+r4+r4;
 488 ( 3776)   end;
 489 ( 3789) 
 490 ( 3790) begin
 491 ( 3790)   r:=0.0;
 492 ( 3798)   repeat
 493 ( 3804)     r:=times10(r)+conv(ord(ch)-ord('0'));
 494 ( 3825)     getchr;
 495 ( 3837)   until (ch<'0') or (ch>'9');
 496 ( 3851)   if ch<>'.' then begin {numeric integer}
 497 ( 3865)     token:='nu';
 498 ( 3868)     value[0]:=trunc(r+0.5);
 499 ( 3887)   end
 500 ( 3892)   else begin {numeric real}
 501 ( 3895)     n:=0; getchr;
 502 ( 3905)     while (ch<='9') and (ch>='0') do begin
 503 ( 3923)       r:=times10(r)+conv(ord(ch)-ord('0'));
 504 ( 3944)       n:=prec(n); getchr
 505 ( 3961)     end;
 506 ( 3965)     if ch='e' then begin
 507 ( 3975)       ems:=false; getchr;
 508 ( 3988)       case ch of
 509 ( 3988)         '+': getchr;
 510 ( 4003)         '-': begin ems:=true; getchr end
 511 ( 4023)       end;
 512 ( 4025)       if (ch>'9') or (ch<'0') then error(17)
 513 ( 4045)       else begin
 514 ( 4054)         n1:=ord(ch)-ord('0');
 515 ( 4060)         getchr;
 516 ( 4069)         if (ch<='9') and (ch>='0') then begin
 517 ( 4084)           n1:=10*n1+ord(ch)-ord('0');
 518 ( 4101)           getchr
 519 ( 4106)         end;
 520 ( 4110)         if ems then n:=n-n1 else n:=n+n1
 521 ( 4137)       end
 522 ( 4137)     end;
 523 ( 4146)     while n>0 do begin
 524 ( 4156)       n:=prec(n);
 525 ( 4160)       r:=times10(r);
 526 ( 4179)     end;
 527 ( 4185)     while n<0 do begin
 528 ( 4198)       n:=succ(n); r:=0.1*r;
 529 ( 4213)     end;
 530 ( 4226)     splitconv(r,value);
 531 ( 4253)     token:='ru'
 532 ( 4253)   end
 533 ( 4256) end {setval};
 534 ( 4260) 
 535 ( 4261) {       * directive *   (of scan               }
 536 ( 4261) 
 537 ( 4261) proc directive;
 538 ( 4261) var i,icyclus:integer;
 539 ( 4264)     name: array[15] of char;
 540 ( 4264) begin
 541 ( 4264)   getchr;
 542 ( 4270)   case ch of
 543 ( 4270)     'I': begin
 544 ( 4281)            if savefno<>@0 then error(21);
 545 ( 4299)            getchr; if ch<>' ' then error(20);
 546 ( 4321)            i:=0; getchr;
 547 ( 4331)            while (ch<>'}') and (i<16) do begin
 548 ( 4349)              name[i]:=ch; i:=i+1; getchr;
 549 ( 4376)            end;
 550 ( 4376)            while (i<16) do begin
 551 ( 4389)              name[i]:=' '; i:=i+1;
 552 ( 4405)            end;
 553 ( 4410)            icyclus:=0;
 554 ( 4415)            asetfile(name,icyclus,sdrive,'P');
 555 ( 4441)            savefno:=fno;
 556 ( 4441)            openr(fno);
 557 ( 4455)            lineinc:=0;
 558 ( 4457)            crlf;
 559 ( 4465)            nextline;
 560 ( 4469)            getchr; scan;
 561 ( 4477)          end
 562 ( 4477)     else error(20)
 563 ( 4482)   end {case}
 564 ( 4490) end;
 565 ( 4490) 
 566 ( 4491) {       * setid *       (of scan)              }
 567 ( 4491) 
 568 ( 4491) proc setid; {sets one char to ident}
 569 ( 4491) 
 570 ( 4491) begin
 571 ( 4491)   if count<=idlength then begin
 572 ( 4503)     ident[count]:=ch; count:=succ(count)
 573 ( 4518)   end;
 574 ( 4527)   getchr;
 575 ( 4531) end {setid};
 576 ( 4531) 
 577 ( 4532) begin { ***** body of scan ***** }
 578 ( 4532)   count:=1; while ch=' ' do getchr;
 579 ( 4554)   tpos:=curpos;
 580 ( 4560) 
 581 ( 4564)   { delayed because of token lookahead }
 582 ( 4564)   if nlflg then begin
 583 ( 4568)     if lineflg and (pc>2) then begin
 584 ( 4583)       code1($59);
 585 ( 4594)       code1((line) and 255);
 586 ( 4607)       code1((line) shr 8);
 587 ( 4620)     end;
 588 ( 4620)     nlflg:=false;
 589 ( 4622)   end;
 590 ( 4626) 
 591 ( 4626)   if (ch<'a') or (ch>'z') then begin {main if}
 592 ( 4644)     if (ch<'0') or (ch>'9') then begin {symb}
 593 ( 4662)       token:=packed(' ',ch); getchr;
 594 ( 4677)       case low(token) of
 595 ( 4681)         '<': if (ch='=') or (ch='>') then pack;
 596 ( 4711)         '>',':': if (ch='=') then pack;
 597 ( 4742)         '{': begin
 598 ( 4752)                if ch='$' then directive
 599 ( 4759)                else begin
 600 ( 4769)                  if ch<>'}' then
 601 ( 4775)                  repeat getchr until ch='}';
 602 ( 4789)                  getchr; scan
 603 ( 4797)                end
 604 ( 4801)              end;
 605 ( 4801)         '$': begin {hex constant}
 606 ( 4811)                token:='nu'; value[0]:=0;
 607 ( 4822)                while ((ch>='0')and(ch<='9'))
 608 ( 4840)                      or((ch>='a')and(ch<='f'))
 609 ( 4855)                      do begin
 610 ( 4860)                  if ch>'9' then
 611 ( 4866)                    value[0]:=(value[0] shl 4)
 612 ( 4880)                      +ord(ch)-ord('a')+10
 613 ( 4889)                  else
 614 ( 4891)                    value[0]:=(value[0] shl 4)
 615 ( 4909)                      +ord(ch)-ord('0');
 616 ( 4917)                  getchr
 617 ( 4922)                end {do}
 618 ( 4926)              end; {hex constant}
 619 ( 4932)         chr(39): begin {string}
 620 ( 4939)                token:='st';
 621 ( 4942)                repeat setid until ch=chr(39);
 622 ( 4956)                value[0]:=prec(count); getchr
 623 ( 4972)               end
 624 ( 4976)       end {case of token}
 625 ( 4978)     end {special symbols}
 626 ( 4978)     else setval {numeric value}
 627 ( 4985)   end {main if}
 628 ( 4985)   else begin {ident}
 629 ( 4988)     clear;
 630 ( 4992)     repeat
 631 ( 4992)       setid
 632 ( 4992)       until (ch<'0') or (ch>'z') or
 633 ( 5010)         ((ch>'9') and (ch<'A')) or
 634 ( 5026)         ((ch>'Z') and (ch<'a'));
 635 ( 5042)     ll:=0; hh:=nresw; {look up in resword table}
 636 ( 5058)     repeat
 637 ( 5058)       i:=(ll+hh) shr 1; co:=compresw(i);
 638 ( 5086)       if (co<0) then hh:=prec(i)
 639 ( 5100)       else ll:=succ(i);
 640 ( 5116)       until (co=0) or (ll>hh);
 641 ( 5137)     if (co=0) then
 642 ( 5148)       token:=reswcod[i] {reserved word found}
 643 ( 5155)     else token:='id' {ident}
 644 ( 5169)   end {odent}
 645 ( 5173) end {scan};
 646 ( 5173) 
 647 ( 5174) { * testto/parse * }
 648 ( 5174) 
 649 ( 5174) { parce source for specific token; else error }
 650 ( 5174) 
 651 ( 5174) proc testto(x: packed char); { current token }
 652 ( 5174) begin
 653 ( 5174)   if token<>x then merror(2,x)
 654 ( 5193) end;
 655 ( 5203) 
 656 ( 5204) proc parse(x: packed char); { next token }
 657 ( 5204) begin
 658 ( 5204)   scan; testto(x);
 659 ( 5223) end;
 660 ( 5223) 
 661 ( 5224) { * getlib * }
 662 ( 5224) 
 663 ( 5224) proc getlib;  { read library data }
 664 ( 5224) 
 665 ( 5224) var i,j,nent,addr,size,num,x,base: integer;
 666 ( 5227)     libfil: file;
 667 ( 5227)     ch,ltyp2,dummy: char;
 668 ( 5227)     name: array[7] of char;
 669 ( 5227) 
 670 ( 5227) begin
 671 ( 5227)   scan; if token=' ,' then scan;
 672 ( 5248)   testto('id');
 673 ( 5257)   base:=pc-2;
 674 ( 5263)   if (ofno<>nooutput) then write(@ofno,'L');
 675 ( 5286)   for i:=0 to 7 do begin
 676 ( 5303)     name[i]:=ident[succ(i)];
 677 ( 5312)     if ofno<>nooutput then
 678 ( 5326)       write(@ofno,ident[succ(i)])
 679 ( 5340)   end;
 680 ( 5346)   write(prtoff);
 681 ( 5363)   asetfile(name&'        ',0,cdrive,'L');
 682 ( 5393)   openr(libfil);  { get table file }
 683 ( 5399)   read(@libfil,nent,size);
 684 ( 5414)   {including cr,lf}
 685 ( 5415)   for i:=succ(spnt) to spnt+nent do begin
 686 ( 5442)     if spnt>symbsize then error(7);
 687 ( 5461)     spnt:=succ(spnt); addr:=8*i+1;
 688 ( 5479)     for j:=0 to 7 do begin
 689 ( 5501)       read(@libfil,ch);
 690 ( 5511)       idtab[addr+j]:=ch
 691 ( 5521)     end;
 692 ( 5532)     read(@libfil,ch);
 693 ( 5556)     read(@libfil,t0[i],dummy,t1[i],t2[i],t3[i]);
 694 ( 5605)     t1[i]:=t1[i]+level;
 695 ( 5618)     ltyp2:=high(t0[i]);
 696 ( 5635)     if (ltyp2='p')or(ltyp2='f')
 697 ( 5653)       or(ltyp2='g') then begin
 698 ( 5663)       t2[i]:=t2[i]+base;
 699 ( 5678)       if t3[i]<>0 then begin {stack data}
 700 ( 5701)         read(@libfil,num);
 701 ( 5711)         push(num); t3[i]:=stackpnt;
 702 ( 5726)         for j:=1 to num do begin
 703 ( 5753)           read(@libfil,x);
 704 ( 5763)           push(x);
 705 ( 5774)         end {for j};
 706 ( 5774)       end {stack data}
 707 ( 5788)     end {if ltyp2}
 708 ( 5788)   end {for i}
 709 ( 5788)   level:=succ(level); pc:=pc+size; offset:=pc;
 710 ( 5824)   close(libfil);
 711 ( 5838)   if spnt>spntmax then spntmax:=spnt;
 712 ( 5850)   if stackpnt>stackmax then stackmax:=stackpnt;
 713 ( 5870)   if prt then write(prton);
 714 ( 5888) end {getlib};
 715 ( 5888) 
 716 ( 5889) 
 717 ( 5889) { #################################### }
 718 ( 5889) {       * block * (global): handle one block }
 719 ( 5889) { #################################### }
 720 ( 5889) 
 721 ( 5889) 
 722 ( 5889) proc block(bottom: integer);
 723 ( 5889) 
 724 ( 5889) var l,f9,i,n,stackpn1,forwpn,find,cproc,
 725 ( 5892)     spnt1,dpnt1,parlevel: integer;
 726 ( 5892)     fortab: array[8] of integer;
 727 ( 5892) 
 728 ( 5892) { * find ident *    (of block) }
 729 ( 5892) { this is a fast version for compiler speed }
 730 ( 5892) 
 731 ( 5892) func findid; {search in table for id }
 732 ( 5892) 
 733 ( 5892) var k,i: integer;
 734 ( 5895)     id1: char;
 735 ( 5895) 
 736 ( 5895) begin
 737 ( 5895) 
 738 ( 5895)   i:=1; k:=8*spnt+9; id1:=ident[1];
 739 ( 5919) 
 740 ( 5927)   repeat
 741 ( 5927)     k:=k-8;
 742 ( 5933)     while (idtab[k]<>id1) and (k>0) do k:=k-8;
 743 ( 5969)     if k>0 then begin
 744 ( 5984)        i:=1;
 745 ( 5989)        repeat i:=succ(i)
 746 ( 5993)          until (i>8) or
 747 ( 6009)              (idtab[k+i-1]<>ident[i]);
 748 ( 6035)     end;
 749 ( 6039)     until (i>8) or (k<=0);
 750 ( 6053)   if k<=0 then begin
 751 ( 6064)     findid:=0;
 752 ( 6069)   end
 753 ( 6073)   else
 754 ( 6073)     findid:=(k-1) shr 3;
 755 ( 6085) end;
 756 ( 6090) 
 757 ( 6091) { * code2 *    (of block) }
 758 ( 6091) 
 759 ( 6091) proc code2(x,y: integer);
 760 ( 6091) begin
 761 ( 6091)   code1(x); code1(y);
 762 ( 6116) end;
 763 ( 6116) 
 764 ( 6117) { * code3 *    (of block) }
 765 ( 6117) 
 766 ( 6117) proc code3(x: integer; y1: %integer);
 767 ( 6117) 
 768 ( 6117) var y: integer;
 769 ( 6120) 
 770 ( 6120) begin {code3}
 771 ( 6120)   y:=y1;
 772 ( 6122)   if (x=34) and (y>=0) and (y<256) then
 773 ( 6153)     code2(32,y)
 774 ( 6159)   else begin
 775 ( 6172)     if (x=35) and (y>-128) and (y<=127) then
 776 ( 6195)       begin
 777 ( 6196)         if (y<0) then y:=y+256;
 778 ( 6216)         code2(33,y);
 779 ( 6233)       end
 780 ( 6233)     else begin
 781 ( 6236)       if (x>=36) and (x<=38) then y:=y-pc-1;
 782 ( 6265)       code1(x); code1(y and 255);
 783 ( 6293)       code1(y shr 8);
 784 ( 6306)     end
 785 ( 6306)   end
 786 ( 6306) end {code3};
 787 ( 6306) 
 788 ( 6307) { * testtype *      (of block) }
 789 ( 6307) 
 790 ( 6307) proc testtype(ttype: char);
 791 ( 6307) 
 792 ( 6307) begin
 793 ( 6307)   if restype<>ttype then
 794 ( 6316)     if (restype<>'u') and (ttype<>'u') then
 795 ( 6338)       merror(14,packed(ttype,restype));
 796 ( 6359) end;
 797 ( 6359) 
 798 ( 6360) { * putsym *   (of block) }
 799 ( 6360) 
 800 ( 6360) proc putsym(ltyp1,ltyp2: char);
 801 ( 6360) 
 802 ( 6360) var i,addr: integer;
 803 ( 6363) begin
 804 ( 6363)   if spnt>symbsize then error(7)
 805 ( 6378)   else spnt:=succ(spnt);
 806 ( 6391)   if spnt>spntmax then spntmax:=spnt;
 807 ( 6408)   t0[spnt]:=packed(ltyp1,ltyp2);
 808 ( 6429)   t3[spnt]:=0;
 809 ( 6439)   addr:=8*spnt;
 810 ( 6445)   for i:=1 to 8 do idtab[addr+i]:=ident[i];
 811 ( 6484)   if ltyp1='v' then begin
 812 ( 6516)     t2[spnt]:=dpnt; dpnt:=succ(dpnt);
 813 ( 6535)   end;
 814 ( 6540)   t1[spnt]:=level
 815 ( 6544) end {putsym};
 816 ( 6552) 
 817 ( 6553) { * checkindex *  (of block) }
 818 ( 6553) 
 819 ( 6553) proc checkindex(lowlim,highlim: integer);
 820 ( 6553) begin
 821 ( 6553)   if icheck then begin
 822 ( 6562)     code3($40,lowlim-1);
 823 ( 6580)     code2(highlim and 255, highlim shr 8)
 824 ( 6593)   end
 825 ( 6600) end;
 826 ( 6600) 
 827 ( 6601) { * getcon *      (of block) }
 828 ( 6601) 
 829 ( 6601) func getcon;
 830 ( 6601) 
 831 ( 6601) var idpnt,val,ii: integer;
 832 ( 6604)     rval: real;
 833 ( 6604)     sign: char;
 834 ( 6604) begin
 835 ( 6604)   restype:='i';
 836 ( 6608)   if token=' -' then begin
 837 ( 6620)     sign:='-'; scan
 838 ( 6629)   end else begin
 839 ( 6636)     sign:='+'; if token=' +' then scan
 840 ( 6650)   end;
 841 ( 6657)   case token of
 842 ( 6657)     'nu': val:=value[0];
 843 ( 6671)     'ru': begin val:=value[0];
 844 ( 6692)             restype:='r' end;
 845 ( 6706)     'st': if value[0]=1 then begin
 846 ( 6726)             restype:='c';
 847 ( 6731)             val:=ord(ident[1])
 848 ( 6737)           end else if value[0]=2 then begin
 849 ( 6757)             val:=(ord(ident[1]) shl 8) +
 850 ( 6769)               ord(ident[2]);
 851 ( 6775)             restype:='p';
 852 ( 6782)           end else if value[0]>2 then begin
 853 ( 6798)             val:=pc;
 854 ( 6801)             for ii:=1 to value[0] do
 855 ( 6817)                         code1(ord(ident[ii]));
 856 ( 6844)             code1(0); value[0]:=0; restype:='s';
 857 ( 6876)           end else error(15);
 858 ( 6891)     'cr': begin parse(' ('); scan; val:=getcon;
 859 ( 6921)             if (val>127) or (val<0) then
 860 ( 6939)               error(12);
 861 ( 6951)             testtype('i');
 862 ( 6959)             restype:='c'; parse(' )');
 863 ( 6974)           end;
 864 ( 6974)     'tr': begin val:=1; restype:='b' end;
 865 ( 6997)     'fa': begin val:=0; restype:='b' end;
 866 ( 7020)     'cp': begin
 867 ( 7031)             scan; val:=getcon;
 868 ( 7041)             testtype('i'); restype:='q';
 869 ( 7055)           end;
 870 ( 7059)     ' @': begin scan; val:=getcon;
 871 ( 7080)             if restype<>'q' then testtype('i');
 872 ( 7102)             restype:='f'
 873 ( 7102)           end
 874 ( 7104)     else begin
 875 ( 7111)       testto('id'); idpnt:=findid;
 876 ( 7126)       if (idpnt>0) and (high(t0[idpnt])='c')
 877 ( 7148)       then begin
 878 ( 7150)         val:=t2[idpnt];
 879 ( 7157)         restype:=low(t0[idpnt]);
 880 ( 7173)         if restype='r' then
 881 ( 7184)           value[1]:=t3[idpnt];
 882 ( 7194)       end
 883 ( 7202)       else begin error(4); val:=0;
 884 ( 7215)         restype:='i'
 885 ( 7219)       end
 886 ( 7221)     end
 887 ( 7225)   end {case};
 888 ( 7227)   if sign='-' then
 889 ( 7233)     case restype of
 890 ( 7237)       'i': getcon:=-val;
 891 ( 7248)       'r': begin value[0]:=val;
 892 ( 7269)              splitconv(value,rval);
 893 ( 7301)              splitconv(-rval,value);
 894 ( 7326)              getcon:=value[0]
 895 ( 7328)            end
 896 ( 7328)       else error(12)
 897 ( 7341)     end {case}
 898 ( 7349)   else getcon:=val;
 899 ( 7352) end {getcon};
 900 ( 7360) 
 901 ( 7361) { * deccon *         ( of block ) }
 902 ( 7361) 
 903 ( 7361) proc deccon;    { declare constant }
 904 ( 7361) begin
 905 ( 7361)   if token=' ;' then scan;
 906 ( 7381)   testto('id');
 907 ( 7390)   putsym('c','i');
 908 ( 7400)   parse(' ='); scan;
 909 ( 7413)   t2[spnt]:=getcon;
 910 ( 7423)   if (restype='r') then t3[spnt]:=value[1];
 911 ( 7443)   if restype<>'i' then
 912 ( 7457)     t0[spnt]:=packed('c',restype);
 913 ( 7472)   scan
 914 ( 7476) end {deccon};
 915 ( 7480) 
 916 ( 7481) { * decvar *          ( of block ) }
 917 ( 7481) 
 918 ( 7481) proc decvar(typ1,typ2: char);
 919 ( 7481) begin
 920 ( 7481)   if token=' ,' then scan;
 921 ( 7501)   testto('id');
 922 ( 7510)   putsym(typ1,typ2);
 923 ( 7524)   scan;
 924 ( 7528) end {decvar};
 925 ( 7528) 
 926 ( 7529) { * gettype *         ( of block ) }
 927 ( 7529) 
 928 ( 7529) proc gettype(var typ2: char;
 929 ( 7529)   var aflag,uflag: boolean; var n: integer);
 930 ( 7529) 
 931 ( 7529) begin
 932 ( 7529)   aflag:=false; n:=0; uflag:=false;
 933 ( 7548)   scan;
 934 ( 7556)   if token='ar' then begin
 935 ( 7564)     parse(' ['); scan;
 936 ( 7580)     n:=getcon; testtype('i');
 937 ( 7598)     if (n<1) then begin error(15); n:=1 end;
 938 ( 7622)     parse(' ]'); parse('of'); scan;
 939 ( 7644)     aflag:=true
 940 ( 7644)   end;
 941 ( 7650)   if token=' %' then begin
 942 ( 7658)     scan; uflag:=true
 943 ( 7665)   end;
 944 ( 7671)   case token of
 945 ( 7671)     'in': typ2:='i';
 946 ( 7685)     'ch': typ2:='c';
 947 ( 7702)     'pa': begin parse ('ch'); typ2:='p' end;
 948 ( 7732)     'bo': typ2:='b';
 949 ( 7745)     'rl': begin typ2:='r'; aflag:=true;
 950 ( 7768)             n:=prec(2*succ(n)) end;
 951 ( 7785)     'cp': typ2:='q';
 952 ( 7798)     'fl': typ2:='f'
 953 ( 7813)     else begin error(11); typ2:='i';end
 954 ( 7836)   end {case}
 955 ( 7838) end {gettype};
 956 ( 7838) 
 957 ( 7839) { * variable *        ( of block) }
 958 ( 7839) 
 959 ( 7839) proc variable;  { variable declarations }
 960 ( 7839) 
 961 ( 7839) var typ1,typ2: char;
 962 ( 7842)     i,l: integer;
 963 ( 7842)     aflag,uflag: boolean;
 964 ( 7842) 
 965 ( 7842) begin
 966 ( 7842)   scan;
 967 ( 7848)   repeat {main loop}
 968 ( 7848)     l:=0;
 969 ( 7850)     repeat decvar('v','i'); l:=succ(l);
 970 ( 7868)     until token<> ' ,';
 971 ( 7880)     testto(' :');
 972 ( 7893)     gettype(typ2,aflag,uflag,n);
 973 ( 7929)     if uflag then error(11);
 974 ( 7944)     if aflag then typ1:='a' else typ1:='v';
 975 ( 7962)     if typ1='a' then begin {array}
 976 ( 7976)        dpnt:=dpnt-l; {variable has been assumed}
 977 ( 7989)        for i:=succ(spnt-l) to spnt do begin
 978 ( 8016)          t2[i]:=dpnt; t3[i]:=n;
 979 ( 8032)          dpnt:=succ(dpnt+n);
 980 ( 8049)       end
 981 ( 8054)     end {array};
 982 ( 8068)     for i:=succ(spnt-l) to spnt do
 983 ( 8082)       t0[i]:=packed(typ1,typ2);
 984 ( 8108)     parse(' ;');scan
 985 ( 8135)   until token<>'id' {end main loop}
 986 ( 8146) end {variable};
 987 ( 8150) 
 988 ( 8151) { * fixup *           ( of block ) }
 989 ( 8151) 
 990 ( 8151) proc fixup(x: integer);
 991 ( 8151) begin
 992 ( 8151)   if ofno<>nooutput then begin
 993 ( 8163)     write(@ofno,'F');
 994 ( 8174)     savebyte(succ(x-offset) and 255);
 995 ( 8193)     savebyte(succ(x-offset) shr 8);
 996 ( 8212)     savebyte((pc-x-1) and 255);
 997 ( 8233)     savebyte((pc-x-1) shr 8);
 998 ( 8254)   end;
 999 ( 8254) end;
1000 ( 8254) 
1001 ( 8255) { * function *        ( of block ) }
1002 ( 8255) 
1003 ( 8255) proc function;
1004 ( 8255) 
1005 ( 8255) var n: integer;
1006 ( 8258)     typ1,typ2: char;
1007 ( 8258)     aflag,uflag: boolean;
1008 ( 8258) begin
1009 ( 8258)   if token<>' :' then begin
1010 ( 8268)     aflag:=false; uflag:=false; typ2:='i' end
1011 ( 8285)   else begin
1012 ( 8292)     gettype(typ2,aflag,uflag,n);
1013 ( 8328)     scan
1014 ( 8328)   end;
1015 ( 8332)   if aflag then begin
1016 ( 8336)     typ1:='s'; t3[succ(cproc)]:=n;
1017 ( 8350)     t2[succ(cproc)]:=t2[succ(cproc)]-n
1018 ( 8372)   end
1019 ( 8372)   else typ1:='r';
1020 ( 8386)   t0[succ(cproc)]:=packed(typ1,typ2);
1021 ( 8404)   if uflag then typ2:='u';
1022 ( 8417)   if aflag then typ1:='g'
1023 ( 8428)   else typ1:='f';
1024 ( 8439)   t0[cproc]:=packed(typ1,typ2);
1025 ( 8456) end {function};
1026 ( 8460) 
1027 ( 8461) { * parameter *       ( of block ) }
1028 ( 8461) 
1029 ( 8461) proc parameter;
1030 ( 8461) 
1031 ( 8461) var counter1,counter2,i,n,bs: integer;
1032 ( 8464)     aflag,uflag: boolean;
1033 ( 8464)     vtype1,vtype2: char;
1034 ( 8464)     vtype: packed char;
1035 ( 8464) 
1036 ( 8464) begin
1037 ( 8464)   push(0); { dummy size, fixed later }
1038 ( 8474)   if find=0 then t3[spnt-npara]:=stackpnt
1039 ( 8493)   else bs:=stackpnt;
1040 ( 8504)   counter1:=0
1041 ( 8512)   repeat {main loop}
1042 ( 8518)     counter2:=0;
1043 ( 8520)     vtype1:='d'; vtype2:='i';
1044 ( 8532)     scan;
1045 ( 8540)     if token='co' then scan
1046 ( 8548)     else if token='va' then begin
1047 ( 8566)       scan; vtype1:='w' end; {variable param}
1048 ( 8579)     end;
1049 ( 8579)     repeat {inner loop}
1050 ( 8579)       decvar(vtype1,vtype2);
1051 ( 8593)       t2[spnt]:=parlevel;
1052 ( 8597)       parlevel:=succ(parlevel);
1053 ( 8609)       npara:=succ(npara);
1054 ( 8618)       counter2:=succ(counter2);
1055 ( 8627)       until token<>' ,';
1056 ( 8639)     uflag:=false;aflag:=false; n:=0;
1057 ( 8657)     if token<>' :' then
1058 ( 8668)       vtype2:='i' {assume integer }
1059 ( 8674)     else begin
1060 ( 8681)       gettype(vtype2,aflag,uflag,n);
1061 ( 8717)       if n>63 then error(15);
1062 ( 8735)       scan
1063 ( 8735)     end;
1064 ( 8739)     if aflag then begin
1065 ( 8743)       vtype1:=succ(vtype1);
1066 ( 8750)       parlevel:=parlevel-counter2;
1067 ( 8759)     end;
1068 ( 8768)     vtype:=packed(vtype1,vtype2);
1069 ( 8777)     for i:=1 to counter2 do begin
1070 ( 8800)       if uflag then push(packed(vtype1,'u'))
1071 ( 8814)       else push(vtype);
1072 ( 8833)       if aflag then begin
1073 ( 8837)         push(n); t3[spnt-counter2+i]:=n;
1074 ( 8864)         t2[spnt-counter2+i]:=parlevel;
1075 ( 8886)         parlevel:=succ(parlevel)+n;
1076 ( 8899)       end {then};
1077 ( 8908)       t0[spnt-counter2+i]:=vtype;
1078 ( 8922)     end {for};
1079 ( 8930)     if aflag then counter2:=2*counter2;
1080 ( 8953)     counter1:=counter1+counter2;
1081 ( 8966)     until token<>' ;'; {outer loop}
1082 ( 8986)   testto(' )'); scan;
1083 ( 8999)   if find=0 then
1084 ( 9005)     stack[t3[spnt-npara]]:=counter1
1085 ( 9022)   else begin {information is allready there}
1086 ( 9033)     stack[bs]:=counter1;
1087 ( 9037)     n:=t3[fortab[find]]; {existing stack data}
1088 ( 9061)     for i:=0 to stackpnt-bs do
1089 ( 9071)       if stack[bs+1]<>stack[n+1]
1090 ( 9102)         then merror(13,'pa'); {parameter wrong}
1091 ( 9136)     stackpnt:=prec(bs) {clear the new info}
1092 ( 9140)   end  {else}
1093 ( 9145) end {parameter};
1094 ( 9145) 
1095 ( 9146) { * memory *              ( of block) }
1096 ( 9146) 
1097 ( 9146) proc memory;
1098 ( 9146) 
1099 ( 9146) var typ1,typ2:char;
1100 ( 9149)     i,l,n: integer;
1101 ( 9149)     aflag,uflag: boolean;
1102 ( 9149) 
1103 ( 9149) begin
1104 ( 9149)   scan;
1105 ( 9155)   repeat {main loop}
1106 ( 9155)     l:=0;
1107 ( 9157)     repeat
1108 ( 9161)       decvar('m','i');
1109 ( 9171)       l:=succ(l); testto(' ='); scan;
1110 ( 9193)       n:=getcon; testtype('i');
1111 ( 9211)       scan; t2[spnt]:=n;
1112 ( 9219)     until token<>' ,';
1113 ( 9234)     testto(' :');
1114 ( 9247)     gettype(typ2,aflag,uflag,n);
1115 ( 9283)     if uflag then error(11);
1116 ( 9298)     scan;
1117 ( 9302)     if token=' &' then begin {8-bit}
1118 ( 9313)       typ1:='h'; scan
1119 ( 9319)     end
1120 ( 9323)     else typ1:='m';
1121 ( 9328)     if aflag then typ1:=succ(typ1);
1122 ( 9343)     for i:=succ(spnt-l) to spnt do begin
1123 ( 9375)       t0[i]:=packed(typ1,typ2);
1124 ( 9388)       t3[i]:=n;
1125 ( 9396)     end;
1126 ( 9404)     testto(' ;'); scan;
1127 ( 9431)   until token<>'id';
1128 ( 9438) end {memory};
1129 ( 9442) 
1130 ( 9443) 
1131 ( 9443) {######################################}
1132 ( 9443) { * statement *           ( of block ) }
1133 ( 9443) {######################################}
1134 ( 9443) 
1135 ( 9443) proc statmnt;
1136 ( 9443) 
1137 ( 9443) var idpnt,relad,k2,savpc,bottom1: integer;
1138 ( 9446)     device,wln: boolean;
1139 ( 9446)     savtp1,vartyp2: char;
1140 ( 9446)     wl: boolean;
1141 ( 9446) 
1142 ( 9446) { * code4 *               ( of statement ) }
1143 ( 9446) 
1144 ( 9446) proc code4(x,y1,z1: integer); {set 4-byte code}
1145 ( 9446) 
1146 ( 9446) var y,z: integer;
1147 ( 9449) 
1148 ( 9449) begin
1149 ( 9449)   y:=y1; z:=z1;
1150 ( 9459)   if y<0 then y:=y+256;
1151 ( 9484)   if x=43 then z:=z-pc-2;
1152 ( 9510)   code1(x);code1(y);code1(z and 255);
1153 ( 9548)   code1(z shr 8)
1154 ( 9554) end {code4};
1155 ( 9561) 
1156 ( 9562) { * testferror *         ( of statement) ) }
1157 ( 9562) 
1158 ( 9562) proc testferror;
1159 ( 9562) begin
1160 ( 9562)   code1($4f);
1161 ( 9575) end;
1162 ( 9575) 
1163 ( 9576) { * gpval *              ( of statement ) }
1164 ( 9576) 
1165 ( 9576) proc gpval(idpnt: integer;
1166 ( 9576)   dir: boolean; typ: char);
1167 ( 9576) 
1168 ( 9576) var d: integer;
1169 ( 9579) 
1170 ( 9579) begin {gpval}
1171 ( 9579)   if dir then d:=1 else d:=0;
1172 ( 9599)   case typ of
1173 ( 9603)   'h':  begin code3($22,t2[idpnt]);
1174 ( 9630)           if dir then code1($3f);
1175 ( 9645)           code1($17+d) end;
1176 ( 9658)   'm':  begin code3($22,t2[idpnt]);
1177 ( 9684)           code1($3d+d) end;
1178 ( 9697)   'i':  begin
1179 ( 9707)           if dir then code1($3f);
1180 ( 9722)           code3($22,t2[idpnt]);
1181 ( 9738)           code1(3);
1182 ( 9746)           if dir then code1($3f);
1183 ( 9761)           code1($17+d) end;
1184 ( 9774)   'n':  begin if dir then code1($3f);
1185 ( 9799)           code3($22,1); code1($12);
1186 ( 9817)           code3($22,t2[idpnt]);
1187 ( 9833)           code1(3); code1($3d+d) end
1188 ( 9854)   else begin
1189 ( 9857)     if typ='q' then begin
1190 ( 9864)       code4($55,level-t1[idpnt],2*t2[idpnt]);
1191 ( 9899)     end else
1192 ( 9899)       code4($27+2*d+relad,level-t1[idpnt],
1193 ( 9925)         2*t2[idpnt]);
1194 ( 9947)     end
1195 ( 9947)   end {case}
1196 ( 9949) end;
1197 ( 9949) 
1198 ( 9950) { FORWARD decl. of mainexp (of statement) }
1199 ( 9950) 
1200 ( 9950) proc mainexp(reqtype: char;
1201 ( 9950)   var arsize: integer); forward;
1202 ( 9953) 
1203 ( 9953) { * express *           ( of statement ) }
1204 ( 9953) 
1205 ( 9953) proc express; {requests a normal 16-bit result }
1206 ( 9953) 
1207 ( 9953) var resultsize: integer;
1208 ( 9956) 
1209 ( 9956) begin {express}
1210 ( 9956)   mainexp('n',resultsize);
1211 ( 9974)   if resultsize<>0 then error(15)
1212 ( 9986) end {express};
1213 ( 9992) 
1214 ( 9993) { * arrayexp *          ( of mainexp) }
1215 ( 9993) 
1216 ( 9993) proc arrayexp(size: integer; eltype: char);
1217 ( 9993) 
1218 ( 9993) var resultsize: integer;
1219 ( 9996) 
1220 ( 9996) begin
1221 ( 9996)   mainexp(eltype,resultsize);
1222 (10016)   if resultsize<>size then error(15);
1223 (10036)   testtype(eltype);
1224 (10046) end;
1225 (10046) 
1226 (10047) { * getvar *            ( of statement ) }
1227 (10047) 
1228 (10047) proc getvar;
1229 (10047) begin
1230 (10047)   vartyp2:=high(t0[idpnt]);
1231 (10060)   vartype:=low(t0[idpnt]);
1232 (10073)   scan;
1233 (10082)   if (vartype='q') and (token=' [') and
1234 (10097)     ((vartyp2='v') or (vartyp2='d')) then begin
1235 (10114)     vartyp2:='q'; vartype:='c';
1236 (10125)   end;
1237 (10129)   case vartyp2 of
1238 (10129)   'a','x','s','i','n','q':
1239 (10172)       begin
1240 (10175)         if token=' [' then begin
1241 (10183)           scan; express; relad:=1;
1242 (10196)           if vartyp2='r' then begin
1243 (10207)             relad:=3;
1244 (10212)             code3($22,1); code1($12)
1245 (10228)           end;
1246 (10234)           if (vartyp2='q') and (t3[idpnt]=0) then
1247 (10252)             checkindex(0,63)
1248 (10260)           else
1249 (10266)             checkindex(0,t3[idpnt]);
1250 (10285)           testtype('i'); testto(' ]'); scan;
1251 (10306)         end else relad:=2;
1252 (10311)       end;
1253 (10315)   'v','w','r','h','m': relad:=0;
1254 (10355)   'c','d','e','t','u': error(6)
1255 (10399)   else error(1)
1256 (10410)   end {case}
1257 (10418) end {getvar};
1258 (10418) 
1259 (10419) { * prcall *            ( of statement ) }
1260 (10419) 
1261 (10419) proc prcall (idpn1: integer);
1262 (10419) 
1263 (10419) var bstack,numpar,i,n,n2: integer;
1264 (10422) 
1265 (10422) { body of prcall follows later }
1266 (10422) 
1267 (10422) { * prcall1 *           ( of prcall ) }
1268 (10422) 
1269 (10422) proc prcall1;
1270 (10422) var ressize:integer;
1271 (10425) 
1272 (10425)   proc prcall3;
1273 (10425)   begin {prcall3}
1274 (10428)     testto('id');
1275 (10439)     idpnt:=findid;
1276 (10445)     if idpnt=0 then error(5);
1277 (10467)     getvar;
1278 (10471)     if chr(stack[i] and 255)<>vartype then
1279 (10483)       if chr(stack[i] and 255)<>'u' then
1280 (10505)         merror(14,'01');
1281 (10520)       push(idpnt);
1282 (10530)   end {prcall3};
1283 (10530) 
1284 (10531) begin {prcall1}
1285 (10531)   case chr(stack[i] shr 8) of
1286 (10544)     'd':  begin
1287 (10552)             if chr(stack[i] and 255) = 'q' then
1288 (10566)               mainexp('q',ressize)
1289 (10572)             else
1290 (10586)               express;
1291 (10593)             if chr(stack[i] and 255)<>'u' then
1292 (10607)               testtype(chr(stack[i] and 255));
1293 (10629)           end;
1294 (10629)     'e':  begin
1295 (10639)             arrayexp(stack[succ(i)],
1296 (10644)               chr(stack[i]));
1297 (10663)             i:=succ(i);
1298 (10667)           end;
1299 (10672)     'w':  begin
1300 (10682)             prcall3;
1301 (10686)             if relad<>0 then merror(14,'02');
1302 (10707)             gpval(idpnt,false,vartyp2);
1303 (10723)           end;
1304 (10723)     'x':  begin
1305 (10733)             prcall3;
1306 (10737)             if relad<>2 then merror(14,'03');
1307 (10758)             if vartyp2='i' then error(16);
1308 (10776)             i:=succ(i);
1309 (10780)             if stack[i]<>t3[idpnt] then
1310 (10797)               error(15);
1311 (10813)             if vartyp2='n' then begin
1312 (10820)               code3($22,t2[idpnt]);
1313 (10839)               code1($3d);
1314 (10847)             end else code4($27,level-t1[idpnt],
1315 (10860)               2*t2[idpnt]);
1316 (10882)             code2($3b,stack[i]);
1317 (10898)           end
1318 (10898)     else merror(14,'04')
1319 (10906)   end {case}
1320 (10914) end {prcall1};
1321 (10914) 
1322 (10915) proc prcall2;
1323 (10915) begin
1324 (10915)   if n>0 then code3(35,-2*n);
1325 (10946)   n:=0
1326 (10946) end {prcall2};
1327 (10952) 
1328 (10953) begin {body of prcall}
1329 (10953)   if t3[idpn1]<>0 then begin
1330 (10966)     bstack:=t3[idpn1];
1331 (10973)     numpar:=stack[bstack];
1332 (10985)     parse(' ('); scan;
1333 (11006)     for i:=succ(bstack) to bstack+numpar do
1334 (11019)     begin
1335 (11033)       prcall1;
1336 (11037)       if i<bstack+numpar then begin
1337 (11051)         testto(' ,'); scan
1338 (11063)       end
1339 (11067)     end;
1340 (11067)     testto(' )');
1341 (11090)   end {then};
1342 (11090)   code4(43,level-t1[idpn1],t2[idpn1]);
1343 (11119)   if t3[idpn1]<>0 then begin
1344 (11130)     n:=0; i:=bstack+numpar;
1345 (11143)     repeat
1346 (11152)       case chr(stack[i] shr 8) of
1347 (11163)       'd':  n:=succ(n);
1348 (11175)       'w':  begin
1349 (11190)               prcall2; idpnt:=pop;
1350 (11200)               gpval(idpnt,true,
1351 (11210)                   high(t0[idpnt]));
1352 (11225)             end;
1353 (11225)       chr(0): begin
1354 (11235)             n2:=stack[i];
1355 (11239)             i:=i-1;
1356 (11253)             case chr(stack[i] shr 8) of
1357 (11269)               'e':  n:=succ(n+n2);
1358 (11286)               'x':  begin
1359 (11301)                       prcall2;
1360 (11305)                       idpnt:=pop;
1361 (11311)                       if high(t0[idpnt])='n'
1362 (11324)                       then begin
1363 (11327)                         code3($22,t2[idpnt]+
1364 (11336)                           2*t3[idpnt]);
1365 (11358)                         code1($3e)
1366 (11360)                       end else
1367 (11366)                         code4(41,
1368 (11371)                           level-t1[idpnt],
1369 (11379)                           2*(t2[idpnt]+
1370 (11390)                           t3[idpnt]));
1371 (11410)                       code2($3c,t3[idpnt])
1372 (11416)                     end
1373 (11426)               end {case}
1374 (11428)             end
1375 (11428)       end; {case}
1376 (11430)       i:=prec(i);
1377 (11434)     until i=bstack;
1378 (11443)     prcall2
1379 (11451)   end
1380 (11455) end {prcall};
1381 (11455) 
1382 (11456) 
1383 (11456) {###################################}
1384 (11456) { * mainexp *       ( of statement) }
1385 (11456) {###################################}
1386 (11456) {  see forward declaration above    }
1387 (11456) 
1388 (11456) proc mainexp(reqtype: char;
1389 (11456)   var arsize: integer);
1390 (11456) 
1391 (11456) { variables of mainexp}
1392 (11456) var opcode,roff: integer;
1393 (11459)     savtype: char;
1394 (11459) 
1395 (11459) { * argument *         ( of mainexp ) }
1396 (11459) 
1397 (11459) proc argument(rtype: char);
1398 (11459) begin
1399 (11459)   parse(' ('); scan; express;
1400 (11481)   testtype(rtype);
1401 (11491)   testto(' )'); scan
1402 (11500) end; {argument}
1403 (11505) 
1404 (11505) {#######################################}
1405 (11505) { * simexp *             ( of mainexp ) }
1406 (11505) {#######################################}
1407 (11505) 
1408 (11505) proc simexp(var arsize1: integer);
1409 (11505) 
1410 (11505) var opcode: integer;
1411 (11508)     sign: char;
1412 (11508) 
1413 (11508) {body of simexp  follows later }
1414 (11508) 
1415 (11508) {#######################################}
1416 (11508) { * term *               ( of simexp )  }
1417 (11508) {#######################################}
1418 (11508) 
1419 (11508) proc term(var arsize2: integer);
1420 (11508) 
1421 (11508) var opcode: integer;
1422 (11511) 
1423 (11511) { body of term follows later }
1424 (11511) 
1425 (11511) {#######################################}
1426 (11511) { * factor *             ( of term )    }
1427 (11511) {#######################################}
1428 (11511) 
1429 (11511) proc factor(var arsize3: integer);
1430 (11511) 
1431 (11511) var i, idpnt: integer;
1432 (11514)     h: char;
1433 (11514) 
1434 (11514) { * index *              ( of factor )  }
1435 (11514) 
1436 (11514) proc index(chk: boolean);
1437 (11514) 
1438 (11514) var savtype: char;
1439 (11517) 
1440 (11517) begin {index}
1441 (11517)   scan; savtype:=restype;
1442 (11523)   express; testtype('i'); testto(' ]');
1443 (11552)   if savtype='r' then begin
1444 (11559)     code3($22,1); code1($12);
1445 (11580)   end;
1446 (11580)   if chk then begin
1447 (11584)     if (savtype='q') and (t3[idpnt]=0) then
1448 (11605)       { is an arrayed cpnt }
1449 (11606)       checkindex(0,63)
1450 (11613)     else
1451 (11619)       checkindex(0,t3[idpnt]);
1452 (11638)   end;
1453 (11638)   restype:=savtype; scan
1454 (11646) end;
1455 (11650) 
1456 (11651) 
1457 (11651) begin { *** body of factor *** }
1458 (11651)   arsize3:=0;
1459 (11655)   case token of
1460 (11659)     'id': begin {identifier }
1461 (11671)             idpnt:=findid;
1462 (11677)             if idpnt=0 then error(5);
1463 (11699)             restype:=low(t0[idpnt]);
1464 (11707)             h:=high(t0[idpnt]);
1465 (11720)             case h of
1466 (11725)               'v','w','d':
1467 (11747)                     begin
1468 (11750)                       scan;
1469 (11754)                       if (restype='q') and (token=' [')
1470 (11768)                       then begin
1471 (11770)                         code4(39,level-t1[idpnt],
1472 (11783)                           2*t2[idpnt]);
1473 (11805)                         index(true);
1474 (11813)                         code1($03);
1475 (11821)                         code1($54);
1476 (11829)                         restype:='c';
1477 (11831)                       end else
1478 (11835)                         code4(39,level-t1[idpnt],
1479 (11848)                           2*t2[idpnt]);
1480 (11870)                     end;
1481 (11870)               'h':  begin code3($22,t2[idpnt]);
1482 (11896)                       code1($17); scan end;
1483 (11908)               'i':  begin code3($22,t2[idpnt]);
1484 (11934)                       scan;
1485 (11938)                       if token=' [' then begin
1486 (11946)                         index(true); code1($03);
1487 (11965)                         code1($17)
1488 (11967)                       end else begin
1489 (11976)                         error(16)
1490 (11978)                       end
1491 (11984)                     end;
1492 (11984)               'm':  begin code3($22,t2[idpnt]);
1493 (12010)                       code1($3d); scan
1494 (12018)                     end;
1495 (12022)               'n':  begin code3($22,t2[idpnt]);
1496 (12048)                       scan;
1497 (12052)                       if token=' [' then begin
1498 (12060)                         index(true);
1499 (12071)                         code3($22,1);code1($12);
1500 (12089)                         code1($03); code1($3d);
1501 (12105)                         if restype='r' then
1502 (12111)                         begin
1503 (12112)                           code2($3b,1);
1504 (12125)                           arsize3:=1
1505 (12125)                         end
1506 (12127)                       end else begin
1507 (12134)                         code1($3d);
1508 (12142)                         code2($3b,t3[idpnt]);
1509 (12158)                         arsize3:=t3[idpnt];
1510 (12162)                       end
1511 (12170)                     end;
1512 (12170)               'r','t': begin
1513 (12187)                       code3(35,2);
1514 (12197)                       idpnt:=prec(idpnt);
1515 (12201)                       prcall(idpnt); scan;
1516 (12220)                       restype:=low(t0[idpnt]);
1517 (12228)                     end;
1518 (12233)               'c':  if low(t0[idpnt])<>'r' then begin
1519 (12255)                       code3(34,t2[idpnt]);
1520 (12274)                       scan;
1521 (12278)                       if restype='s' then begin
1522 (12285)                         if token=' [' then begin
1523 (12296)                           index(true);
1524 (12307)                           code1($03);
1525 (12315)                           code1($58);
1526 (12323)                           code1($54);
1527 (12331)                           restype:='c';
1528 (12333)                         end else begin
1529 (12340)                           code1($58);
1530 (12348)                           restype:='q';
1531 (12350)                         end;
1532 (12354)                       end;
1533 (12354)                       {scan;}
1534 (12354)                     end else begin
1535 (12357)                       code2($3a,2);
1536 (12367)                       code2(t2[idpnt] and 255,
1537 (12377)                         t2[idpnt] shr 8);
1538 (12395)                       code2(t3[idpnt] and 255,
1539 (12405)                         t3[idpnt] shr 8);
1540 (12423)                       arsize3:=1; scan
1541 (12429)                     end;
1542 (12433)               'a','e','x':
1543 (12454)                     begin scan;
1544 (12461)                       if token=' [' then begin
1545 (12469)                         index(true);
1546 (12480)                         code4($28,
1547 (12482)                             level-t1[idpnt],
1548 (12490)                             2*t2[idpnt]);
1549 (12512)                         if restype='r' then
1550 (12518)                         begin
1551 (12519)                           code2($3b,1);
1552 (12532)                           arsize3:=1
1553 (12532)                         end
1554 (12534)                       end else begin
1555 (12541)                         code4($27,
1556 (12543)                             level-t1[idpnt],
1557 (12551)                             2*t2[idpnt]);
1558 (12573)                         code2($3b,t3[idpnt]);
1559 (12589)                         arsize3:=t3[idpnt];
1560 (12593)                       end
1561 (12601)                     end;
1562 (12601)               's','u':
1563 (12615)                     begin
1564 (12618)                       code3(35,2*t3[idpnt]+2);
1565 (12640)                       idpnt:=prec(idpnt);
1566 (12644)                       prcall(idpnt); scan;
1567 (12663)                       restype:=low(t0[idpnt]);
1568 (12671)                       idpnt:=succ(idpnt);
1569 (12680)                       arsize3:=t3[idpnt]
1570 (12685)                     end
1571 (12689)               else error(1)
1572 (12702)             end {case}
1573 (12710)           end; {identifier}
1574 (12713)     'nu': begin code3(34,value[0]); scan;
1575 (12739)             restype:='i'
1576 (12739)           end;
1577 (12745)     'ru': begin code2($3a,2);
1578 (12766)             code2(value[0] and 255,
1579 (12774)               value[0] shr 8);
1580 (12790)             code2(value[1] and 255,
1581 (12798)               value[1] shr 8);
1582 (12814)             scan; restype:='r';
1583 (12820)             arsize3:=1
1584 (12824)           end;
1585 (12830)     'st': begin
1586 (12841)           if (reqtype='n') and (value[0]<3)
1587 (12856)             then begin
1588 (12858)               if value[0]<2 then begin
1589 (12870)                 code3(34,ord(ident[1]));
1590 (12887)                 restype:='c'
1591 (12887)               end else begin
1592 (12896)                 code3(34,packed(ident[1],
1593 (12900)                   ident[2]));
1594 (12917)                 restype:='p'
1595 (12917)               end
1596 (12919)             end else begin
1597 (12926)               case reqtype of
1598 (12926)                 'c','u','n','q':
1599 (12955)                     begin
1600 (12958)                       if (vartype='q') or
1601 (12965)                          (reqtype='q') then begin
1602 (12973)                         arsize3:=0;
1603 (12978)                         restype:='q';
1604 (12984)                         code2($56,value[0]);
1605 (13002)                       end else begin
1606 (13005)                         arsize3:=prec(value[0]);
1607 (13011)                         restype:='c';
1608 (13018)                         code2($39,value[0]);
1609 (13036)                       end;
1610 (13036)                       for i:=1 to value[0] do
1611 (13044)                         code1(ord(ident[i]));
1612 (13071)                       if (vartype='q') or
1613 (13092)                          (reqtype='q') then code1(0);
1614 (13111)                     end;
1615 (13111)                 'p': begin
1616 (13121)                       if odd(value[0]) then
1617 (13127)                         error(15);
1618 (13139)                       value[0]:=value[0] shr 1;
1619 (13149)                       arsize3:=prec(value[0]);
1620 (13160)                       restype:='p';
1621 (13167)                       code2($3a,value[0]);
1622 (13185)                       for i:=1 to value[0] do
1623 (13193)                         begin
1624 (13206)                         code1(ident[2*i]);
1625 (13223)                         code1(ident[2*i-1]);
1626 (13243)                       end
1627 (13243)                     end
1628 (13243)                 else merror(14,'05')
1629 (13265)               end {case}
1630 (13273)             end;
1631 (13273)             scan
1632 (13273)           end;
1633 (13277)     'od': begin
1634 (13288)             argument('i'); code1(7);
1635 (13304)             restype:='b'
1636 (13304)           end;
1637 (13310)     'me': begin
1638 (13321)             parse(' ['); index(false);
1639 (13338)             code1(23); restype:='i';
1640 (13348)           end;
1641 (13352)     ' (': begin
1642 (13363)             scan; mainexp(reqtype,arsize3);
1643 (13385)             testto(' )'); scan
1644 (13394)           end; {no type change}
1645 (13401)     'no': begin
1646 (13409)             scan; factor(arsize3);
1647 (13425)             if (arsize3<>0) then error(15);
1648 (13443)             code1($11);
1649 (13451)             if restype<>'i' then
1650 (13457)               testtype('b')
1651 (13463)           end;
1652 (13469)     'cr': begin
1653 (13480)             argument('i'); code1(52);
1654 (13496)             restype:='c'
1655 (13496)           end;
1656 (13502)     'hi': begin
1657 (13513)             argument('p'); code1(51);
1658 (13529)             restype:='c'
1659 (13529)           end;
1660 (13535)     'lo': begin
1661 (13546)             argument('p'); code1(52);
1662 (13562)             restype:='c'
1663 (13562)           end;
1664 (13568)     'su': begin
1665 (13579)             argument('u'); code1($14);
1666 (13595)           end;
1667 (13595)     'pc': begin
1668 (13606)             argument('u'); code1($15)
1669 (13616)           end;
1670 (13622)     'cp': begin
1671 (13633)             argument('i'); restype:='q';
1672 (13643)           end;
1673 (13647)     'ni': begin
1674 (13658)             code3(34,0); scan; restype:='q';
1675 (13674)           end;
1676 (13678)     'ox': begin
1677 (13689)             argument('u');
1678 (13697)             restype:='i'
1679 (13697)           end;
1680 (13703)     ' @': begin
1681 (13714)             scan; factor(arsize3);
1682 (13730)             if arsize3<>0 then error(15);
1683 (13748)             if restype<>'q' then testtype('i');
1684 (13766)             restype:='f'
1685 (13766)           end;
1686 (13772)     'tr': begin
1687 (13783)             code3(34,1); scan;
1688 (13797)             restype:='b';
1689 (13799)           end;
1690 (13803)     'fa': begin
1691 (13814)             code3(34,0); scan;
1692 (13828)             restype:='b'
1693 (13828)           end;
1694 (13834)     'tc': begin
1695 (13845)             parse(' ('); scan;
1696 (13858)             arrayexp(1,'r');
1697 (13868)             testto(' )'); scan;
1698 (13881)             code1($47); restype:='i';
1699 (13891)           end;
1700 (13895)     'cv': begin
1701 (13906)             argument('i');
1702 (13914)             code1($46); arsize3:=1;
1703 (13924)             restype:='r'
1704 (13928)           end;
1705 (13934)     'pa': begin
1706 (13945)             parse(' ('); scan; express;
1707 (13962)             testtype('c');
1708 (13970)             if token=' ,' then begin
1709 (13978)               scan; express; testtype('c');
1710 (13997)               code1(53)
1711 (13999)             end;
1712 (14005)             testto(' )'); scan; restype:='p'
1713 (14018)           end
1714 (14020)     else error(1)
1715 (14029)   end {case of token}
1716 (14037) end {factor};
1717 (14037) 
1718 (14038) begin  { *** body of term *** }
1719 (14038)   factor(arsize2);
1720 (14052)   repeat
1721 (14052)     case token of
1722 (14052)       ' *': opcode:=5;
1723 (14066)       'di': opcode:=6;
1724 (14083)       'an': opcode:=15;
1725 (14100)       'sh': opcode:=18;
1726 (14117)       'sr': opcode:=19;
1727 (14134)       ' /': opcode:=$45
1728 (14149)       else opcode:=0
1729 (14158)     end {case};
1730 (14166)     if opcode>0 then begin
1731 (14173)       if (restype='r') and
1732 (14183)             (arsize2=1) then begin
1733 (14191)         scan; factor(arsize2);
1734 (14210)         if (restype<>'r') or (arsize2<>1) then
1735 (14224)           merror(14,'06');
1736 (14239)         case opcode of
1737 (14239)           5: code1($44);
1738 (14258)           $45: code1($45)
1739 (14270)           else error(17)
1740 (14281)         end{case}
1741 (14289)       end else begin
1742 (14292)         if opcode=$45 then error(9);
1743 (14310)         if arsize2<>0 then error(15);
1744 (14328)         if (restype='b') and (opcode=15)
1745 (14341)           then begin
1746 (14343)           scan; factor(arsize2);
1747 (14362)           if arsize2<>0 then error(15);
1748 (14380)           testtype('b');
1749 (14388)           code1(opcode)
1750 (14388)         end else begin
1751 (14401)           testtype('i'); scan;
1752 (14413)           factor(arsize2);
1753 (14425)           if arsize2<>0 then error(15);
1754 (14443)           testtype('i'); code1(opcode);
1755 (14461)         end
1756 (14461)       end
1757 (14461)     end;
1758 (14461)   until opcode=0;
1759 (14467) end {term};
1760 (14471) 
1761 (14472) 
1762 (14472) begin { *** body of simexp *** }
1763 (14472)   sign:=' ';
1764 (14476)   if token=' +' then begin
1765 (14488)     sign:='+'; scan
1766 (14497)   end else if token=' -' then begin
1767 (14512)     sign:='-'; scan
1768 (14521)   end;
1769 (14525)   term(arsize1);
1770 (14537)   if sign<>' ' then begin
1771 (14544)     if (restype='r')and (arsize1=1) then begin
1772 (14562)       if sign='-' then code1($4e)
1773 (14577)     end else begin
1774 (14586)       testtype('i');
1775 (14594)       if arsize1<>0 then error(15);
1776 (14612)       if sign='-' then code1(2);
1777 (14630)     end
1778 (14630)   end;
1779 (14630)   repeat
1780 (14630)     case token of
1781 (14630)       ' &': opcode:=1;
1782 (14644)       ' +': opcode:=3;
1783 (14661)       ' -': opcode:=4;
1784 (14678)       'or': opcode:=14;
1785 (14695)       'xo': opcode:=16
1786 (14710)       else opcode:=0
1787 (14719)     end {case};
1788 (14727)     if opcode>1 then begin {if 1}
1789 (14737)       if (restype='r') and (arsize1=1)
1790 (14750)         then begin {real}
1791 (14755)         scan; term(arsize1);
1792 (14771)         if (restype<>'r') or (arsize1<>1) then
1793 (14785)           error(17);
1794 (14797)         case opcode of
1795 (14797)           3:  code1($42);
1796 (14816)           4:  code1($43)
1797 (14828)           else error(17)
1798 (14839)         end {case}
1799 (14847)       end {real}
1800 (14847)       else begin {not real}
1801 (14850)         if (arsize1<>0) then error(15);
1802 (14868)         if (restype='b') and (opcode>=14)
1803 (14881)           then begin {boolean}
1804 (14886)           scan; term(arsize1);
1805 (14902)           if arsize1<>0 then error(15);
1806 (14920)           testtype('b'); code1(opcode)
1807 (14928)         end {boolean}
1808 (14938)         else begin {not boolean}
1809 (14941)           testtype('i'); scan;
1810 (14953)           term(arsize1);
1811 (14965)           if arsize1<>0 then error(15);
1812 (14983)           testtype('i'); code1(opcode);
1813 (15001)         end {not boolean}
1814 (15001)       end {not real}
1815 (15001)     end {if 1}
1816 (15001)     else if opcode=1 then begin {else 1}
1817 (15014)       sign:=restype;
1818 (15014)       scan; term(opcode);
1819 (15038)       arsize1:=arsize1+opcode+1;
1820 (15049)       testtype(sign)
1821 (15054)     end {else 1}
1822 (15064)   until opcode=0
1823 (15068) end {simexp};
1824 (15074) 
1825 (15075) 
1826 (15075) begin { *** body of mainexp *** }
1827 (15075)   roff:=0;
1828 (15079)   simexp(arsize);
1829 (15095)   if (restype='r') and (arsize=1) then
1830 (15109)     roff:=$40;
1831 (15115)   case token of
1832 (15119)     ' =': opcode:=8;
1833 (15133)     ' <': opcode:=10;
1834 (15150)     ' >': opcode:=12;
1835 (15167)     '<>': opcode:=9;
1836 (15184)     '<=': opcode:=13;
1837 (15201)     '>=': opcode:=11
1838 (15216)     else opcode:=0
1839 (15225)   end {case};
1840 (15233)   if opcode>0 then begin
1841 (15240)     if (arsize<>0) and (roff=0) then
1842 (15257)       error(15);
1843 (15269)     scan; savtype:=restype; simexp(arsize);
1844 (15293)     if ((roff=0) and (arsize<>0))
1845 (15307)       or((roff<>0) and (arsize>1)) then
1846 (15323)       error(15);
1847 (15335)     testtype(savtype); code1(opcode+roff);
1848 (15360)     arsize:=0; restype:='b'
1849 (15366)   end
1850 (15368) end {mainexp};
1851 (15372) 
1852 (15373) 
1853 (15373) {#########################################}
1854 (15373) { * assign *             ( of statement ) }
1855 (15373) {#########################################}
1856 (15373) 
1857 (15373) proc assign;
1858 (15373) 
1859 (15373) var savetype: char;
1860 (15376) 
1861 (15376)   proc assign1;
1862 (15376)   begin
1863 (15376)     testto(':='); scan; express;
1864 (15398)     if (vartype='q') and (restype='s') then begin
1865 (15413)       code1($58); restype:='q';
1866 (15426)     end;
1867 (15430)     gpval(idpnt,true,vartyp2);
1868 (15446)   end {assign1};
1869 (15446) 
1870 (15447) begin {assign}
1871 (15447)   idpnt:=findid;
1872 (15455)   if idpnt=0 then error(5);
1873 (15477)   if t0[idpnt]='pr' then begin
1874 (15489)     prcall(idpnt);scan end
1875 (15506)   else begin
1876 (15509)     getvar; savetype:=vartype;
1877 (15513)     if relad<2 then begin
1878 (15528)       assign1; testtype(vartype)
1879 (15535)     end else begin
1880 (15548)       if vartyp2='i' then error(16); {8-bit mem}
1881 (15566)       testto(':='); scan;
1882 (15579)       if relad=3 then begin
1883 (15586)         arrayexp(1,vartype); relad:=1;
1884 (15603)         code1($53);
1885 (15615)         if vartyp2='n' then begin
1886 (15622)           code1($3f);
1887 (15633)           code3($22,1);code1($12);
1888 (15651)           code3($22,t2[idpnt]+2);
1889 (15670)           code1($3);code1($3e)
1890 (15680)         end else
1891 (15686)           code4($2a,level-t1[idpnt],
1892 (15699)             2*t2[idpnt]+2);
1893 (15724)         code2($3c,1)
1894 (15728)       end else begin
1895 (15737)         arrayexp(t3[idpnt],vartype);
1896 (15755)         if vartyp2='n' then begin
1897 (15762)           code3($22,t2[idpnt]+2*t3[idpnt]);
1898 (15793)           code1($3e);
1899 (15801)         end else
1900 (15801)           code4($29,level-t1[idpnt],
1901 (15814)             2*(t2[idpnt]+t3[idpnt]));
1902 (15845)         code2($3c,t3[idpnt]);
1903 (15861)       end
1904 (15861)     end
1905 (15861)   end
1906 (15861) end {assign};
1907 (15861) 
1908 (15862) { * case1 *             ( of statement ) }
1909 (15862) 
1910 (15862) proc case1;
1911 (15862) 
1912 (15862) var i1,i2,casave: integer;
1913 (15865)     savetype: char;
1914 (15865) 
1915 (15865)   proc case2;
1916 (15865) 
1917 (15865)     proc case3;
1918 (15868)     begin
1919 (15868)       scan; code1(22); code3(34,getcon);
1920 (15899)       testtype(savetype);
1921 (15909)       code1(8); scan
1922 (15917)     end;
1923 (15921) 
1924 (15922)   begin {case2}
1925 (15922)     i1:=0; case3;
1926 (15934)     while token=' ,' do begin
1927 (15945)       push(pc); code3(38,0); i1:=succ(i1);
1928 (15969)       case3
1929 (15974)     end;
1930 (15978)     testto(' :'); savpc:=pc; code3(37,0);
1931 (16008)     for k2:=1 to i1 do fixup(pop);
1932 (16039)     push(savpc);
1933 (16063)     scan; statmnt
1934 (16067)   end {case2};
1935 (16071) 
1936 (16072) begin {case1}
1937 (16072)   scan; express; testto('of');
1938 (16091)   savetype:=restype; i2:=1; case2;
1939 (16109)   while token=' ;' do begin
1940 (16120)     casave:=pc; code3(36,0); fixup(pop);
1941 (16150)     push(casave); i2:=succ(i2); case2
1942 (16169)   end;
1943 (16173)   if token='el' then begin
1944 (16184)     casave:=pc; code3(36,0); fixup(pop);
1945 (16217)     push(casave); scan; statmnt
1946 (16231)   end;
1947 (16235)   testto('en'); for k2:=1 to i2 do fixup(pop);
1948 (16275)   code3(35,-2); scan
1949 (16300) end {case1};
1950 (16304) 
1951 (16305) { * openrw *              ( of statement ) }
1952 (16305) 
1953 (16305) proc openrw(x: integer);
1954 (16305) begin
1955 (16305)   parse(' ('); parse('id');
1956 (16328)   idpnt:=findid;
1957 (16334)   if idpnt=0 then error(5);
1958 (16356)   getvar; code1(x);
1959 (16370)   testferror;
1960 (16374)   if relad=2 then error(15);
1961 (16392)   if vartype<>'f' then merror(14,'07');
1962 (16413)   gpval(idpnt,true,vartyp2);
1963 (16429)   testto(' )'); scan
1964 (16438) end {openrw};
1965 (16442) 
1966 (16443) { * gpsec *               ( of statement )  }
1967 (16443) 
1968 (16443) proc gpsec(code);   { get/put sector }
1969 (16443) 
1970 (16443)   proc gpsec1;
1971 (16446)   begin
1972 (16446)     scan; express; testtype('i');
1973 (16467)     testto(' ,');
1974 (16476)   end;
1975 (16476) 
1976 (16477) begin {gpsec}
1977 (16477)   parse(' ('); gpsec1; gpsec1; gpsec1;
1978 (16500)   code1(code);
1979 (16510)   parse('id'); idpnt:=findid;
1980 (16525)   if idpnt=0 then error(5);
1981 (16547)   getvar; code3(34,$db); { get file error code }
1982 (16561)   if relad=2 then error(15);
1983 (16579)   code1(23); if vartype<>'i' then merror(14,'08');
1984 (16608)   gpval(idpnt,true,vartyp2);
1985 (16624)   testto(' )');
1986 (16633) end {gpsec};
1987 (16633) 
1988 (16634) 
1989 (16634) begin {body of statement }
1990 (16634)   if token=' ;' then scan;
1991 (16651)   case token of
1992 (16651)     'id': assign;
1993 (16667) 
1994 (16670)     'if': begin {if}
1995 (16678)             scan; express; testtype('b');
1996 (16694)             testto('th'); scan;  savpc:=pc;
1997 (16707)             code3(37,0); statmnt;
1998 (16729)             if token='el' then begin {else}
1999 (16740)               k2:=pc; code3(36,0);
2000 (16758)               fixup(savpc); scan; statmnt;
2001 (16776)               fixup(k2)
2002 (16776)             end else fixup(savpc)
2003 (16789)           end; {if}
2004 (16802) 
2005 (16802)     'be':  begin {begin}
2006 (16810)             repeat
2007 (16810)               scan; statmnt
2008 (16814)             until token<>(' ;');
2009 (16825)             testto('en'); scan
2010 (16838)           end; {begin}
2011 (16845) 
2012 (16845)     'rp': begin {repeat}
2013 (16853)             savpc:=pc;
2014 (16853)             repeat
2015 (16861)               scan; statmnt
2016 (16865)             until token='un';
2017 (16876)             scan; express; testtype('b');
2018 (16896)             code3(37,savpc)
2019 (16898)           end {repeat};
2020 (16908) 
2021 (16911)     're': begin {read}
2022 (16919)             parse(' ('); scan;
2023 (16932)             if token=' @' then begin
2024 (16940)               scan; express; testtype('f');
2025 (16959)               device:=true;
2026 (16961)               code1(44); testto(' ,')
2027 (16976)             end
2028 (16982)             else begin
2029 (16985)               device:=false; code1(26)
2030 (16993)             end;
2031 (16999)             repeat
2032 (16999)               begin {main loop of read}
2033 (16999)                 if token=' ,' then scan;
2034 (17014)                 testto('id'); idpnt:=findid;
2035 (17029)                 if idpnt=0 then error(5);
2036 (17051)                 getvar;
2037 (17055)                 if relad=2 then error(15);
2038 (17073)                 case vartype of
2039 (17073)                   'i':  code1(28);
2040 (17092)                   'c':  code1(27);
2041 (17110)                   'p':  begin
2042 (17120)                         code1(27); code1(27);
2043 (17136)                         code1(53)
2044 (17138)                         end
2045 (17144)                   else error(114)
2046 (17149)                 end {case};
2047 (17157)                 gpval(idpnt,true,vartyp2)
2048 (17163)               end {mainloop of read}
2049 (17173)             until token<>' ,';
2050 (17180)             testto(' )'); scan;
2051 (17197)             if device then code1(45);
2052 (17212)           end {read};
2053 (17212) 
2054 (17215)     'wr','wl':
2055 (17228)           begin {write,writeln}
2056 (17231)             if token='wl' then wln:=true
2057 (17242)             else wln:=false;
2058 (17253)             scan;
2059 (17261)             if token=' (' then begin
2060 (17269)               scan;
2061 (17276)               if token=' @' then begin
2062 (17284)                 scan; express;
2063 (17295)                 if restype='q' then restype:='f';
2064 (17307)                 testtype('f');
2065 (17319)                 device:=true; code1(44);
2066 (17333)                 testto(' ,');
2067 (17342)               end else device:=false;
2068 (17347)               repeat
2069 (17351)                 if token=' ,' then scan;
2070 (17366)                 if (token=' )') and device
2071 (17374)                        and wln then
2072 (17379)                    {empty writeln except device}
2073 (17384)                    k2:=k2 {do nothing}
2074 (17387)                 else if token='st' then begin
2075 (17406)                   {string}
2076 (17409)                   code1(50);
2077 (17417)                   for k2:=1 to value[0]-1 do
2078 (17431)                     code1(ord(ident[k2])
2079 (17445)                         and 127);
2080 (17458)                   code1(ord(ident[value[0]])
2081 (17478)                       or 128);
2082 (17491)                   scan
2083 (17491)                 end else begin
2084 (17498)                   {expression}
2085 (17498)                   express;
2086 (17502)                   case restype of
2087 (17502)                     'i':  code1(30);
2088 (17521)                     'c':  code1(29);
2089 (17539)                     'q':  code1($57);
2090 (17557)                     's':  begin
2091 (17567)                             code1($58);
2092 (17575)                             code1($57);
2093 (17583)                           end;
2094 (17583)                     'p':  begin
2095 (17593)                             code1(22);
2096 (17601)                             code1(51);
2097 (17609)                             code1(29);
2098 (17617)                             code1(52);
2099 (17625)                             code1(29);
2100 (17633)                           end
2101 (17633)                     else merror(14,'09')
2102 (17641)                   end {case}
2103 (17649)                 end {expression}
2104 (17649)               until token<>' ,';
2105 (17656)               if wln then begin {writeln(..)}
2106 (17667)                 code2(32,13); code1(29);
2107 (17685)                 code2(32,10); code1(29);
2108 (17703)               end;
2109 (17703)               if device then code1(45);
2110 (17718)               testto(' )'); scan
2111 (17727)             end {if}
2112 (17731)             else if wln then begin {writeln}
2113 (17741)               code2(32,13); code1(29);
2114 (17759)               code2(32,10); code1(29);
2115 (17777)             end
2116 (17777)           end {write, writeln};
2117 (17777) 
2118 (17780)     'cs': case1; {case statement}
2119 (17795) 
2120 (17795)     'wh': begin {while}
2121 (17803)             scan; savpc:=pc; express;
2122 (17819)             testtype('b');
2123 (17827)             k2:=pc; code3(37,0);
2124 (17845)             testto('do'); scan; statmnt;
2125 (17862)             code3(36,savpc); fixup(k2)
2126 (17874)           end {while};
2127 (17884) 
2128 (17887)     'fo': begin {for}
2129 (17895)             parse('id'); assign;
2130 (17908)             if t0[idpnt]='pr' then error(1);
2131 (17931)             savtp1:=low(t0[idpnt]);
2132 (17939)             case token of
2133 (17944)               'to': k2:=1;
2134 (17958)               'dw': k2:=0
2135 (17973)               else merror(2,'to')
2136 (17987)             end {case of token};
2137 (17995)             scan; express; testtype(savtp1);
2138 (18013)             bottom1:=pc; code1(22);
2139 (18029)             gpval(idpnt,false,vartyp2);
2140 (18045)             code1(13-k2-k2);
2141 (18063)             savpc:=pc; code3(37,0);
2142 (18081)             testto('do'); scan; statmnt;
2143 (18098)             gpval(idpnt,false,vartyp2);
2144 (18114)             code1(21-k2);
2145 (18127)             gpval(idpnt,true,vartyp2);
2146 (18143)             code3(36,bottom1); fixup(savpc);
2147 (18165)             code3(35,-2);
2148 (18176)           end {for};
2149 (18176) 
2150 (18179)     'me': begin {mem}
2151 (18187)             parse(' ['); scan; express;
2152 (18204)             testtype('i');
2153 (18212)             testto(' ]'); parse(':=');
2154 (18230)             scan; express; code1(24);
2155 (18246)             testtype('i');
2156 (18254)           end {mem};
2157 (18254) 
2158 (18257)     'ca': begin {call}
2159 (18265)             parse(' ('); scan; express;
2160 (18282)             testtype('i');
2161 (18290)             testto(' )'); code1(25); scan
2162 (18307)           end {call};
2163 (18311) 
2164 (18314)     'op': openrw(47);
2165 (18330) 
2166 (18333)     'ow': openrw(48);
2167 (18349) 
2168 (18352)     'ob': openrw(80);
2169 (18368) 
2170 (18371)     'gb': begin
2171 (18379)             parse(' ('); scan; express;
2172 (18396)             testtype('f'); testto(' ,');
2173 (18413)             scan; express; testtype('i');
2174 (18429)             testto(' ,'); scan; testto('id');
2175 (18451)             idpnt:=findid;
2176 (18457)             if idpnt=0 then error(5);
2177 (18479)             getvar;
2178 (18483)             if relad<>0 then error(15);
2179 (18501)             code1($51); testferror;
2180 (18513)             gpval(idpnt,true,vartyp2);
2181 (18529)             testto(' )'); scan
2182 (18538)           end;
2183 (18542) 
2184 (18545)     'pb': begin
2185 (18553)             parse(' ('); scan; express;
2186 (18570)             testtype('f'); testto(' ,');
2187 (18587)             scan; express; testtype('i');
2188 (18603)             testto(' ,'); scan; express;
2189 (18620)             code1($52);testferror;
2190 (18632)             testto(' )');
2191 (18641)             scan
2192 (18641)           end;
2193 (18645) 
2194 (18648)     'ru': begin
2195 (18656)             code1($41); scan;
2196 (18668)           end;
2197 (18668) 
2198 (18671)     'fi': begin
2199 (18679)             code1(46); scan
2200 (18687)           end;
2201 (18691) 
2202 (18694)     'ge': gpsec(55);
2203 (18710) 
2204 (18713)     'pu': gpsec(56);
2205 (18729) 
2206 (18732)     'ex': begin {exit}
2207 (18740)             if level>0 then code1(1) else code1(0);
2208 (18769)             scan;
2209 (18773)           end;
2210 (18773) 
2211 (18776)     'cl': begin {close}
2212 (18784)             parse(' (');
2213 (18793)             repeat
2214 (18793)               scan; express; code1(49);
2215 (18809)               testtype('f');
2216 (18817)               testferror
2217 (18817)             until token<>' ,';
2218 (18828)             testto(' )'); scan;
2219 (18845)           end {close}
2220 (18845) 
2221 (18845)     else if (token<>'en') and (token<>' ;')
2222 (18863)       and (token<>'un') then begin
2223 (18874)       error(10); scan
2224 (18885)     end
2225 (18889)   end {case of statements}
2226 (18891) end;
2227 (18891) 
2228 (18892) { * findforw *          ( of block ) }
2229 (18892) 
2230 (18892) func findforw;
2231 (18892) 
2232 (18892) var i,j,sav1: integer;
2233 (18895) 
2234 (18895)   func found(start: integer):boolean;
2235 (18895)   var ii,i9: integer;
2236 (18898)   begin {compare}
2237 (18898)     ii:= 0;
2238 (18902)     repeat
2239 (18906)       ii:=succ(ii);
2240 (18910)     until (ii >= 8) or
2241 (18922)       (ident[ii] <> idtab[start+ii]);
2242 (18945)     found:=(ii >= 8);
2243 (18956)   end {compare};
2244 (18960) 
2245 (18961) 
2246 (18961) begin {findforw}
2247 (18961)   i:=succ(forwpn);
2248 (18967)   repeat
2249 (18972)     i:=prec(i)
2250 (18972)   until (i=0) or found(8*fortab[i]);
2251 (19007)   findforw:=i;
2252 (19011)   if i>0 then
2253 (19025)     if i=forwpn then forwpn:=forwpn-1
2254 (19045)     else begin
2255 (19055)       sav1:=fortab[i];
2256 (19059)       for j:=1 to forwpn-1 do
2257 (19079)       fortab[j]:=fortab[succ(j)];
2258 (19098)       fortab[forwpn]:=sav1;
2259 (19124)       findforw:=forwpn;
2260 (19132)       forwpn:=forwpn-1
2261 (19144)     end
2262 (19146) end {findforw};
2263 (19151) 
2264 (19152) 
2265 (19152) begin { *** body of block *** }
2266 (19152)   dpnt:=3; t2[bottom]:=pc;
2267 (19164)   code3(36,0);
2268 (19182)   stackpn1:=stackpnt; forwpn:=0;
2269 (19192) 
2270 (19196)   if token='co' then begin    { * const * }
2271 (19207)     scan;
2272 (19211)     repeat
2273 (19211)       deccon; testto(' ;'); scan
2274 (19224)     until token <> 'id';
2275 (19235)   end {const};
2276 (19239) 
2277 (19239)   if token='me' then memory;  { * mem * }
2278 (19254) 
2279 (19254)   if token='va' then variable;{ * var * }
2280 (19269) 
2281 (19269)   while (token='pr')or (token='fu') do begin
2282 (19289)     parlevel:=0;
2283 (19291)     case token of
2284 (19295)     'pr': begin               { * proc * }
2285 (19307)             parse('id'); npara:=0;
2286 (19318)             putsym('p','r'); cproc:=spnt;
2287 (19332)             level:=succ(level);
2288 (19344)           end;
2289 (19349)     'fu': begin               { * func * }
2290 (19360)             parse('id'); npara:=1;
2291 (19371)             putsym('f','i');
2292 (19385)             cproc:=spnt; level:=succ(level);
2293 (19397)             putsym('f','i');
2294 (19412)             t2[spnt]:=parlevel;
2295 (19416)             parlevel:=succ(parlevel);
2296 (19428)           end
2297 (19433)     end; {case of token}
2298 (19435)     if forwpn=0 then find:=0
2299 (19445)     else find:=findforw;
2300 (19460)     if find<>0 then begin
2301 (19471)       spnt:=spnt-npara-1;
2302 (19485)       cproc:=fortab[find];
2303 (19494)       fixup(t2[cproc]);
2304 (19516)     end;
2305 (19516)     scan; spnt1:=spnt;
2306 (19520)     dpnt1:=dpnt;
2307 (19528)     if token=' (' then parameter;
2308 (19551)     if t0[cproc]='fi' then function;
2309 (19570)     testto(' ;');
2310 (19579)     for i:=1 to npara do
2311 (19585)     t2[succ(spnt-i)]:=t2[succ(spnt-i)]
2312 (19617)           -parlevel;
2313 (19622)     scan;
2314 (19649)     if token='fw' then begin
2315 (19657)       if forwpn=8 then merror(13,'ov');
2316 (19681)       forwpn:=succ(forwpn);
2317 (19685)       fortab[forwpn]:=cproc;
2318 (19694)       t2[cproc]:=pc;
2319 (19706)       code3(36,0);
2320 (19724)       scan
2321 (19724)     end else block(cproc);
2322 (19741)     level:=prec(level);
2323 (19745)     dpnt:=dpnt1; spnt:=spnt1;
2324 (19758)     case high(t0[spnt]) of
2325 (19774)       'r':  t0[spnt]:=packed('t',low(t0[spnt]));
2326 (19798)       's':  t0[spnt]:=packed('u',low(t0[spnt]))
2327 (19826)     end {case};
2328 (19834)     testto(' ;'); scan
2329 (19843)   end {procedure of function};
2330 (19847) 
2331 (19850)   testto('be');     { * begin * }
2332 (19859)   if forwpn<>0 then merror(13,'ur');
2333 (19880)   fixup(t2[bottom]);
2334 (19894)   t2[bottom]:=pc;
2335 (19898)   scan;
2336 (19910)   code3(35,2*dpnt);
2337 (19925)   repeat
2338 (19925)     statmnt
2339 (19925)   until token='en';
2340 (19936)   scan;
2341 (19944)   if level>0 then code1(1) else code1(0);
2342 (19973)   stackpnt:=stackpn1;
2343 (19973) end {block};
2344 (19981) 
2345 (19982) { * savtable *    ( global) }
2346 (19982) 
2347 (19982) proc savtable; { save lib table in @ofno }
2348 (19982) 
2349 (19982) var i,j,num: integer;
2350 (19985)     vtype1: char;
2351 (19985) 
2352 (19985) begin
2353 (19985)   writeln(@ofno,spnt,',',pc+2);
2354 (20014)   for i:=1 to spnt do begin {for every entry }
2355 (20033)     for j:=1 to 8 do begin
2356 (20050)       write(@ofno,idtab[8*i+j])
2357 (20070)     end;
2358 (20074)     writeln(@ofno,',',t0[i],',',t1[i],',',
2359 (20121)       t2[i],',',t3[i]);
2360 (20148)     vtype1:=high(t0[i]);
2361 (20156)     if ((vtype1='p') or (vtype1='f') or
2362 (20175)       (vtype1='g')) and (t3[i]<>0) then begin
2363 (20196)       num:=stack[t3[i]];
2364 (20207)       write(@ofno,num);
2365 (20226)       for j:=1 to num do
2366 (20232)         write(@ofno,',',stack[t3[i]+j]);
2367 (20271)       write(@ofno,cr,lf);
2368 (20297)     end {then};
2369 (20297)   end {for}
2370 (20297) end {savtable};
2371 (20311) 
2372 (20312) { * main program * }
2373 (20312) 
2374 (20312) begin {main}
2375 (20312)   nlflg:=false;
2376 (20317)   init;scan;
2377 (20329)   case token of
2378 (20329)     'pg': begin
2379 (20341)             libflg:=false;
2380 (20343)             asetfile(pname,scyclus,sdrive,'Q');
2381 (20369)           end;
2382 (20369)     'li': begin
2383 (20380)             libflg:=true;
2384 (20382)             asetfile(pname,scyclus,sdrive,'T');
2385 (20408)           end
2386 (20408)     else
2387 (20408)       merror(2,'pg')
2388 (20416)   end {case}
2389 (20424)   parse('id');
2390 (20433)   i:=0;
2391 (20435)   repeat
2392 (20439)     i:=succ(i);
2393 (20443)   until (i>7) or (pname[i] = ':') or
2394 (20466)       (pname[i]<>uppercase(ident[i+1]));
2395 (20495)   if i<8 then
2396 (20505)     merror(2,packed(pname[0],pname[1]));
2397 (20530)     { name differs from filename }
2398 (20530)   parse(' ;');
2399 (20539)   if ofno<>nooutput then openw(ofno);
2400 (20555)   scan;
2401 (20559)   if (token='us') and (libflg=false) then begin
2402 (20575)     repeat
2403 (20578)       getlib; scan
2404 (20582)     until token<>' ,';
2405 (20593)     testto(' ;'); scan
2406 (20606)   end;
2407 (20610)   block(0); testto(' .');
2408 (20627)   if ofno<>nooutput then begin
2409 (20634)     write(@ofno,'E');
2410 (20645)     savebyte(pc and 255);
2411 (20658)     savebyte(pc shr 8);
2412 (20671)     close(ofno);
2413 (20677)     if libflg then begin
2414 (20681)       asetfile(pname,scyclus,sdrive,'L');
2415 (20706)       openw(ofno);
2416 (20712)       savtable;
2417 (20716)       close(ofno)
2418 (20716)     end
2419 (20722)   end else
2420 (20722)     runerr:=$87; {no loader file}
2421 (20731)   writeln;
2422 (20731)   writeln;
2423 (20737)   writeln('End compile');
2424 (20761)   writeln;
2425 (20761)   writeln('Code lenght:          ',pc);
2426 (20801)   writeln('Compiler stack size:  ',stackmax);
2427 (20835)   writeln('Ident stack size:     ',spntmax);
2428 (20869)   write('Pascal errors:        ');
2429 (20892)   if numerr>0 then write(invvid);
2430 (20905)   writeln(numerr,norvid);
2431 (20919)   if prt then begin
2432 (20923)     write(prtoff);
2433 (20929)     setemucom(9);
2434 (20937)   end;
2435 (20937)   close(fno);
2436 (20943)   { check whether second pass is not required }
2437 (20943)   if (runerr=0) and libflg then runerr:=-1;
2438 (20959) end {main}.
2439 (20964) 

End compile

Code lenght:          20963
Compiler stack size:  136
Ident stack size:     216
Pascal errors:        0

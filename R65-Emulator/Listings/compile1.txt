
R65 Pascal program COMPILE1        10/11/23     page 1


                   1 (    4) {   ********************************
                   2 (    4)     *                              *
                   3 (    4)     *  R65 "Tiny" Pascal Compiler  *
                   4 (    4)     *            Pass 1            *
                   5 (    4)     *                              *
                   6 (    4)     ********************************
                   7 (    4) 
                   8 (    4) First version 1978 by rricharz
                   9 (    4) Original version 3.7 (20K)  01/08/82 rricharz
                  10 (    4) 
                  11 (    4) Recovered 2018 by rricharz (r77@bluewin.ch)
                  12 (    4) Improved 2018-2023 by rricharz
                  13 (    4) Version 4 with cpnt strings
                  14 (    4) 
                  15 (    4) Original derived from the publication by
                  16 (    4) Kin-Man Chung and Herbert Yen in
                  17 (    4) Byte, Volume 3, Number 9 and Number 10, 1978
                  18 (    4) 
                  19 (    4) Adapted for the R65 computer system and
                  20 (    4) substantially enhanced by rricharz 1978-1982
                  21 (    4) 
                  22 (    4) This is a Pascal derivative optimized for 8-bit
                  23 (    4) microprocessors (integer type is 16 bit) with
                  24 (    4) additional features (mem) to interact directly
                  25 (    4) with the microprocessor hardware. Only one
                  26 (    4) dimensional arrays and no records or user
                  27 (    4) defined types. Floating point numbers (real)
                  28 (    4) and file io to floppy disks are supported.
                  29 (    4) 
                  30 (    4) Precompiled libraries are merged in the loader.
                  31 (    4) The table of reserved words and the library
                  32 (    4) tables are loaded from the same drive as
                  33 (    4) the compiler.
                  34 (    4) 
                  35 (    4) The output of the program is a loader file for
                  36 (    4) the Pascal loader (compile2).
                  37 (    4) 
                  38 (    4) usage:
                  39 (    4)  compile1 name[.cy[,drv]] [xxx]
                  40 (    4)   where x:       l,p: no hard copy print
                  41 (    4)                  i,r: index bound checking
                  42 (    4)                  n: no loader file
                  43 (    4)   [] means not required                     }
                  44 (    4) 
                  45 (    4) program compile1;
                  46 (    4) 
                  47 (    4) uses syslib, arglib;
                  48 ( 1093) 
                  49 ( 1093) const table     =$97ff; {user ident table -1}
                  50 ( 1096)       idtab     =$95ff; {resword table -1}
                  51 ( 1096)       idlength  =64;    {max. length of ident}
                  52 ( 1096)       stacksize =256;   {stack size}
                  53 ( 1096)       pagelenght=60;    {no of lines per page}
                  54 ( 1096)       nooutput  =@0;
                  55 ( 1096)       maxfi     =3;     {max number of ins fls}
                  56 ( 1096) 
                  57 ( 1096) {
                  58 ( 1096) The compiler uses 2 fixed memory areas to store
                  59 ( 1096) the table of reserved words and the table of

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 2

                  60 ( 1096) idents. The top of the Pascal stack (endstk) is
                  61 ( 1096) adjusted accordingly. The reason for this hack
                  62 ( 1096) is speed and convenience. A normal Pascal array
                  63 ( 1096) of chars would store the chars as 16 bit
                  64 ( 1096) numers and would therefore require twice the
                  65 ( 1096) space. An array of packed chars would require
                  66 ( 1096) more coding and slow the scanner module of the
                  67 ( 1096) compiler down.                               }
                  68 ( 1096) 
                  69 ( 1096)     nresw=61;   {number of res. words, max 64}
                  70 ( 1096)     symbsize=256;     {id table entries}
                  71 ( 1096)     reswtabpos=$c600; { up to $c7ff }
                  72 ( 1096)     idtabpos=$be00;   { up to $c5ff }
                  73 ( 1096) 
                  74 ( 1096)     yesoutput=@255;
                  75 ( 1096) 
                  76 ( 1096) mem endstk  =$000e: integer;
                  77 ( 1096)     reswtab =reswtabpos: array[$200] of char&;
                  78 ( 1096)     idtab   =idtabpos: array[$800] of char&;
                  79 ( 1096) 
                  80 ( 1096) var tpos,pc,level,line,offset,dpnt,spnt,fipnt,
                  81 ( 1096)     npara,i,stackpnt,stackmax,spntmax,numerr
                  82 ( 1096)                               :integer;
                  83 ( 1096) 
                  84 ( 1096)     scyclus,sdrive,cdrive: integer;
                  85 ( 1096) 
                  86 ( 1096)     pname: array[15] of char;
                  87 ( 1096) 
                  88 ( 1096)     value: array[1] of integer;
                  89 ( 1096) 
                  90 ( 1096)     ch,restype,vartype:char;
                  91 ( 1096) 
                  92 ( 1096)     token: packed char;
                  93 ( 1096) 
                  94 ( 1096)     prt,libflg,icheck,ateof: boolean;
                  95 ( 1096) 
                  96 ( 1096)     fno,ofno: file;
                  97 ( 1096) 
                  98 ( 1096)     filstk: array[maxfi] of file;
                  99 ( 1096) 
                 100 ( 1096)     ident: array[idlength] of char;
                 101 ( 1096)     { Only the first 8 characters are
                 102 ( 1096)       used to find and differentiate ids }
                 103 ( 1096) 
                 104 ( 1096)     t0: array[symbsize] of packed char;
                 105 ( 1096)            {type of symbol}
                 106 ( 1096) 
                 107 ( 1096)         {High letter:
                 108 ( 1096)          a:array, c:constant, d;const parameter.
                 109 ( 1096)          e:constant array parameter, f:function,
                 110 ( 1096)          g:array function, h;8-bit memory var,
                 111 ( 1096)          i:8-bit array memory variable,
                 112 ( 1096)          m:16-bit memory variable,
                 113 ( 1096)          n:16-bit array memory variable,
                 114 ( 1096)          p:procedure,
                 115 ( 1096)          q:indexed cpnt,
                 116 ( 1096)          r,t:function result,
                 117 ( 1096)          s,u:array function result,
                 118 ( 1096)          v:variable, w:variable parameter,
                 119 ( 1096)          x:variable array parameter

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 3

                 120 ( 1096) 
                 121 ( 1096)          Low letter:
                 122 ( 1096)          i:integer, c:char, p:packed char,
                 123 ( 1096)          q:cpoint (pointer to char),
                 124 ( 1096)          r:real(array multiple of two),
                 125 ( 1096)          f:file, b:boolean, u:undefined  }
                 126 ( 1096) 
                 127 ( 1096)     t1: array[symbsize] of integer;
                 128 ( 1096)          {level}
                 129 ( 1096)     t2: array[symbsize] of integer;
                 130 ( 1096)          {val,dis,addr}
                 131 ( 1096)     t3: array[symbsize] of integer;
                 132 ( 1096)          {stack pointer,size of array}
                 133 ( 1096) 
                 134 ( 1096)     reswcod:array[nresw] of packed char;
                 135 ( 1096) 
                 136 ( 1096)     stack: array[stacksize] of integer;
                 137 ( 1096) 
                 138 ( 1096) 
                 139 ( 1096) {       * savebyte *    (global)        }
                 140 ( 1096) 
                 141 ( 1096) proc savebyte(x: integer);
                 142 ( 1096) 
                 143 ( 1096) begin
                 144 ( 1096)     if ofno<>nooutput then begin
                 145 ( 1108)       write(@ofno,
                 146 ( 1111)         chr(((x and 255) shr 4)+ord('0')));
                 147 ( 1132)       write(@ofno,chr((x and 15)+ord('0')))
                 148 ( 1147)     end
                 149 ( 1150) end {savebyte};
                 150 ( 1150) 
                 151 ( 1151) {       * crlf *        (global)        }
                 152 ( 1151) 
                 153 ( 1151) proc newpage; forward;
                 154 ( 1154) 
                 155 ( 1154) proc crlf;
                 156 ( 1154)   var i: integer;
                 157 ( 1157) begin
                 158 ( 1157)   writeln;
                 159 ( 1159)   line:=succ(line);
                 160 ( 1169)   if (line div pagelenght)*pagelength=line
                 161 ( 1184)     then newpage;
                 162 ( 1196)   if prt then
                 163 ( 1196)     for i:=1 to 16 do write(@printer,' ')
                 164 ( 1225) end {crlf};
                 165 ( 1240) 
                 166 ( 1241) {       error message   (global)        }
                 167 ( 1241) 
                 168 ( 1241) proc merror(x: integer; code: packed char);
                 169 ( 1241) 
                 170 ( 1241) var i: integer;
                 171 ( 1244)     answer: char;
                 172 ( 1244) 
                 173 ( 1244) begin
                 174 ( 1244)   crlf; numerr:=succ(numerr);
                 175 ( 1254)   for i:=2 to tpos do write(' ');
                 176 ( 1280)   write('^'); crlf;
                 177 ( 1300)   write('*** (',numerr,',',pc,')   ');
                 178 ( 1323)   case x of
                 179 ( 1323)     01: write('Ident');

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 4

                 180 ( 1340)     02: write('Ident ',code,' expected');
                 181 ( 1376)     03: write('Var declaration');
                 182 ( 1402)     04: write('Const expected');
                 183 ( 1427)     05: write('Ident unknown');
                 184 ( 1451)     06: write('Cannot be assigned');
                 185 ( 1480)     07: write('Symbol table overflow');
                 186 ( 1512)     08: write('Stack overflow');
                 187 ( 1537)     09: write('Expression');
                 188 ( 1558)     10: write('Statement');
                 189 ( 1578)     11: write('Declaration');
                 190 ( 1600)     12: write('Constant');
                 191 ( 1619)     13: write('Forward reference: ',code);
                 192 ( 1658)     14: write('Type mismatch: ',code);
                 193 ( 1693)     15: write('Array size');
                 194 ( 1714)     16: write('Array (8-bit)');
                 195 ( 1738)     17: write('Real');
                 196 ( 1753)     18: write('File table overflow');
                 197 ( 1783)     19: write('Parameter')
                 198 ( 1803)   end {case};
                 199 ( 1805)   writeln;
                 200 ( 1805)   write('Continue?');
                 201 ( 1821)   read(@key,answer);
                 202 ( 1829)   if answer<>'Y' then begin
                 203 ( 1837)     crlf; write(prtoff); setemucom(9); close(fno);
                 204 ( 1861)     if (ofno<>nooutput) and (ofno<>yesoutput)
                 205 ( 1874)       then close(ofno);
                 206 ( 1885)     writeln('Aborting compile1 on request');
                 207 ( 1920)     abort
                 208 ( 1920)   end
                 209 ( 1924)   else crlf;
                 210 ( 1931)   if (ofno<>nooutput) and (ofno<>yesoutput)
                 211 ( 1944)     then close(ofno);
                 212 ( 1955)   ofno:=nooutput;
                 213 ( 1957) end {merror};
                 214 ( 1961) 
                 215 ( 1962) proc error(x: integer);
                 216 ( 1962) 
                 217 ( 1962) begin
                 218 ( 1962)   merror(x,'##')
                 219 ( 1974) end;
                 220 ( 1980) 
                 221 ( 1981) {       * push & pop *  (global) }
                 222 ( 1981) 
                 223 ( 1981) proc push(x: %integer);
                 224 ( 1981) 
                 225 ( 1981) begin
                 226 ( 1981)   if stackpnt>=stacksize then error(8)
                 227 ( 1999)   else stackpnt:=succ(stackpnt);
                 228 ( 2012)   if stackpnt>stackmax then stackmax:=stackpnt;
                 229 ( 2029)   stack[stackpnt]:=x;
                 230 ( 2041) end {push};
                 231 ( 2049) 
                 232 ( 2050) func pop: integer;
                 233 ( 2050) 
                 234 ( 2050) begin
                 235 ( 2050)   pop:=stack[stackpnt];
                 236 ( 2059)   stackpnt:=prec(stackpnt)
                 237 ( 2067) end {pop};
                 238 ( 2076) 
                 239 ( 2077) {       * newpage *     (global) }

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 5

                 240 ( 2077) 
                 241 ( 2077) proc newpage;
                 242 ( 2077) 
                 243 ( 2077) var i: integer;
                 244 ( 2080) 
                 245 ( 2080) begin
                 246 ( 2080)   if (line<>0) and prt then
                 247 ( 2089)     write(@printer,formfeed);
                 248 ( 2104)   writeln; { Do not count this line}
                 249 ( 2110)   if pname[0]<>'x' then begin
                 250 ( 2119)     write('R65 Pascal ');
                 251 ( 2134)     if libflg then write('library ')
                 252 ( 2150)     else write('program ');
                 253 ( 2162)     prtext16(output,pname);
                 254 ( 2176)   end;
                 255 ( 2176)   tab(34);
                 256 ( 2184)   prtdate(output); write('     ');
                 257 ( 2198)   writeln('page ',(line div pagelenght)+1);
                 258 ( 2221)   writeln;
                 259 ( 2221) end {newpage};
                 260 ( 2227) 
                 261 ( 2228) {       * getchr *      (global) }
                 262 ( 2228) 
                 263 ( 2228) proc getchr;
                 264 ( 2228) 
                 265 ( 2228)   proc writenum(i: integer);
                 266 ( 2231)   begin
                 267 ( 2231)     if i<=999 then write(' ');
                 268 ( 2249)     if i<=99 then write(' ');
                 269 ( 2261)     if i<=9 then write(' ');
                 270 ( 2273)     write(i);
                 271 ( 2278)   end;
                 272 ( 2278) 
                 273 ( 2279) begin
                 274 ( 2279)   if ateof then begin
                 275 ( 2285)     writeln('Unexpected eof');
                 276 ( 2309)     abort;
                 277 ( 2313)   end else begin
                 278 ( 2316)     read(@fno,ch);
                 279 ( 2326)     if ch=cr then begin
                 280 ( 2334)       crlf;
                 281 ( 2341)       writenum(line); write(' (');
                 282 ( 2354)       if (pc+2)<9999 then write(' ');
                 283 ( 2370)       writenum(pc+2); write(') ');
                 284 ( 2386)       ch:=' ';
                 285 ( 2388)     end {if}
                 286 ( 2392)     else if ch=eof then begin
                 287 ( 2402)       ateof:=true;
                 288 ( 2407)       { we need to suppy one more char }
                 289 ( 2411)       { for end. at end of file to work properly }
                 290 ( 2411)       ch:=' ';
                 291 ( 2413)     end {else if}
                 292 ( 2417)     else write(ch);
                 293 ( 2425)   end;
                 294 ( 2425) end {getchr};
                 295 ( 2425) 
                 296 ( 2426) {       * splitconv *   (global) }
                 297 ( 2426) 
                 298 ( 2426) proc splitconv(a: array[1] of %integer;
                 299 ( 2426)   var b:array[1] of %integer);

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 6

                 300 ( 2426) 
                 301 ( 2426) begin
                 302 ( 2426)   b:=a;
                 303 ( 2431) end;
                 304 ( 2443) 
                 305 ( 2444) {       * init *        (global) }
                 306 ( 2444) 
                 307 ( 2444) proc init;
                 308 ( 2444) 
                 309 ( 2444) const char96=chr(20);
                 310 ( 2447) 
                 311 ( 2447) var i,j,dummy: integer;
                 312 ( 2447)     dch: char;
                 313 ( 2447)     pch: packed char;
                 314 ( 2447)     request: array[15] of char;
                 315 ( 2447)     default: boolean;
                 316 ( 2447) 
                 317 ( 2447) begin {init}
                 318 ( 2447)   ateof:=false;
                 319 ( 2451)   cdrive:=fildrv; { drive of compile program }
                 320 ( 2462)   fipnt:=-1;
                 321 ( 2464)   endstk:=idtabpos-144;
                 322 ( 2474)   pc:=2; dpnt:=0; spnt:=0; offset:=2;
                 323 ( 2498)   npara:=0; level:=0;
                 324 ( 2510)   stackpnt:=0; libflg:=false;
                 325 ( 2522)   stackmax:=0;spntmax:=0; numerr:=0;
                 326 ( 2540)   t0[0]:='vi'; t1[0]:=0; t2[0]:=0; t3[0]:=0;
                 327 ( 2573)   { prepare resword table }
                 328 ( 2577)   writeln('Reading list of reserved words');
                 329 ( 2614)   asetfile('RESWORDS:W      ',0,cdrive,'W');
                 330 ( 2646)   openr(fno);
                 331 ( 2652)   for i:=0 to nresw do begin
                 332 ( 2669)     read(@fno,pch,dch);
                 333 ( 2686)     reswcod[i]:=pch;
                 334 ( 2691)     for j:=0 to 7 do reswtab[8*i+j]:=' ';
                 335 ( 2730)     j:=0;
                 336 ( 2753)     while (j<8) and (dch<>cr) do begin
                 337 ( 2775)       read(@fno,dch);
                 338 ( 2785)       if (dch<>cr) then
                 339 ( 2793)         reswtab[8*i+j]:=dch;
                 340 ( 2808)       j:=succ(j)
                 341 ( 2819)     end;
                 342 ( 2828)     while (dch<>cr) and (dch<>eof) do
                 343 ( 2845)       read(@fno,dch)
                 344 ( 2854)   end;
                 345 ( 2863)   close(fno);
                 346 ( 2883) 
                 347 ( 2883)   writeln;
                 348 ( 2883)   writeln('R65 PASCAL COMPILER');
                 349 ( 2915)   writeln('Version 4.1, Pass 1');
                 350 ( 2941) 
                 351 ( 2941)   sdrive:=1; {default drive for source }
                 352 ( 2947)   scyclus:=0;
                 353 ( 2949)   agetstring(pname,default,scyclus,sdrive);
                 354 ( 2993) 
                 355 ( 2993)   agetstring(request,default,dummy,dummy);
                 356 ( 3033)   icheck:=false;
                 357 ( 3035)   prt:=true; ofno:=yesoutput;
                 358 ( 3047)   if not default then begin
                 359 ( 3056)     if request[0]<>'/' then argerror(103);

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 7

                 360 ( 3079)     for i:=1 to 8 do
                 361 ( 3087)       case request[i] of
                 362 ( 3100)         'P','L': prt:=false;
                 363 ( 3120)         'I','R': icheck:=true;
                 364 ( 3143)         'N': ofno:=nooutput;
                 365 ( 3159)         ' ': begin end
                 366 ( 3173)         else argerror(104)
                 367 ( 3178)       end; {case}
                 368 ( 3200)   end;
                 369 ( 3200) 
                 370 ( 3200)   asetfile(pname,scyclus,sdrive,'P');
                 371 ( 3222)   openr(fno);
                 372 ( 3228)   scyclus:=filcyc; { may have changed }
                 373 ( 3236) 
                 374 ( 3236)   {save cyclus and drive for compile2}
                 375 ( 3236)   arglist[8]:=scyclus;
                 376 ( 3238)   arglist[9]:=sdrive;
                 377 ( 3252)   numarg:=1;
                 378 ( 3266) 
                 379 ( 3270)   if prt then begin
                 380 ( 3274)     write(prton);
                 381 ( 3280)     setemucom(8);
                 382 ( 3288)   end
                 383 ( 3288) 
                 384 ( 3288)   line:=0; newpage; crlf; line:=1;
                 385 ( 3304)   write('   1 (    4) '); getchr
                 386 ( 3322) end {init};
                 387 ( 3326) 
                 388 ( 3327) 
                 389 ( 3327) { ############################# }
                 390 ( 3327) {       *scan*              (global)    }
                 391 ( 3327) { ############################# }
                 392 ( 3327) { scan input and make tokens }
                 393 ( 3327) 
                 394 ( 3327) proc scan;
                 395 ( 3327) 
                 396 ( 3327) var count,ll,hh,i,i1,co: integer;
                 397 ( 3330)     name: array[7] of char;
                 398 ( 3330) 
                 399 ( 3330) {       * compresw*     (of scan)       }
                 400 ( 3330) 
                 401 ( 3330) func compresw(index: integer);
                 402 ( 3330) 
                 403 ( 3330) var addr,ci,i: integer;
                 404 ( 3333) 
                 405 ( 3333) begin
                 406 ( 3333)   addr:=8*index; i:=0;
                 407 ( 3348)   repeat
                 408 ( 3352)     ci:=ord(ident[i+1])-ord(reswtab[addr+i]);
                 409 ( 3377)     i:=succ(i)
                 410 ( 3382)   until (ci<>0) or (i>=8);
                 411 ( 3405)   compresw:=ci
                 412 ( 3409) end {compresw};
                 413 ( 3417) 
                 414 ( 3418) {       * clear *       (of scan)              }
                 415 ( 3418) 
                 416 ( 3418) proc clear; {clears 8 chars of identifier}
                 417 ( 3418) 
                 418 ( 3418) var i: integer;
                 419 ( 3421) 

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 8

                 420 ( 3421) begin
                 421 ( 3421)   for i:=1 to 8 do ident[i]:=' '
                 422 ( 3444) end;
                 423 ( 3464) 
                 424 ( 3465) {       * pack *        (of scan)              }
                 425 ( 3465) 
                 426 ( 3465) proc pack;  {packs token and ch to token }
                 427 ( 3465) 
                 428 ( 3465) begin
                 429 ( 3465)   token:=packed(low(token),ch); getchr
                 430 ( 3484) end;
                 431 ( 3488) 
                 432 ( 3489) {       * setval *      (of scan)              }
                 433 ( 3489) 
                 434 ( 3489) proc setval;
                 435 ( 3489) 
                 436 ( 3489) var r: real;
                 437 ( 3492)     n,n1: integer;
                 438 ( 3492)     ems: boolean;
                 439 ( 3492) 
                 440 ( 3492)   func times10(r:real):real;
                 441 ( 3492)   { slightly more accurate than 10.0*r }
                 442 ( 3492)   var r2,r4:real;
                 443 ( 3495)   begin
                 444 ( 3495)     r2:=r+r;
                 445 ( 3503)     r4:=r2+r2;
                 446 ( 3522)     times10:=r2+r4+r4;
                 447 ( 3548)   end;
                 448 ( 3561) 
                 449 ( 3562) begin
                 450 ( 3562)   r:=0.0;
                 451 ( 3570)   repeat
                 452 ( 3576)     r:=times10(r)+conv(ord(ch)-ord('0'));
                 453 ( 3597)     getchr;
                 454 ( 3609)   until (ch<'0') or (ch>'9');
                 455 ( 3623)   if ch<>'.' then begin {numeric integer}
                 456 ( 3637)     token:='nu';
                 457 ( 3640)     value[0]:=trunc(r+0.5);
                 458 ( 3659)   end
                 459 ( 3664)   else begin {numeric real}
                 460 ( 3667)     n:=0; getchr;
                 461 ( 3677)     while (ch<='9') and (ch>='0') do begin
                 462 ( 3695)       r:=times10(r)+conv(ord(ch)-ord('0'));
                 463 ( 3716)       n:=prec(n); getchr
                 464 ( 3733)     end;
                 465 ( 3737)     if ch='e' then begin
                 466 ( 3747)       ems:=false; getchr;
                 467 ( 3760)       case ch of
                 468 ( 3760)         '+': getchr;
                 469 ( 3775)         '-': begin ems:=true; getchr end
                 470 ( 3795)       end;
                 471 ( 3797)       if (ch>'9') or (ch<'0') then error(17)
                 472 ( 3817)       else begin
                 473 ( 3826)         n1:=ord(ch)-ord('0');
                 474 ( 3832)         getchr;
                 475 ( 3841)         if (ch<='9') and (ch>='0') then begin
                 476 ( 3856)           n1:=10*n1+ord(ch)-ord('0');
                 477 ( 3873)           getchr
                 478 ( 3878)         end;
                 479 ( 3882)         if ems then n:=n-n1 else n:=n+n1

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 9

                 480 ( 3909)       end
                 481 ( 3909)     end;
                 482 ( 3918)     while n>0 do begin
                 483 ( 3928)       n:=prec(n);
                 484 ( 3932)       r:=times10(r);
                 485 ( 3951)     end;
                 486 ( 3957)     while n<0 do begin
                 487 ( 3970)       n:=succ(n); r:=0.1*r;
                 488 ( 3985)     end;
                 489 ( 3998)     splitconv(r,value);
                 490 ( 4025)     token:='ru'
                 491 ( 4025)   end
                 492 ( 4028) end {setval};
                 493 ( 4032) 
                 494 ( 4033) {       * setid *       (of scan)              }
                 495 ( 4033) 
                 496 ( 4033) proc setid; {sets one char to ident}
                 497 ( 4033) 
                 498 ( 4033) begin
                 499 ( 4033)   if count<=idlength then begin
                 500 ( 4045)     ident[count]:=ch; count:=succ(count)
                 501 ( 4060)   end;
                 502 ( 4069)   getchr;
                 503 ( 4073) end {setid};
                 504 ( 4073) 
                 505 ( 4074) begin { ***** body of scan ***** }
                 506 ( 4074)   count:=1; while ch=' ' do getchr;
                 507 ( 4096)   tpos:=curpos;
                 508 ( 4102) 
                 509 ( 4106)   if (ch<'a') or (ch>'z') then begin {main if}
                 510 ( 4124)     if (ch<'0') or (ch>'9') then begin {symb}
                 511 ( 4142)       token:=packed(' ',ch); getchr;
                 512 ( 4157)       case low(token) of
                 513 ( 4161)         '<': if (ch='=') or (ch='>') then pack;
                 514 ( 4191)         '>',':': if (ch='=') then pack;
                 515 ( 4222)         '{': begin repeat
                 516 ( 4232)                getchr until ch='}'; getchr; scan
                 517 ( 4250)              end;
                 518 ( 4254)         '$': begin {hex constant}
                 519 ( 4264)                token:='nu'; value[0]:=0;
                 520 ( 4275)                while ((ch>='0')and(ch<='9'))
                 521 ( 4293)                      or((ch>='a')and(ch<='f'))
                 522 ( 4308)                      do begin
                 523 ( 4313)                  if ch>'9' then
                 524 ( 4319)                    value[0]:=(value[0] shl 4)
                 525 ( 4333)                      +ord(ch)-ord('a')+10
                 526 ( 4342)                  else
                 527 ( 4344)                    value[0]:=(value[0] shl 4)
                 528 ( 4362)                      +ord(ch)-ord('0');
                 529 ( 4370)                  getchr
                 530 ( 4375)                end {do}
                 531 ( 4379)              end; {hex constant}
                 532 ( 4385)         chr(39): begin {string}
                 533 ( 4392)                token:='st';
                 534 ( 4395)                repeat setid until ch=chr(39);
                 535 ( 4409)                value[0]:=prec(count); getchr
                 536 ( 4425)               end
                 537 ( 4429)       end {case of token}
                 538 ( 4431)     end {special symbols}
                 539 ( 4431)     else setval {numeric value}

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 10

                 540 ( 4438)   end {main if}
                 541 ( 4438)   else begin {ident}
                 542 ( 4441)     clear;
                 543 ( 4445)     repeat
                 544 ( 4445)       setid
                 545 ( 4445)       until (ch<'0') or (ch>'z') or
                 546 ( 4463)         ((ch>'9') and (ch<'A')) or
                 547 ( 4479)         ((ch>'Z') and (ch<'a'));
                 548 ( 4495)     ll:=0; hh:=nresw; {look up in resword table}
                 549 ( 4511)     repeat
                 550 ( 4511)       i:=(ll+hh) shr 1; co:=compresw(i);
                 551 ( 4539)       if (co<0) then hh:=prec(i)
                 552 ( 4553)       else ll:=succ(i);
                 553 ( 4569)       until (co=0) or (ll>hh);
                 554 ( 4590)     if (co=0) then
                 555 ( 4601)       token:=reswcod[i] {reserved word found}
                 556 ( 4608)     else token:='id' {ident}
                 557 ( 4622)   end {odent}
                 558 ( 4626) end {scan};
                 559 ( 4626) 
                 560 ( 4627) { * testto/parse * }
                 561 ( 4627) 
                 562 ( 4627) { parce source for specific token; else error }
                 563 ( 4627) 
                 564 ( 4627) proc testto(x: packed char); { current token }
                 565 ( 4627) begin
                 566 ( 4627)   if token<>x then merror(2,x)
                 567 ( 4646) end;
                 568 ( 4656) 
                 569 ( 4657) proc parse(x: packed char); { next token }
                 570 ( 4657) begin
                 571 ( 4657)   scan; testto(x);
                 572 ( 4676) end;
                 573 ( 4676) 
                 574 ( 4677) { * getlib * }
                 575 ( 4677) 
                 576 ( 4677) proc getlib;  { read library data }
                 577 ( 4677) 
                 578 ( 4677) var i,j,nent,addr,size,num,x,base: integer;
                 579 ( 4680)     libfil: file;
                 580 ( 4680)     ch,ltyp2,dummy: char;
                 581 ( 4680)     name: array[7] of char;
                 582 ( 4680) 
                 583 ( 4680) begin
                 584 ( 4680)   scan; if token=' ,' then scan;
                 585 ( 4701)   testto('id');
                 586 ( 4710)   base:=pc-2;
                 587 ( 4716)   if (ofno<>nooutput) then write(@ofno,'L');
                 588 ( 4739)   for i:=0 to 7 do begin
                 589 ( 4756)     name[i]:=ident[succ(i)];
                 590 ( 4765)     if ofno<>nooutput then
                 591 ( 4779)       write(@ofno,ident[succ(i)])
                 592 ( 4793)   end;
                 593 ( 4799)   write(prtoff);
                 594 ( 4816)   asetfile(name&'        ',0,cdrive,'L');
                 595 ( 4846)   openr(libfil);  { get table file }
                 596 ( 4852)   read(@libfil,nent,size);
                 597 ( 4867)   {including cr,lf}
                 598 ( 4868)   for i:=succ(spnt) to spnt+nent do begin
                 599 ( 4895)     if spnt>symbsize then error(7);

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 11

                 600 ( 4914)     spnt:=succ(spnt); addr:=8*i+1;
                 601 ( 4932)     for j:=0 to 7 do begin
                 602 ( 4954)       read(@libfil,ch);
                 603 ( 4964)       idtab[addr+j]:=ch
                 604 ( 4974)     end;
                 605 ( 4985)     read(@libfil,ch);
                 606 ( 5009)     read(@libfil,t0[i],dummy,t1[i],t2[i],t3[i]);
                 607 ( 5058)     t1[i]:=t1[i]+level;
                 608 ( 5071)     ltyp2:=high(t0[i]);
                 609 ( 5088)     if (ltyp2='p')or(ltyp2='f')
                 610 ( 5106)       or(ltyp2='g') then begin
                 611 ( 5116)       t2[i]:=t2[i]+base;
                 612 ( 5131)       if t3[i]<>0 then begin {stack data}
                 613 ( 5154)         read(@libfil,num);
                 614 ( 5164)         push(num); t3[i]:=stackpnt;
                 615 ( 5179)         for j:=1 to num do begin
                 616 ( 5206)           read(@libfil,x);
                 617 ( 5216)           push(x);
                 618 ( 5227)         end {for j};
                 619 ( 5227)       end {stack data}
                 620 ( 5241)     end {if ltyp2}
                 621 ( 5241)   end {for i}
                 622 ( 5241)   level:=succ(level); pc:=pc+size; offset:=pc;
                 623 ( 5277)   close(libfil);
                 624 ( 5291)   if spnt>spntmax then spntmax:=spnt;
                 625 ( 5303)   if stackpnt>stackmax then stackmax:=stackpnt;
                 626 ( 5323)   if prt then write(prton);
                 627 ( 5341) end {getlib};
                 628 ( 5341) 
                 629 ( 5342) 
                 630 ( 5342) { #################################### }
                 631 ( 5342) {       * block * (global): handle one block }
                 632 ( 5342) { #################################### }
                 633 ( 5342) 
                 634 ( 5342) 
                 635 ( 5342) proc block(bottom: integer);
                 636 ( 5342) 
                 637 ( 5342) var l,f9,i,n,stackpn1,forwpn,find,cproc,
                 638 ( 5345)     spnt1,dpnt1,parlevel: integer;
                 639 ( 5345)     fortab: array[8] of integer;
                 640 ( 5345) 
                 641 ( 5345) { * testtype *      (of block) }
                 642 ( 5345) 
                 643 ( 5345) proc testtype(ttype: char);
                 644 ( 5345) 
                 645 ( 5345) begin
                 646 ( 5345)   if restype<>ttype then
                 647 ( 5354)     if (restype<>'u') and (ttype<>'u') then
                 648 ( 5376)       merror(14,packed(ttype,restype));
                 649 ( 5397) end;
                 650 ( 5397) 
                 651 ( 5398) { * find ident *    (of block) }
                 652 ( 5398) { this is a fast version for compiler speed }
                 653 ( 5398) 
                 654 ( 5398) func findid; {search in table for id }
                 655 ( 5398) 
                 656 ( 5398) var k,i: integer;
                 657 ( 5401)     id1: char;
                 658 ( 5401) 
                 659 ( 5401) begin

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 12

                 660 ( 5401) 
                 661 ( 5401)   i:=1; k:=8*spnt+9; id1:=ident[1];
                 662 ( 5425) 
                 663 ( 5433)   repeat
                 664 ( 5433)     k:=k-8;
                 665 ( 5439)     while (idtab[k]<>id1) and (k>0) do k:=k-8;
                 666 ( 5475)     if k>0 then begin
                 667 ( 5490)        i:=1;
                 668 ( 5495)        repeat i:=succ(i)
                 669 ( 5499)          until (i>8) or
                 670 ( 5515)              (idtab[k+i-1]<>ident[i]);
                 671 ( 5541)     end;
                 672 ( 5545)     until (i>8) or (k<=0);
                 673 ( 5559)   if k<=0 then begin
                 674 ( 5570)     findid:=0;
                 675 ( 5575)   end
                 676 ( 5579)   else
                 677 ( 5579)     findid:=(k-1) shr 3;
                 678 ( 5591) end;
                 679 ( 5596) 
                 680 ( 5597) { * code1 *      (of block) }
                 681 ( 5597) 
                 682 ( 5597) proc code1(x: %integer);  {set one byte p-code}
                 683 ( 5597) begin
                 684 ( 5597)   savebyte(x); pc:=succ(pc)
                 685 ( 5612) end;
                 686 ( 5621) 
                 687 ( 5622) { * code2 *    (of block) }
                 688 ( 5622) 
                 689 ( 5622) proc code2(x,y: integer);
                 690 ( 5622) begin
                 691 ( 5622)   code1(x); code1(y);
                 692 ( 5647) end;
                 693 ( 5647) 
                 694 ( 5648) { * code3 *    (of block) }
                 695 ( 5648) 
                 696 ( 5648) proc code3(x: integer; y1: %integer);
                 697 ( 5648) 
                 698 ( 5648) var y: integer;
                 699 ( 5651) 
                 700 ( 5651) begin {code3}
                 701 ( 5651)   y:=y1;
                 702 ( 5653)   if (x=34) and (y>=0) and (y<256) then
                 703 ( 5684)     code2(32,y)
                 704 ( 5690)   else begin
                 705 ( 5703)     if (x=35) and (y>-128) and (y<=127) then
                 706 ( 5726)       begin
                 707 ( 5727)         if (y<0) then y:=y+256;
                 708 ( 5747)         code2(33,y);
                 709 ( 5764)       end
                 710 ( 5764)     else begin
                 711 ( 5767)       if (x>=36) and (x<=38) then y:=y-pc-1;
                 712 ( 5796)       code1(x); code1(y and 255);
                 713 ( 5824)       code1(y shr 8);
                 714 ( 5837)     end
                 715 ( 5837)   end
                 716 ( 5837) end {code3};
                 717 ( 5837) 
                 718 ( 5838) { * putsym *   (of block) }
                 719 ( 5838) 

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 13

                 720 ( 5838) proc putsym(ltyp1,ltyp2: char);
                 721 ( 5838) 
                 722 ( 5838) var i,addr: integer;
                 723 ( 5841) begin
                 724 ( 5841)   if spnt>symbsize then error(7)
                 725 ( 5856)   else spnt:=succ(spnt);
                 726 ( 5869)   if spnt>spntmax then spntmax:=spnt;
                 727 ( 5886)   t0[spnt]:=packed(ltyp1,ltyp2);
                 728 ( 5907)   t3[spnt]:=0;
                 729 ( 5917)   addr:=8*spnt;
                 730 ( 5923)   for i:=1 to 8 do idtab[addr+i]:=ident[i];
                 731 ( 5962)   if ltyp1='v' then begin
                 732 ( 5994)     t2[spnt]:=dpnt; dpnt:=succ(dpnt);
                 733 ( 6013)   end;
                 734 ( 6018)   t1[spnt]:=level
                 735 ( 6022) end {putsym};
                 736 ( 6030) 
                 737 ( 6031) { * checkindex *  (of block) }
                 738 ( 6031) 
                 739 ( 6031) proc checkindex(lowlim,highlim: integer);
                 740 ( 6031) begin
                 741 ( 6031)   if icheck then begin
                 742 ( 6040)     code3($40,lowlim-1);
                 743 ( 6058)     code2(highlim and 255, highlim shr 8)
                 744 ( 6071)   end
                 745 ( 6078) end;
                 746 ( 6078) 
                 747 ( 6079) { * getcon *      (of block) }
                 748 ( 6079) 
                 749 ( 6079) func getcon;
                 750 ( 6079) 
                 751 ( 6079) var idpnt,val,ii: integer;
                 752 ( 6082)     rval: real;
                 753 ( 6082)     sign: char;
                 754 ( 6082) begin
                 755 ( 6082)   restype:='i';
                 756 ( 6086)   if token=' -' then begin
                 757 ( 6098)     sign:='-'; scan
                 758 ( 6107)   end else begin
                 759 ( 6114)     sign:='+'; if token=' +' then scan
                 760 ( 6128)   end;
                 761 ( 6135)   case token of
                 762 ( 6135)     'nu': val:=value[0];
                 763 ( 6149)     'ru': begin val:=value[0];
                 764 ( 6170)             restype:='r' end;
                 765 ( 6184)     'st': if value[0]=1 then begin
                 766 ( 6204)             restype:='c';
                 767 ( 6209)             val:=ord(ident[1])
                 768 ( 6215)           end else if value[0]=2 then begin
                 769 ( 6235)             val:=(ord(ident[1]) shl 8) +
                 770 ( 6247)               ord(ident[2]);
                 771 ( 6253)               restype:='p';
                 772 ( 6260)           end
                 773 ( 6264)           else error(15);
                 774 ( 6275)     'cr': begin parse(' ('); scan; val:=getcon;
                 775 ( 6305)             if (val>127) or (val<0) then
                 776 ( 6323)               error(12);
                 777 ( 6335)             testtype('i');
                 778 ( 6343)             restype:='c'; parse(' )');
                 779 ( 6358)           end;

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 14

                 780 ( 6358)     'tr': begin val:=1; restype:='b' end;
                 781 ( 6381)     'fa': begin val:=0; restype:='b' end;
                 782 ( 6404)     'cp': begin
                 783 ( 6415)             scan; val:=getcon;
                 784 ( 6425)             testtype('i'); restype:='q';
                 785 ( 6439)           end;
                 786 ( 6443)     ' @': begin scan; val:=getcon;
                 787 ( 6464)             testtype('i'); restype:='f'
                 788 ( 6476)           end
                 789 ( 6478)     else begin
                 790 ( 6485)       testto('id'); idpnt:=findid;
                 791 ( 6500)       if (idpnt>0) and (high(t0[idpnt])='c')
                 792 ( 6522)       then begin
                 793 ( 6524)         val:=t2[idpnt];
                 794 ( 6531)         restype:=low(t0[idpnt]);
                 795 ( 6547)         if restype='r' then
                 796 ( 6558)           value[1]:=t3[idpnt];
                 797 ( 6568)       end
                 798 ( 6576)       else begin error(4); val:=0;
                 799 ( 6589)         restype:='i'
                 800 ( 6593)       end
                 801 ( 6595)     end
                 802 ( 6599)   end {case};
                 803 ( 6601)   if sign='-' then
                 804 ( 6607)     case restype of
                 805 ( 6611)       'i': getcon:=-val;
                 806 ( 6622)       'r': begin value[0]:=val;
                 807 ( 6643)              splitconv(value,rval);
                 808 ( 6675)              splitconv(-rval,value);
                 809 ( 6700)              getcon:=value[0]
                 810 ( 6702)            end
                 811 ( 6702)       else error(12)
                 812 ( 6715)     end {case}
                 813 ( 6723)   else getcon:=val;
                 814 ( 6726) end {getcon};
                 815 ( 6734) 
                 816 ( 6735) { * deccon *         ( of block ) }
                 817 ( 6735) 
                 818 ( 6735) proc deccon;    { declare constant }
                 819 ( 6735) begin
                 820 ( 6735)   if token=' ;' then scan;
                 821 ( 6755)   testto('id');
                 822 ( 6764)   putsym('c','i');
                 823 ( 6774)   parse(' ='); scan;
                 824 ( 6787)   t2[spnt]:=getcon;
                 825 ( 6797)   if (restype='r') then t3[spnt]:=value[1];
                 826 ( 6817)   if restype<>'i' then
                 827 ( 6831)     t0[spnt]:=packed('c',restype);
                 828 ( 6846)   scan
                 829 ( 6850) end {deccon};
                 830 ( 6854) 
                 831 ( 6855) { * decvar *          ( of block ) }
                 832 ( 6855) 
                 833 ( 6855) proc decvar(typ1,typ2: char);
                 834 ( 6855) begin
                 835 ( 6855)   if token=' ,' then scan;
                 836 ( 6875)   testto('id');
                 837 ( 6884)   putsym(typ1,typ2);
                 838 ( 6898)   scan;
                 839 ( 6902) end {decvar};

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 15

                 840 ( 6902) 
                 841 ( 6903) { * gettype *         ( of block ) }
                 842 ( 6903) 
                 843 ( 6903) proc gettype(var typ2: char;
                 844 ( 6903)   var aflag,uflag: boolean; var n: integer);
                 845 ( 6903) 
                 846 ( 6903) begin
                 847 ( 6903)   aflag:=false; n:=0; uflag:=false;
                 848 ( 6922)   scan;
                 849 ( 6930)   if token='ar' then begin
                 850 ( 6938)     parse(' ['); scan;
                 851 ( 6954)     n:=getcon; testtype('i');
                 852 ( 6972)     if (n<1) then begin error(15); n:=1 end;
                 853 ( 6996)     parse(' ]'); parse('of'); scan;
                 854 ( 7018)     aflag:=true
                 855 ( 7018)   end;
                 856 ( 7024)   if token=' %' then begin
                 857 ( 7032)     scan; uflag:=true
                 858 ( 7039)   end;
                 859 ( 7045)   case token of
                 860 ( 7045)     'in': typ2:='i';
                 861 ( 7059)     'ch': typ2:='c';
                 862 ( 7076)     'pa': begin parse ('ch'); typ2:='p' end;
                 863 ( 7106)     'bo': typ2:='b';
                 864 ( 7119)     'rl': begin typ2:='r'; aflag:=true;
                 865 ( 7142)             n:=prec(2*succ(n)) end;
                 866 ( 7159)     'cp': typ2:='q';
                 867 ( 7172)     'fl': typ2:='f'
                 868 ( 7187)     else begin error(11); typ2:='i';end
                 869 ( 7210)   end {case}
                 870 ( 7212) end {gettype};
                 871 ( 7212) 
                 872 ( 7213) { * variable *        ( of block) }
                 873 ( 7213) 
                 874 ( 7213) proc variable;  { variable declarations }
                 875 ( 7213) 
                 876 ( 7213) var typ1,typ2: char;
                 877 ( 7216)     i,l: integer;
                 878 ( 7216)     aflag,uflag: boolean;
                 879 ( 7216) 
                 880 ( 7216) begin
                 881 ( 7216)   scan;
                 882 ( 7222)   repeat {main loop}
                 883 ( 7222)     l:=0;
                 884 ( 7224)     repeat decvar('v','i'); l:=succ(l);
                 885 ( 7242)     until token<> ' ,';
                 886 ( 7254)     testto(' :');
                 887 ( 7267)     gettype(typ2,aflag,uflag,n);
                 888 ( 7303)     if uflag then error(11);
                 889 ( 7318)     if aflag then typ1:='a' else typ1:='v';
                 890 ( 7336)     if typ1='a' then begin {array}
                 891 ( 7350)        dpnt:=dpnt-l; {variable has been assumed}
                 892 ( 7363)        for i:=succ(spnt-l) to spnt do begin
                 893 ( 7390)          t2[i]:=dpnt; t3[i]:=n;
                 894 ( 7406)          dpnt:=succ(dpnt+n);
                 895 ( 7423)       end
                 896 ( 7428)     end {array};
                 897 ( 7442)     for i:=succ(spnt-l) to spnt do
                 898 ( 7456)       t0[i]:=packed(typ1,typ2);
                 899 ( 7482)     parse(' ;');scan

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 16

                 900 ( 7509)   until token<>'id' {end main loop}
                 901 ( 7520) end {variable};
                 902 ( 7524) 
                 903 ( 7525) { * fixup *           ( of block ) }
                 904 ( 7525) 
                 905 ( 7525) proc fixup(x: integer);
                 906 ( 7525) begin
                 907 ( 7525)   if ofno<>nooutput then begin
                 908 ( 7537)     write(@ofno,'F');
                 909 ( 7548)     savebyte(succ(x-offset) and 255);
                 910 ( 7567)     savebyte(succ(x-offset) shr 8);
                 911 ( 7586)     savebyte((pc-x-1) and 255);
                 912 ( 7607)     savebyte((pc-x-1) shr 8);
                 913 ( 7628)   end;
                 914 ( 7628) end;
                 915 ( 7628) 
                 916 ( 7629) { * function *        ( of block ) }
                 917 ( 7629) 
                 918 ( 7629) proc function;
                 919 ( 7629) 
                 920 ( 7629) var n: integer;
                 921 ( 7632)     typ1,typ2: char;
                 922 ( 7632)     aflag,uflag: boolean;
                 923 ( 7632) begin
                 924 ( 7632)   if token<>' :' then begin
                 925 ( 7642)     aflag:=false; uflag:=false; typ2:='i' end
                 926 ( 7659)   else begin
                 927 ( 7666)     gettype(typ2,aflag,uflag,n);
                 928 ( 7702)     scan
                 929 ( 7702)   end;
                 930 ( 7706)   if aflag then begin
                 931 ( 7710)     typ1:='s'; t3[succ(cproc)]:=n;
                 932 ( 7724)     t2[succ(cproc)]:=t2[succ(cproc)]-n
                 933 ( 7746)   end
                 934 ( 7746)   else typ1:='r';
                 935 ( 7760)   t0[succ(cproc)]:=packed(typ1,typ2);
                 936 ( 7778)   if uflag then typ2:='u';
                 937 ( 7791)   if aflag then typ1:='g'
                 938 ( 7802)   else typ1:='f';
                 939 ( 7813)   t0[cproc]:=packed(typ1,typ2);
                 940 ( 7830) end {function};
                 941 ( 7834) 
                 942 ( 7835) { * parameter *       ( of block ) }
                 943 ( 7835) 
                 944 ( 7835) proc parameter;
                 945 ( 7835) 
                 946 ( 7835) var counter1,counter2,i,n,bs: integer;
                 947 ( 7838)     aflag,uflag: boolean;
                 948 ( 7838)     vtype1,vtype2: char;
                 949 ( 7838)     vtype: packed char;
                 950 ( 7838) 
                 951 ( 7838) begin
                 952 ( 7838)   push(0); { dummy size, fixed later }
                 953 ( 7848)   if find=0 then t3[spnt-npara]:=stackpnt
                 954 ( 7867)   else bs:=stackpnt;
                 955 ( 7878)   counter1:=0
                 956 ( 7886)   repeat {main loop}
                 957 ( 7892)     counter2:=0;
                 958 ( 7894)     vtype1:='d'; vtype2:='i';
                 959 ( 7906)     scan;

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 17

                 960 ( 7914)     if token='co' then scan
                 961 ( 7922)     else if token='va' then begin
                 962 ( 7940)       scan; vtype1:='w' end; {variable param}
                 963 ( 7953)     end;
                 964 ( 7953)     repeat {inner loop}
                 965 ( 7953)       decvar(vtype1,vtype2);
                 966 ( 7967)       t2[spnt]:=parlevel;
                 967 ( 7971)       parlevel:=succ(parlevel);
                 968 ( 7983)       npara:=succ(npara);
                 969 ( 7992)       counter2:=succ(counter2);
                 970 ( 8001)       until token<>' ,';
                 971 ( 8013)     uflag:=false;aflag:=false; n:=0;
                 972 ( 8031)     if token<>' :' then
                 973 ( 8042)       vtype2:='i' {assume integer }
                 974 ( 8048)     else begin
                 975 ( 8055)       gettype(vtype2,aflag,uflag,n);
                 976 ( 8091)       if n>63 then error(15);
                 977 ( 8109)       scan
                 978 ( 8109)     end;
                 979 ( 8113)     if aflag then begin
                 980 ( 8117)       vtype1:=succ(vtype1);
                 981 ( 8124)       parlevel:=parlevel-counter2;
                 982 ( 8133)     end;
                 983 ( 8142)     vtype:=packed(vtype1,vtype2);
                 984 ( 8151)     for i:=1 to counter2 do begin
                 985 ( 8174)       if uflag then push(packed(vtype1,'u'))
                 986 ( 8188)       else push(vtype);
                 987 ( 8207)       if aflag then begin
                 988 ( 8211)         push(n); t3[spnt-counter2+i]:=n;
                 989 ( 8238)         t2[spnt-counter2+i]:=parlevel;
                 990 ( 8260)         parlevel:=succ(parlevel)+n;
                 991 ( 8273)       end {then};
                 992 ( 8282)       t0[spnt-counter2+i]:=vtype;
                 993 ( 8296)     end {for};
                 994 ( 8304)     if aflag then counter2:=2*counter2;
                 995 ( 8327)     counter1:=counter1+counter2;
                 996 ( 8340)     until token<>' ;'; {outer loop}
                 997 ( 8360)   testto(' )'); scan;
                 998 ( 8373)   if find=0 then
                 999 ( 8379)     stack[t3[spnt-npara]]:=counter1
                1000 ( 8396)   else begin {information is allready there}
                1001 ( 8407)     stack[bs]:=counter1;
                1002 ( 8411)     n:=t3[fortab[find]]; {existing stack data}
                1003 ( 8435)     for i:=0 to stackpnt-bs do
                1004 ( 8445)       if stack[bs+1]<>stack[n+1]
                1005 ( 8476)         then merror(13,'pa'); {parameter wrong}
                1006 ( 8510)     stackpnt:=prec(bs) {clear the new info}
                1007 ( 8514)   end  {else}
                1008 ( 8519) end {parameter};
                1009 ( 8519) 
                1010 ( 8520) { * memory *              ( of block) }
                1011 ( 8520) 
                1012 ( 8520) proc memory;
                1013 ( 8520) 
                1014 ( 8520) var typ1,typ2:char;
                1015 ( 8523)     i,l,n: integer;
                1016 ( 8523)     aflag,uflag: boolean;
                1017 ( 8523) 
                1018 ( 8523) begin
                1019 ( 8523)   scan;

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 18

                1020 ( 8529)   repeat {main loop}
                1021 ( 8529)     l:=0;
                1022 ( 8531)     repeat
                1023 ( 8535)       decvar('m','i');
                1024 ( 8545)       l:=succ(l); testto(' ='); scan;
                1025 ( 8567)       n:=getcon; testtype('i');
                1026 ( 8585)       scan; t2[spnt]:=n;
                1027 ( 8593)     until token<>' ,';
                1028 ( 8608)     testto(' :');
                1029 ( 8621)     gettype(typ2,aflag,uflag,n);
                1030 ( 8657)     if uflag then error(11);
                1031 ( 8672)     scan;
                1032 ( 8676)     if token=' &' then begin {8-bit}
                1033 ( 8687)       typ1:='h'; scan
                1034 ( 8693)     end
                1035 ( 8697)     else typ1:='m';
                1036 ( 8702)     if aflag then typ1:=succ(typ1);
                1037 ( 8717)     for i:=succ(spnt-l) to spnt do begin
                1038 ( 8749)       t0[i]:=packed(typ1,typ2);
                1039 ( 8762)       t3[i]:=n;
                1040 ( 8770)     end;
                1041 ( 8778)     testto(' ;'); scan;
                1042 ( 8805)   until token<>'id';
                1043 ( 8812) end {memory};
                1044 ( 8816) 
                1045 ( 8817) 
                1046 ( 8817) {######################################}
                1047 ( 8817) { * statement *           ( of block ) }
                1048 ( 8817) {######################################}
                1049 ( 8817) 
                1050 ( 8817) proc statmnt;
                1051 ( 8817) 
                1052 ( 8817) var idpnt,relad,k2,savpc,bottom1: integer;
                1053 ( 8820)     device,wln: boolean;
                1054 ( 8820)     savtp1,vartyp2: char;
                1055 ( 8820)     wl: boolean;
                1056 ( 8820) 
                1057 ( 8820) { * code4 *               ( of statement ) }
                1058 ( 8820) 
                1059 ( 8820) proc code4(x,y1,z1: integer); {set 4-byte code}
                1060 ( 8820) 
                1061 ( 8820) var y,z: integer;
                1062 ( 8823) 
                1063 ( 8823) begin
                1064 ( 8823)   y:=y1; z:=z1;
                1065 ( 8833)   if y<0 then y:=y+256;
                1066 ( 8858)   if x=43 then z:=z-pc-2;
                1067 ( 8884)   code1(x);code1(y);code1(z and 255);
                1068 ( 8922)   code1(z shr 8)
                1069 ( 8928) end {code4};
                1070 ( 8935) 
                1071 ( 8936) { * testferror *         ( of statement) ) }
                1072 ( 8936) 
                1073 ( 8936) proc testferror;
                1074 ( 8936) begin
                1075 ( 8936)   code1($4f);
                1076 ( 8949) end;
                1077 ( 8949) 
                1078 ( 8950) { * gpval *              ( of statement ) }
                1079 ( 8950) 

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 19

                1080 ( 8950) proc gpval(idpnt: integer;
                1081 ( 8950)   dir: boolean; typ: char);
                1082 ( 8950) 
                1083 ( 8950) var d: integer;
                1084 ( 8953) 
                1085 ( 8953) begin {gpval}
                1086 ( 8953)   if dir then d:=1 else d:=0;
                1087 ( 8973)   case typ of
                1088 ( 8977)   'h':  begin code3($22,t2[idpnt]);
                1089 ( 9004)           if dir then code1($3f);
                1090 ( 9019)           code1($17+d) end;
                1091 ( 9032)   'm':  begin code3($22,t2[idpnt]);
                1092 ( 9058)           code1($3d+d) end;
                1093 ( 9071)   'i':  begin
                1094 ( 9081)           if dir then code1($3f);
                1095 ( 9096)           code3($22,t2[idpnt]);
                1096 ( 9112)           code1(3);
                1097 ( 9120)           if dir then code1($3f);
                1098 ( 9135)           code1($17+d) end;
                1099 ( 9148)   'n':  begin if dir then code1($3f);
                1100 ( 9173)           code3($22,1); code1($12);
                1101 ( 9191)           code3($22,t2[idpnt]);
                1102 ( 9207)           code1(3); code1($3d+d) end
                1103 ( 9228)   else begin
                1104 ( 9231)     if typ='q' then begin
                1105 ( 9238)       code4($55,level-t1[idpnt],2*t2[idpnt]);
                1106 ( 9273)     end else
                1107 ( 9273)       code4($27+2*d+relad,level-t1[idpnt],
                1108 ( 9299)         2*t2[idpnt]);
                1109 ( 9321)     end
                1110 ( 9321)   end {case}
                1111 ( 9323) end;
                1112 ( 9323) 
                1113 ( 9324) { FORWARD decl. of mainexp (of statement) }
                1114 ( 9324) 
                1115 ( 9324) proc mainexp(reqtype: char;
                1116 ( 9324)   var arsize: integer); forward;
                1117 ( 9327) 
                1118 ( 9327) { * express *           ( of statement ) }
                1119 ( 9327) 
                1120 ( 9327) proc express; {requests a normal 16-bit result }
                1121 ( 9327) 
                1122 ( 9327) var resultsize: integer;
                1123 ( 9330) 
                1124 ( 9330) begin {express}
                1125 ( 9330)   mainexp('n',resultsize);
                1126 ( 9348)   if resultsize<>0 then error(15)
                1127 ( 9360) end {express};
                1128 ( 9366) 
                1129 ( 9367) { * arrayexp *          ( of mainexp) }
                1130 ( 9367) 
                1131 ( 9367) proc arrayexp(size: integer; eltype: char);
                1132 ( 9367) 
                1133 ( 9367) var resultsize: integer;
                1134 ( 9370) 
                1135 ( 9370) begin
                1136 ( 9370)   mainexp(eltype,resultsize);
                1137 ( 9390)   if resultsize<>size then error(15);
                1138 ( 9410)   testtype(eltype);
                1139 ( 9420) end;

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 20

                1140 ( 9420) 
                1141 ( 9421) { * getvar *            ( of statement ) }
                1142 ( 9421) 
                1143 ( 9421) proc getvar;
                1144 ( 9421) begin
                1145 ( 9421)   vartyp2:=high(t0[idpnt]);
                1146 ( 9434)   vartype:=low(t0[idpnt]);
                1147 ( 9447)   scan;
                1148 ( 9456)   if (vartype='q') and (token=' [') and
                1149 ( 9471)     ((vartyp2='v') or (vartyp2='d')) then begin
                1150 ( 9488)     vartyp2:='q'; vartype:='c';
                1151 ( 9499)   end;
                1152 ( 9503)   case vartyp2 of
                1153 ( 9503)   'a','x','s','i','n','q':
                1154 ( 9546)       begin
                1155 ( 9549)         if token=' [' then begin
                1156 ( 9557)           scan; express; relad:=1;
                1157 ( 9570)           if vartyp2='r' then begin
                1158 ( 9581)             relad:=3;
                1159 ( 9586)             code3($22,1); code1($12)
                1160 ( 9602)           end;
                1161 ( 9608)           if (vartyp2='q') and (t3[idpnt]=0) then
                1162 ( 9626)             checkindex(0,63)
                1163 ( 9634)           else
                1164 ( 9640)             checkindex(0,t3[idpnt]);
                1165 ( 9659)           testtype('i'); testto(' ]'); scan;
                1166 ( 9680)         end else relad:=2;
                1167 ( 9685)       end;
                1168 ( 9689)   'v','w','r','h','m': relad:=0;
                1169 ( 9729)   'c','d','e','t','u': error(6)
                1170 ( 9773)   else error(1)
                1171 ( 9784)   end {case}
                1172 ( 9792) end {getvar};
                1173 ( 9792) 
                1174 ( 9793) { * prcall *            ( of statement ) }
                1175 ( 9793) 
                1176 ( 9793) proc prcall (idpn1: integer);
                1177 ( 9793) 
                1178 ( 9793) var bstack,numpar,i,n,n2: integer;
                1179 ( 9796) 
                1180 ( 9796) { body of prcall follows later }
                1181 ( 9796) 
                1182 ( 9796) { * prcall1 *           ( of prcall ) }
                1183 ( 9796) 
                1184 ( 9796) proc prcall1;
                1185 ( 9796) var ressize:integer;
                1186 ( 9799) 
                1187 ( 9799)   proc prcall3;
                1188 ( 9799)   begin {prcall3}
                1189 ( 9802)     testto('id');
                1190 ( 9813)     idpnt:=findid;
                1191 ( 9819)     if idpnt=0 then error(5);
                1192 ( 9841)     getvar;
                1193 ( 9845)     if chr(stack[i] and 255)<>vartype then
                1194 ( 9857)       if chr(stack[i] and 255)<>'u' then
                1195 ( 9879)         error(14);
                1196 ( 9891)       push(idpnt);
                1197 ( 9901)   end {prcall3};
                1198 ( 9901) 
                1199 ( 9902) begin {prcall1}

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 21

                1200 ( 9902)   case chr(stack[i] shr 8) of
                1201 ( 9915)     'd':  begin
                1202 ( 9923)             if chr(stack[i] and 255) = 'q' then
                1203 ( 9937)               mainexp('q',ressize)
                1204 ( 9943)             else
                1205 ( 9957)               express;
                1206 ( 9964)             if chr(stack[i] and 255)<>'u' then
                1207 ( 9978)               testtype(chr(stack[i] and 255));
                1208 (10000)           end;
                1209 (10000)     'e':  begin
                1210 (10010)             arrayexp(stack[succ(i)],
                1211 (10015)               chr(stack[i]));
                1212 (10034)             i:=succ(i);
                1213 (10038)           end;
                1214 (10043)     'w':  begin
                1215 (10053)             prcall3;
                1216 (10057)             if relad<>0 then error(14);
                1217 (10075)             gpval(idpnt,false,vartyp2);
                1218 (10091)           end;
                1219 (10091)     'x':  begin
                1220 (10101)             prcall3;
                1221 (10105)             if relad<>2 then error(14);
                1222 (10123)             if vartyp2='i' then error(16);
                1223 (10141)             i:=succ(i);
                1224 (10145)             if stack[i]<>t3[idpnt] then
                1225 (10162)               error(15);
                1226 (10178)             if vartyp2='n' then begin
                1227 (10185)               code3($22,t2[idpnt]);
                1228 (10204)               code1($3d);
                1229 (10212)             end else code4($27,level-t1[idpnt],
                1230 (10225)               2*t2[idpnt]);
                1231 (10247)             code2($3b,stack[i]);
                1232 (10263)           end
                1233 (10263)     else error(14)
                1234 (10268)   end {case}
                1235 (10276) end {prcall1};
                1236 (10276) 
                1237 (10277) proc prcall2;
                1238 (10277) begin
                1239 (10277)   if n>0 then code3(35,-2*n);
                1240 (10308)   n:=0
                1241 (10308) end {prcall2};
                1242 (10314) 
                1243 (10315) begin {body of prcall}
                1244 (10315)   if t3[idpn1]<>0 then begin
                1245 (10328)     bstack:=t3[idpn1];
                1246 (10335)     numpar:=stack[bstack];
                1247 (10347)     parse(' ('); scan;
                1248 (10368)     for i:=succ(bstack) to bstack+numpar do
                1249 (10381)     begin
                1250 (10395)       prcall1;
                1251 (10399)       if i<bstack+numpar then begin
                1252 (10413)         testto(' ,'); scan
                1253 (10425)       end
                1254 (10429)     end;
                1255 (10429)     testto(' )');
                1256 (10452)   end {then};
                1257 (10452)   code4(43,level-t1[idpn1],t2[idpn1]);
                1258 (10481)   if t3[idpn1]<>0 then begin
                1259 (10492)     n:=0; i:=bstack+numpar;

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 22

                1260 (10505)     repeat
                1261 (10514)       case chr(stack[i] shr 8) of
                1262 (10525)       'd':  n:=succ(n);
                1263 (10537)       'w':  begin
                1264 (10552)               prcall2; idpnt:=pop;
                1265 (10562)               gpval(idpnt,true,
                1266 (10572)                   high(t0[idpnt]));
                1267 (10587)             end;
                1268 (10587)       chr(0): begin
                1269 (10597)             n2:=stack[i];
                1270 (10601)             i:=i-1;
                1271 (10615)             case chr(stack[i] shr 8) of
                1272 (10631)               'e':  n:=succ(n+n2);
                1273 (10648)               'x':  begin
                1274 (10663)                       prcall2;
                1275 (10667)                       idpnt:=pop;
                1276 (10673)                       if high(t0[idpnt])='n'
                1277 (10686)                       then begin
                1278 (10689)                         code3($22,t2[idpnt]+
                1279 (10698)                           2*t3[idpnt]);
                1280 (10720)                         code1($3e)
                1281 (10722)                       end else
                1282 (10728)                         code4(41,
                1283 (10733)                           level-t1[idpnt],
                1284 (10741)                           2*(t2[idpnt]+
                1285 (10752)                           t3[idpnt]));
                1286 (10772)                       code2($3c,t3[idpnt])
                1287 (10778)                     end
                1288 (10788)               end {case}
                1289 (10790)             end
                1290 (10790)       end; {case}
                1291 (10792)       i:=prec(i);
                1292 (10796)     until i=bstack;
                1293 (10805)     prcall2
                1294 (10813)   end
                1295 (10817) end {prcall};
                1296 (10817) 
                1297 (10818) 
                1298 (10818) {###################################}
                1299 (10818) { * mainexp *       ( of statement) }
                1300 (10818) {###################################}
                1301 (10818) {  see forward declaration above    }
                1302 (10818) 
                1303 (10818) proc mainexp(reqtype: char;
                1304 (10818)   var arsize: integer);
                1305 (10818) 
                1306 (10818) { variables of mainexp}
                1307 (10818) var opcode,roff: integer;
                1308 (10821)     savtype: char;
                1309 (10821) 
                1310 (10821) { * argument *         ( of mainexp ) }
                1311 (10821) 
                1312 (10821) proc argument(rtype: char);
                1313 (10821) begin
                1314 (10821)   parse(' ('); scan; express;
                1315 (10843)   testtype(rtype);
                1316 (10853)   testto(' )'); scan
                1317 (10862) end; {argument}
                1318 (10867) 
                1319 (10867) {#######################################}

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 23

                1320 (10867) { * simexp *             ( of mainexp ) }
                1321 (10867) {#######################################}
                1322 (10867) 
                1323 (10867) proc simexp(var arsize1: integer);
                1324 (10867) 
                1325 (10867) var opcode: integer;
                1326 (10870)     sign: char;
                1327 (10870) 
                1328 (10870) {body of simexp  follows later }
                1329 (10870) 
                1330 (10870) {#######################################}
                1331 (10870) { * term *               ( of simexp )  }
                1332 (10870) {#######################################}
                1333 (10870) 
                1334 (10870) proc term(var arsize2: integer);
                1335 (10870) 
                1336 (10870) var opcode: integer;
                1337 (10873) 
                1338 (10873) { body of term follows later }
                1339 (10873) 
                1340 (10873) {#######################################}
                1341 (10873) { * factor *             ( of term )    }
                1342 (10873) {#######################################}
                1343 (10873) 
                1344 (10873) proc factor(var arsize3: integer);
                1345 (10873) 
                1346 (10873) var i, idpnt: integer;
                1347 (10876) 
                1348 (10876) { * index *              ( of factor )  }
                1349 (10876) 
                1350 (10876) proc index(chk: boolean);
                1351 (10876) 
                1352 (10876) var savtype: char;
                1353 (10879) 
                1354 (10879) begin {index}
                1355 (10879)   scan; savtype:=restype;
                1356 (10885)   express; testtype('i'); testto(' ]');
                1357 (10914)   if savtype='r' then begin
                1358 (10921)     code3($22,1); code1($12);
                1359 (10942)   end;
                1360 (10942)   if chk then begin
                1361 (10946)     if (savtype='q') and (t3[idpnt]=0) then
                1362 (10967)       { is an arrayed cpnt }
                1363 (10968)       checkindex(0,63)
                1364 (10975)     else
                1365 (10981)       checkindex(0,t3[idpnt]);
                1366 (11000)   end;
                1367 (11000)   restype:=savtype; scan
                1368 (11008) end;
                1369 (11012) 
                1370 (11013) 
                1371 (11013) begin { *** body of factor *** }
                1372 (11013)   arsize3:=0;
                1373 (11017)   case token of
                1374 (11021)     'id': begin {identifier }
                1375 (11033)             idpnt:=findid;
                1376 (11039)             if idpnt=0 then error(5);
                1377 (11061)             restype:=low(t0[idpnt]);
                1378 (11069)             case high(t0[idpnt]) of
                1379 (11082)               'v','w','d':

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 24

                1380 (11101)                     begin
                1381 (11104)                       scan;
                1382 (11108)                       if (restype='q') and (token=' [')
                1383 (11122)                       then begin
                1384 (11124)                         code4(39,level-t1[idpnt],
                1385 (11137)                           2*t2[idpnt]);
                1386 (11159)                         index(true);
                1387 (11167)                         code1($03);
                1388 (11175)                         code1($54);
                1389 (11183)                         restype:='c';
                1390 (11185)                       end
                1391 (11189)                       else
                1392 (11189)                         code4(39,level-t1[idpnt],
                1393 (11202)                           2*t2[idpnt]);
                1394 (11224)                     end;
                1395 (11224)               'h':  begin code3($22,t2[idpnt]);
                1396 (11250)                       code1($17); scan end;
                1397 (11262)               'i':  begin code3($22,t2[idpnt]);
                1398 (11288)                       scan;
                1399 (11292)                       if token=' [' then begin
                1400 (11300)                         index(true); code1($03);
                1401 (11319)                         code1($17)
                1402 (11321)                       end else begin
                1403 (11330)                         error(16)
                1404 (11332)                       end
                1405 (11338)                     end;
                1406 (11338)               'm':  begin code3($22,t2[idpnt]);
                1407 (11364)                       code1($3d); scan
                1408 (11372)                     end;
                1409 (11376)               'n':  begin code3($22,t2[idpnt]);
                1410 (11402)                       scan;
                1411 (11406)                       if token=' [' then begin
                1412 (11414)                         index(true);
                1413 (11425)                         code3($22,1);code1($12);
                1414 (11443)                         code1($03); code1($3d);
                1415 (11459)                         if restype='r' then
                1416 (11465)                         begin
                1417 (11466)                           code2($3b,1);
                1418 (11479)                           arsize3:=1
                1419 (11479)                         end
                1420 (11481)                       end else begin
                1421 (11488)                         code1($3d);
                1422 (11496)                         code2($3b,t3[idpnt]);
                1423 (11512)                         arsize3:=t3[idpnt];
                1424 (11516)                       end
                1425 (11524)                     end;
                1426 (11524)               'r','t': begin
                1427 (11541)                       code3(35,2);
                1428 (11551)                       idpnt:=prec(idpnt);
                1429 (11555)                       prcall(idpnt); scan;
                1430 (11574)                       restype:=low(t0[idpnt]);
                1431 (11582)                     end;
                1432 (11587)               'c':  if low(t0[idpnt])<>'r' then
                1433 (11608)                       begin code3(34,t2[idpnt]);
                1434 (11628)                       scan end
                1435 (11632)                     else begin
                1436 (11635)                       code2($3a,2);
                1437 (11645)                       code2(t2[idpnt] and 255,
                1438 (11655)                         t2[idpnt] shr 8);
                1439 (11673)                       code2(t3[idpnt] and 255,

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 25

                1440 (11683)                         t3[idpnt] shr 8);
                1441 (11701)                       arsize3:=1; scan
                1442 (11707)                     end;
                1443 (11711)               'a','e','x':
                1444 (11732)                     begin scan;
                1445 (11739)                       if token=' [' then begin
                1446 (11747)                         index(true);
                1447 (11758)                         code4($28,
                1448 (11760)                             level-t1[idpnt],
                1449 (11768)                             2*t2[idpnt]);
                1450 (11790)                         if restype='r' then
                1451 (11796)                         begin
                1452 (11797)                           code2($3b,1);
                1453 (11810)                           arsize3:=1
                1454 (11810)                         end
                1455 (11812)                       end else begin
                1456 (11819)                         code4($27,
                1457 (11821)                             level-t1[idpnt],
                1458 (11829)                             2*t2[idpnt]);
                1459 (11851)                         code2($3b,t3[idpnt]);
                1460 (11867)                         arsize3:=t3[idpnt];
                1461 (11871)                       end
                1462 (11879)                     end;
                1463 (11879)               's','u':
                1464 (11893)                     begin
                1465 (11896)                       code3(35,2*t3[idpnt]+2);
                1466 (11918)                       idpnt:=prec(idpnt);
                1467 (11922)                       prcall(idpnt); scan;
                1468 (11941)                       restype:=low(t0[idpnt]);
                1469 (11949)                       idpnt:=succ(idpnt);
                1470 (11958)                       arsize3:=t3[idpnt]
                1471 (11963)                     end
                1472 (11967)               else error(1)
                1473 (11980)             end {case}
                1474 (11988)           end; {identifier}
                1475 (11991)     'nu': begin code3(34,value[0]); scan;
                1476 (12017)             restype:='i'
                1477 (12017)           end;
                1478 (12023)     'ru': begin code2($3a,2);
                1479 (12044)             code2(value[0] and 255,
                1480 (12052)               value[0] shr 8);
                1481 (12068)             code2(value[1] and 255,
                1482 (12076)               value[1] shr 8);
                1483 (12092)             scan; restype:='r';
                1484 (12098)             arsize3:=1
                1485 (12102)           end;
                1486 (12108)     'st': begin
                1487 (12119)           if (reqtype='n') and (value[0]<3)
                1488 (12134)             then begin
                1489 (12136)               if value[0]<2 then begin
                1490 (12148)                 code3(34,ord(ident[1]));
                1491 (12165)                 restype:='c'
                1492 (12165)               end else begin
                1493 (12174)                 code3(34,packed(ident[1],
                1494 (12178)                   ident[2]));
                1495 (12195)                 restype:='p'
                1496 (12195)               end
                1497 (12197)             end else begin
                1498 (12204)               case reqtype of
                1499 (12204)                 'c','u','n','q':

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 26

                1500 (12233)                     begin
                1501 (12236)                       if (vartype='q') or
                1502 (12243)                          (reqtype='q') then begin
                1503 (12251)                         arsize3:=0;
                1504 (12256)                         restype:='q';
                1505 (12262)                         code2($56,value[0]);
                1506 (12280)                       end else begin
                1507 (12283)                         arsize3:=prec(value[0]);
                1508 (12289)                         restype:='c';
                1509 (12296)                         code2($39,value[0]);
                1510 (12314)                       end;
                1511 (12314)                       for i:=1 to value[0] do
                1512 (12322)                         code1(ord(ident[i]));
                1513 (12349)                       if (vartype='q') or
                1514 (12370)                          (reqtype='q') then code1(0);
                1515 (12389)                     end;
                1516 (12389)                 'p': begin
                1517 (12399)                       if odd(value[0]) then
                1518 (12405)                         error(15);
                1519 (12417)                       value[0]:=value[0] shr 1;
                1520 (12427)                       arsize3:=prec(value[0]);
                1521 (12438)                       restype:='p';
                1522 (12445)                       code2($3a,value[0]);
                1523 (12463)                       for i:=1 to value[0] do
                1524 (12471)                         begin
                1525 (12484)                         code1(ident[2*i]);
                1526 (12501)                         code1(ident[2*i-1]);
                1527 (12521)                       end
                1528 (12521)                     end
                1529 (12521)                 else error(14)
                1530 (12540)               end {case}
                1531 (12548)             end;
                1532 (12548)             scan
                1533 (12548)           end;
                1534 (12552)     'od': begin
                1535 (12563)             argument('i'); code1(7);
                1536 (12579)             restype:='b'
                1537 (12579)           end;
                1538 (12585)     'me': begin
                1539 (12596)             parse(' ['); index(false);
                1540 (12613)             code1(23); restype:='i';
                1541 (12623)           end;
                1542 (12627)     ' (': begin
                1543 (12638)             scan; mainexp(reqtype,arsize3);
                1544 (12660)             testto(' )'); scan
                1545 (12669)           end; {no type change}
                1546 (12676)     'no': begin
                1547 (12684)             scan; factor(arsize3);
                1548 (12700)             if (arsize3<>0) then error(15);
                1549 (12718)             code1($11);
                1550 (12726)             if restype<>'i' then
                1551 (12732)               testtype('b')
                1552 (12738)           end;
                1553 (12744)     'cr': begin
                1554 (12755)             argument('i'); code1(52);
                1555 (12771)             restype:='c'
                1556 (12771)           end;
                1557 (12777)     'hi': begin
                1558 (12788)             argument('p'); code1(51);
                1559 (12804)             restype:='c'

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 27

                1560 (12804)           end;
                1561 (12810)     'lo': begin
                1562 (12821)             argument('p'); code1(52);
                1563 (12837)             restype:='c'
                1564 (12837)           end;
                1565 (12843)     'su': begin
                1566 (12854)             argument('u'); code1($14);
                1567 (12870)           end;
                1568 (12870)     'pc': begin
                1569 (12881)             argument('u'); code1($15)
                1570 (12891)           end;
                1571 (12897)     'cp': begin
                1572 (12908)             argument('i'); restype:='q';
                1573 (12918)           end;
                1574 (12922)     'ni': begin
                1575 (12933)             code3(34,0); scan; restype:='q';
                1576 (12949)           end;
                1577 (12953)     'ox': begin
                1578 (12964)             argument('u');
                1579 (12972)             restype:='i'
                1580 (12972)           end;
                1581 (12978)     ' @': begin
                1582 (12989)             scan; factor(arsize3);
                1583 (13005)             if arsize3<>0 then error(15);
                1584 (13023)             testtype('i');
                1585 (13031)             restype:='f'
                1586 (13031)           end;
                1587 (13037)     'tr': begin
                1588 (13048)             code3(34,1); scan;
                1589 (13062)             restype:='b';
                1590 (13064)           end;
                1591 (13068)     'fa': begin
                1592 (13079)             code3(34,0); scan;
                1593 (13093)             restype:='b'
                1594 (13093)           end;
                1595 (13099)     'tc': begin
                1596 (13110)             parse(' ('); scan;
                1597 (13123)             arrayexp(1,'r');
                1598 (13133)             testto(' )'); scan;
                1599 (13146)             code1($47); restype:='i';
                1600 (13156)           end;
                1601 (13160)     'cv': begin
                1602 (13171)             argument('i');
                1603 (13179)             code1($46); arsize3:=1;
                1604 (13189)             restype:='r'
                1605 (13193)           end;
                1606 (13199)     'pa': begin
                1607 (13210)             parse(' ('); scan; express;
                1608 (13227)             testtype('c');
                1609 (13235)             if token=' ,' then begin
                1610 (13243)               scan; express; testtype('c');
                1611 (13262)               code1(53)
                1612 (13264)             end;
                1613 (13270)             testto(' )'); scan; restype:='p'
                1614 (13283)           end
                1615 (13285)     else error(1)
                1616 (13294)   end {case of token}
                1617 (13302) end {factor};
                1618 (13302) 
                1619 (13303) begin  { *** body of term *** }

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 28

                1620 (13303)   factor(arsize2);
                1621 (13317)   repeat
                1622 (13317)     case token of
                1623 (13317)       ' *': opcode:=5;
                1624 (13331)       'di': opcode:=6;
                1625 (13348)       'an': opcode:=15;
                1626 (13365)       'sh': opcode:=18;
                1627 (13382)       'sr': opcode:=19;
                1628 (13399)       ' /': opcode:=$45
                1629 (13414)       else opcode:=0
                1630 (13423)     end {case};
                1631 (13431)     if opcode>0 then begin
                1632 (13438)       if (restype='r') and
                1633 (13448)             (arsize2=1) then begin
                1634 (13456)         scan; factor(arsize2);
                1635 (13475)         if (restype<>'r') or (arsize2<>1) then
                1636 (13489)           error(14);
                1637 (13501)         case opcode of
                1638 (13501)           5: code1($44);
                1639 (13520)           $45: code1($45)
                1640 (13532)           else error(17)
                1641 (13543)         end{case}
                1642 (13551)       end else begin
                1643 (13554)         if opcode=$45 then error(9);
                1644 (13572)         if arsize2<>0 then error(15);
                1645 (13590)         if (restype='b') and (opcode=15)
                1646 (13603)           then begin
                1647 (13605)           scan; factor(arsize2);
                1648 (13624)           if arsize2<>0 then error(15);
                1649 (13642)           testtype('b');
                1650 (13650)           code1(opcode)
                1651 (13650)         end else begin
                1652 (13663)           testtype('i'); scan;
                1653 (13675)           factor(arsize2);
                1654 (13687)           if arsize2<>0 then error(15);
                1655 (13705)           testtype('i'); code1(opcode);
                1656 (13723)         end
                1657 (13723)       end
                1658 (13723)     end;
                1659 (13723)   until opcode=0;
                1660 (13729) end {term};
                1661 (13733) 
                1662 (13734) 
                1663 (13734) begin { *** body of simexp *** }
                1664 (13734)   sign:=' ';
                1665 (13738)   if token=' +' then begin
                1666 (13750)     sign:='+'; scan
                1667 (13759)   end else if token=' -' then begin
                1668 (13774)     sign:='-'; scan
                1669 (13783)   end;
                1670 (13787)   term(arsize1);
                1671 (13799)   if sign<>' ' then begin
                1672 (13806)     if (restype='r')and (arsize1=1) then begin
                1673 (13824)       if sign='-' then code1($4e)
                1674 (13839)     end else begin
                1675 (13848)       testtype('i');
                1676 (13856)       if arsize1<>0 then error(15);
                1677 (13874)       if sign='-' then code1(2);
                1678 (13892)     end
                1679 (13892)   end;

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 29

                1680 (13892)   repeat
                1681 (13892)     case token of
                1682 (13892)       ' &': opcode:=1;
                1683 (13906)       ' +': opcode:=3;
                1684 (13923)       ' -': opcode:=4;
                1685 (13940)       'or': opcode:=14;
                1686 (13957)       'xo': opcode:=16
                1687 (13972)       else opcode:=0
                1688 (13981)     end {case};
                1689 (13989)     if opcode>1 then begin {if 1}
                1690 (13999)       if (restype='r') and (arsize1=1)
                1691 (14012)         then begin {real}
                1692 (14017)         scan; term(arsize1);
                1693 (14033)         if (restype<>'r') or (arsize1<>1) then
                1694 (14047)           error(17);
                1695 (14059)         case opcode of
                1696 (14059)           3:  code1($42);
                1697 (14078)           4:  code1($43)
                1698 (14090)           else error(17)
                1699 (14101)         end {case}
                1700 (14109)       end {real}
                1701 (14109)       else begin {not real}
                1702 (14112)         if (arsize1<>0) then error(15);
                1703 (14130)         if (restype='b') and (opcode>=14)
                1704 (14143)           then begin {boolean}
                1705 (14148)           scan; term(arsize1);
                1706 (14164)           if arsize1<>0 then error(15);
                1707 (14182)           testtype('b'); code1(opcode)
                1708 (14190)         end {boolean}
                1709 (14200)         else begin {not boolean}
                1710 (14203)           testtype('i'); scan;
                1711 (14215)           term(arsize1);
                1712 (14227)           if arsize1<>0 then error(15);
                1713 (14245)           testtype('i'); code1(opcode);
                1714 (14263)         end {not boolean}
                1715 (14263)       end {not real}
                1716 (14263)     end {if 1}
                1717 (14263)     else if opcode=1 then begin {else 1}
                1718 (14276)       sign:=restype;
                1719 (14276)       scan; term(opcode);
                1720 (14300)       arsize1:=arsize1+opcode+1;
                1721 (14311)       testtype(sign)
                1722 (14316)     end {else 1}
                1723 (14326)   until opcode=0
                1724 (14330) end {simexp};
                1725 (14336) 
                1726 (14337) 
                1727 (14337) begin { *** body of mainexp *** }
                1728 (14337)   roff:=0;
                1729 (14341)   simexp(arsize);
                1730 (14357)   if (restype='r') and (arsize=1) then
                1731 (14371)     roff:=$40;
                1732 (14377)   case token of
                1733 (14381)     ' =': opcode:=8;
                1734 (14395)     ' <': opcode:=10;
                1735 (14412)     ' >': opcode:=12;
                1736 (14429)     '<>': opcode:=9;
                1737 (14446)     '<=': opcode:=13;
                1738 (14463)     '>=': opcode:=11
                1739 (14478)     else opcode:=0

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 30

                1740 (14487)   end {case};
                1741 (14495)   if opcode>0 then begin
                1742 (14502)     if (arsize<>0) and (roff=0) then
                1743 (14519)       error(15);
                1744 (14531)     scan; savtype:=restype; simexp(arsize);
                1745 (14555)     if ((roff=0) and (arsize<>0))
                1746 (14569)       or((roff<>0) and (arsize>1)) then
                1747 (14585)       error(15);
                1748 (14597)     testtype(savtype); code1(opcode+roff);
                1749 (14622)     arsize:=0; restype:='b'
                1750 (14628)   end
                1751 (14630) end {mainexp};
                1752 (14634) 
                1753 (14635) 
                1754 (14635) {#########################################}
                1755 (14635) { * assign *             ( of statement ) }
                1756 (14635) {#########################################}
                1757 (14635) 
                1758 (14635) proc assign;
                1759 (14635) 
                1760 (14635) var savetype: char;
                1761 (14638) 
                1762 (14638)   proc assign1;
                1763 (14638)   begin
                1764 (14638)     testto(':='); scan; express;
                1765 (14660)     gpval(idpnt,true,vartyp2);
                1766 (14676)   end {assign1};
                1767 (14676) 
                1768 (14677) begin {assign}
                1769 (14677)   idpnt:=findid;
                1770 (14685)   if idpnt=0 then error(5);
                1771 (14707)   if t0[idpnt]='pr' then begin
                1772 (14719)     prcall(idpnt);scan end
                1773 (14736)   else begin
                1774 (14739)     getvar; savetype:=vartype;
                1775 (14743)     if relad<2 then begin
                1776 (14758)       assign1; testtype(vartype)
                1777 (14765)     end else begin
                1778 (14778)       if vartyp2='i' then error(16); {8-bit mem}
                1779 (14796)       testto(':='); scan;
                1780 (14809)       if relad=3 then begin
                1781 (14816)         arrayexp(1,vartype); relad:=1;
                1782 (14833)         code1($53);
                1783 (14845)         if vartyp2='n' then begin
                1784 (14852)           code1($3f);
                1785 (14863)           code3($22,1);code1($12);
                1786 (14881)           code3($22,t2[idpnt]+2);
                1787 (14900)           code1($3);code1($3e)
                1788 (14910)         end else
                1789 (14916)           code4($2a,level-t1[idpnt],
                1790 (14929)             2*t2[idpnt]+2);
                1791 (14954)         code2($3c,1)
                1792 (14958)       end else begin
                1793 (14967)         arrayexp(t3[idpnt],vartype);
                1794 (14985)         if vartyp2='n' then begin
                1795 (14992)           code3($22,t2[idpnt]+2*t3[idpnt]);
                1796 (15023)           code1($3e);
                1797 (15031)         end else
                1798 (15031)           code4($29,level-t1[idpnt],
                1799 (15044)             2*(t2[idpnt]+t3[idpnt]));

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 31

                1800 (15075)         code2($3c,t3[idpnt]);
                1801 (15091)       end
                1802 (15091)     end
                1803 (15091)   end
                1804 (15091) end {assign};
                1805 (15091) 
                1806 (15092) { * case1 *             ( of statement ) }
                1807 (15092) 
                1808 (15092) proc case1;
                1809 (15092) 
                1810 (15092) var i1,i2,casave: integer;
                1811 (15095)     savetype: char;
                1812 (15095) 
                1813 (15095)   proc case2;
                1814 (15095) 
                1815 (15095)     proc case3;
                1816 (15098)     begin
                1817 (15098)       scan; code1(22); code3(34,getcon);
                1818 (15129)       testtype(savetype);
                1819 (15139)       code1(8); scan
                1820 (15147)     end;
                1821 (15151) 
                1822 (15152)   begin {case2}
                1823 (15152)     i1:=0; case3;
                1824 (15164)     while token=' ,' do begin
                1825 (15175)       push(pc); code3(38,0); i1:=succ(i1);
                1826 (15199)       case3
                1827 (15204)     end;
                1828 (15208)     testto(' :'); savpc:=pc; code3(37,0);
                1829 (15238)     for k2:=1 to i1 do fixup(pop);
                1830 (15269)     push(savpc);
                1831 (15293)     scan; statmnt
                1832 (15297)   end {case2};
                1833 (15301) 
                1834 (15302) begin {case1}
                1835 (15302)   scan; express; testto('of');
                1836 (15321)   savetype:=restype; i2:=1; case2;
                1837 (15339)   while token=' ;' do begin
                1838 (15350)     casave:=pc; code3(36,0); fixup(pop);
                1839 (15380)     push(casave); i2:=succ(i2); case2
                1840 (15399)   end;
                1841 (15403)   if token='el' then begin
                1842 (15414)     casave:=pc; code3(36,0); fixup(pop);
                1843 (15447)     push(casave); scan; statmnt
                1844 (15461)   end;
                1845 (15465)   testto('en'); for k2:=1 to i2 do fixup(pop);
                1846 (15505)   code3(35,-2); scan
                1847 (15530) end {case1};
                1848 (15534) 
                1849 (15535) { * openrw *              ( of statement ) }
                1850 (15535) 
                1851 (15535) proc openrw(x: integer);
                1852 (15535) begin
                1853 (15535)   parse(' ('); parse('id');
                1854 (15558)   idpnt:=findid;
                1855 (15564)   if idpnt=0 then error(5);
                1856 (15586)   getvar; code1(x);
                1857 (15600)   testferror;
                1858 (15604)   if relad=2 then error(15);
                1859 (15622)   if vartype<>'f' then error(14);

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 32

                1860 (15640)   gpval(idpnt,true,vartyp2);
                1861 (15656)   testto(' )'); scan
                1862 (15665) end {openrw};
                1863 (15669) 
                1864 (15670) { * gpsec *               ( of statement )  }
                1865 (15670) 
                1866 (15670) proc gpsec(code);   { get/put sector }
                1867 (15670) 
                1868 (15670)   proc gpsec1;
                1869 (15673)   begin
                1870 (15673)     scan; express; testtype('i');
                1871 (15694)     testto(' ,');
                1872 (15703)   end;
                1873 (15703) 
                1874 (15704) begin {gpsec}
                1875 (15704)   parse(' ('); gpsec1; gpsec1; gpsec1;
                1876 (15727)   code1(code);
                1877 (15737)   parse('id'); idpnt:=findid;
                1878 (15752)   if idpnt=0 then error(5);
                1879 (15774)   getvar; code3(34,$db); { get file error code }
                1880 (15788)   if relad=2 then error(15);
                1881 (15806)   code1(23); if vartype<>'i' then error(14);
                1882 (15832)   gpval(idpnt,true,vartyp2);
                1883 (15848)   testto(' )');
                1884 (15857) end {gpsec};
                1885 (15857) 
                1886 (15858) 
                1887 (15858) begin {body of statement }
                1888 (15858)   if token=' ;' then scan;
                1889 (15875)   case token of
                1890 (15875)     'id': assign;
                1891 (15891) 
                1892 (15894)     'if': begin {if}
                1893 (15902)             scan; express; testtype('b');
                1894 (15918)             testto('th'); scan;  savpc:=pc;
                1895 (15931)             code3(37,0); statmnt;
                1896 (15953)             if token='el' then begin {else}
                1897 (15964)               k2:=pc; code3(36,0);
                1898 (15982)               fixup(savpc); scan; statmnt;
                1899 (16000)               fixup(k2)
                1900 (16000)             end else fixup(savpc)
                1901 (16013)           end; {if}
                1902 (16026) 
                1903 (16026)     'be':  begin {begin}
                1904 (16034)             repeat
                1905 (16034)               scan; statmnt
                1906 (16038)             until token<>(' ;');
                1907 (16049)             testto('en'); scan
                1908 (16062)           end; {begin}
                1909 (16069) 
                1910 (16069)     'rp': begin {repeat}
                1911 (16077)             savpc:=pc;
                1912 (16077)             repeat
                1913 (16085)               scan; statmnt
                1914 (16089)             until token='un';
                1915 (16100)             scan; express; testtype('b');
                1916 (16120)             code3(37,savpc)
                1917 (16122)           end {repeat};
                1918 (16132) 
                1919 (16135)     're': begin {read}

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 33

                1920 (16143)             parse(' ('); scan;
                1921 (16156)             if token=' @' then begin
                1922 (16164)               scan; express; testtype('f');
                1923 (16183)               device:=true;
                1924 (16185)               code1(44); testto(' ,')
                1925 (16200)             end
                1926 (16206)             else begin
                1927 (16209)               device:=false; code1(26)
                1928 (16217)             end;
                1929 (16223)             repeat
                1930 (16223)               begin {main loop of read}
                1931 (16223)                 if token=' ,' then scan;
                1932 (16238)                 testto('id'); idpnt:=findid;
                1933 (16253)                 if idpnt=0 then error(5);
                1934 (16275)                 getvar;
                1935 (16279)                 if relad=2 then error(15);
                1936 (16297)                 case vartype of
                1937 (16297)                   'i':  code1(28);
                1938 (16316)                   'c':  code1(27);
                1939 (16334)                   'p':  begin
                1940 (16344)                         code1(27); code1(27);
                1941 (16360)                         code1(53)
                1942 (16362)                         end
                1943 (16368)                   else error(114)
                1944 (16373)                 end {case};
                1945 (16381)                 gpval(idpnt,true,vartyp2)
                1946 (16387)               end {mainloop of read}
                1947 (16397)             until token<>' ,';
                1948 (16404)             testto(' )'); scan;
                1949 (16421)             if device then code1(45);
                1950 (16436)           end {read};
                1951 (16436) 
                1952 (16439)     'wr','wl':
                1953 (16452)           begin {write,writeln}
                1954 (16455)             if token='wl' then wln:=true
                1955 (16466)             else wln:=false;
                1956 (16477)             scan;
                1957 (16485)             if token=' (' then begin
                1958 (16493)               scan;
                1959 (16500)               if token=' @' then begin
                1960 (16508)                 scan; express; testtype('f');
                1961 (16527)                 device:=true; code1(44);
                1962 (16541)                 testto(' ,');
                1963 (16550)               end else device:=false;
                1964 (16555)               repeat
                1965 (16559)                 if token=' ,' then scan;
                1966 (16574)                 if (token=' )') and device
                1967 (16582)                        and wln then
                1968 (16587)                    {empty writeln except device}
                1969 (16592)                    k2:=k2 {do nothing}
                1970 (16595)                 else if token='st' then begin
                1971 (16614)                   {string}
                1972 (16617)                   code1(50);
                1973 (16625)                   for k2:=1 to value[0]-1 do
                1974 (16639)                     code1(ord(ident[k2])
                1975 (16653)                         and 127);
                1976 (16666)                   code1(ord(ident[value[0]])
                1977 (16686)                       or 128);
                1978 (16699)                   scan
                1979 (16699)                 end else begin

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 34

                1980 (16706)                   {expression}
                1981 (16706)                   express;
                1982 (16710)                   case restype of
                1983 (16710)                     'i':  code1(30);
                1984 (16729)                     'c':  code1(29);
                1985 (16747)                     'q':  code1($57);
                1986 (16765)                     'p':  begin
                1987 (16775)                             code1(22);
                1988 (16783)                             code1(51);
                1989 (16791)                             code1(29);
                1990 (16799)                             code1(52);
                1991 (16807)                             code1(29);
                1992 (16815)                           end
                1993 (16815)                     else error(14)
                1994 (16820)                   end {case}
                1995 (16828)                 end {expression}
                1996 (16828)               until token<>' ,';
                1997 (16835)               if wln then begin {writeln(..)}
                1998 (16846)                 code2(32,13); code1(29);
                1999 (16864)                 code2(32,10); code1(29);
                2000 (16882)               end;
                2001 (16882)               if device then code1(45);
                2002 (16897)               testto(' )'); scan
                2003 (16906)             end {if}
                2004 (16910)             else if wln then begin {writeln}
                2005 (16920)               code2(32,13); code1(29);
                2006 (16938)               code2(32,10); code1(29);
                2007 (16956)             end
                2008 (16956)           end {write, writeln};
                2009 (16956) 
                2010 (16959)     'cs': case1; {case statement}
                2011 (16974) 
                2012 (16974)     'wh': begin {while}
                2013 (16982)             scan; savpc:=pc; express;
                2014 (16998)             testtype('b');
                2015 (17006)             k2:=pc; code3(37,0);
                2016 (17024)             testto('do'); scan; statmnt;
                2017 (17041)             code3(36,savpc); fixup(k2)
                2018 (17053)           end {while};
                2019 (17063) 
                2020 (17066)     'fo': begin {for}
                2021 (17074)             parse('id'); assign;
                2022 (17087)             if t0[idpnt]='pr' then error(1);
                2023 (17110)             savtp1:=low(t0[idpnt]);
                2024 (17118)             case token of
                2025 (17123)               'to': k2:=1;
                2026 (17137)               'dw': k2:=0
                2027 (17152)               else merror(2,'to')
                2028 (17166)             end {case of token};
                2029 (17174)             scan; express; testtype(savtp1);
                2030 (17192)             bottom1:=pc; code1(22);
                2031 (17208)             gpval(idpnt,false,vartyp2);
                2032 (17224)             code1(13-k2-k2);
                2033 (17242)             savpc:=pc; code3(37,0);
                2034 (17260)             testto('do'); scan; statmnt;
                2035 (17277)             gpval(idpnt,false,vartyp2);
                2036 (17293)             code1(21-k2);
                2037 (17306)             gpval(idpnt,true,vartyp2);
                2038 (17322)             code3(36,bottom1); fixup(savpc);
                2039 (17344)             code3(35,-2);

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 35

                2040 (17355)           end {for};
                2041 (17355) 
                2042 (17358)     'me': begin {mem}
                2043 (17366)             parse(' ['); scan; express;
                2044 (17383)             testtype('i');
                2045 (17391)             testto(' ]'); parse(':=');
                2046 (17409)             scan; express; code1(24);
                2047 (17425)             testtype('i');
                2048 (17433)           end {mem};
                2049 (17433) 
                2050 (17436)     'ca': begin {call}
                2051 (17444)             parse(' ('); scan; express;
                2052 (17461)             testtype('i');
                2053 (17469)             testto(' )'); code1(25); scan
                2054 (17486)           end {call};
                2055 (17490) 
                2056 (17493)     'op': openrw(47);
                2057 (17509) 
                2058 (17512)     'ow': openrw(48);
                2059 (17528) 
                2060 (17531)     'ob': openrw(80);
                2061 (17547) 
                2062 (17550)     'gb': begin
                2063 (17558)             parse(' ('); scan; express;
                2064 (17575)             testtype('f'); testto(' ,');
                2065 (17592)             scan; express; testtype('i');
                2066 (17608)             testto(' ,'); scan; testto('id');
                2067 (17630)             idpnt:=findid;
                2068 (17636)             if idpnt=0 then error(5);
                2069 (17658)             getvar;
                2070 (17662)             if relad<>0 then error(15);
                2071 (17680)             code1($51); testferror;
                2072 (17692)             gpval(idpnt,true,vartyp2);
                2073 (17708)             testto(' )'); scan
                2074 (17717)           end;
                2075 (17721) 
                2076 (17724)     'pb': begin
                2077 (17732)             parse(' ('); scan; express;
                2078 (17749)             testtype('f'); testto(' ,');
                2079 (17766)             scan; express; testtype('i');
                2080 (17782)             testto(' ,'); scan; express;
                2081 (17799)             code1($52);testferror;
                2082 (17811)             testto(' )');
                2083 (17820)             scan
                2084 (17820)           end;
                2085 (17824) 
                2086 (17827)     'ru': begin
                2087 (17835)             code1($41); scan;
                2088 (17847)           end;
                2089 (17847) 
                2090 (17850)     'fi': begin
                2091 (17858)             code1(46); scan
                2092 (17866)           end;
                2093 (17870) 
                2094 (17873)     'ge': gpsec(55);
                2095 (17889) 
                2096 (17892)     'pu': gpsec(56);
                2097 (17908) 
                2098 (17911)     'cl': begin {close}
                2099 (17919)             parse(' (');

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 36

                2100 (17928)             repeat
                2101 (17928)               scan; express; code1(49);
                2102 (17944)               testtype('f');
                2103 (17952)               testferror
                2104 (17952)             until token<>' ,';
                2105 (17963)             testto(' )'); scan;
                2106 (17980)           end {close}
                2107 (17980) 
                2108 (17980)     else if (token<>'en') and (token<>' ;')
                2109 (17998)       and (token<>'un') then begin
                2110 (18009)       error(10); scan
                2111 (18020)     end
                2112 (18024)   end {case of statements}
                2113 (18026) end;
                2114 (18026) 
                2115 (18027) { * findforw *          ( of block ) }
                2116 (18027) 
                2117 (18027) func findforw;
                2118 (18027) 
                2119 (18027) var i,j,sav1: integer;
                2120 (18030) 
                2121 (18030)   func found(start: integer):boolean;
                2122 (18030)   var ii,i9: integer;
                2123 (18033)   begin {compare}
                2124 (18033)     ii:= 0;
                2125 (18037)     repeat
                2126 (18041)       ii:=succ(ii);
                2127 (18045)     until (ii >= 8) or
                2128 (18057)       (ident[ii] <> idtab[start+ii]);
                2129 (18080)     found:=(ii >= 8);
                2130 (18091)   end {compare};
                2131 (18095) 
                2132 (18096) 
                2133 (18096) begin {findforw}
                2134 (18096)   i:=succ(forwpn);
                2135 (18102)   repeat
                2136 (18107)     i:=prec(i)
                2137 (18107)   until (i=0) or found(8*fortab[i]);
                2138 (18142)   findforw:=i;
                2139 (18146)   if i>0 then
                2140 (18160)     if i=forwpn then forwpn:=forwpn-1
                2141 (18180)     else begin
                2142 (18190)       sav1:=fortab[i];
                2143 (18194)       for j:=1 to forwpn-1 do
                2144 (18214)       fortab[j]:=fortab[succ(j)];
                2145 (18233)       fortab[forwpn]:=sav1;
                2146 (18259)       findforw:=forwpn;
                2147 (18267)       forwpn:=forwpn-1
                2148 (18279)     end
                2149 (18281) end {findforw};
                2150 (18286) 
                2151 (18287) 
                2152 (18287) begin { *** body of block *** }
                2153 (18287)   dpnt:=3; t2[bottom]:=pc;
                2154 (18299)   code3(36,0);
                2155 (18317)   stackpn1:=stackpnt; forwpn:=0;
                2156 (18327) 
                2157 (18331)   if token='co' then begin    { * const * }
                2158 (18342)     scan;
                2159 (18346)     repeat

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 37

                2160 (18346)       deccon; testto(' ;'); scan
                2161 (18359)     until token <> 'id';
                2162 (18370)   end {const};
                2163 (18374) 
                2164 (18374)   if token='me' then memory;  { * mem * }
                2165 (18389) 
                2166 (18389)   if token='va' then variable;{ * var * }
                2167 (18404) 
                2168 (18404)   while (token='pr')or (token='fu') do begin
                2169 (18424)     parlevel:=0;
                2170 (18426)     case token of
                2171 (18430)     'pr': begin               { * proc * }
                2172 (18442)             parse('id'); npara:=0;
                2173 (18453)             putsym('p','r'); cproc:=spnt;
                2174 (18467)             level:=succ(level);
                2175 (18479)           end;
                2176 (18484)     'fu': begin               { * func * }
                2177 (18495)             parse('id'); npara:=1;
                2178 (18506)             putsym('f','i');
                2179 (18520)             cproc:=spnt; level:=succ(level);
                2180 (18532)             putsym('f','i');
                2181 (18547)             t2[spnt]:=parlevel;
                2182 (18551)             parlevel:=succ(parlevel);
                2183 (18563)           end
                2184 (18568)     end; {case of token}
                2185 (18570)     if forwpn=0 then find:=0
                2186 (18580)     else find:=findforw;
                2187 (18595)     if find<>0 then begin
                2188 (18606)       spnt:=spnt-npara-1;
                2189 (18620)       cproc:=fortab[find];
                2190 (18629)       fixup(t2[cproc]);
                2191 (18651)     end;
                2192 (18651)     scan; spnt1:=spnt;
                2193 (18655)     dpnt1:=dpnt;
                2194 (18663)     if token=' (' then parameter;
                2195 (18686)     if t0[cproc]='fi' then function;
                2196 (18705)     testto(' ;');
                2197 (18714)     for i:=1 to npara do
                2198 (18720)     t2[succ(spnt-i)]:=t2[succ(spnt-i)]
                2199 (18752)           -parlevel;
                2200 (18757)     scan;
                2201 (18784)     if token='fw' then begin
                2202 (18792)       if forwpn=8 then merror(13,'ov');
                2203 (18816)       forwpn:=succ(forwpn);
                2204 (18820)       fortab[forwpn]:=cproc;
                2205 (18829)       t2[cproc]:=pc;
                2206 (18841)       code3(36,0);
                2207 (18859)       scan
                2208 (18859)     end else block(cproc);
                2209 (18876)     level:=prec(level);
                2210 (18880)     dpnt:=dpnt1; spnt:=spnt1;
                2211 (18893)     case high(t0[spnt]) of
                2212 (18909)       'r':  t0[spnt]:=packed('t',low(t0[spnt]));
                2213 (18933)       's':  t0[spnt]:=packed('u',low(t0[spnt]))
                2214 (18961)     end {case};
                2215 (18969)     testto(' ;'); scan
                2216 (18978)   end {procedure of function};
                2217 (18982) 
                2218 (18985)   testto('be');     { * begin * }
                2219 (18994)   if forwpn<>0 then merror(13,'ur');

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 38

                2220 (19015)   scan; fixup(t2[bottom]);
                2221 (19033)   t2[bottom]:=pc;
                2222 (19037)   code3(35,2*dpnt);
                2223 (19060)   repeat
                2224 (19060)     statmnt
                2225 (19060)   until token='en';
                2226 (19071)   scan;
                2227 (19079)   if level>0 then code1(1) else code1(0);
                2228 (19108)   stackpnt:=stackpn1;
                2229 (19108) end {block};
                2230 (19116) 
                2231 (19117) { * savtable *    ( global) }
                2232 (19117) 
                2233 (19117) proc savtable; { save lib table in @ofno }
                2234 (19117) 
                2235 (19117) var i,j,num: integer;
                2236 (19120)     vtype1: char;
                2237 (19120) 
                2238 (19120) begin
                2239 (19120)   writeln(@ofno,spnt,',',pc+2);
                2240 (19149)   for i:=1 to spnt do begin {for every entry }
                2241 (19168)     for j:=1 to 8 do begin
                2242 (19185)       write(@ofno,idtab[8*i+j])
                2243 (19205)     end;
                2244 (19209)     writeln(@ofno,',',t0[i],',',t1[i],',',
                2245 (19256)       t2[i],',',t3[i]);
                2246 (19283)     vtype1:=high(t0[i]);
                2247 (19291)     if ((vtype1='p') or (vtype1='f') or
                2248 (19310)       (vtype1='g')) and (t3[i]<>0) then begin
                2249 (19331)       num:=stack[t3[i]];
                2250 (19342)       write(@ofno,num);
                2251 (19361)       for j:=1 to num do
                2252 (19367)         write(@ofno,',',stack[t3[i]+j]);
                2253 (19406)       write(@ofno,cr,lf);
                2254 (19432)     end {then};
                2255 (19432)   end {for}
                2256 (19432) end {savtable};
                2257 (19446) 
                2258 (19447) { * main program * }
                2259 (19447) 
                2260 (19447) begin {main}
                2261 (19447)   init;scan;
                2262 (19458)   case token of
                2263 (19458)     'pg': begin
                2264 (19470)             libflg:=false;
                2265 (19472)             asetfile(pname,scyclus,sdrive,'Q');
                2266 (19498)           end;
                2267 (19498)     'li': begin
                2268 (19509)             libflg:=true;
                2269 (19511)             asetfile(pname,scyclus,sdrive,'T');
                2270 (19537)           end
                2271 (19537)     else
                2272 (19537)       merror(2,'pg')
                2273 (19545)   end {case}
                2274 (19553)   parse('id');
                2275 (19562)   i:=0;
                2276 (19564)   repeat
                2277 (19568)     i:=succ(i);
                2278 (19572)   until (i>7) or (pname[i] = ':') or
                2279 (19595)       (pname[i]<>uppercase(ident[i+1]));

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 39

                2280 (19624)   if i<8 then
                2281 (19634)     merror(2,packed(pname[0],pname[1]));
                2282 (19659)     { name differs from filename }
                2283 (19659)   parse(' ;');
                2284 (19668)   if ofno<>nooutput then openw(ofno);
                2285 (19684)   scan;
                2286 (19688)   if (token='us') and (libflg=false) then begin
                2287 (19704)     repeat
                2288 (19707)       getlib; scan
                2289 (19711)     until token<>' ,';
                2290 (19722)     testto(' ;'); scan
                2291 (19735)   end;
                2292 (19739)   block(0); testto(' .');
                2293 (19756)   if ofno<>nooutput then begin
                2294 (19763)     write(@ofno,'E');
                2295 (19774)     savebyte(pc and 255);
                2296 (19787)     savebyte(pc shr 8);
                2297 (19800)     close(ofno);
                2298 (19806)     if libflg then begin
                2299 (19810)       asetfile(pname,scyclus,sdrive,'L');
                2300 (19835)       openw(ofno);
                2301 (19841)       savtable;
                2302 (19845)       close(ofno)
                2303 (19845)     end
                2304 (19851)   end else
                2305 (19851)     runerr:=$87; {no loader file}
                2306 (19860)   writeln;
                2307 (19860)   writeln;
                2308 (19866)   writeln('End compile');
                2309 (19890)   writeln;
                2310 (19890)   writeln('Code lenght:          ',pc);
                2311 (19930)   writeln('Compiler stack size:  ',stackmax);
                2312 (19964)   writeln('Ident stack size:     ',spntmax);
                2313 (19998)   write('Pascal errors:        ');
                2314 (20021)   if numerr>0 then write(invvid);
                2315 (20034)   writeln(numerr,norvid);
                2316 (20048)   if prt then begin
                2317 (20052)     write(prtoff);
                2318 (20058)     setemucom(9);
                2319 (20066)   end;
                2320 (20066)   close(fno);
                2321 (20072)   { check whether second pass is not required }
                2322 (20072)   if (runerr=0) and libflg then runerr:=-1;
                2323 (20088) end {main}.
                2324 (20093) 

End compile

Code lenght:          20092
Compiler stack size:  134
Ident stack size:     207
Pascal errors:        0


R65 Pascal program COMPILE1        10/11/23     page 1


                   1 (    4) {   ********************************
                   2 (    4)     *                              *
                   3 (    4)     *  R65 "Tiny" Pascal Compiler  *
                   4 (    4)     *            Pass 1            *
                   5 (    4)     *                              *
                   6 (    4)     ********************************
                   7 (    4) 
                   8 (    4) First version 1978 by rricharz
                   9 (    4) Original version 3.7 (20K)  01/08/82 rricharz
                  10 (    4) 
                  11 (    4) Recovered 2018 by rricharz (r77@bluewin.ch)
                  12 (    4) Improved 2018-2023 by rricharz
                  13 (    4) Version 4 with cpnt strings
                  14 (    4) 
                  15 (    4) Original derived from the publication by
                  16 (    4) Kin-Man Chung and Herbert Yen in
                  17 (    4) Byte, Volume 3, Number 9 and Number 10, 1978
                  18 (    4) 
                  19 (    4) Adapted for the R65 computer system and
                  20 (    4) substantially enhanced by rricharz 1978-1982
                  21 (    4) 
                  22 (    4) This is a Pascal derivative optimized for 8-bit
                  23 (    4) microprocessors (integer type is 16 bit) with
                  24 (    4) additional features (mem) to interact directly
                  25 (    4) with the microprocessor hardware. Only one
                  26 (    4) dimensional arrays and no records or user
                  27 (    4) defined types. Floating point numbers (real)
                  28 (    4) and file io to floppy disks are supported.
                  29 (    4) 
                  30 (    4) Precompiled libraries are merged in the loader.
                  31 (    4) The table of reserved words and the library
                  32 (    4) tables are loaded from the same drive as
                  33 (    4) the compiler.
                  34 (    4) 
                  35 (    4) The output of the program is a loader file for
                  36 (    4) the Pascal loader (compile2).
                  37 (    4) 
                  38 (    4) usage:
                  39 (    4)  compile1 name[.cy[,drv]] [xxx]
                  40 (    4)   where x:       l,p: no hard copy print
                  41 (    4)                  i,r: index bound checking
                  42 (    4)                  n: no loader file
                  43 (    4)   [] means not required                     }
                  44 (    4) 
                  45 (    4) program compile1;
                  46 (    4) 
                  47 (    4) uses syslib, arglib;
                  48 ( 1093) 
                  49 ( 1093) const table     =$97ff; {user ident table -1}
                  50 ( 1096)       idtab     =$95ff; {resword table -1}
                  51 ( 1096)       idlength  =64;    {max. length of ident}
                  52 ( 1096)       stacksize =256;   {stack size}
                  53 ( 1096)       pagelenght=60;    {no of lines per page}
                  54 ( 1096)       nooutput  =@0;
                  55 ( 1096)       maxfi     =3;     {max number of ins fls}
                  56 ( 1096) 
                  57 ( 1096) {
                  58 ( 1096) The compiler uses 2 fixed memory areas to store
                  59 ( 1096) the table of reserved words and the table of

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 2

                  60 ( 1096) idents. The top of the Pascal stack (endstk) is
                  61 ( 1096) adjusted accordingly. The reason for this hack
                  62 ( 1096) is speed and convenience. A normal Pascal array
                  63 ( 1096) of chars would store the chars as 16 bit
                  64 ( 1096) numers and would therefore require twice the
                  65 ( 1096) space. An array of packed chars would require
                  66 ( 1096) more coding and slow the scanner module of the
                  67 ( 1096) compiler down.                               }
                  68 ( 1096) 
                  69 ( 1096)     nresw=61;   {number of res. words, max 64}
                  70 ( 1096)     symbsize=256;     {id table entries}
                  71 ( 1096)     reswtabpos=$c600; { up to $c7ff }
                  72 ( 1096)     idtabpos=$be00;   { up to $c5ff }
                  73 ( 1096) 
                  74 ( 1096)     yesoutput=@255;
                  75 ( 1096) 
                  76 ( 1096) mem endstk  =$000e: integer;
                  77 ( 1096)     reswtab =reswtabpos: array[$200] of char&;
                  78 ( 1096)     idtab   =idtabpos: array[$800] of char&;
                  79 ( 1096) 
                  80 ( 1096) var tpos,pc,level,line,offset,dpnt,spnt,fipnt,
                  81 ( 1096)     npara,i,stackpnt,stackmax,spntmax,numerr
                  82 ( 1096)                               :integer;
                  83 ( 1096) 
                  84 ( 1096)     scyclus,sdrive,cdrive: integer;
                  85 ( 1096) 
                  86 ( 1096)     pname: array[15] of char;
                  87 ( 1096) 
                  88 ( 1096)     value: array[1] of integer;
                  89 ( 1096) 
                  90 ( 1096)     ch,restype,vartype:char;
                  91 ( 1096) 
                  92 ( 1096)     token: packed char;
                  93 ( 1096) 
                  94 ( 1096)     prt,libflg,icheck,ateof: boolean;
                  95 ( 1096) 
                  96 ( 1096)     fno,ofno: file;
                  97 ( 1096) 
                  98 ( 1096)     filstk: array[maxfi] of file;
                  99 ( 1096) 
                 100 ( 1096)     ident: array[idlength] of char;
                 101 ( 1096)     { Only the first 8 characters are
                 102 ( 1096)       used to find and differentiate ids }
                 103 ( 1096) 
                 104 ( 1096)     t0: array[symbsize] of packed char;
                 105 ( 1096)            {type of symbol}
                 106 ( 1096) 
                 107 ( 1096)         {High letter:
                 108 ( 1096)          a:array, c:constant, d;const parameter
                 109 ( 1096)          e:constant array parameter, f:function
                 110 ( 1096)          g:array function, h;8-bit memory var
                 111 ( 1096)          i:8-bit array memory variable
                 112 ( 1096)          m:16-bit memory variable
                 113 ( 1096)          n:16-bit array memory variable
                 114 ( 1096)          p:procedure
                 115 ( 1096)          q:indexed cpnt
                 116 ( 1096)          r,t:function result
                 117 ( 1096)          s,u:array function result
                 118 ( 1096)          v:variable, w:variable parameter
                 119 ( 1096)          x:variable array parameter

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 3

                 120 ( 1096) 
                 121 ( 1096)          Low letter:
                 122 ( 1096)          i:integer, c:char, p:packed char
                 123 ( 1096)          q:cpoint (pointer to char)
                 124 ( 1096)          r:real(array multiple of two)
                 125 ( 1096)          s:const cpnt
                 126 ( 1096)          f:file, b:boolean, u:undefined  }
                 127 ( 1096) 
                 128 ( 1096)     t1: array[symbsize] of integer;
                 129 ( 1096)          {level}
                 130 ( 1096)     t2: array[symbsize] of integer;
                 131 ( 1096)          {val,dis,addr}
                 132 ( 1096)     t3: array[symbsize] of integer;
                 133 ( 1096)          {stack pointer,size of array}
                 134 ( 1096) 
                 135 ( 1096)     reswcod:array[nresw] of packed char;
                 136 ( 1096) 
                 137 ( 1096)     stack: array[stacksize] of integer;
                 138 ( 1096) 
                 139 ( 1096) 
                 140 ( 1096) {       * savebyte *    (global)        }
                 141 ( 1096) 
                 142 ( 1096) proc savebyte(x: integer);
                 143 ( 1096) 
                 144 ( 1096) begin
                 145 ( 1096)     if ofno<>nooutput then begin
                 146 ( 1108)       write(@ofno,
                 147 ( 1111)         chr(((x and 255) shr 4)+ord('0')));
                 148 ( 1132)       write(@ofno,chr((x and 15)+ord('0')))
                 149 ( 1147)     end
                 150 ( 1150) end {savebyte};
                 151 ( 1150) 
                 152 ( 1151) {       * crlf *        (global)        }
                 153 ( 1151) 
                 154 ( 1151) proc newpage; forward;
                 155 ( 1154) 
                 156 ( 1154) proc crlf;
                 157 ( 1154)   var i: integer;
                 158 ( 1157) begin
                 159 ( 1157)   writeln;
                 160 ( 1159)   line:=succ(line);
                 161 ( 1169)   if (line div pagelenght)*pagelength=line
                 162 ( 1184)     then newpage;
                 163 ( 1196)   if prt then
                 164 ( 1196)     for i:=1 to 16 do write(@printer,' ')
                 165 ( 1225) end {crlf};
                 166 ( 1240) 
                 167 ( 1241) {       error message   (global)        }
                 168 ( 1241) 
                 169 ( 1241) proc merror(x: integer; code: packed char);
                 170 ( 1241) 
                 171 ( 1241) var i: integer;
                 172 ( 1244)     answer: char;
                 173 ( 1244) 
                 174 ( 1244) begin
                 175 ( 1244)   crlf; numerr:=succ(numerr);
                 176 ( 1254)   for i:=2 to tpos do write(' ');
                 177 ( 1280)   write('^'); crlf;
                 178 ( 1300)   write('*** (',numerr,',',pc,')   ');
                 179 ( 1323)   case x of

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 4

                 180 ( 1323)     01: write('Ident');
                 181 ( 1340)     02: write('Ident ',code,' expected');
                 182 ( 1376)     03: write('Var declaration');
                 183 ( 1402)     04: write('Const expected');
                 184 ( 1427)     05: write('Ident unknown');
                 185 ( 1451)     06: write('Cannot be assigned');
                 186 ( 1480)     07: write('Symbol table overflow');
                 187 ( 1512)     08: write('Stack overflow');
                 188 ( 1537)     09: write('Expression');
                 189 ( 1558)     10: write('Statement');
                 190 ( 1578)     11: write('Declaration');
                 191 ( 1600)     12: write('Constant');
                 192 ( 1619)     13: write('Forward reference: ',code);
                 193 ( 1658)     14: write('Type mismatch: ',code);
                 194 ( 1693)     15: write('Array size');
                 195 ( 1714)     16: write('Array (8-bit)');
                 196 ( 1738)     17: write('Real');
                 197 ( 1753)     18: write('File table overflow');
                 198 ( 1783)     19: write('Parameter')
                 199 ( 1803)   end {case};
                 200 ( 1805)   writeln;
                 201 ( 1805)   write('Continue?');
                 202 ( 1821)   read(@key,answer);
                 203 ( 1829)   if answer<>'Y' then begin
                 204 ( 1837)     crlf; write(prtoff); setemucom(9); close(fno);
                 205 ( 1861)     if (ofno<>nooutput) and (ofno<>yesoutput)
                 206 ( 1874)       then close(ofno);
                 207 ( 1885)     writeln('Aborting compile1 on request');
                 208 ( 1920)     abort
                 209 ( 1920)   end
                 210 ( 1924)   else crlf;
                 211 ( 1931)   if (ofno<>nooutput) and (ofno<>yesoutput)
                 212 ( 1944)     then close(ofno);
                 213 ( 1955)   ofno:=nooutput;
                 214 ( 1957) end {merror};
                 215 ( 1961) 
                 216 ( 1962) proc error(x: integer);
                 217 ( 1962) 
                 218 ( 1962) begin
                 219 ( 1962)   merror(x,'##')
                 220 ( 1974) end;
                 221 ( 1980) 
                 222 ( 1981) {       * push & pop *  (global) }
                 223 ( 1981) 
                 224 ( 1981) proc push(x: %integer);
                 225 ( 1981) 
                 226 ( 1981) begin
                 227 ( 1981)   if stackpnt>=stacksize then error(8)
                 228 ( 1999)   else stackpnt:=succ(stackpnt);
                 229 ( 2012)   if stackpnt>stackmax then stackmax:=stackpnt;
                 230 ( 2029)   stack[stackpnt]:=x;
                 231 ( 2041) end {push};
                 232 ( 2049) 
                 233 ( 2050) func pop: integer;
                 234 ( 2050) 
                 235 ( 2050) begin
                 236 ( 2050)   pop:=stack[stackpnt];
                 237 ( 2059)   stackpnt:=prec(stackpnt)
                 238 ( 2067) end {pop};
                 239 ( 2076) 

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 5

                 240 ( 2077) {       * newpage *     (global) }
                 241 ( 2077) 
                 242 ( 2077) proc newpage;
                 243 ( 2077) 
                 244 ( 2077) var i: integer;
                 245 ( 2080) 
                 246 ( 2080) begin
                 247 ( 2080)   if (line<>0) and prt then
                 248 ( 2089)     write(@printer,formfeed);
                 249 ( 2104)   writeln; { Do not count this line}
                 250 ( 2110)   if pname[0]<>'x' then begin
                 251 ( 2119)     write('R65 Pascal ');
                 252 ( 2134)     if libflg then write('library ')
                 253 ( 2150)     else write('program ');
                 254 ( 2162)     prtext16(output,pname);
                 255 ( 2176)   end;
                 256 ( 2176)   tab(34);
                 257 ( 2184)   prtdate(output); write('     ');
                 258 ( 2198)   writeln('page ',(line div pagelenght)+1);
                 259 ( 2221)   writeln;
                 260 ( 2221) end {newpage};
                 261 ( 2227) 
                 262 ( 2228) {       * getchr *      (global) }
                 263 ( 2228) 
                 264 ( 2228) proc getchr;
                 265 ( 2228) 
                 266 ( 2228)   proc writenum(i: integer);
                 267 ( 2231)   begin
                 268 ( 2231)     if i<=999 then write(' ');
                 269 ( 2249)     if i<=99 then write(' ');
                 270 ( 2261)     if i<=9 then write(' ');
                 271 ( 2273)     write(i);
                 272 ( 2278)   end;
                 273 ( 2278) 
                 274 ( 2279) begin
                 275 ( 2279)   if ateof then begin
                 276 ( 2285)     writeln('Unexpected eof');
                 277 ( 2309)     abort;
                 278 ( 2313)   end else begin
                 279 ( 2316)     read(@fno,ch);
                 280 ( 2326)     if ch=cr then begin
                 281 ( 2334)       crlf;
                 282 ( 2341)       writenum(line); write(' (');
                 283 ( 2354)       if (pc+2)<9999 then write(' ');
                 284 ( 2370)       writenum(pc+2); write(') ');
                 285 ( 2386)       ch:=' ';
                 286 ( 2388)     end {if}
                 287 ( 2392)     else if ch=eof then begin
                 288 ( 2402)       ateof:=true;
                 289 ( 2407)       { we need to suppy one more char }
                 290 ( 2411)       { for end. at end of file to work properly }
                 291 ( 2411)       ch:=' ';
                 292 ( 2413)     end {else if}
                 293 ( 2417)     else write(ch);
                 294 ( 2425)   end;
                 295 ( 2425) end {getchr};
                 296 ( 2425) 
                 297 ( 2426) {       * splitconv *   (global) }
                 298 ( 2426) 
                 299 ( 2426) proc splitconv(a: array[1] of %integer;

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 6

                 300 ( 2426)   var b:array[1] of %integer);
                 301 ( 2426) 
                 302 ( 2426) begin
                 303 ( 2426)   b:=a;
                 304 ( 2431) end;
                 305 ( 2443) 
                 306 ( 2444) {       * init *        (global) }
                 307 ( 2444) 
                 308 ( 2444) proc init;
                 309 ( 2444) 
                 310 ( 2444) const char96=chr(20);
                 311 ( 2447) 
                 312 ( 2447) var i,j,dummy: integer;
                 313 ( 2447)     dch: char;
                 314 ( 2447)     pch: packed char;
                 315 ( 2447)     request: array[15] of char;
                 316 ( 2447)     default: boolean;
                 317 ( 2447) 
                 318 ( 2447) begin {init}
                 319 ( 2447)   ateof:=false;
                 320 ( 2451)   cdrive:=fildrv; { drive of compile program }
                 321 ( 2462)   fipnt:=-1;
                 322 ( 2464)   endstk:=idtabpos-144;
                 323 ( 2474)   pc:=2; dpnt:=0; spnt:=0; offset:=2;
                 324 ( 2498)   npara:=0; level:=0;
                 325 ( 2510)   stackpnt:=0; libflg:=false;
                 326 ( 2522)   stackmax:=0;spntmax:=0; numerr:=0;
                 327 ( 2540)   t0[0]:='vi'; t1[0]:=0; t2[0]:=0; t3[0]:=0;
                 328 ( 2573)   { prepare resword table }
                 329 ( 2577)   writeln('Reading list of reserved words');
                 330 ( 2614)   asetfile('RESWORDS:W      ',0,cdrive,'W');
                 331 ( 2646)   openr(fno);
                 332 ( 2652)   for i:=0 to nresw do begin
                 333 ( 2669)     read(@fno,pch,dch);
                 334 ( 2686)     reswcod[i]:=pch;
                 335 ( 2691)     for j:=0 to 7 do reswtab[8*i+j]:=' ';
                 336 ( 2730)     j:=0;
                 337 ( 2753)     while (j<8) and (dch<>cr) do begin
                 338 ( 2775)       read(@fno,dch);
                 339 ( 2785)       if (dch<>cr) then
                 340 ( 2793)         reswtab[8*i+j]:=dch;
                 341 ( 2808)       j:=succ(j)
                 342 ( 2819)     end;
                 343 ( 2828)     while (dch<>cr) and (dch<>eof) do
                 344 ( 2845)       read(@fno,dch)
                 345 ( 2854)   end;
                 346 ( 2863)   close(fno);
                 347 ( 2883) 
                 348 ( 2883)   writeln;
                 349 ( 2883)   writeln('R65 PASCAL COMPILER');
                 350 ( 2915)   writeln('Version 4.1, Pass 1');
                 351 ( 2941) 
                 352 ( 2941)   sdrive:=1; {default drive for source }
                 353 ( 2947)   scyclus:=0;
                 354 ( 2949)   agetstring(pname,default,scyclus,sdrive);
                 355 ( 2993) 
                 356 ( 2993)   agetstring(request,default,dummy,dummy);
                 357 ( 3033)   icheck:=false;
                 358 ( 3035)   prt:=true; ofno:=yesoutput;
                 359 ( 3047)   if not default then begin

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 7

                 360 ( 3056)     if request[0]<>'/' then argerror(103);
                 361 ( 3079)     for i:=1 to 8 do
                 362 ( 3087)       case request[i] of
                 363 ( 3100)         'P','L': prt:=false;
                 364 ( 3120)         'I','R': icheck:=true;
                 365 ( 3143)         'N': ofno:=nooutput;
                 366 ( 3159)         ' ': begin end
                 367 ( 3173)         else argerror(104)
                 368 ( 3178)       end; {case}
                 369 ( 3200)   end;
                 370 ( 3200) 
                 371 ( 3200)   asetfile(pname,scyclus,sdrive,'P');
                 372 ( 3222)   openr(fno);
                 373 ( 3228)   scyclus:=filcyc; { may have changed }
                 374 ( 3236) 
                 375 ( 3236)   {save cyclus and drive for compile2}
                 376 ( 3236)   arglist[8]:=scyclus;
                 377 ( 3238)   arglist[9]:=sdrive;
                 378 ( 3252)   numarg:=1;
                 379 ( 3266) 
                 380 ( 3270)   if prt then begin
                 381 ( 3274)     write(prton);
                 382 ( 3280)     setemucom(8);
                 383 ( 3288)   end
                 384 ( 3288) 
                 385 ( 3288)   line:=0; newpage; crlf; line:=1;
                 386 ( 3304)   write('   1 (    4) '); getchr
                 387 ( 3322) end {init};
                 388 ( 3326) 
                 389 ( 3327) 
                 390 ( 3327) { ############################# }
                 391 ( 3327) {       *scan*              (global)    }
                 392 ( 3327) { ############################# }
                 393 ( 3327) { scan input and make tokens }
                 394 ( 3327) 
                 395 ( 3327) proc scan;
                 396 ( 3327) 
                 397 ( 3327) var count,ll,hh,i,i1,co: integer;
                 398 ( 3330)     name: array[7] of char;
                 399 ( 3330) 
                 400 ( 3330) {       * compresw*     (of scan)       }
                 401 ( 3330) 
                 402 ( 3330) func compresw(index: integer);
                 403 ( 3330) 
                 404 ( 3330) var addr,ci,i: integer;
                 405 ( 3333) 
                 406 ( 3333) begin
                 407 ( 3333)   addr:=8*index; i:=0;
                 408 ( 3348)   repeat
                 409 ( 3352)     ci:=ord(ident[i+1])-ord(reswtab[addr+i]);
                 410 ( 3377)     i:=succ(i)
                 411 ( 3382)   until (ci<>0) or (i>=8);
                 412 ( 3405)   compresw:=ci
                 413 ( 3409) end {compresw};
                 414 ( 3417) 
                 415 ( 3418) {       * clear *       (of scan)              }
                 416 ( 3418) 
                 417 ( 3418) proc clear; {clears 8 chars of identifier}
                 418 ( 3418) 
                 419 ( 3418) var i: integer;

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 8

                 420 ( 3421) 
                 421 ( 3421) begin
                 422 ( 3421)   for i:=1 to 8 do ident[i]:=' '
                 423 ( 3444) end;
                 424 ( 3464) 
                 425 ( 3465) {       * pack *        (of scan)              }
                 426 ( 3465) 
                 427 ( 3465) proc pack;  {packs token and ch to token }
                 428 ( 3465) 
                 429 ( 3465) begin
                 430 ( 3465)   token:=packed(low(token),ch); getchr
                 431 ( 3484) end;
                 432 ( 3488) 
                 433 ( 3489) {       * setval *      (of scan)              }
                 434 ( 3489) 
                 435 ( 3489) proc setval;
                 436 ( 3489) 
                 437 ( 3489) var r: real;
                 438 ( 3492)     n,n1: integer;
                 439 ( 3492)     ems: boolean;
                 440 ( 3492) 
                 441 ( 3492)   func times10(r:real):real;
                 442 ( 3492)   { slightly more accurate than 10.0*r }
                 443 ( 3492)   var r2,r4:real;
                 444 ( 3495)   begin
                 445 ( 3495)     r2:=r+r;
                 446 ( 3503)     r4:=r2+r2;
                 447 ( 3522)     times10:=r2+r4+r4;
                 448 ( 3548)   end;
                 449 ( 3561) 
                 450 ( 3562) begin
                 451 ( 3562)   r:=0.0;
                 452 ( 3570)   repeat
                 453 ( 3576)     r:=times10(r)+conv(ord(ch)-ord('0'));
                 454 ( 3597)     getchr;
                 455 ( 3609)   until (ch<'0') or (ch>'9');
                 456 ( 3623)   if ch<>'.' then begin {numeric integer}
                 457 ( 3637)     token:='nu';
                 458 ( 3640)     value[0]:=trunc(r+0.5);
                 459 ( 3659)   end
                 460 ( 3664)   else begin {numeric real}
                 461 ( 3667)     n:=0; getchr;
                 462 ( 3677)     while (ch<='9') and (ch>='0') do begin
                 463 ( 3695)       r:=times10(r)+conv(ord(ch)-ord('0'));
                 464 ( 3716)       n:=prec(n); getchr
                 465 ( 3733)     end;
                 466 ( 3737)     if ch='e' then begin
                 467 ( 3747)       ems:=false; getchr;
                 468 ( 3760)       case ch of
                 469 ( 3760)         '+': getchr;
                 470 ( 3775)         '-': begin ems:=true; getchr end
                 471 ( 3795)       end;
                 472 ( 3797)       if (ch>'9') or (ch<'0') then error(17)
                 473 ( 3817)       else begin
                 474 ( 3826)         n1:=ord(ch)-ord('0');
                 475 ( 3832)         getchr;
                 476 ( 3841)         if (ch<='9') and (ch>='0') then begin
                 477 ( 3856)           n1:=10*n1+ord(ch)-ord('0');
                 478 ( 3873)           getchr
                 479 ( 3878)         end;

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 9

                 480 ( 3882)         if ems then n:=n-n1 else n:=n+n1
                 481 ( 3909)       end
                 482 ( 3909)     end;
                 483 ( 3918)     while n>0 do begin
                 484 ( 3928)       n:=prec(n);
                 485 ( 3932)       r:=times10(r);
                 486 ( 3951)     end;
                 487 ( 3957)     while n<0 do begin
                 488 ( 3970)       n:=succ(n); r:=0.1*r;
                 489 ( 3985)     end;
                 490 ( 3998)     splitconv(r,value);
                 491 ( 4025)     token:='ru'
                 492 ( 4025)   end
                 493 ( 4028) end {setval};
                 494 ( 4032) 
                 495 ( 4033) {       * setid *       (of scan)              }
                 496 ( 4033) 
                 497 ( 4033) proc setid; {sets one char to ident}
                 498 ( 4033) 
                 499 ( 4033) begin
                 500 ( 4033)   if count<=idlength then begin
                 501 ( 4045)     ident[count]:=ch; count:=succ(count)
                 502 ( 4060)   end;
                 503 ( 4069)   getchr;
                 504 ( 4073) end {setid};
                 505 ( 4073) 
                 506 ( 4074) begin { ***** body of scan ***** }
                 507 ( 4074)   count:=1; while ch=' ' do getchr;
                 508 ( 4096)   tpos:=curpos;
                 509 ( 4102) 
                 510 ( 4106)   if (ch<'a') or (ch>'z') then begin {main if}
                 511 ( 4124)     if (ch<'0') or (ch>'9') then begin {symb}
                 512 ( 4142)       token:=packed(' ',ch); getchr;
                 513 ( 4157)       case low(token) of
                 514 ( 4161)         '<': if (ch='=') or (ch='>') then pack;
                 515 ( 4191)         '>',':': if (ch='=') then pack;
                 516 ( 4222)         '{': begin repeat
                 517 ( 4232)                getchr until ch='}'; getchr; scan
                 518 ( 4250)              end;
                 519 ( 4254)         '$': begin {hex constant}
                 520 ( 4264)                token:='nu'; value[0]:=0;
                 521 ( 4275)                while ((ch>='0')and(ch<='9'))
                 522 ( 4293)                      or((ch>='a')and(ch<='f'))
                 523 ( 4308)                      do begin
                 524 ( 4313)                  if ch>'9' then
                 525 ( 4319)                    value[0]:=(value[0] shl 4)
                 526 ( 4333)                      +ord(ch)-ord('a')+10
                 527 ( 4342)                  else
                 528 ( 4344)                    value[0]:=(value[0] shl 4)
                 529 ( 4362)                      +ord(ch)-ord('0');
                 530 ( 4370)                  getchr
                 531 ( 4375)                end {do}
                 532 ( 4379)              end; {hex constant}
                 533 ( 4385)         chr(39): begin {string}
                 534 ( 4392)                token:='st';
                 535 ( 4395)                repeat setid until ch=chr(39);
                 536 ( 4409)                value[0]:=prec(count); getchr
                 537 ( 4425)               end
                 538 ( 4429)       end {case of token}
                 539 ( 4431)     end {special symbols}

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 10

                 540 ( 4431)     else setval {numeric value}
                 541 ( 4438)   end {main if}
                 542 ( 4438)   else begin {ident}
                 543 ( 4441)     clear;
                 544 ( 4445)     repeat
                 545 ( 4445)       setid
                 546 ( 4445)       until (ch<'0') or (ch>'z') or
                 547 ( 4463)         ((ch>'9') and (ch<'A')) or
                 548 ( 4479)         ((ch>'Z') and (ch<'a'));
                 549 ( 4495)     ll:=0; hh:=nresw; {look up in resword table}
                 550 ( 4511)     repeat
                 551 ( 4511)       i:=(ll+hh) shr 1; co:=compresw(i);
                 552 ( 4539)       if (co<0) then hh:=prec(i)
                 553 ( 4553)       else ll:=succ(i);
                 554 ( 4569)       until (co=0) or (ll>hh);
                 555 ( 4590)     if (co=0) then
                 556 ( 4601)       token:=reswcod[i] {reserved word found}
                 557 ( 4608)     else token:='id' {ident}
                 558 ( 4622)   end {odent}
                 559 ( 4626) end {scan};
                 560 ( 4626) 
                 561 ( 4627) { * testto/parse * }
                 562 ( 4627) 
                 563 ( 4627) { parce source for specific token; else error }
                 564 ( 4627) 
                 565 ( 4627) proc testto(x: packed char); { current token }
                 566 ( 4627) begin
                 567 ( 4627)   if token<>x then merror(2,x)
                 568 ( 4646) end;
                 569 ( 4656) 
                 570 ( 4657) proc parse(x: packed char); { next token }
                 571 ( 4657) begin
                 572 ( 4657)   scan; testto(x);
                 573 ( 4676) end;
                 574 ( 4676) 
                 575 ( 4677) { * getlib * }
                 576 ( 4677) 
                 577 ( 4677) proc getlib;  { read library data }
                 578 ( 4677) 
                 579 ( 4677) var i,j,nent,addr,size,num,x,base: integer;
                 580 ( 4680)     libfil: file;
                 581 ( 4680)     ch,ltyp2,dummy: char;
                 582 ( 4680)     name: array[7] of char;
                 583 ( 4680) 
                 584 ( 4680) begin
                 585 ( 4680)   scan; if token=' ,' then scan;
                 586 ( 4701)   testto('id');
                 587 ( 4710)   base:=pc-2;
                 588 ( 4716)   if (ofno<>nooutput) then write(@ofno,'L');
                 589 ( 4739)   for i:=0 to 7 do begin
                 590 ( 4756)     name[i]:=ident[succ(i)];
                 591 ( 4765)     if ofno<>nooutput then
                 592 ( 4779)       write(@ofno,ident[succ(i)])
                 593 ( 4793)   end;
                 594 ( 4799)   write(prtoff);
                 595 ( 4816)   asetfile(name&'        ',0,cdrive,'L');
                 596 ( 4846)   openr(libfil);  { get table file }
                 597 ( 4852)   read(@libfil,nent,size);
                 598 ( 4867)   {including cr,lf}
                 599 ( 4868)   for i:=succ(spnt) to spnt+nent do begin

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 11

                 600 ( 4895)     if spnt>symbsize then error(7);
                 601 ( 4914)     spnt:=succ(spnt); addr:=8*i+1;
                 602 ( 4932)     for j:=0 to 7 do begin
                 603 ( 4954)       read(@libfil,ch);
                 604 ( 4964)       idtab[addr+j]:=ch
                 605 ( 4974)     end;
                 606 ( 4985)     read(@libfil,ch);
                 607 ( 5009)     read(@libfil,t0[i],dummy,t1[i],t2[i],t3[i]);
                 608 ( 5058)     t1[i]:=t1[i]+level;
                 609 ( 5071)     ltyp2:=high(t0[i]);
                 610 ( 5088)     if (ltyp2='p')or(ltyp2='f')
                 611 ( 5106)       or(ltyp2='g') then begin
                 612 ( 5116)       t2[i]:=t2[i]+base;
                 613 ( 5131)       if t3[i]<>0 then begin {stack data}
                 614 ( 5154)         read(@libfil,num);
                 615 ( 5164)         push(num); t3[i]:=stackpnt;
                 616 ( 5179)         for j:=1 to num do begin
                 617 ( 5206)           read(@libfil,x);
                 618 ( 5216)           push(x);
                 619 ( 5227)         end {for j};
                 620 ( 5227)       end {stack data}
                 621 ( 5241)     end {if ltyp2}
                 622 ( 5241)   end {for i}
                 623 ( 5241)   level:=succ(level); pc:=pc+size; offset:=pc;
                 624 ( 5277)   close(libfil);
                 625 ( 5291)   if spnt>spntmax then spntmax:=spnt;
                 626 ( 5303)   if stackpnt>stackmax then stackmax:=stackpnt;
                 627 ( 5323)   if prt then write(prton);
                 628 ( 5341) end {getlib};
                 629 ( 5341) 
                 630 ( 5342) 
                 631 ( 5342) { #################################### }
                 632 ( 5342) {       * block * (global): handle one block }
                 633 ( 5342) { #################################### }
                 634 ( 5342) 
                 635 ( 5342) 
                 636 ( 5342) proc block(bottom: integer);
                 637 ( 5342) 
                 638 ( 5342) var l,f9,i,n,stackpn1,forwpn,find,cproc,
                 639 ( 5345)     spnt1,dpnt1,parlevel: integer;
                 640 ( 5345)     fortab: array[8] of integer;
                 641 ( 5345) 
                 642 ( 5345) { * find ident *    (of block) }
                 643 ( 5345) { this is a fast version for compiler speed }
                 644 ( 5345) 
                 645 ( 5345) func findid; {search in table for id }
                 646 ( 5345) 
                 647 ( 5345) var k,i: integer;
                 648 ( 5348)     id1: char;
                 649 ( 5348) 
                 650 ( 5348) begin
                 651 ( 5348) 
                 652 ( 5348)   i:=1; k:=8*spnt+9; id1:=ident[1];
                 653 ( 5372) 
                 654 ( 5380)   repeat
                 655 ( 5380)     k:=k-8;
                 656 ( 5386)     while (idtab[k]<>id1) and (k>0) do k:=k-8;
                 657 ( 5422)     if k>0 then begin
                 658 ( 5437)        i:=1;
                 659 ( 5442)        repeat i:=succ(i)

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 12

                 660 ( 5446)          until (i>8) or
                 661 ( 5462)              (idtab[k+i-1]<>ident[i]);
                 662 ( 5488)     end;
                 663 ( 5492)     until (i>8) or (k<=0);
                 664 ( 5506)   if k<=0 then begin
                 665 ( 5517)     findid:=0;
                 666 ( 5522)   end
                 667 ( 5526)   else
                 668 ( 5526)     findid:=(k-1) shr 3;
                 669 ( 5538) end;
                 670 ( 5543) 
                 671 ( 5544) { * code1 *      (of block) }
                 672 ( 5544) 
                 673 ( 5544) proc code1(x: %integer);  {set one byte p-code}
                 674 ( 5544) begin
                 675 ( 5544)   savebyte(x); pc:=succ(pc)
                 676 ( 5559) end;
                 677 ( 5568) 
                 678 ( 5569) { * code2 *    (of block) }
                 679 ( 5569) 
                 680 ( 5569) proc code2(x,y: integer);
                 681 ( 5569) begin
                 682 ( 5569)   code1(x); code1(y);
                 683 ( 5594) end;
                 684 ( 5594) 
                 685 ( 5595) { * code3 *    (of block) }
                 686 ( 5595) 
                 687 ( 5595) proc code3(x: integer; y1: %integer);
                 688 ( 5595) 
                 689 ( 5595) var y: integer;
                 690 ( 5598) 
                 691 ( 5598) begin {code3}
                 692 ( 5598)   y:=y1;
                 693 ( 5600)   if (x=34) and (y>=0) and (y<256) then
                 694 ( 5631)     code2(32,y)
                 695 ( 5637)   else begin
                 696 ( 5650)     if (x=35) and (y>-128) and (y<=127) then
                 697 ( 5673)       begin
                 698 ( 5674)         if (y<0) then y:=y+256;
                 699 ( 5694)         code2(33,y);
                 700 ( 5711)       end
                 701 ( 5711)     else begin
                 702 ( 5714)       if (x>=36) and (x<=38) then y:=y-pc-1;
                 703 ( 5743)       code1(x); code1(y and 255);
                 704 ( 5771)       code1(y shr 8);
                 705 ( 5784)     end
                 706 ( 5784)   end
                 707 ( 5784) end {code3};
                 708 ( 5784) 
                 709 ( 5785) { * testtype *      (of block) }
                 710 ( 5785) 
                 711 ( 5785) proc testtype(ttype: char);
                 712 ( 5785) 
                 713 ( 5785) begin
                 714 ( 5785)   if restype<>ttype then
                 715 ( 5794)     if (restype<>'u') and (ttype<>'u') then
                 716 ( 5816)       merror(14,packed(ttype,restype));
                 717 ( 5837) end;
                 718 ( 5837) 
                 719 ( 5838) { * putsym *   (of block) }

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 13

                 720 ( 5838) 
                 721 ( 5838) proc putsym(ltyp1,ltyp2: char);
                 722 ( 5838) 
                 723 ( 5838) var i,addr: integer;
                 724 ( 5841) begin
                 725 ( 5841)   if spnt>symbsize then error(7)
                 726 ( 5856)   else spnt:=succ(spnt);
                 727 ( 5869)   if spnt>spntmax then spntmax:=spnt;
                 728 ( 5886)   t0[spnt]:=packed(ltyp1,ltyp2);
                 729 ( 5907)   t3[spnt]:=0;
                 730 ( 5917)   addr:=8*spnt;
                 731 ( 5923)   for i:=1 to 8 do idtab[addr+i]:=ident[i];
                 732 ( 5962)   if ltyp1='v' then begin
                 733 ( 5994)     t2[spnt]:=dpnt; dpnt:=succ(dpnt);
                 734 ( 6013)   end;
                 735 ( 6018)   t1[spnt]:=level
                 736 ( 6022) end {putsym};
                 737 ( 6030) 
                 738 ( 6031) { * checkindex *  (of block) }
                 739 ( 6031) 
                 740 ( 6031) proc checkindex(lowlim,highlim: integer);
                 741 ( 6031) begin
                 742 ( 6031)   if icheck then begin
                 743 ( 6040)     code3($40,lowlim-1);
                 744 ( 6058)     code2(highlim and 255, highlim shr 8)
                 745 ( 6071)   end
                 746 ( 6078) end;
                 747 ( 6078) 
                 748 ( 6079) { * getcon *      (of block) }
                 749 ( 6079) 
                 750 ( 6079) func getcon;
                 751 ( 6079) 
                 752 ( 6079) var idpnt,val,ii: integer;
                 753 ( 6082)     rval: real;
                 754 ( 6082)     sign: char;
                 755 ( 6082) begin
                 756 ( 6082)   restype:='i';
                 757 ( 6086)   if token=' -' then begin
                 758 ( 6098)     sign:='-'; scan
                 759 ( 6107)   end else begin
                 760 ( 6114)     sign:='+'; if token=' +' then scan
                 761 ( 6128)   end;
                 762 ( 6135)   case token of
                 763 ( 6135)     'nu': val:=value[0];
                 764 ( 6149)     'ru': begin val:=value[0];
                 765 ( 6170)             restype:='r' end;
                 766 ( 6184)     'st': if value[0]=1 then begin
                 767 ( 6204)             restype:='c';
                 768 ( 6209)             val:=ord(ident[1])
                 769 ( 6215)           end else if value[0]=2 then begin
                 770 ( 6235)             val:=(ord(ident[1]) shl 8) +
                 771 ( 6247)               ord(ident[2]);
                 772 ( 6253)             restype:='p';
                 773 ( 6260)           end else if value[0]>2 then begin
                 774 ( 6276)             val:=pc;
                 775 ( 6279)             for ii:=1 to value[0] do
                 776 ( 6295)                         code1(ord(ident[ii]));
                 777 ( 6322)             code1(0); value[0]:=0; restype:='s';
                 778 ( 6354)           end else error(15);
                 779 ( 6369)     'cr': begin parse(' ('); scan; val:=getcon;

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 14

                 780 ( 6399)             if (val>127) or (val<0) then
                 781 ( 6417)               error(12);
                 782 ( 6429)             testtype('i');
                 783 ( 6437)             restype:='c'; parse(' )');
                 784 ( 6452)           end;
                 785 ( 6452)     'tr': begin val:=1; restype:='b' end;
                 786 ( 6475)     'fa': begin val:=0; restype:='b' end;
                 787 ( 6498)     'cp': begin
                 788 ( 6509)             scan; val:=getcon;
                 789 ( 6519)             testtype('i'); restype:='q';
                 790 ( 6533)           end;
                 791 ( 6537)     ' @': begin scan; val:=getcon;
                 792 ( 6558)             testtype('i'); restype:='f'
                 793 ( 6570)           end
                 794 ( 6572)     else begin
                 795 ( 6579)       testto('id'); idpnt:=findid;
                 796 ( 6594)       if (idpnt>0) and (high(t0[idpnt])='c')
                 797 ( 6616)       then begin
                 798 ( 6618)         val:=t2[idpnt];
                 799 ( 6625)         restype:=low(t0[idpnt]);
                 800 ( 6641)         if restype='r' then
                 801 ( 6652)           value[1]:=t3[idpnt];
                 802 ( 6662)       end
                 803 ( 6670)       else begin error(4); val:=0;
                 804 ( 6683)         restype:='i'
                 805 ( 6687)       end
                 806 ( 6689)     end
                 807 ( 6693)   end {case};
                 808 ( 6695)   if sign='-' then
                 809 ( 6701)     case restype of
                 810 ( 6705)       'i': getcon:=-val;
                 811 ( 6716)       'r': begin value[0]:=val;
                 812 ( 6737)              splitconv(value,rval);
                 813 ( 6769)              splitconv(-rval,value);
                 814 ( 6794)              getcon:=value[0]
                 815 ( 6796)            end
                 816 ( 6796)       else error(12)
                 817 ( 6809)     end {case}
                 818 ( 6817)   else getcon:=val;
                 819 ( 6820) end {getcon};
                 820 ( 6828) 
                 821 ( 6829) { * deccon *         ( of block ) }
                 822 ( 6829) 
                 823 ( 6829) proc deccon;    { declare constant }
                 824 ( 6829) begin
                 825 ( 6829)   if token=' ;' then scan;
                 826 ( 6849)   testto('id');
                 827 ( 6858)   putsym('c','i');
                 828 ( 6868)   parse(' ='); scan;
                 829 ( 6881)   t2[spnt]:=getcon;
                 830 ( 6891)   if (restype='r') then t3[spnt]:=value[1];
                 831 ( 6911)   if restype<>'i' then
                 832 ( 6925)     t0[spnt]:=packed('c',restype);
                 833 ( 6940)   scan
                 834 ( 6944) end {deccon};
                 835 ( 6948) 
                 836 ( 6949) { * decvar *          ( of block ) }
                 837 ( 6949) 
                 838 ( 6949) proc decvar(typ1,typ2: char);
                 839 ( 6949) begin

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 15

                 840 ( 6949)   if token=' ,' then scan;
                 841 ( 6969)   testto('id');
                 842 ( 6978)   putsym(typ1,typ2);
                 843 ( 6992)   scan;
                 844 ( 6996) end {decvar};
                 845 ( 6996) 
                 846 ( 6997) { * gettype *         ( of block ) }
                 847 ( 6997) 
                 848 ( 6997) proc gettype(var typ2: char;
                 849 ( 6997)   var aflag,uflag: boolean; var n: integer);
                 850 ( 6997) 
                 851 ( 6997) begin
                 852 ( 6997)   aflag:=false; n:=0; uflag:=false;
                 853 ( 7016)   scan;
                 854 ( 7024)   if token='ar' then begin
                 855 ( 7032)     parse(' ['); scan;
                 856 ( 7048)     n:=getcon; testtype('i');
                 857 ( 7066)     if (n<1) then begin error(15); n:=1 end;
                 858 ( 7090)     parse(' ]'); parse('of'); scan;
                 859 ( 7112)     aflag:=true
                 860 ( 7112)   end;
                 861 ( 7118)   if token=' %' then begin
                 862 ( 7126)     scan; uflag:=true
                 863 ( 7133)   end;
                 864 ( 7139)   case token of
                 865 ( 7139)     'in': typ2:='i';
                 866 ( 7153)     'ch': typ2:='c';
                 867 ( 7170)     'pa': begin parse ('ch'); typ2:='p' end;
                 868 ( 7200)     'bo': typ2:='b';
                 869 ( 7213)     'rl': begin typ2:='r'; aflag:=true;
                 870 ( 7236)             n:=prec(2*succ(n)) end;
                 871 ( 7253)     'cp': typ2:='q';
                 872 ( 7266)     'fl': typ2:='f'
                 873 ( 7281)     else begin error(11); typ2:='i';end
                 874 ( 7304)   end {case}
                 875 ( 7306) end {gettype};
                 876 ( 7306) 
                 877 ( 7307) { * variable *        ( of block) }
                 878 ( 7307) 
                 879 ( 7307) proc variable;  { variable declarations }
                 880 ( 7307) 
                 881 ( 7307) var typ1,typ2: char;
                 882 ( 7310)     i,l: integer;
                 883 ( 7310)     aflag,uflag: boolean;
                 884 ( 7310) 
                 885 ( 7310) begin
                 886 ( 7310)   scan;
                 887 ( 7316)   repeat {main loop}
                 888 ( 7316)     l:=0;
                 889 ( 7318)     repeat decvar('v','i'); l:=succ(l);
                 890 ( 7336)     until token<> ' ,';
                 891 ( 7348)     testto(' :');
                 892 ( 7361)     gettype(typ2,aflag,uflag,n);
                 893 ( 7397)     if uflag then error(11);
                 894 ( 7412)     if aflag then typ1:='a' else typ1:='v';
                 895 ( 7430)     if typ1='a' then begin {array}
                 896 ( 7444)        dpnt:=dpnt-l; {variable has been assumed}
                 897 ( 7457)        for i:=succ(spnt-l) to spnt do begin
                 898 ( 7484)          t2[i]:=dpnt; t3[i]:=n;
                 899 ( 7500)          dpnt:=succ(dpnt+n);

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 16

                 900 ( 7517)       end
                 901 ( 7522)     end {array};
                 902 ( 7536)     for i:=succ(spnt-l) to spnt do
                 903 ( 7550)       t0[i]:=packed(typ1,typ2);
                 904 ( 7576)     parse(' ;');scan
                 905 ( 7603)   until token<>'id' {end main loop}
                 906 ( 7614) end {variable};
                 907 ( 7618) 
                 908 ( 7619) { * fixup *           ( of block ) }
                 909 ( 7619) 
                 910 ( 7619) proc fixup(x: integer);
                 911 ( 7619) begin
                 912 ( 7619)   if ofno<>nooutput then begin
                 913 ( 7631)     write(@ofno,'F');
                 914 ( 7642)     savebyte(succ(x-offset) and 255);
                 915 ( 7661)     savebyte(succ(x-offset) shr 8);
                 916 ( 7680)     savebyte((pc-x-1) and 255);
                 917 ( 7701)     savebyte((pc-x-1) shr 8);
                 918 ( 7722)   end;
                 919 ( 7722) end;
                 920 ( 7722) 
                 921 ( 7723) { * function *        ( of block ) }
                 922 ( 7723) 
                 923 ( 7723) proc function;
                 924 ( 7723) 
                 925 ( 7723) var n: integer;
                 926 ( 7726)     typ1,typ2: char;
                 927 ( 7726)     aflag,uflag: boolean;
                 928 ( 7726) begin
                 929 ( 7726)   if token<>' :' then begin
                 930 ( 7736)     aflag:=false; uflag:=false; typ2:='i' end
                 931 ( 7753)   else begin
                 932 ( 7760)     gettype(typ2,aflag,uflag,n);
                 933 ( 7796)     scan
                 934 ( 7796)   end;
                 935 ( 7800)   if aflag then begin
                 936 ( 7804)     typ1:='s'; t3[succ(cproc)]:=n;
                 937 ( 7818)     t2[succ(cproc)]:=t2[succ(cproc)]-n
                 938 ( 7840)   end
                 939 ( 7840)   else typ1:='r';
                 940 ( 7854)   t0[succ(cproc)]:=packed(typ1,typ2);
                 941 ( 7872)   if uflag then typ2:='u';
                 942 ( 7885)   if aflag then typ1:='g'
                 943 ( 7896)   else typ1:='f';
                 944 ( 7907)   t0[cproc]:=packed(typ1,typ2);
                 945 ( 7924) end {function};
                 946 ( 7928) 
                 947 ( 7929) { * parameter *       ( of block ) }
                 948 ( 7929) 
                 949 ( 7929) proc parameter;
                 950 ( 7929) 
                 951 ( 7929) var counter1,counter2,i,n,bs: integer;
                 952 ( 7932)     aflag,uflag: boolean;
                 953 ( 7932)     vtype1,vtype2: char;
                 954 ( 7932)     vtype: packed char;
                 955 ( 7932) 
                 956 ( 7932) begin
                 957 ( 7932)   push(0); { dummy size, fixed later }
                 958 ( 7942)   if find=0 then t3[spnt-npara]:=stackpnt
                 959 ( 7961)   else bs:=stackpnt;

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 17

                 960 ( 7972)   counter1:=0
                 961 ( 7980)   repeat {main loop}
                 962 ( 7986)     counter2:=0;
                 963 ( 7988)     vtype1:='d'; vtype2:='i';
                 964 ( 8000)     scan;
                 965 ( 8008)     if token='co' then scan
                 966 ( 8016)     else if token='va' then begin
                 967 ( 8034)       scan; vtype1:='w' end; {variable param}
                 968 ( 8047)     end;
                 969 ( 8047)     repeat {inner loop}
                 970 ( 8047)       decvar(vtype1,vtype2);
                 971 ( 8061)       t2[spnt]:=parlevel;
                 972 ( 8065)       parlevel:=succ(parlevel);
                 973 ( 8077)       npara:=succ(npara);
                 974 ( 8086)       counter2:=succ(counter2);
                 975 ( 8095)       until token<>' ,';
                 976 ( 8107)     uflag:=false;aflag:=false; n:=0;
                 977 ( 8125)     if token<>' :' then
                 978 ( 8136)       vtype2:='i' {assume integer }
                 979 ( 8142)     else begin
                 980 ( 8149)       gettype(vtype2,aflag,uflag,n);
                 981 ( 8185)       if n>63 then error(15);
                 982 ( 8203)       scan
                 983 ( 8203)     end;
                 984 ( 8207)     if aflag then begin
                 985 ( 8211)       vtype1:=succ(vtype1);
                 986 ( 8218)       parlevel:=parlevel-counter2;
                 987 ( 8227)     end;
                 988 ( 8236)     vtype:=packed(vtype1,vtype2);
                 989 ( 8245)     for i:=1 to counter2 do begin
                 990 ( 8268)       if uflag then push(packed(vtype1,'u'))
                 991 ( 8282)       else push(vtype);
                 992 ( 8301)       if aflag then begin
                 993 ( 8305)         push(n); t3[spnt-counter2+i]:=n;
                 994 ( 8332)         t2[spnt-counter2+i]:=parlevel;
                 995 ( 8354)         parlevel:=succ(parlevel)+n;
                 996 ( 8367)       end {then};
                 997 ( 8376)       t0[spnt-counter2+i]:=vtype;
                 998 ( 8390)     end {for};
                 999 ( 8398)     if aflag then counter2:=2*counter2;
                1000 ( 8421)     counter1:=counter1+counter2;
                1001 ( 8434)     until token<>' ;'; {outer loop}
                1002 ( 8454)   testto(' )'); scan;
                1003 ( 8467)   if find=0 then
                1004 ( 8473)     stack[t3[spnt-npara]]:=counter1
                1005 ( 8490)   else begin {information is allready there}
                1006 ( 8501)     stack[bs]:=counter1;
                1007 ( 8505)     n:=t3[fortab[find]]; {existing stack data}
                1008 ( 8529)     for i:=0 to stackpnt-bs do
                1009 ( 8539)       if stack[bs+1]<>stack[n+1]
                1010 ( 8570)         then merror(13,'pa'); {parameter wrong}
                1011 ( 8604)     stackpnt:=prec(bs) {clear the new info}
                1012 ( 8608)   end  {else}
                1013 ( 8613) end {parameter};
                1014 ( 8613) 
                1015 ( 8614) { * memory *              ( of block) }
                1016 ( 8614) 
                1017 ( 8614) proc memory;
                1018 ( 8614) 
                1019 ( 8614) var typ1,typ2:char;

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 18

                1020 ( 8617)     i,l,n: integer;
                1021 ( 8617)     aflag,uflag: boolean;
                1022 ( 8617) 
                1023 ( 8617) begin
                1024 ( 8617)   scan;
                1025 ( 8623)   repeat {main loop}
                1026 ( 8623)     l:=0;
                1027 ( 8625)     repeat
                1028 ( 8629)       decvar('m','i');
                1029 ( 8639)       l:=succ(l); testto(' ='); scan;
                1030 ( 8661)       n:=getcon; testtype('i');
                1031 ( 8679)       scan; t2[spnt]:=n;
                1032 ( 8687)     until token<>' ,';
                1033 ( 8702)     testto(' :');
                1034 ( 8715)     gettype(typ2,aflag,uflag,n);
                1035 ( 8751)     if uflag then error(11);
                1036 ( 8766)     scan;
                1037 ( 8770)     if token=' &' then begin {8-bit}
                1038 ( 8781)       typ1:='h'; scan
                1039 ( 8787)     end
                1040 ( 8791)     else typ1:='m';
                1041 ( 8796)     if aflag then typ1:=succ(typ1);
                1042 ( 8811)     for i:=succ(spnt-l) to spnt do begin
                1043 ( 8843)       t0[i]:=packed(typ1,typ2);
                1044 ( 8856)       t3[i]:=n;
                1045 ( 8864)     end;
                1046 ( 8872)     testto(' ;'); scan;
                1047 ( 8899)   until token<>'id';
                1048 ( 8906) end {memory};
                1049 ( 8910) 
                1050 ( 8911) 
                1051 ( 8911) {######################################}
                1052 ( 8911) { * statement *           ( of block ) }
                1053 ( 8911) {######################################}
                1054 ( 8911) 
                1055 ( 8911) proc statmnt;
                1056 ( 8911) 
                1057 ( 8911) var idpnt,relad,k2,savpc,bottom1: integer;
                1058 ( 8914)     device,wln: boolean;
                1059 ( 8914)     savtp1,vartyp2: char;
                1060 ( 8914)     wl: boolean;
                1061 ( 8914) 
                1062 ( 8914) { * code4 *               ( of statement ) }
                1063 ( 8914) 
                1064 ( 8914) proc code4(x,y1,z1: integer); {set 4-byte code}
                1065 ( 8914) 
                1066 ( 8914) var y,z: integer;
                1067 ( 8917) 
                1068 ( 8917) begin
                1069 ( 8917)   y:=y1; z:=z1;
                1070 ( 8927)   if y<0 then y:=y+256;
                1071 ( 8952)   if x=43 then z:=z-pc-2;
                1072 ( 8978)   code1(x);code1(y);code1(z and 255);
                1073 ( 9016)   code1(z shr 8)
                1074 ( 9022) end {code4};
                1075 ( 9029) 
                1076 ( 9030) { * testferror *         ( of statement) ) }
                1077 ( 9030) 
                1078 ( 9030) proc testferror;
                1079 ( 9030) begin

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 19

                1080 ( 9030)   code1($4f);
                1081 ( 9043) end;
                1082 ( 9043) 
                1083 ( 9044) { * gpval *              ( of statement ) }
                1084 ( 9044) 
                1085 ( 9044) proc gpval(idpnt: integer;
                1086 ( 9044)   dir: boolean; typ: char);
                1087 ( 9044) 
                1088 ( 9044) var d: integer;
                1089 ( 9047) 
                1090 ( 9047) begin {gpval}
                1091 ( 9047)   if dir then d:=1 else d:=0;
                1092 ( 9067)   case typ of
                1093 ( 9071)   'h':  begin code3($22,t2[idpnt]);
                1094 ( 9098)           if dir then code1($3f);
                1095 ( 9113)           code1($17+d) end;
                1096 ( 9126)   'm':  begin code3($22,t2[idpnt]);
                1097 ( 9152)           code1($3d+d) end;
                1098 ( 9165)   'i':  begin
                1099 ( 9175)           if dir then code1($3f);
                1100 ( 9190)           code3($22,t2[idpnt]);
                1101 ( 9206)           code1(3);
                1102 ( 9214)           if dir then code1($3f);
                1103 ( 9229)           code1($17+d) end;
                1104 ( 9242)   'n':  begin if dir then code1($3f);
                1105 ( 9267)           code3($22,1); code1($12);
                1106 ( 9285)           code3($22,t2[idpnt]);
                1107 ( 9301)           code1(3); code1($3d+d) end
                1108 ( 9322)   else begin
                1109 ( 9325)     if typ='q' then begin
                1110 ( 9332)       code4($55,level-t1[idpnt],2*t2[idpnt]);
                1111 ( 9367)     end else
                1112 ( 9367)       code4($27+2*d+relad,level-t1[idpnt],
                1113 ( 9393)         2*t2[idpnt]);
                1114 ( 9415)     end
                1115 ( 9415)   end {case}
                1116 ( 9417) end;
                1117 ( 9417) 
                1118 ( 9418) { FORWARD decl. of mainexp (of statement) }
                1119 ( 9418) 
                1120 ( 9418) proc mainexp(reqtype: char;
                1121 ( 9418)   var arsize: integer); forward;
                1122 ( 9421) 
                1123 ( 9421) { * express *           ( of statement ) }
                1124 ( 9421) 
                1125 ( 9421) proc express; {requests a normal 16-bit result }
                1126 ( 9421) 
                1127 ( 9421) var resultsize: integer;
                1128 ( 9424) 
                1129 ( 9424) begin {express}
                1130 ( 9424)   mainexp('n',resultsize);
                1131 ( 9442)   if resultsize<>0 then error(15)
                1132 ( 9454) end {express};
                1133 ( 9460) 
                1134 ( 9461) { * arrayexp *          ( of mainexp) }
                1135 ( 9461) 
                1136 ( 9461) proc arrayexp(size: integer; eltype: char);
                1137 ( 9461) 
                1138 ( 9461) var resultsize: integer;
                1139 ( 9464) 

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 20

                1140 ( 9464) begin
                1141 ( 9464)   mainexp(eltype,resultsize);
                1142 ( 9484)   if resultsize<>size then error(15);
                1143 ( 9504)   testtype(eltype);
                1144 ( 9514) end;
                1145 ( 9514) 
                1146 ( 9515) { * getvar *            ( of statement ) }
                1147 ( 9515) 
                1148 ( 9515) proc getvar;
                1149 ( 9515) begin
                1150 ( 9515)   vartyp2:=high(t0[idpnt]);
                1151 ( 9528)   vartype:=low(t0[idpnt]);
                1152 ( 9541)   scan;
                1153 ( 9550)   if (vartype='q') and (token=' [') and
                1154 ( 9565)     ((vartyp2='v') or (vartyp2='d')) then begin
                1155 ( 9582)     vartyp2:='q'; vartype:='c';
                1156 ( 9593)   end;
                1157 ( 9597)   case vartyp2 of
                1158 ( 9597)   'a','x','s','i','n','q':
                1159 ( 9640)       begin
                1160 ( 9643)         if token=' [' then begin
                1161 ( 9651)           scan; express; relad:=1;
                1162 ( 9664)           if vartyp2='r' then begin
                1163 ( 9675)             relad:=3;
                1164 ( 9680)             code3($22,1); code1($12)
                1165 ( 9696)           end;
                1166 ( 9702)           if (vartyp2='q') and (t3[idpnt]=0) then
                1167 ( 9720)             checkindex(0,63)
                1168 ( 9728)           else
                1169 ( 9734)             checkindex(0,t3[idpnt]);
                1170 ( 9753)           testtype('i'); testto(' ]'); scan;
                1171 ( 9774)         end else relad:=2;
                1172 ( 9779)       end;
                1173 ( 9783)   'v','w','r','h','m': relad:=0;
                1174 ( 9823)   'c','d','e','t','u': error(6)
                1175 ( 9867)   else error(1)
                1176 ( 9878)   end {case}
                1177 ( 9886) end {getvar};
                1178 ( 9886) 
                1179 ( 9887) { * prcall *            ( of statement ) }
                1180 ( 9887) 
                1181 ( 9887) proc prcall (idpn1: integer);
                1182 ( 9887) 
                1183 ( 9887) var bstack,numpar,i,n,n2: integer;
                1184 ( 9890) 
                1185 ( 9890) { body of prcall follows later }
                1186 ( 9890) 
                1187 ( 9890) { * prcall1 *           ( of prcall ) }
                1188 ( 9890) 
                1189 ( 9890) proc prcall1;
                1190 ( 9890) var ressize:integer;
                1191 ( 9893) 
                1192 ( 9893)   proc prcall3;
                1193 ( 9893)   begin {prcall3}
                1194 ( 9896)     testto('id');
                1195 ( 9907)     idpnt:=findid;
                1196 ( 9913)     if idpnt=0 then error(5);
                1197 ( 9935)     getvar;
                1198 ( 9939)     if chr(stack[i] and 255)<>vartype then
                1199 ( 9951)       if chr(stack[i] and 255)<>'u' then

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 21

                1200 ( 9973)         merror(14,'01');
                1201 ( 9988)       push(idpnt);
                1202 ( 9998)   end {prcall3};
                1203 ( 9998) 
                1204 (9999) begin {prcall1}
                1205 (9999)   case chr(stack[i] shr 8) of
                1206 (10012)     'd':  begin
                1207 (10020)             if chr(stack[i] and 255) = 'q' then
                1208 (10034)               mainexp('q',ressize)
                1209 (10040)             else
                1210 (10054)               express;
                1211 (10061)             if chr(stack[i] and 255)<>'u' then
                1212 (10075)               testtype(chr(stack[i] and 255));
                1213 (10097)           end;
                1214 (10097)     'e':  begin
                1215 (10107)             arrayexp(stack[succ(i)],
                1216 (10112)               chr(stack[i]));
                1217 (10131)             i:=succ(i);
                1218 (10135)           end;
                1219 (10140)     'w':  begin
                1220 (10150)             prcall3;
                1221 (10154)             if relad<>0 then merror(14,'02');
                1222 (10175)             gpval(idpnt,false,vartyp2);
                1223 (10191)           end;
                1224 (10191)     'x':  begin
                1225 (10201)             prcall3;
                1226 (10205)             if relad<>2 then merror(14,'03');
                1227 (10226)             if vartyp2='i' then error(16);
                1228 (10244)             i:=succ(i);
                1229 (10248)             if stack[i]<>t3[idpnt] then
                1230 (10265)               error(15);
                1231 (10281)             if vartyp2='n' then begin
                1232 (10288)               code3($22,t2[idpnt]);
                1233 (10307)               code1($3d);
                1234 (10315)             end else code4($27,level-t1[idpnt],
                1235 (10328)               2*t2[idpnt]);
                1236 (10350)             code2($3b,stack[i]);
                1237 (10366)           end
                1238 (10366)     else merror(14,'04')
                1239 (10374)   end {case}
                1240 (10382) end {prcall1};
                1241 (10382) 
                1242 (10383) proc prcall2;
                1243 (10383) begin
                1244 (10383)   if n>0 then code3(35,-2*n);
                1245 (10414)   n:=0
                1246 (10414) end {prcall2};
                1247 (10420) 
                1248 (10421) begin {body of prcall}
                1249 (10421)   if t3[idpn1]<>0 then begin
                1250 (10434)     bstack:=t3[idpn1];
                1251 (10441)     numpar:=stack[bstack];
                1252 (10453)     parse(' ('); scan;
                1253 (10474)     for i:=succ(bstack) to bstack+numpar do
                1254 (10487)     begin
                1255 (10501)       prcall1;
                1256 (10505)       if i<bstack+numpar then begin
                1257 (10519)         testto(' ,'); scan
                1258 (10531)       end
                1259 (10535)     end;

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 22

                1260 (10535)     testto(' )');
                1261 (10558)   end {then};
                1262 (10558)   code4(43,level-t1[idpn1],t2[idpn1]);
                1263 (10587)   if t3[idpn1]<>0 then begin
                1264 (10598)     n:=0; i:=bstack+numpar;
                1265 (10611)     repeat
                1266 (10620)       case chr(stack[i] shr 8) of
                1267 (10631)       'd':  n:=succ(n);
                1268 (10643)       'w':  begin
                1269 (10658)               prcall2; idpnt:=pop;
                1270 (10668)               gpval(idpnt,true,
                1271 (10678)                   high(t0[idpnt]));
                1272 (10693)             end;
                1273 (10693)       chr(0): begin
                1274 (10703)             n2:=stack[i];
                1275 (10707)             i:=i-1;
                1276 (10721)             case chr(stack[i] shr 8) of
                1277 (10737)               'e':  n:=succ(n+n2);
                1278 (10754)               'x':  begin
                1279 (10769)                       prcall2;
                1280 (10773)                       idpnt:=pop;
                1281 (10779)                       if high(t0[idpnt])='n'
                1282 (10792)                       then begin
                1283 (10795)                         code3($22,t2[idpnt]+
                1284 (10804)                           2*t3[idpnt]);
                1285 (10826)                         code1($3e)
                1286 (10828)                       end else
                1287 (10834)                         code4(41,
                1288 (10839)                           level-t1[idpnt],
                1289 (10847)                           2*(t2[idpnt]+
                1290 (10858)                           t3[idpnt]));
                1291 (10878)                       code2($3c,t3[idpnt])
                1292 (10884)                     end
                1293 (10894)               end {case}
                1294 (10896)             end
                1295 (10896)       end; {case}
                1296 (10898)       i:=prec(i);
                1297 (10902)     until i=bstack;
                1298 (10911)     prcall2
                1299 (10919)   end
                1300 (10923) end {prcall};
                1301 (10923) 
                1302 (10924) 
                1303 (10924) {###################################}
                1304 (10924) { * mainexp *       ( of statement) }
                1305 (10924) {###################################}
                1306 (10924) {  see forward declaration above    }
                1307 (10924) 
                1308 (10924) proc mainexp(reqtype: char;
                1309 (10924)   var arsize: integer);
                1310 (10924) 
                1311 (10924) { variables of mainexp}
                1312 (10924) var opcode,roff: integer;
                1313 (10927)     savtype: char;
                1314 (10927) 
                1315 (10927) { * argument *         ( of mainexp ) }
                1316 (10927) 
                1317 (10927) proc argument(rtype: char);
                1318 (10927) begin
                1319 (10927)   parse(' ('); scan; express;

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 23

                1320 (10949)   testtype(rtype);
                1321 (10959)   testto(' )'); scan
                1322 (10968) end; {argument}
                1323 (10973) 
                1324 (10973) {#######################################}
                1325 (10973) { * simexp *             ( of mainexp ) }
                1326 (10973) {#######################################}
                1327 (10973) 
                1328 (10973) proc simexp(var arsize1: integer);
                1329 (10973) 
                1330 (10973) var opcode: integer;
                1331 (10976)     sign: char;
                1332 (10976) 
                1333 (10976) {body of simexp  follows later }
                1334 (10976) 
                1335 (10976) {#######################################}
                1336 (10976) { * term *               ( of simexp )  }
                1337 (10976) {#######################################}
                1338 (10976) 
                1339 (10976) proc term(var arsize2: integer);
                1340 (10976) 
                1341 (10976) var opcode: integer;
                1342 (10979) 
                1343 (10979) { body of term follows later }
                1344 (10979) 
                1345 (10979) {#######################################}
                1346 (10979) { * factor *             ( of term )    }
                1347 (10979) {#######################################}
                1348 (10979) 
                1349 (10979) proc factor(var arsize3: integer);
                1350 (10979) 
                1351 (10979) var i, idpnt: integer;
                1352 (10982) 
                1353 (10982) { * index *              ( of factor )  }
                1354 (10982) 
                1355 (10982) proc index(chk: boolean);
                1356 (10982) 
                1357 (10982) var savtype: char;
                1358 (10985) 
                1359 (10985) begin {index}
                1360 (10985)   scan; savtype:=restype;
                1361 (10991)   express; testtype('i'); testto(' ]');
                1362 (11020)   if savtype='r' then begin
                1363 (11027)     code3($22,1); code1($12);
                1364 (11048)   end;
                1365 (11048)   if chk then begin
                1366 (11052)     if (savtype='q') and (t3[idpnt]=0) then
                1367 (11073)       { is an arrayed cpnt }
                1368 (11074)       checkindex(0,63)
                1369 (11081)     else
                1370 (11087)       checkindex(0,t3[idpnt]);
                1371 (11106)   end;
                1372 (11106)   restype:=savtype; scan
                1373 (11114) end;
                1374 (11118) 
                1375 (11119) 
                1376 (11119) begin { *** body of factor *** }
                1377 (11119)   arsize3:=0;
                1378 (11123)   case token of
                1379 (11127)     'id': begin {identifier }

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 24

                1380 (11139)             idpnt:=findid;
                1381 (11145)             if idpnt=0 then error(5);
                1382 (11167)             restype:=low(t0[idpnt]);
                1383 (11175)             case high(t0[idpnt]) of
                1384 (11188)               'v','w','d':
                1385 (11207)                     begin
                1386 (11210)                       scan;
                1387 (11214)                       if (restype='q') and (token=' [')
                1388 (11228)                       then begin
                1389 (11230)                         code4(39,level-t1[idpnt],
                1390 (11243)                           2*t2[idpnt]);
                1391 (11265)                         index(true);
                1392 (11273)                         code1($03);
                1393 (11281)                         code1($54);
                1394 (11289)                         restype:='c';
                1395 (11291)                       end
                1396 (11295)                       else
                1397 (11295)                         code4(39,level-t1[idpnt],
                1398 (11308)                           2*t2[idpnt]);
                1399 (11330)                     end;
                1400 (11330)               'h':  begin code3($22,t2[idpnt]);
                1401 (11356)                       code1($17); scan end;
                1402 (11368)               'i':  begin code3($22,t2[idpnt]);
                1403 (11394)                       scan;
                1404 (11398)                       if token=' [' then begin
                1405 (11406)                         index(true); code1($03);
                1406 (11425)                         code1($17)
                1407 (11427)                       end else begin
                1408 (11436)                         error(16)
                1409 (11438)                       end
                1410 (11444)                     end;
                1411 (11444)               'm':  begin code3($22,t2[idpnt]);
                1412 (11470)                       code1($3d); scan
                1413 (11478)                     end;
                1414 (11482)               'n':  begin code3($22,t2[idpnt]);
                1415 (11508)                       scan;
                1416 (11512)                       if token=' [' then begin
                1417 (11520)                         index(true);
                1418 (11531)                         code3($22,1);code1($12);
                1419 (11549)                         code1($03); code1($3d);
                1420 (11565)                         if restype='r' then
                1421 (11571)                         begin
                1422 (11572)                           code2($3b,1);
                1423 (11585)                           arsize3:=1
                1424 (11585)                         end
                1425 (11587)                       end else begin
                1426 (11594)                         code1($3d);
                1427 (11602)                         code2($3b,t3[idpnt]);
                1428 (11618)                         arsize3:=t3[idpnt];
                1429 (11622)                       end
                1430 (11630)                     end;
                1431 (11630)               'r','t': begin
                1432 (11647)                       code3(35,2);
                1433 (11657)                       idpnt:=prec(idpnt);
                1434 (11661)                       prcall(idpnt); scan;
                1435 (11680)                       restype:=low(t0[idpnt]);
                1436 (11688)                     end;
                1437 (11693)               'c':  if low(t0[idpnt])<>'r' then
                1438 (11714)                       begin code3(34,t2[idpnt]);
                1439 (11734)                       scan end

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 25

                1440 (11738)                     else begin
                1441 (11741)                       code2($3a,2);
                1442 (11751)                       code2(t2[idpnt] and 255,
                1443 (11761)                         t2[idpnt] shr 8);
                1444 (11779)                       code2(t3[idpnt] and 255,
                1445 (11789)                         t3[idpnt] shr 8);
                1446 (11807)                       arsize3:=1; scan
                1447 (11813)                     end;
                1448 (11817)               'a','e','x':
                1449 (11838)                     begin scan;
                1450 (11845)                       if token=' [' then begin
                1451 (11853)                         index(true);
                1452 (11864)                         code4($28,
                1453 (11866)                             level-t1[idpnt],
                1454 (11874)                             2*t2[idpnt]);
                1455 (11896)                         if restype='r' then
                1456 (11902)                         begin
                1457 (11903)                           code2($3b,1);
                1458 (11916)                           arsize3:=1
                1459 (11916)                         end
                1460 (11918)                       end else begin
                1461 (11925)                         code4($27,
                1462 (11927)                             level-t1[idpnt],
                1463 (11935)                             2*t2[idpnt]);
                1464 (11957)                         code2($3b,t3[idpnt]);
                1465 (11973)                         arsize3:=t3[idpnt];
                1466 (11977)                       end
                1467 (11985)                     end;
                1468 (11985)               's','u':
                1469 (11999)                     begin
                1470 (12002)                       code3(35,2*t3[idpnt]+2);
                1471 (12024)                       idpnt:=prec(idpnt);
                1472 (12028)                       prcall(idpnt); scan;
                1473 (12047)                       restype:=low(t0[idpnt]);
                1474 (12055)                       idpnt:=succ(idpnt);
                1475 (12064)                       arsize3:=t3[idpnt]
                1476 (12069)                     end
                1477 (12073)               else error(1)
                1478 (12086)             end {case}
                1479 (12094)           end; {identifier}
                1480 (12097)     'nu': begin code3(34,value[0]); scan;
                1481 (12123)             restype:='i'
                1482 (12123)           end;
                1483 (12129)     'ru': begin code2($3a,2);
                1484 (12150)             code2(value[0] and 255,
                1485 (12158)               value[0] shr 8);
                1486 (12174)             code2(value[1] and 255,
                1487 (12182)               value[1] shr 8);
                1488 (12198)             scan; restype:='r';
                1489 (12204)             arsize3:=1
                1490 (12208)           end;
                1491 (12214)     'st': begin
                1492 (12225)           if (reqtype='n') and (value[0]<3)
                1493 (12240)             then begin
                1494 (12242)               if value[0]<2 then begin
                1495 (12254)                 code3(34,ord(ident[1]));
                1496 (12271)                 restype:='c'
                1497 (12271)               end else begin
                1498 (12280)                 code3(34,packed(ident[1],
                1499 (12284)                   ident[2]));

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 26

                1500 (12301)                 restype:='p'
                1501 (12301)               end
                1502 (12303)             end else begin
                1503 (12310)               case reqtype of
                1504 (12310)                 'c','u','n','q':
                1505 (12339)                     begin
                1506 (12342)                       if (vartype='q') or
                1507 (12349)                          (reqtype='q') then begin
                1508 (12357)                         arsize3:=0;
                1509 (12362)                         restype:='q';
                1510 (12368)                         code2($56,value[0]);
                1511 (12386)                       end else begin
                1512 (12389)                         arsize3:=prec(value[0]);
                1513 (12395)                         restype:='c';
                1514 (12402)                         code2($39,value[0]);
                1515 (12420)                       end;
                1516 (12420)                       for i:=1 to value[0] do
                1517 (12428)                         code1(ord(ident[i]));
                1518 (12455)                       if (vartype='q') or
                1519 (12476)                          (reqtype='q') then code1(0);
                1520 (12495)                     end;
                1521 (12495)                 'p': begin
                1522 (12505)                       if odd(value[0]) then
                1523 (12511)                         error(15);
                1524 (12523)                       value[0]:=value[0] shr 1;
                1525 (12533)                       arsize3:=prec(value[0]);
                1526 (12544)                       restype:='p';
                1527 (12551)                       code2($3a,value[0]);
                1528 (12569)                       for i:=1 to value[0] do
                1529 (12577)                         begin
                1530 (12590)                         code1(ident[2*i]);
                1531 (12607)                         code1(ident[2*i-1]);
                1532 (12627)                       end
                1533 (12627)                     end
                1534 (12627)                 else merror(14,'05')
                1535 (12649)               end {case}
                1536 (12657)             end;
                1537 (12657)             scan
                1538 (12657)           end;
                1539 (12661)     'od': begin
                1540 (12672)             argument('i'); code1(7);
                1541 (12688)             restype:='b'
                1542 (12688)           end;
                1543 (12694)     'me': begin
                1544 (12705)             parse(' ['); index(false);
                1545 (12722)             code1(23); restype:='i';
                1546 (12732)           end;
                1547 (12736)     ' (': begin
                1548 (12747)             scan; mainexp(reqtype,arsize3);
                1549 (12769)             testto(' )'); scan
                1550 (12778)           end; {no type change}
                1551 (12785)     'no': begin
                1552 (12793)             scan; factor(arsize3);
                1553 (12809)             if (arsize3<>0) then error(15);
                1554 (12827)             code1($11);
                1555 (12835)             if restype<>'i' then
                1556 (12841)               testtype('b')
                1557 (12847)           end;
                1558 (12853)     'cr': begin
                1559 (12864)             argument('i'); code1(52);

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 27

                1560 (12880)             restype:='c'
                1561 (12880)           end;
                1562 (12886)     'hi': begin
                1563 (12897)             argument('p'); code1(51);
                1564 (12913)             restype:='c'
                1565 (12913)           end;
                1566 (12919)     'lo': begin
                1567 (12930)             argument('p'); code1(52);
                1568 (12946)             restype:='c'
                1569 (12946)           end;
                1570 (12952)     'su': begin
                1571 (12963)             argument('u'); code1($14);
                1572 (12979)           end;
                1573 (12979)     'pc': begin
                1574 (12990)             argument('u'); code1($15)
                1575 (13000)           end;
                1576 (13006)     'cp': begin
                1577 (13017)             argument('i'); restype:='q';
                1578 (13027)           end;
                1579 (13031)     'ni': begin
                1580 (13042)             code3(34,0); scan; restype:='q';
                1581 (13058)           end;
                1582 (13062)     'ox': begin
                1583 (13073)             argument('u');
                1584 (13081)             restype:='i'
                1585 (13081)           end;
                1586 (13087)     ' @': begin
                1587 (13098)             scan; factor(arsize3);
                1588 (13114)             if arsize3<>0 then error(15);
                1589 (13132)             testtype('i');
                1590 (13140)             restype:='f'
                1591 (13140)           end;
                1592 (13146)     'tr': begin
                1593 (13157)             code3(34,1); scan;
                1594 (13171)             restype:='b';
                1595 (13173)           end;
                1596 (13177)     'fa': begin
                1597 (13188)             code3(34,0); scan;
                1598 (13202)             restype:='b'
                1599 (13202)           end;
                1600 (13208)     'tc': begin
                1601 (13219)             parse(' ('); scan;
                1602 (13232)             arrayexp(1,'r');
                1603 (13242)             testto(' )'); scan;
                1604 (13255)             code1($47); restype:='i';
                1605 (13265)           end;
                1606 (13269)     'cv': begin
                1607 (13280)             argument('i');
                1608 (13288)             code1($46); arsize3:=1;
                1609 (13298)             restype:='r'
                1610 (13302)           end;
                1611 (13308)     'pa': begin
                1612 (13319)             parse(' ('); scan; express;
                1613 (13336)             testtype('c');
                1614 (13344)             if token=' ,' then begin
                1615 (13352)               scan; express; testtype('c');
                1616 (13371)               code1(53)
                1617 (13373)             end;
                1618 (13379)             testto(' )'); scan; restype:='p'
                1619 (13392)           end

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 28

                1620 (13394)     else error(1)
                1621 (13403)   end {case of token}
                1622 (13411) end {factor};
                1623 (13411) 
                1624 (13412) begin  { *** body of term *** }
                1625 (13412)   factor(arsize2);
                1626 (13426)   repeat
                1627 (13426)     case token of
                1628 (13426)       ' *': opcode:=5;
                1629 (13440)       'di': opcode:=6;
                1630 (13457)       'an': opcode:=15;
                1631 (13474)       'sh': opcode:=18;
                1632 (13491)       'sr': opcode:=19;
                1633 (13508)       ' /': opcode:=$45
                1634 (13523)       else opcode:=0
                1635 (13532)     end {case};
                1636 (13540)     if opcode>0 then begin
                1637 (13547)       if (restype='r') and
                1638 (13557)             (arsize2=1) then begin
                1639 (13565)         scan; factor(arsize2);
                1640 (13584)         if (restype<>'r') or (arsize2<>1) then
                1641 (13598)           merror(14,'06');
                1642 (13613)         case opcode of
                1643 (13613)           5: code1($44);
                1644 (13632)           $45: code1($45)
                1645 (13644)           else error(17)
                1646 (13655)         end{case}
                1647 (13663)       end else begin
                1648 (13666)         if opcode=$45 then error(9);
                1649 (13684)         if arsize2<>0 then error(15);
                1650 (13702)         if (restype='b') and (opcode=15)
                1651 (13715)           then begin
                1652 (13717)           scan; factor(arsize2);
                1653 (13736)           if arsize2<>0 then error(15);
                1654 (13754)           testtype('b');
                1655 (13762)           code1(opcode)
                1656 (13762)         end else begin
                1657 (13775)           testtype('i'); scan;
                1658 (13787)           factor(arsize2);
                1659 (13799)           if arsize2<>0 then error(15);
                1660 (13817)           testtype('i'); code1(opcode);
                1661 (13835)         end
                1662 (13835)       end
                1663 (13835)     end;
                1664 (13835)   until opcode=0;
                1665 (13841) end {term};
                1666 (13845) 
                1667 (13846) 
                1668 (13846) begin { *** body of simexp *** }
                1669 (13846)   sign:=' ';
                1670 (13850)   if token=' +' then begin
                1671 (13862)     sign:='+'; scan
                1672 (13871)   end else if token=' -' then begin
                1673 (13886)     sign:='-'; scan
                1674 (13895)   end;
                1675 (13899)   term(arsize1);
                1676 (13911)   if sign<>' ' then begin
                1677 (13918)     if (restype='r')and (arsize1=1) then begin
                1678 (13936)       if sign='-' then code1($4e)
                1679 (13951)     end else begin

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 29

                1680 (13960)       testtype('i');
                1681 (13968)       if arsize1<>0 then error(15);
                1682 (13986)       if sign='-' then code1(2);
                1683 (14004)     end
                1684 (14004)   end;
                1685 (14004)   repeat
                1686 (14004)     case token of
                1687 (14004)       ' &': opcode:=1;
                1688 (14018)       ' +': opcode:=3;
                1689 (14035)       ' -': opcode:=4;
                1690 (14052)       'or': opcode:=14;
                1691 (14069)       'xo': opcode:=16
                1692 (14084)       else opcode:=0
                1693 (14093)     end {case};
                1694 (14101)     if opcode>1 then begin {if 1}
                1695 (14111)       if (restype='r') and (arsize1=1)
                1696 (14124)         then begin {real}
                1697 (14129)         scan; term(arsize1);
                1698 (14145)         if (restype<>'r') or (arsize1<>1) then
                1699 (14159)           error(17);
                1700 (14171)         case opcode of
                1701 (14171)           3:  code1($42);
                1702 (14190)           4:  code1($43)
                1703 (14202)           else error(17)
                1704 (14213)         end {case}
                1705 (14221)       end {real}
                1706 (14221)       else begin {not real}
                1707 (14224)         if (arsize1<>0) then error(15);
                1708 (14242)         if (restype='b') and (opcode>=14)
                1709 (14255)           then begin {boolean}
                1710 (14260)           scan; term(arsize1);
                1711 (14276)           if arsize1<>0 then error(15);
                1712 (14294)           testtype('b'); code1(opcode)
                1713 (14302)         end {boolean}
                1714 (14312)         else begin {not boolean}
                1715 (14315)           testtype('i'); scan;
                1716 (14327)           term(arsize1);
                1717 (14339)           if arsize1<>0 then error(15);
                1718 (14357)           testtype('i'); code1(opcode);
                1719 (14375)         end {not boolean}
                1720 (14375)       end {not real}
                1721 (14375)     end {if 1}
                1722 (14375)     else if opcode=1 then begin {else 1}
                1723 (14388)       sign:=restype;
                1724 (14388)       scan; term(opcode);
                1725 (14412)       arsize1:=arsize1+opcode+1;
                1726 (14423)       testtype(sign)
                1727 (14428)     end {else 1}
                1728 (14438)   until opcode=0
                1729 (14442) end {simexp};
                1730 (14448) 
                1731 (14449) 
                1732 (14449) begin { *** body of mainexp *** }
                1733 (14449)   roff:=0;
                1734 (14453)   simexp(arsize);
                1735 (14469)   if (restype='r') and (arsize=1) then
                1736 (14483)     roff:=$40;
                1737 (14489)   case token of
                1738 (14493)     ' =': opcode:=8;
                1739 (14507)     ' <': opcode:=10;

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 30

                1740 (14524)     ' >': opcode:=12;
                1741 (14541)     '<>': opcode:=9;
                1742 (14558)     '<=': opcode:=13;
                1743 (14575)     '>=': opcode:=11
                1744 (14590)     else opcode:=0
                1745 (14599)   end {case};
                1746 (14607)   if opcode>0 then begin
                1747 (14614)     if (arsize<>0) and (roff=0) then
                1748 (14631)       error(15);
                1749 (14643)     scan; savtype:=restype; simexp(arsize);
                1750 (14667)     if ((roff=0) and (arsize<>0))
                1751 (14681)       or((roff<>0) and (arsize>1)) then
                1752 (14697)       error(15);
                1753 (14709)     testtype(savtype); code1(opcode+roff);
                1754 (14734)     arsize:=0; restype:='b'
                1755 (14740)   end
                1756 (14742) end {mainexp};
                1757 (14746) 
                1758 (14747) 
                1759 (14747) {#########################################}
                1760 (14747) { * assign *             ( of statement ) }
                1761 (14747) {#########################################}
                1762 (14747) 
                1763 (14747) proc assign;
                1764 (14747) 
                1765 (14747) var savetype: char;
                1766 (14750) 
                1767 (14750)   proc assign1;
                1768 (14750)   begin
                1769 (14750)     testto(':='); scan; express;
                1770 (14772)     if (vartype='q') and (restype='s') then begin
                1771 (14787)       code1($58); restype:='q';
                1772 (14800)     end;
                1773 (14804)     gpval(idpnt,true,vartyp2);
                1774 (14820)   end {assign1};
                1775 (14820) 
                1776 (14821) begin {assign}
                1777 (14821)   idpnt:=findid;
                1778 (14829)   if idpnt=0 then error(5);
                1779 (14851)   if t0[idpnt]='pr' then begin
                1780 (14863)     prcall(idpnt);scan end
                1781 (14880)   else begin
                1782 (14883)     getvar; savetype:=vartype;
                1783 (14887)     if relad<2 then begin
                1784 (14902)       assign1; testtype(vartype)
                1785 (14909)     end else begin
                1786 (14922)       if vartyp2='i' then error(16); {8-bit mem}
                1787 (14940)       testto(':='); scan;
                1788 (14953)       if relad=3 then begin
                1789 (14960)         arrayexp(1,vartype); relad:=1;
                1790 (14977)         code1($53);
                1791 (14989)         if vartyp2='n' then begin
                1792 (14996)           code1($3f);
                1793 (15007)           code3($22,1);code1($12);
                1794 (15025)           code3($22,t2[idpnt]+2);
                1795 (15044)           code1($3);code1($3e)
                1796 (15054)         end else
                1797 (15060)           code4($2a,level-t1[idpnt],
                1798 (15073)             2*t2[idpnt]+2);
                1799 (15098)         code2($3c,1)

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 31

                1800 (15102)       end else begin
                1801 (15111)         arrayexp(t3[idpnt],vartype);
                1802 (15129)         if vartyp2='n' then begin
                1803 (15136)           code3($22,t2[idpnt]+2*t3[idpnt]);
                1804 (15167)           code1($3e);
                1805 (15175)         end else
                1806 (15175)           code4($29,level-t1[idpnt],
                1807 (15188)             2*(t2[idpnt]+t3[idpnt]));
                1808 (15219)         code2($3c,t3[idpnt]);
                1809 (15235)       end
                1810 (15235)     end
                1811 (15235)   end
                1812 (15235) end {assign};
                1813 (15235) 
                1814 (15236) { * case1 *             ( of statement ) }
                1815 (15236) 
                1816 (15236) proc case1;
                1817 (15236) 
                1818 (15236) var i1,i2,casave: integer;
                1819 (15239)     savetype: char;
                1820 (15239) 
                1821 (15239)   proc case2;
                1822 (15239) 
                1823 (15239)     proc case3;
                1824 (15242)     begin
                1825 (15242)       scan; code1(22); code3(34,getcon);
                1826 (15273)       testtype(savetype);
                1827 (15283)       code1(8); scan
                1828 (15291)     end;
                1829 (15295) 
                1830 (15296)   begin {case2}
                1831 (15296)     i1:=0; case3;
                1832 (15308)     while token=' ,' do begin
                1833 (15319)       push(pc); code3(38,0); i1:=succ(i1);
                1834 (15343)       case3
                1835 (15348)     end;
                1836 (15352)     testto(' :'); savpc:=pc; code3(37,0);
                1837 (15382)     for k2:=1 to i1 do fixup(pop);
                1838 (15413)     push(savpc);
                1839 (15437)     scan; statmnt
                1840 (15441)   end {case2};
                1841 (15445) 
                1842 (15446) begin {case1}
                1843 (15446)   scan; express; testto('of');
                1844 (15465)   savetype:=restype; i2:=1; case2;
                1845 (15483)   while token=' ;' do begin
                1846 (15494)     casave:=pc; code3(36,0); fixup(pop);
                1847 (15524)     push(casave); i2:=succ(i2); case2
                1848 (15543)   end;
                1849 (15547)   if token='el' then begin
                1850 (15558)     casave:=pc; code3(36,0); fixup(pop);
                1851 (15591)     push(casave); scan; statmnt
                1852 (15605)   end;
                1853 (15609)   testto('en'); for k2:=1 to i2 do fixup(pop);
                1854 (15649)   code3(35,-2); scan
                1855 (15674) end {case1};
                1856 (15678) 
                1857 (15679) { * openrw *              ( of statement ) }
                1858 (15679) 
                1859 (15679) proc openrw(x: integer);

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 32

                1860 (15679) begin
                1861 (15679)   parse(' ('); parse('id');
                1862 (15702)   idpnt:=findid;
                1863 (15708)   if idpnt=0 then error(5);
                1864 (15730)   getvar; code1(x);
                1865 (15744)   testferror;
                1866 (15748)   if relad=2 then error(15);
                1867 (15766)   if vartype<>'f' then merror(14,'07');
                1868 (15787)   gpval(idpnt,true,vartyp2);
                1869 (15803)   testto(' )'); scan
                1870 (15812) end {openrw};
                1871 (15816) 
                1872 (15817) { * gpsec *               ( of statement )  }
                1873 (15817) 
                1874 (15817) proc gpsec(code);   { get/put sector }
                1875 (15817) 
                1876 (15817)   proc gpsec1;
                1877 (15820)   begin
                1878 (15820)     scan; express; testtype('i');
                1879 (15841)     testto(' ,');
                1880 (15850)   end;
                1881 (15850) 
                1882 (15851) begin {gpsec}
                1883 (15851)   parse(' ('); gpsec1; gpsec1; gpsec1;
                1884 (15874)   code1(code);
                1885 (15884)   parse('id'); idpnt:=findid;
                1886 (15899)   if idpnt=0 then error(5);
                1887 (15921)   getvar; code3(34,$db); { get file error code }
                1888 (15935)   if relad=2 then error(15);
                1889 (15953)   code1(23); if vartype<>'i' then merror(14,'08');
                1890 (15982)   gpval(idpnt,true,vartyp2);
                1891 (15998)   testto(' )');
                1892 (16007) end {gpsec};
                1893 (16007) 
                1894 (16008) 
                1895 (16008) begin {body of statement }
                1896 (16008)   if token=' ;' then scan;
                1897 (16025)   case token of
                1898 (16025)     'id': assign;
                1899 (16041) 
                1900 (16044)     'if': begin {if}
                1901 (16052)             scan; express; testtype('b');
                1902 (16068)             testto('th'); scan;  savpc:=pc;
                1903 (16081)             code3(37,0); statmnt;
                1904 (16103)             if token='el' then begin {else}
                1905 (16114)               k2:=pc; code3(36,0);
                1906 (16132)               fixup(savpc); scan; statmnt;
                1907 (16150)               fixup(k2)
                1908 (16150)             end else fixup(savpc)
                1909 (16163)           end; {if}
                1910 (16176) 
                1911 (16176)     'be':  begin {begin}
                1912 (16184)             repeat
                1913 (16184)               scan; statmnt
                1914 (16188)             until token<>(' ;');
                1915 (16199)             testto('en'); scan
                1916 (16212)           end; {begin}
                1917 (16219) 
                1918 (16219)     'rp': begin {repeat}
                1919 (16227)             savpc:=pc;

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 33

                1920 (16227)             repeat
                1921 (16235)               scan; statmnt
                1922 (16239)             until token='un';
                1923 (16250)             scan; express; testtype('b');
                1924 (16270)             code3(37,savpc)
                1925 (16272)           end {repeat};
                1926 (16282) 
                1927 (16285)     're': begin {read}
                1928 (16293)             parse(' ('); scan;
                1929 (16306)             if token=' @' then begin
                1930 (16314)               scan; express; testtype('f');
                1931 (16333)               device:=true;
                1932 (16335)               code1(44); testto(' ,')
                1933 (16350)             end
                1934 (16356)             else begin
                1935 (16359)               device:=false; code1(26)
                1936 (16367)             end;
                1937 (16373)             repeat
                1938 (16373)               begin {main loop of read}
                1939 (16373)                 if token=' ,' then scan;
                1940 (16388)                 testto('id'); idpnt:=findid;
                1941 (16403)                 if idpnt=0 then error(5);
                1942 (16425)                 getvar;
                1943 (16429)                 if relad=2 then error(15);
                1944 (16447)                 case vartype of
                1945 (16447)                   'i':  code1(28);
                1946 (16466)                   'c':  code1(27);
                1947 (16484)                   'p':  begin
                1948 (16494)                         code1(27); code1(27);
                1949 (16510)                         code1(53)
                1950 (16512)                         end
                1951 (16518)                   else error(114)
                1952 (16523)                 end {case};
                1953 (16531)                 gpval(idpnt,true,vartyp2)
                1954 (16537)               end {mainloop of read}
                1955 (16547)             until token<>' ,';
                1956 (16554)             testto(' )'); scan;
                1957 (16571)             if device then code1(45);
                1958 (16586)           end {read};
                1959 (16586) 
                1960 (16589)     'wr','wl':
                1961 (16602)           begin {write,writeln}
                1962 (16605)             if token='wl' then wln:=true
                1963 (16616)             else wln:=false;
                1964 (16627)             scan;
                1965 (16635)             if token=' (' then begin
                1966 (16643)               scan;
                1967 (16650)               if token=' @' then begin
                1968 (16658)                 scan; express; testtype('f');
                1969 (16677)                 device:=true; code1(44);
                1970 (16691)                 testto(' ,');
                1971 (16700)               end else device:=false;
                1972 (16705)               repeat
                1973 (16709)                 if token=' ,' then scan;
                1974 (16724)                 if (token=' )') and device
                1975 (16732)                        and wln then
                1976 (16737)                    {empty writeln except device}
                1977 (16742)                    k2:=k2 {do nothing}
                1978 (16745)                 else if token='st' then begin
                1979 (16764)                   {string}

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 34

                1980 (16767)                   code1(50);
                1981 (16775)                   for k2:=1 to value[0]-1 do
                1982 (16789)                     code1(ord(ident[k2])
                1983 (16803)                         and 127);
                1984 (16816)                   code1(ord(ident[value[0]])
                1985 (16836)                       or 128);
                1986 (16849)                   scan
                1987 (16849)                 end else begin
                1988 (16856)                   {expression}
                1989 (16856)                   express;
                1990 (16860)                   case restype of
                1991 (16860)                     'i':  code1(30);
                1992 (16879)                     'c':  code1(29);
                1993 (16897)                     'q':  code1($57);
                1994 (16915)                     's':  begin
                1995 (16925)                             code1($58);
                1996 (16933)                             code1($57);
                1997 (16941)                           end;
                1998 (16941)                     'p':  begin
                1999 (16951)                             code1(22);
                2000 (16959)                             code1(51);
                2001 (16967)                             code1(29);
                2002 (16975)                             code1(52);
                2003 (16983)                             code1(29);
                2004 (16991)                           end
                2005 (16991)                     else merror(14,'09')
                2006 (16999)                   end {case}
                2007 (17007)                 end {expression}
                2008 (17007)               until token<>' ,';
                2009 (17014)               if wln then begin {writeln(..)}
                2010 (17025)                 code2(32,13); code1(29);
                2011 (17043)                 code2(32,10); code1(29);
                2012 (17061)               end;
                2013 (17061)               if device then code1(45);
                2014 (17076)               testto(' )'); scan
                2015 (17085)             end {if}
                2016 (17089)             else if wln then begin {writeln}
                2017 (17099)               code2(32,13); code1(29);
                2018 (17117)               code2(32,10); code1(29);
                2019 (17135)             end
                2020 (17135)           end {write, writeln};
                2021 (17135) 
                2022 (17138)     'cs': case1; {case statement}
                2023 (17153) 
                2024 (17153)     'wh': begin {while}
                2025 (17161)             scan; savpc:=pc; express;
                2026 (17177)             testtype('b');
                2027 (17185)             k2:=pc; code3(37,0);
                2028 (17203)             testto('do'); scan; statmnt;
                2029 (17220)             code3(36,savpc); fixup(k2)
                2030 (17232)           end {while};
                2031 (17242) 
                2032 (17245)     'fo': begin {for}
                2033 (17253)             parse('id'); assign;
                2034 (17266)             if t0[idpnt]='pr' then error(1);
                2035 (17289)             savtp1:=low(t0[idpnt]);
                2036 (17297)             case token of
                2037 (17302)               'to': k2:=1;
                2038 (17316)               'dw': k2:=0
                2039 (17331)               else merror(2,'to')

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 35

                2040 (17345)             end {case of token};
                2041 (17353)             scan; express; testtype(savtp1);
                2042 (17371)             bottom1:=pc; code1(22);
                2043 (17387)             gpval(idpnt,false,vartyp2);
                2044 (17403)             code1(13-k2-k2);
                2045 (17421)             savpc:=pc; code3(37,0);
                2046 (17439)             testto('do'); scan; statmnt;
                2047 (17456)             gpval(idpnt,false,vartyp2);
                2048 (17472)             code1(21-k2);
                2049 (17485)             gpval(idpnt,true,vartyp2);
                2050 (17501)             code3(36,bottom1); fixup(savpc);
                2051 (17523)             code3(35,-2);
                2052 (17534)           end {for};
                2053 (17534) 
                2054 (17537)     'me': begin {mem}
                2055 (17545)             parse(' ['); scan; express;
                2056 (17562)             testtype('i');
                2057 (17570)             testto(' ]'); parse(':=');
                2058 (17588)             scan; express; code1(24);
                2059 (17604)             testtype('i');
                2060 (17612)           end {mem};
                2061 (17612) 
                2062 (17615)     'ca': begin {call}
                2063 (17623)             parse(' ('); scan; express;
                2064 (17640)             testtype('i');
                2065 (17648)             testto(' )'); code1(25); scan
                2066 (17665)           end {call};
                2067 (17669) 
                2068 (17672)     'op': openrw(47);
                2069 (17688) 
                2070 (17691)     'ow': openrw(48);
                2071 (17707) 
                2072 (17710)     'ob': openrw(80);
                2073 (17726) 
                2074 (17729)     'gb': begin
                2075 (17737)             parse(' ('); scan; express;
                2076 (17754)             testtype('f'); testto(' ,');
                2077 (17771)             scan; express; testtype('i');
                2078 (17787)             testto(' ,'); scan; testto('id');
                2079 (17809)             idpnt:=findid;
                2080 (17815)             if idpnt=0 then error(5);
                2081 (17837)             getvar;
                2082 (17841)             if relad<>0 then error(15);
                2083 (17859)             code1($51); testferror;
                2084 (17871)             gpval(idpnt,true,vartyp2);
                2085 (17887)             testto(' )'); scan
                2086 (17896)           end;
                2087 (17900) 
                2088 (17903)     'pb': begin
                2089 (17911)             parse(' ('); scan; express;
                2090 (17928)             testtype('f'); testto(' ,');
                2091 (17945)             scan; express; testtype('i');
                2092 (17961)             testto(' ,'); scan; express;
                2093 (17978)             code1($52);testferror;
                2094 (17990)             testto(' )');
                2095 (17999)             scan
                2096 (17999)           end;
                2097 (18003) 
                2098 (18006)     'ru': begin
                2099 (18014)             code1($41); scan;

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 36

                2100 (18026)           end;
                2101 (18026) 
                2102 (18029)     'fi': begin
                2103 (18037)             code1(46); scan
                2104 (18045)           end;
                2105 (18049) 
                2106 (18052)     'ge': gpsec(55);
                2107 (18068) 
                2108 (18071)     'pu': gpsec(56);
                2109 (18087) 
                2110 (18090)     'cl': begin {close}
                2111 (18098)             parse(' (');
                2112 (18107)             repeat
                2113 (18107)               scan; express; code1(49);
                2114 (18123)               testtype('f');
                2115 (18131)               testferror
                2116 (18131)             until token<>' ,';
                2117 (18142)             testto(' )'); scan;
                2118 (18159)           end {close}
                2119 (18159) 
                2120 (18159)     else if (token<>'en') and (token<>' ;')
                2121 (18177)       and (token<>'un') then begin
                2122 (18188)       error(10); scan
                2123 (18199)     end
                2124 (18203)   end {case of statements}
                2125 (18205) end;
                2126 (18205) 
                2127 (18206) { * findforw *          ( of block ) }
                2128 (18206) 
                2129 (18206) func findforw;
                2130 (18206) 
                2131 (18206) var i,j,sav1: integer;
                2132 (18209) 
                2133 (18209)   func found(start: integer):boolean;
                2134 (18209)   var ii,i9: integer;
                2135 (18212)   begin {compare}
                2136 (18212)     ii:= 0;
                2137 (18216)     repeat
                2138 (18220)       ii:=succ(ii);
                2139 (18224)     until (ii >= 8) or
                2140 (18236)       (ident[ii] <> idtab[start+ii]);
                2141 (18259)     found:=(ii >= 8);
                2142 (18270)   end {compare};
                2143 (18274) 
                2144 (18275) 
                2145 (18275) begin {findforw}
                2146 (18275)   i:=succ(forwpn);
                2147 (18281)   repeat
                2148 (18286)     i:=prec(i)
                2149 (18286)   until (i=0) or found(8*fortab[i]);
                2150 (18321)   findforw:=i;
                2151 (18325)   if i>0 then
                2152 (18339)     if i=forwpn then forwpn:=forwpn-1
                2153 (18359)     else begin
                2154 (18369)       sav1:=fortab[i];
                2155 (18373)       for j:=1 to forwpn-1 do
                2156 (18393)       fortab[j]:=fortab[succ(j)];
                2157 (18412)       fortab[forwpn]:=sav1;
                2158 (18438)       findforw:=forwpn;
                2159 (18446)       forwpn:=forwpn-1

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 37

                2160 (18458)     end
                2161 (18460) end {findforw};
                2162 (18465) 
                2163 (18466) 
                2164 (18466) begin { *** body of block *** }
                2165 (18466)   dpnt:=3; t2[bottom]:=pc;
                2166 (18478)   code3(36,0);
                2167 (18496)   stackpn1:=stackpnt; forwpn:=0;
                2168 (18506) 
                2169 (18510)   if token='co' then begin    { * const * }
                2170 (18521)     scan;
                2171 (18525)     repeat
                2172 (18525)       deccon; testto(' ;'); scan
                2173 (18538)     until token <> 'id';
                2174 (18549)   end {const};
                2175 (18553) 
                2176 (18553)   if token='me' then memory;  { * mem * }
                2177 (18568) 
                2178 (18568)   if token='va' then variable;{ * var * }
                2179 (18583) 
                2180 (18583)   while (token='pr')or (token='fu') do begin
                2181 (18603)     parlevel:=0;
                2182 (18605)     case token of
                2183 (18609)     'pr': begin               { * proc * }
                2184 (18621)             parse('id'); npara:=0;
                2185 (18632)             putsym('p','r'); cproc:=spnt;
                2186 (18646)             level:=succ(level);
                2187 (18658)           end;
                2188 (18663)     'fu': begin               { * func * }
                2189 (18674)             parse('id'); npara:=1;
                2190 (18685)             putsym('f','i');
                2191 (18699)             cproc:=spnt; level:=succ(level);
                2192 (18711)             putsym('f','i');
                2193 (18726)             t2[spnt]:=parlevel;
                2194 (18730)             parlevel:=succ(parlevel);
                2195 (18742)           end
                2196 (18747)     end; {case of token}
                2197 (18749)     if forwpn=0 then find:=0
                2198 (18759)     else find:=findforw;
                2199 (18774)     if find<>0 then begin
                2200 (18785)       spnt:=spnt-npara-1;
                2201 (18799)       cproc:=fortab[find];
                2202 (18808)       fixup(t2[cproc]);
                2203 (18830)     end;
                2204 (18830)     scan; spnt1:=spnt;
                2205 (18834)     dpnt1:=dpnt;
                2206 (18842)     if token=' (' then parameter;
                2207 (18865)     if t0[cproc]='fi' then function;
                2208 (18884)     testto(' ;');
                2209 (18893)     for i:=1 to npara do
                2210 (18899)     t2[succ(spnt-i)]:=t2[succ(spnt-i)]
                2211 (18931)           -parlevel;
                2212 (18936)     scan;
                2213 (18963)     if token='fw' then begin
                2214 (18971)       if forwpn=8 then merror(13,'ov');
                2215 (18995)       forwpn:=succ(forwpn);
                2216 (18999)       fortab[forwpn]:=cproc;
                2217 (19008)       t2[cproc]:=pc;
                2218 (19020)       code3(36,0);
                2219 (19038)       scan

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 38

                2220 (19038)     end else block(cproc);
                2221 (19055)     level:=prec(level);
                2222 (19059)     dpnt:=dpnt1; spnt:=spnt1;
                2223 (19072)     case high(t0[spnt]) of
                2224 (19088)       'r':  t0[spnt]:=packed('t',low(t0[spnt]));
                2225 (19112)       's':  t0[spnt]:=packed('u',low(t0[spnt]))
                2226 (19140)     end {case};
                2227 (19148)     testto(' ;'); scan
                2228 (19157)   end {procedure of function};
                2229 (19161) 
                2230 (19164)   testto('be');     { * begin * }
                2231 (19173)   if forwpn<>0 then merror(13,'ur');
                2232 (19194)   scan; fixup(t2[bottom]);
                2233 (19212)   t2[bottom]:=pc;
                2234 (19216)   code3(35,2*dpnt);
                2235 (19239)   repeat
                2236 (19239)     statmnt
                2237 (19239)   until token='en';
                2238 (19250)   scan;
                2239 (19258)   if level>0 then code1(1) else code1(0);
                2240 (19287)   stackpnt:=stackpn1;
                2241 (19287) end {block};
                2242 (19295) 
                2243 (19296) { * savtable *    ( global) }
                2244 (19296) 
                2245 (19296) proc savtable; { save lib table in @ofno }
                2246 (19296) 
                2247 (19296) var i,j,num: integer;
                2248 (19299)     vtype1: char;
                2249 (19299) 
                2250 (19299) begin
                2251 (19299)   writeln(@ofno,spnt,',',pc+2);
                2252 (19328)   for i:=1 to spnt do begin {for every entry }
                2253 (19347)     for j:=1 to 8 do begin
                2254 (19364)       write(@ofno,idtab[8*i+j])
                2255 (19384)     end;
                2256 (19388)     writeln(@ofno,',',t0[i],',',t1[i],',',
                2257 (19435)       t2[i],',',t3[i]);
                2258 (19462)     vtype1:=high(t0[i]);
                2259 (19470)     if ((vtype1='p') or (vtype1='f') or
                2260 (19489)       (vtype1='g')) and (t3[i]<>0) then begin
                2261 (19510)       num:=stack[t3[i]];
                2262 (19521)       write(@ofno,num);
                2263 (19540)       for j:=1 to num do
                2264 (19546)         write(@ofno,',',stack[t3[i]+j]);
                2265 (19585)       write(@ofno,cr,lf);
                2266 (19611)     end {then};
                2267 (19611)   end {for}
                2268 (19611) end {savtable};
                2269 (19625) 
                2270 (19626) { * main program * }
                2271 (19626) 
                2272 (19626) begin {main}
                2273 (19626)   init;scan;
                2274 (19637)   case token of
                2275 (19637)     'pg': begin
                2276 (19649)             libflg:=false;
                2277 (19651)             asetfile(pname,scyclus,sdrive,'Q');
                2278 (19677)           end;
                2279 (19677)     'li': begin

----------------------------------------------------------------------

R65 Pascal program COMPILE1        10/11/23     page 39

                2280 (19688)             libflg:=true;
                2281 (19690)             asetfile(pname,scyclus,sdrive,'T');
                2282 (19716)           end
                2283 (19716)     else
                2284 (19716)       merror(2,'pg')
                2285 (19724)   end {case}
                2286 (19732)   parse('id');
                2287 (19741)   i:=0;
                2288 (19743)   repeat
                2289 (19747)     i:=succ(i);
                2290 (19751)   until (i>7) or (pname[i] = ':') or
                2291 (19774)       (pname[i]<>uppercase(ident[i+1]));
                2292 (19803)   if i<8 then
                2293 (19813)     merror(2,packed(pname[0],pname[1]));
                2294 (19838)     { name differs from filename }
                2295 (19838)   parse(' ;');
                2296 (19847)   if ofno<>nooutput then openw(ofno);
                2297 (19863)   scan;
                2298 (19867)   if (token='us') and (libflg=false) then begin
                2299 (19883)     repeat
                2300 (19886)       getlib; scan
                2301 (19890)     until token<>' ,';
                2302 (19901)     testto(' ;'); scan
                2303 (19914)   end;
                2304 (19918)   block(0); testto(' .');
                2305 (19935)   if ofno<>nooutput then begin
                2306 (19942)     write(@ofno,'E');
                2307 (19953)     savebyte(pc and 255);
                2308 (19966)     savebyte(pc shr 8);
                2309 (19979)     close(ofno);
                2310 (19985)     if libflg then begin
                2311 (19989)       asetfile(pname,scyclus,sdrive,'L');
                2312 (20014)       openw(ofno);
                2313 (20020)       savtable;
                2314 (20024)       close(ofno)
                2315 (20024)     end
                2316 (20030)   end else
                2317 (20030)     runerr:=$87; {no loader file}
                2318 (20039)   writeln;
                2319 (20039)   writeln;
                2320 (20045)   writeln('End compile');
                2321 (20069)   writeln;
                2322 (20069)   writeln('Code lenght:          ',pc);
                2323 (20109)   writeln('Compiler stack size:  ',stackmax);
                2324 (20143)   writeln('Ident stack size:     ',spntmax);
                2325 (20177)   write('Pascal errors:        ');
                2326 (20200)   if numerr>0 then write(invvid);
                2327 (20213)   writeln(numerr,norvid);
                2328 (20227)   if prt then begin
                2329 (20231)     write(prtoff);
                2330 (20237)     setemucom(9);
                2331 (20245)   end;
                2332 (20245)   close(fno);
                2333 (20251)   { check whether second pass is not required }
                2334 (20251)   if (runerr=0) and libflg then runerr:=-1;
                2335 (20267) end {main}.
                2336 (20272) 

End compile

Code lenght:          20271
Compiler stack size:  134
Ident stack size:     207
Pascal errors:        0

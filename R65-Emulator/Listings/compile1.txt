
R65 COMPILE 4.2: program COMPILE1         16/11/23 page 1


   1 (    4) {   ********************************
   2 (    4)     *                              *
   3 (    4)     *  R65 "Tiny" Pascal Compiler  *
   4 (    4)     *            Pass 1            *
   5 (    4)     *                              *
   6 (    4)     ********************************
   7 (    4) 
   8 (    4) First version 1978 by rricharz
   9 (    4) Original version 3.7 (20K)  01/08/82 rricharz
  10 (    4) 
  11 (    4) Recovered 2018 by rricharz (r77@bluewin.ch)
  12 (    4) Improved 2018-2023 by rricharz
  13 (    4) Version 4 with cpnt strings and exit statement
  14 (    4) 
  15 (    4) Original derived from the publication by
  16 (    4) Kin-Man Chung and Herbert Yen in
  17 (    4) Byte, Volume 3, Number 9 and Number 10, 1978
  18 (    4) 
  19 (    4) Adapted for the R65 computer system and
  20 (    4) substantially enhanced by rricharz 1978-1982
  21 (    4) 
  22 (    4) This is a Pascal derivative optimized for 8-bit
  23 (    4) microprocessors (integer type is 16 bit) with
  24 (    4) additional features (mem) to interact directly
  25 (    4) with the microprocessor hardware. Only one
  26 (    4) dimensional arrays and no records or user
  27 (    4) defined types. Floating point numbers (real)
  28 (    4) and file io to floppy disks are supported.
  29 (    4) 
  30 (    4) Precompiled libraries are merged in the loader.
  31 (    4) The table of reserved words and the library
  32 (    4) tables are loaded from the same drive as
  33 (    4) the compiler.
  34 (    4) 
  35 (    4) The output of the program is a loader file for
  36 (    4) the Pascal loader (compile2).
  37 (    4) 
  38 (    4) usage:
  39 (    4)  compile1 name[.cy[,drv]] [xxx]
  40 (    4)   where x:       l,p: no hard copy print
  41 (    4)                  i,r: index bound checking
  42 (    4)                  n: no loader file
  43 (    4)   [] means not required
  44 (    4) 
  45 (    4) The compiler uses 2 fixed memory areas to store
  46 (    4) the table of reserved words and the table of
  47 (    4) idents. The top of the Pascal stack (endstk) is
  48 (    4) adjusted accordingly. The reason for this hack
  49 (    4) is speed and convenience. A normal Pascal array
  50 (    4) of chars would store the chars as 16 bit
  51 (    4) numers and would therefore require twice the
  52 (    4) space. An array of packed chars would require
  53 (    4) more coding and slow the scanner module of the
  54 (    4) compiler down.                                }
  55 (    4) 
  56 (    4) program compile1;
  57 (    4) 
  58 (    4) uses syslib, arglib;
  59 ( 1093) 

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         16/11/23 page 2

  60 ( 1093) const version='4.2';
  61 ( 1100) 
  62 ( 1100)     table     =$97ff; {user ident table -1}
  63 ( 1100)     idtab     =$95ff; {resword table -1}
  64 ( 1100)     idlength  =64;    {max. length of ident}
  65 ( 1100)     stacksize =256;   {stack size}
  66 ( 1100)     pagelenght=60;    {no of lines per page}
  67 ( 1100)     nooutput  =@0;
  68 ( 1100)     maxfi     =3;     {max number of ins fls}
  69 ( 1100) 
  70 ( 1100)     nresw=63;   {number of res. words, max 64}
  71 ( 1100)     symbsize=256;     {id table entries}
  72 ( 1100)     reswtabpos=$c600; { up to $c7ff }
  73 ( 1100)     idtabpos=$be00;   { up to $c5ff }
  74 ( 1100) 
  75 ( 1100)     yesoutput=@255;
  76 ( 1100) 
  77 ( 1100) mem endstk  =$000e: integer;
  78 ( 1100)     reswtab =reswtabpos: array[$200] of char&;
  79 ( 1100)     idtab   =idtabpos: array[$800] of char&;
  80 ( 1100) 
  81 ( 1100) var tpos,pc,level,line,offset,dpnt,spnt,fipnt,
  82 ( 1100)     npara,i,stackpnt,stackmax,spntmax,numerr
  83 ( 1100)                               :integer;
  84 ( 1100) 
  85 ( 1100)     scyclus,sdrive,cdrive: integer;
  86 ( 1100) 
  87 ( 1100)     pname: array[15] of char;
  88 ( 1100) 
  89 ( 1100)     value: array[1] of integer;
  90 ( 1100) 
  91 ( 1100)     ch,restype,vartype:char;
  92 ( 1100) 
  93 ( 1100)     token: packed char;
  94 ( 1100) 
  95 ( 1100)     prt,libflg,icheck,ateof,lineflg: boolean;
  96 ( 1100) 
  97 ( 1100)     fno,ofno: file;
  98 ( 1100) 
  99 ( 1100)     filstk: array[maxfi] of file;
 100 ( 1100) 
 101 ( 1100)     ident: array[idlength] of char;
 102 ( 1100)     { Only the first 8 characters are
 103 ( 1100)       used to find and differentiate ids }
 104 ( 1100) 
 105 ( 1100)     t0: array[symbsize] of packed char;
 106 ( 1100)            {type of symbol}
 107 ( 1100) 
 108 ( 1100)         {High letter:
 109 ( 1100)          a:array, c:constant, d;const parameter
 110 ( 1100)          e:constant array parameter, f:function
 111 ( 1100)          g:array function, h;8-bit memory var
 112 ( 1100)          i:8-bit array memory variable
 113 ( 1100)          m:16-bit memory variable
 114 ( 1100)          n:16-bit array memory variable
 115 ( 1100)          p:procedure
 116 ( 1100)          q:indexed cpnt
 117 ( 1100)          r,t:function result
 118 ( 1100)          s,u:array function result
 119 ( 1100)          v:variable, w:variable parameter

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         16/11/23 page 3

 120 ( 1100)          x:variable array parameter
 121 ( 1100) 
 122 ( 1100)          Low letter:
 123 ( 1100)          i:integer, c:char, p:packed char
 124 ( 1100)          q:cpoint (pointer to char)
 125 ( 1100)          r:real(array multiple of two)
 126 ( 1100)          s:const cpnt
 127 ( 1100)          f:file, b:boolean, u:undefined  }
 128 ( 1100) 
 129 ( 1100)     t1: array[symbsize] of integer;
 130 ( 1100)          {level}
 131 ( 1100)     t2: array[symbsize] of integer;
 132 ( 1100)          {val,dis,addr}
 133 ( 1100)     t3: array[symbsize] of integer;
 134 ( 1100)          {stack pointer,size of array}
 135 ( 1100) 
 136 ( 1100)     reswcod:array[nresw] of packed char;
 137 ( 1100) 
 138 ( 1100)     stack: array[stacksize] of integer;
 139 ( 1100) 
 140 ( 1100) 
 141 ( 1100) {       * savebyte *    (global)        }
 142 ( 1100) 
 143 ( 1100) proc savebyte(x: integer);
 144 ( 1100) 
 145 ( 1100) begin
 146 ( 1100)     if ofno<>nooutput then begin
 147 ( 1112)       write(@ofno,
 148 ( 1115)         chr(((x and 255) shr 4)+ord('0')));
 149 ( 1136)       write(@ofno,chr((x and 15)+ord('0')))
 150 ( 1151)     end
 151 ( 1154) end {savebyte};
 152 ( 1154) 
 153 ( 1155) {       * crlf *        (global)        }
 154 ( 1155) 
 155 ( 1155) proc newpage; forward;
 156 ( 1158) 
 157 ( 1158) proc crlf;
 158 ( 1158)   var i: integer;
 159 ( 1161) begin
 160 ( 1161)   writeln;
 161 ( 1163)   line:=succ(line);
 162 ( 1173)   if (line div pagelenght)*pagelength=line
 163 ( 1188)     then newpage;
 164 ( 1200) end {crlf};
 165 ( 1200) 
 166 ( 1201) {       error message   (global)        }
 167 ( 1201) 
 168 ( 1201) proc merror(x: integer; code: packed char);
 169 ( 1201) 
 170 ( 1201) var i: integer;
 171 ( 1204)     answer: char;
 172 ( 1204) 
 173 ( 1204) begin
 174 ( 1204)   crlf; numerr:=succ(numerr);
 175 ( 1214)   for i:=2 to tpos do write(' ');
 176 ( 1240)   write('^'); crlf;
 177 ( 1260)   write('*** (',numerr,',',pc,')   ');
 178 ( 1283)   case x of
 179 ( 1283)     01: write('Ident');

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         16/11/23 page 4

 180 ( 1300)     02: write('Ident ',code,' expected');
 181 ( 1336)     03: write('Var declaration');
 182 ( 1362)     04: write('Const expected');
 183 ( 1387)     05: write('Ident unknown');
 184 ( 1411)     06: write('Cannot be assigned');
 185 ( 1440)     07: write('Symbol table overflow');
 186 ( 1472)     08: write('Stack overflow');
 187 ( 1497)     09: write('Expression');
 188 ( 1518)     10: write('Statement');
 189 ( 1538)     11: write('Declaration');
 190 ( 1560)     12: write('Constant');
 191 ( 1579)     13: write('Forward reference: ',code);
 192 ( 1618)     14: write('Type mismatch: ',code);
 193 ( 1653)     15: write('Array size');
 194 ( 1674)     16: write('Array (8-bit)');
 195 ( 1698)     17: write('Real');
 196 ( 1713)     18: write('File table overflow');
 197 ( 1743)     19: write('Parameter')
 198 ( 1763)   end {case};
 199 ( 1765)   writeln;
 200 ( 1765)   write('Continue?');
 201 ( 1781)   read(@key,answer);
 202 ( 1789)   if answer<>'Y' then begin
 203 ( 1797)     crlf; write(prtoff); setemucom(9); close(fno);
 204 ( 1821)     if (ofno<>nooutput) and (ofno<>yesoutput)
 205 ( 1834)       then close(ofno);
 206 ( 1845)     writeln('Aborting compile1 on request');
 207 ( 1880)     abort
 208 ( 1880)   end
 209 ( 1884)   else crlf;
 210 ( 1891)   if (ofno<>nooutput) and (ofno<>yesoutput)
 211 ( 1904)     then close(ofno);
 212 ( 1915)   ofno:=nooutput;
 213 ( 1917) end {merror};
 214 ( 1921) 
 215 ( 1922) proc error(x: integer);
 216 ( 1922) 
 217 ( 1922) begin
 218 ( 1922)   merror(x,'##')
 219 ( 1934) end;
 220 ( 1940) 
 221 ( 1941) {       * push & pop *  (global) }
 222 ( 1941) 
 223 ( 1941) proc push(x: %integer);
 224 ( 1941) 
 225 ( 1941) begin
 226 ( 1941)   if stackpnt>=stacksize then error(8)
 227 ( 1959)   else stackpnt:=succ(stackpnt);
 228 ( 1972)   if stackpnt>stackmax then stackmax:=stackpnt;
 229 ( 1989)   stack[stackpnt]:=x;
 230 ( 2001) end {push};
 231 ( 2009) 
 232 ( 2010) func pop: integer;
 233 ( 2010) 
 234 ( 2010) begin
 235 ( 2010)   pop:=stack[stackpnt];
 236 ( 2019)   stackpnt:=prec(stackpnt)
 237 ( 2027) end {pop};
 238 ( 2036) 
 239 ( 2037) {       * newpage *     (global) }

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         16/11/23 page 5

 240 ( 2037) 
 241 ( 2037) proc newpage;
 242 ( 2037) 
 243 ( 2037) var i: integer;
 244 ( 2040) 
 245 ( 2040) begin
 246 ( 2040)   if (line<>0) and prt then
 247 ( 2049)     write(@printer,formfeed);
 248 ( 2064)   writeln; { Do not count this line}
 249 ( 2070)   if pname[0]<>'x' then begin
 250 ( 2079)     write('R65 COMPILE ');
 251 ( 2095)     write(version);
 252 ( 2100)     if libflg then write(': library ')
 253 ( 2118)     else write(': program ');
 254 ( 2132)     prtext16(output,pname);
 255 ( 2146)   end;
 256 ( 2146)   write(' ');
 257 ( 2148)   prtdate(output);
 258 ( 2156)   writeln(' page ',(line div pagelenght)+1);
 259 ( 2180)   writeln;
 260 ( 2180) end {newpage};
 261 ( 2186) 
 262 ( 2187) {        * code1 *      (global) }
 263 ( 2187) 
 264 ( 2187) proc code1(x: %integer);  {set one byte p-code}
 265 ( 2187) begin
 266 ( 2187)   savebyte(x); pc:=succ(pc)
 267 ( 2202) end;
 268 ( 2211) 
 269 ( 2212) {       * getchr *      (global) }
 270 ( 2212) 
 271 ( 2212) proc getchr;
 272 ( 2212) 
 273 ( 2212)   proc writenum(i: integer);
 274 ( 2215)   begin
 275 ( 2215)     if i<=999 then write(' ');
 276 ( 2233)     if i<=99 then write(' ');
 277 ( 2245)     if i<=9 then write(' ');
 278 ( 2257)     write(i);
 279 ( 2262)   end;
 280 ( 2262) 
 281 ( 2263) begin
 282 ( 2263)   if ateof then begin
 283 ( 2269)     writeln('Unexpected eof');
 284 ( 2293)     abort;
 285 ( 2297)   end else begin
 286 ( 2300)     read(@fno,ch);
 287 ( 2310)     if ch=cr then begin
 288 ( 2318)       crlf;
 289 ( 2325)       if lineflg and (pc>2) then begin
 290 ( 2337)         code1($59);
 291 ( 2348)         code1((line-1) and 255);
 292 ( 2364)         code1((line-1) shr 8);
 293 ( 2380)       end;
 294 ( 2380)       writenum(line); write(' (');
 295 ( 2393)       if (pc+2)<9999 then write(' ');
 296 ( 2409)       writenum(pc+2); write(') ');
 297 ( 2425)       ch:=' ';
 298 ( 2427)     end {if}
 299 ( 2431)     else if ch=eof then begin

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         16/11/23 page 6

 300 ( 2441)       ateof:=true;
 301 ( 2446)       { we need to suppy one more char }
 302 ( 2450)       { for end. at end of file to work properly }
 303 ( 2450)       ch:=' ';
 304 ( 2452)     end {else if}
 305 ( 2456)     else write(ch);
 306 ( 2464)   end;
 307 ( 2464) end {getchr};
 308 ( 2464) 
 309 ( 2465) {       * splitconv *   (global) }
 310 ( 2465) 
 311 ( 2465) proc splitconv(a: array[1] of %integer;
 312 ( 2465)   var b:array[1] of %integer);
 313 ( 2465) 
 314 ( 2465) begin
 315 ( 2465)   b:=a;
 316 ( 2470) end;
 317 ( 2482) 
 318 ( 2483) {       * init *        (global) }
 319 ( 2483) 
 320 ( 2483) proc init;
 321 ( 2483) 
 322 ( 2483) const char96=chr(20);
 323 ( 2486) 
 324 ( 2486) var i,j,dummy: integer;
 325 ( 2486)     dch: char;
 326 ( 2486)     pch: packed char;
 327 ( 2486)     request: array[15] of char;
 328 ( 2486)     default: boolean;
 329 ( 2486) 
 330 ( 2486) begin {init}
 331 ( 2486)   writeln('R65 PASCAL COMPILER version ', version,
 332 ( 2520)     ', Pass  1');
 333 ( 2538)   ateof:=false;
 334 ( 2540)   cdrive:=fildrv; { drive of compile program }
 335 ( 2551)   fipnt:=-1;
 336 ( 2553)   endstk:=idtabpos-144;
 337 ( 2563)   pc:=2; dpnt:=0; spnt:=0; offset:=2;
 338 ( 2587)   npara:=0; level:=0;
 339 ( 2599)   stackpnt:=0; libflg:=false;
 340 ( 2611)   stackmax:=0;spntmax:=0; numerr:=0;
 341 ( 2629)   t0[0]:='vi'; t1[0]:=0; t2[0]:=0; t3[0]:=0;
 342 ( 2662)   { prepare resword table }
 343 ( 2666)   writeln('Reading list of reserved words');
 344 ( 2703)   asetfile('RESWORDS:W      ',0,cdrive,'W');
 345 ( 2735)   openr(fno);
 346 ( 2741)   for i:=0 to nresw do begin
 347 ( 2758)     read(@fno,pch,dch);
 348 ( 2775)     reswcod[i]:=pch;
 349 ( 2780)     for j:=0 to 7 do reswtab[8*i+j]:=' ';
 350 ( 2819)     j:=0;
 351 ( 2842)     while (j<8) and (dch<>cr) do begin
 352 ( 2864)       read(@fno,dch);
 353 ( 2874)       if (dch<>cr) then
 354 ( 2882)         reswtab[8*i+j]:=dch;
 355 ( 2897)       j:=succ(j)
 356 ( 2908)     end;
 357 ( 2917)     while (dch<>cr) and (dch<>eof) do
 358 ( 2934)       read(@fno,dch)
 359 ( 2943)   end;

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         16/11/23 page 7

 360 ( 2952)   close(fno);
 361 ( 2972) 
 362 ( 2972)   writeln;
 363 ( 2972) 
 364 ( 2978)   sdrive:=1; {default drive for source }
 365 ( 2984)   scyclus:=0;
 366 ( 2986)   agetstring(pname,default,scyclus,sdrive);
 367 ( 3030) 
 368 ( 3030)   agetstring(request,default,dummy,dummy);
 369 ( 3070)   icheck:=false;
 370 ( 3072)   prt:=true; ofno:=yesoutput; lineflg:=false;
 371 ( 3090)   if not default then begin
 372 ( 3099)     if request[0]<>'/' then argerror(103);
 373 ( 3122)     for i:=1 to 8 do
 374 ( 3130)       case request[i] of
 375 ( 3143)         'P': prt:=false;
 376 ( 3156)         'L': lineflg:=true;
 377 ( 3172)         'I','R': icheck:=true;
 378 ( 3195)         'N': ofno:=nooutput;
 379 ( 3211)         ' ': begin end
 380 ( 3225)         else argerror(104)
 381 ( 3230)       end; {case}
 382 ( 3252)   end;
 383 ( 3252) 
 384 ( 3252)   asetfile(pname,scyclus,sdrive,'P');
 385 ( 3274)   openr(fno);
 386 ( 3280)   scyclus:=filcyc; { may have changed }
 387 ( 3288) 
 388 ( 3288)   {save cyclus and drive for compile2}
 389 ( 3288)   arglist[8]:=scyclus;
 390 ( 3290)   arglist[9]:=sdrive;
 391 ( 3304)   numarg:=1;
 392 ( 3318) 
 393 ( 3322)   if prt then begin
 394 ( 3326)     write(prton);
 395 ( 3332)     setemucom(8);
 396 ( 3340)   end
 397 ( 3340) 
 398 ( 3340)   line:=0; newpage; crlf; line:=1;
 399 ( 3356)   write('   1 (    4) '); getchr
 400 ( 3374) end {init};
 401 ( 3378) 
 402 ( 3379) 
 403 ( 3379) { ############################# }
 404 ( 3379) {       *scan*              (global)    }
 405 ( 3379) { ############################# }
 406 ( 3379) { scan input and make tokens }
 407 ( 3379) 
 408 ( 3379) proc scan;
 409 ( 3379) 
 410 ( 3379) var count,ll,hh,i,i1,co: integer;
 411 ( 3382)     name: array[7] of char;
 412 ( 3382) 
 413 ( 3382) {       * compresw*     (of scan)       }
 414 ( 3382) 
 415 ( 3382) func compresw(index: integer);
 416 ( 3382) 
 417 ( 3382) var addr,ci,i: integer;
 418 ( 3385) 
 419 ( 3385) begin

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         16/11/23 page 8

 420 ( 3385)   addr:=8*index; i:=0;
 421 ( 3400)   repeat
 422 ( 3404)     ci:=ord(ident[i+1])-ord(reswtab[addr+i]);
 423 ( 3429)     i:=succ(i)
 424 ( 3434)   until (ci<>0) or (i>=8);
 425 ( 3457)   compresw:=ci
 426 ( 3461) end {compresw};
 427 ( 3469) 
 428 ( 3470) {       * clear *       (of scan)              }
 429 ( 3470) 
 430 ( 3470) proc clear; {clears 8 chars of identifier}
 431 ( 3470) 
 432 ( 3470) var i: integer;
 433 ( 3473) 
 434 ( 3473) begin
 435 ( 3473)   for i:=1 to 8 do ident[i]:=' '
 436 ( 3496) end;
 437 ( 3516) 
 438 ( 3517) {       * pack *        (of scan)              }
 439 ( 3517) 
 440 ( 3517) proc pack;  {packs token and ch to token }
 441 ( 3517) 
 442 ( 3517) begin
 443 ( 3517)   token:=packed(low(token),ch); getchr
 444 ( 3536) end;
 445 ( 3540) 
 446 ( 3541) {       * setval *      (of scan)              }
 447 ( 3541) 
 448 ( 3541) proc setval;
 449 ( 3541) 
 450 ( 3541) var r: real;
 451 ( 3544)     n,n1: integer;
 452 ( 3544)     ems: boolean;
 453 ( 3544) 
 454 ( 3544)   func times10(r:real):real;
 455 ( 3544)   { slightly more accurate than 10.0*r }
 456 ( 3544)   var r2,r4:real;
 457 ( 3547)   begin
 458 ( 3547)     r2:=r+r;
 459 ( 3555)     r4:=r2+r2;
 460 ( 3574)     times10:=r2+r4+r4;
 461 ( 3600)   end;
 462 ( 3613) 
 463 ( 3614) begin
 464 ( 3614)   r:=0.0;
 465 ( 3622)   repeat
 466 ( 3628)     r:=times10(r)+conv(ord(ch)-ord('0'));
 467 ( 3649)     getchr;
 468 ( 3661)   until (ch<'0') or (ch>'9');
 469 ( 3675)   if ch<>'.' then begin {numeric integer}
 470 ( 3689)     token:='nu';
 471 ( 3692)     value[0]:=trunc(r+0.5);
 472 ( 3711)   end
 473 ( 3716)   else begin {numeric real}
 474 ( 3719)     n:=0; getchr;
 475 ( 3729)     while (ch<='9') and (ch>='0') do begin
 476 ( 3747)       r:=times10(r)+conv(ord(ch)-ord('0'));
 477 ( 3768)       n:=prec(n); getchr
 478 ( 3785)     end;
 479 ( 3789)     if ch='e' then begin

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         16/11/23 page 9

 480 ( 3799)       ems:=false; getchr;
 481 ( 3812)       case ch of
 482 ( 3812)         '+': getchr;
 483 ( 3827)         '-': begin ems:=true; getchr end
 484 ( 3847)       end;
 485 ( 3849)       if (ch>'9') or (ch<'0') then error(17)
 486 ( 3869)       else begin
 487 ( 3878)         n1:=ord(ch)-ord('0');
 488 ( 3884)         getchr;
 489 ( 3893)         if (ch<='9') and (ch>='0') then begin
 490 ( 3908)           n1:=10*n1+ord(ch)-ord('0');
 491 ( 3925)           getchr
 492 ( 3930)         end;
 493 ( 3934)         if ems then n:=n-n1 else n:=n+n1
 494 ( 3961)       end
 495 ( 3961)     end;
 496 ( 3970)     while n>0 do begin
 497 ( 3980)       n:=prec(n);
 498 ( 3984)       r:=times10(r);
 499 ( 4003)     end;
 500 ( 4009)     while n<0 do begin
 501 ( 4022)       n:=succ(n); r:=0.1*r;
 502 ( 4037)     end;
 503 ( 4050)     splitconv(r,value);
 504 ( 4077)     token:='ru'
 505 ( 4077)   end
 506 ( 4080) end {setval};
 507 ( 4084) 
 508 ( 4085) {       * setid *       (of scan)              }
 509 ( 4085) 
 510 ( 4085) proc setid; {sets one char to ident}
 511 ( 4085) 
 512 ( 4085) begin
 513 ( 4085)   if count<=idlength then begin
 514 ( 4097)     ident[count]:=ch; count:=succ(count)
 515 ( 4112)   end;
 516 ( 4121)   getchr;
 517 ( 4125) end {setid};
 518 ( 4125) 
 519 ( 4126) begin { ***** body of scan ***** }
 520 ( 4126)   count:=1; while ch=' ' do getchr;
 521 ( 4148)   tpos:=curpos;
 522 ( 4154) 
 523 ( 4158)   if (ch<'a') or (ch>'z') then begin {main if}
 524 ( 4176)     if (ch<'0') or (ch>'9') then begin {symb}
 525 ( 4194)       token:=packed(' ',ch); getchr;
 526 ( 4209)       case low(token) of
 527 ( 4213)         '<': if (ch='=') or (ch='>') then pack;
 528 ( 4243)         '>',':': if (ch='=') then pack;
 529 ( 4274)         '{': begin repeat
 530 ( 4284)                getchr until ch='}'; getchr; scan
 531 ( 4302)              end;
 532 ( 4306)         '$': begin {hex constant}
 533 ( 4316)                token:='nu'; value[0]:=0;
 534 ( 4327)                while ((ch>='0')and(ch<='9'))
 535 ( 4345)                      or((ch>='a')and(ch<='f'))
 536 ( 4360)                      do begin
 537 ( 4365)                  if ch>'9' then
 538 ( 4371)                    value[0]:=(value[0] shl 4)
 539 ( 4385)                      +ord(ch)-ord('a')+10

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         16/11/23 page 10

 540 ( 4394)                  else
 541 ( 4396)                    value[0]:=(value[0] shl 4)
 542 ( 4414)                      +ord(ch)-ord('0');
 543 ( 4422)                  getchr
 544 ( 4427)                end {do}
 545 ( 4431)              end; {hex constant}
 546 ( 4437)         chr(39): begin {string}
 547 ( 4444)                token:='st';
 548 ( 4447)                repeat setid until ch=chr(39);
 549 ( 4461)                value[0]:=prec(count); getchr
 550 ( 4477)               end
 551 ( 4481)       end {case of token}
 552 ( 4483)     end {special symbols}
 553 ( 4483)     else setval {numeric value}
 554 ( 4490)   end {main if}
 555 ( 4490)   else begin {ident}
 556 ( 4493)     clear;
 557 ( 4497)     repeat
 558 ( 4497)       setid
 559 ( 4497)       until (ch<'0') or (ch>'z') or
 560 ( 4515)         ((ch>'9') and (ch<'A')) or
 561 ( 4531)         ((ch>'Z') and (ch<'a'));
 562 ( 4547)     ll:=0; hh:=nresw; {look up in resword table}
 563 ( 4563)     repeat
 564 ( 4563)       i:=(ll+hh) shr 1; co:=compresw(i);
 565 ( 4591)       if (co<0) then hh:=prec(i)
 566 ( 4605)       else ll:=succ(i);
 567 ( 4621)       until (co=0) or (ll>hh);
 568 ( 4642)     if (co=0) then
 569 ( 4653)       token:=reswcod[i] {reserved word found}
 570 ( 4660)     else token:='id' {ident}
 571 ( 4674)   end {odent}
 572 ( 4678) end {scan};
 573 ( 4678) 
 574 ( 4679) { * testto/parse * }
 575 ( 4679) 
 576 ( 4679) { parce source for specific token; else error }
 577 ( 4679) 
 578 ( 4679) proc testto(x: packed char); { current token }
 579 ( 4679) begin
 580 ( 4679)   if token<>x then merror(2,x)
 581 ( 4698) end;
 582 ( 4708) 
 583 ( 4709) proc parse(x: packed char); { next token }
 584 ( 4709) begin
 585 ( 4709)   scan; testto(x);
 586 ( 4728) end;
 587 ( 4728) 
 588 ( 4729) { * getlib * }
 589 ( 4729) 
 590 ( 4729) proc getlib;  { read library data }
 591 ( 4729) 
 592 ( 4729) var i,j,nent,addr,size,num,x,base: integer;
 593 ( 4732)     libfil: file;
 594 ( 4732)     ch,ltyp2,dummy: char;
 595 ( 4732)     name: array[7] of char;
 596 ( 4732) 
 597 ( 4732) begin
 598 ( 4732)   scan; if token=' ,' then scan;
 599 ( 4753)   testto('id');

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         16/11/23 page 11

 600 ( 4762)   base:=pc-2;
 601 ( 4768)   if (ofno<>nooutput) then write(@ofno,'L');
 602 ( 4791)   for i:=0 to 7 do begin
 603 ( 4808)     name[i]:=ident[succ(i)];
 604 ( 4817)     if ofno<>nooutput then
 605 ( 4831)       write(@ofno,ident[succ(i)])
 606 ( 4845)   end;
 607 ( 4851)   write(prtoff);
 608 ( 4868)   asetfile(name&'        ',0,cdrive,'L');
 609 ( 4898)   openr(libfil);  { get table file }
 610 ( 4904)   read(@libfil,nent,size);
 611 ( 4919)   {including cr,lf}
 612 ( 4920)   for i:=succ(spnt) to spnt+nent do begin
 613 ( 4947)     if spnt>symbsize then error(7);
 614 ( 4966)     spnt:=succ(spnt); addr:=8*i+1;
 615 ( 4984)     for j:=0 to 7 do begin
 616 ( 5006)       read(@libfil,ch);
 617 ( 5016)       idtab[addr+j]:=ch
 618 ( 5026)     end;
 619 ( 5037)     read(@libfil,ch);
 620 ( 5061)     read(@libfil,t0[i],dummy,t1[i],t2[i],t3[i]);
 621 ( 5110)     t1[i]:=t1[i]+level;
 622 ( 5123)     ltyp2:=high(t0[i]);
 623 ( 5140)     if (ltyp2='p')or(ltyp2='f')
 624 ( 5158)       or(ltyp2='g') then begin
 625 ( 5168)       t2[i]:=t2[i]+base;
 626 ( 5183)       if t3[i]<>0 then begin {stack data}
 627 ( 5206)         read(@libfil,num);
 628 ( 5216)         push(num); t3[i]:=stackpnt;
 629 ( 5231)         for j:=1 to num do begin
 630 ( 5258)           read(@libfil,x);
 631 ( 5268)           push(x);
 632 ( 5279)         end {for j};
 633 ( 5279)       end {stack data}
 634 ( 5293)     end {if ltyp2}
 635 ( 5293)   end {for i}
 636 ( 5293)   level:=succ(level); pc:=pc+size; offset:=pc;
 637 ( 5329)   close(libfil);
 638 ( 5343)   if spnt>spntmax then spntmax:=spnt;
 639 ( 5355)   if stackpnt>stackmax then stackmax:=stackpnt;
 640 ( 5375)   if prt then write(prton);
 641 ( 5393) end {getlib};
 642 ( 5393) 
 643 ( 5394) 
 644 ( 5394) { #################################### }
 645 ( 5394) {       * block * (global): handle one block }
 646 ( 5394) { #################################### }
 647 ( 5394) 
 648 ( 5394) 
 649 ( 5394) proc block(bottom: integer);
 650 ( 5394) 
 651 ( 5394) var l,f9,i,n,stackpn1,forwpn,find,cproc,
 652 ( 5397)     spnt1,dpnt1,parlevel: integer;
 653 ( 5397)     fortab: array[8] of integer;
 654 ( 5397) 
 655 ( 5397) { * find ident *    (of block) }
 656 ( 5397) { this is a fast version for compiler speed }
 657 ( 5397) 
 658 ( 5397) func findid; {search in table for id }
 659 ( 5397) 

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         16/11/23 page 12

 660 ( 5397) var k,i: integer;
 661 ( 5400)     id1: char;
 662 ( 5400) 
 663 ( 5400) begin
 664 ( 5400) 
 665 ( 5400)   i:=1; k:=8*spnt+9; id1:=ident[1];
 666 ( 5424) 
 667 ( 5432)   repeat
 668 ( 5432)     k:=k-8;
 669 ( 5438)     while (idtab[k]<>id1) and (k>0) do k:=k-8;
 670 ( 5474)     if k>0 then begin
 671 ( 5489)        i:=1;
 672 ( 5494)        repeat i:=succ(i)
 673 ( 5498)          until (i>8) or
 674 ( 5514)              (idtab[k+i-1]<>ident[i]);
 675 ( 5540)     end;
 676 ( 5544)     until (i>8) or (k<=0);
 677 ( 5558)   if k<=0 then begin
 678 ( 5569)     findid:=0;
 679 ( 5574)   end
 680 ( 5578)   else
 681 ( 5578)     findid:=(k-1) shr 3;
 682 ( 5590) end;
 683 ( 5595) 
 684 ( 5596) { * code2 *    (of block) }
 685 ( 5596) 
 686 ( 5596) proc code2(x,y: integer);
 687 ( 5596) begin
 688 ( 5596)   code1(x); code1(y);
 689 ( 5621) end;
 690 ( 5621) 
 691 ( 5622) { * code3 *    (of block) }
 692 ( 5622) 
 693 ( 5622) proc code3(x: integer; y1: %integer);
 694 ( 5622) 
 695 ( 5622) var y: integer;
 696 ( 5625) 
 697 ( 5625) begin {code3}
 698 ( 5625)   y:=y1;
 699 ( 5627)   if (x=34) and (y>=0) and (y<256) then
 700 ( 5658)     code2(32,y)
 701 ( 5664)   else begin
 702 ( 5677)     if (x=35) and (y>-128) and (y<=127) then
 703 ( 5700)       begin
 704 ( 5701)         if (y<0) then y:=y+256;
 705 ( 5721)         code2(33,y);
 706 ( 5738)       end
 707 ( 5738)     else begin
 708 ( 5741)       if (x>=36) and (x<=38) then y:=y-pc-1;
 709 ( 5770)       code1(x); code1(y and 255);
 710 ( 5798)       code1(y shr 8);
 711 ( 5811)     end
 712 ( 5811)   end
 713 ( 5811) end {code3};
 714 ( 5811) 
 715 ( 5812) { * testtype *      (of block) }
 716 ( 5812) 
 717 ( 5812) proc testtype(ttype: char);
 718 ( 5812) 
 719 ( 5812) begin

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         16/11/23 page 13

 720 ( 5812)   if restype<>ttype then
 721 ( 5821)     if (restype<>'u') and (ttype<>'u') then
 722 ( 5843)       merror(14,packed(ttype,restype));
 723 ( 5864) end;
 724 ( 5864) 
 725 ( 5865) { * putsym *   (of block) }
 726 ( 5865) 
 727 ( 5865) proc putsym(ltyp1,ltyp2: char);
 728 ( 5865) 
 729 ( 5865) var i,addr: integer;
 730 ( 5868) begin
 731 ( 5868)   if spnt>symbsize then error(7)
 732 ( 5883)   else spnt:=succ(spnt);
 733 ( 5896)   if spnt>spntmax then spntmax:=spnt;
 734 ( 5913)   t0[spnt]:=packed(ltyp1,ltyp2);
 735 ( 5934)   t3[spnt]:=0;
 736 ( 5944)   addr:=8*spnt;
 737 ( 5950)   for i:=1 to 8 do idtab[addr+i]:=ident[i];
 738 ( 5989)   if ltyp1='v' then begin
 739 ( 6021)     t2[spnt]:=dpnt; dpnt:=succ(dpnt);
 740 ( 6040)   end;
 741 ( 6045)   t1[spnt]:=level
 742 ( 6049) end {putsym};
 743 ( 6057) 
 744 ( 6058) { * checkindex *  (of block) }
 745 ( 6058) 
 746 ( 6058) proc checkindex(lowlim,highlim: integer);
 747 ( 6058) begin
 748 ( 6058)   if icheck then begin
 749 ( 6067)     code3($40,lowlim-1);
 750 ( 6085)     code2(highlim and 255, highlim shr 8)
 751 ( 6098)   end
 752 ( 6105) end;
 753 ( 6105) 
 754 ( 6106) { * getcon *      (of block) }
 755 ( 6106) 
 756 ( 6106) func getcon;
 757 ( 6106) 
 758 ( 6106) var idpnt,val,ii: integer;
 759 ( 6109)     rval: real;
 760 ( 6109)     sign: char;
 761 ( 6109) begin
 762 ( 6109)   restype:='i';
 763 ( 6113)   if token=' -' then begin
 764 ( 6125)     sign:='-'; scan
 765 ( 6134)   end else begin
 766 ( 6141)     sign:='+'; if token=' +' then scan
 767 ( 6155)   end;
 768 ( 6162)   case token of
 769 ( 6162)     'nu': val:=value[0];
 770 ( 6176)     'ru': begin val:=value[0];
 771 ( 6197)             restype:='r' end;
 772 ( 6211)     'st': if value[0]=1 then begin
 773 ( 6231)             restype:='c';
 774 ( 6236)             val:=ord(ident[1])
 775 ( 6242)           end else if value[0]=2 then begin
 776 ( 6262)             val:=(ord(ident[1]) shl 8) +
 777 ( 6274)               ord(ident[2]);
 778 ( 6280)             restype:='p';
 779 ( 6287)           end else if value[0]>2 then begin

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         16/11/23 page 14

 780 ( 6303)             val:=pc;
 781 ( 6306)             for ii:=1 to value[0] do
 782 ( 6322)                         code1(ord(ident[ii]));
 783 ( 6349)             code1(0); value[0]:=0; restype:='s';
 784 ( 6381)           end else error(15);
 785 ( 6396)     'cr': begin parse(' ('); scan; val:=getcon;
 786 ( 6426)             if (val>127) or (val<0) then
 787 ( 6444)               error(12);
 788 ( 6456)             testtype('i');
 789 ( 6464)             restype:='c'; parse(' )');
 790 ( 6479)           end;
 791 ( 6479)     'tr': begin val:=1; restype:='b' end;
 792 ( 6502)     'fa': begin val:=0; restype:='b' end;
 793 ( 6525)     'cp': begin
 794 ( 6536)             scan; val:=getcon;
 795 ( 6546)             testtype('i'); restype:='q';
 796 ( 6560)           end;
 797 ( 6564)     ' @': begin scan; val:=getcon;
 798 ( 6585)             testtype('i'); restype:='f'
 799 ( 6597)           end
 800 ( 6599)     else begin
 801 ( 6606)       testto('id'); idpnt:=findid;
 802 ( 6621)       if (idpnt>0) and (high(t0[idpnt])='c')
 803 ( 6643)       then begin
 804 ( 6645)         val:=t2[idpnt];
 805 ( 6652)         restype:=low(t0[idpnt]);
 806 ( 6668)         if restype='r' then
 807 ( 6679)           value[1]:=t3[idpnt];
 808 ( 6689)       end
 809 ( 6697)       else begin error(4); val:=0;
 810 ( 6710)         restype:='i'
 811 ( 6714)       end
 812 ( 6716)     end
 813 ( 6720)   end {case};
 814 ( 6722)   if sign='-' then
 815 ( 6728)     case restype of
 816 ( 6732)       'i': getcon:=-val;
 817 ( 6743)       'r': begin value[0]:=val;
 818 ( 6764)              splitconv(value,rval);
 819 ( 6796)              splitconv(-rval,value);
 820 ( 6821)              getcon:=value[0]
 821 ( 6823)            end
 822 ( 6823)       else error(12)
 823 ( 6836)     end {case}
 824 ( 6844)   else getcon:=val;
 825 ( 6847) end {getcon};
 826 ( 6855) 
 827 ( 6856) { * deccon *         ( of block ) }
 828 ( 6856) 
 829 ( 6856) proc deccon;    { declare constant }
 830 ( 6856) begin
 831 ( 6856)   if token=' ;' then scan;
 832 ( 6876)   testto('id');
 833 ( 6885)   putsym('c','i');
 834 ( 6895)   parse(' ='); scan;
 835 ( 6908)   t2[spnt]:=getcon;
 836 ( 6918)   if (restype='r') then t3[spnt]:=value[1];
 837 ( 6938)   if restype<>'i' then
 838 ( 6952)     t0[spnt]:=packed('c',restype);
 839 ( 6967)   scan

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         16/11/23 page 15

 840 ( 6971) end {deccon};
 841 ( 6975) 
 842 ( 6976) { * decvar *          ( of block ) }
 843 ( 6976) 
 844 ( 6976) proc decvar(typ1,typ2: char);
 845 ( 6976) begin
 846 ( 6976)   if token=' ,' then scan;
 847 ( 6996)   testto('id');
 848 ( 7005)   putsym(typ1,typ2);
 849 ( 7019)   scan;
 850 ( 7023) end {decvar};
 851 ( 7023) 
 852 ( 7024) { * gettype *         ( of block ) }
 853 ( 7024) 
 854 ( 7024) proc gettype(var typ2: char;
 855 ( 7024)   var aflag,uflag: boolean; var n: integer);
 856 ( 7024) 
 857 ( 7024) begin
 858 ( 7024)   aflag:=false; n:=0; uflag:=false;
 859 ( 7043)   scan;
 860 ( 7051)   if token='ar' then begin
 861 ( 7059)     parse(' ['); scan;
 862 ( 7075)     n:=getcon; testtype('i');
 863 ( 7093)     if (n<1) then begin error(15); n:=1 end;
 864 ( 7117)     parse(' ]'); parse('of'); scan;
 865 ( 7139)     aflag:=true
 866 ( 7139)   end;
 867 ( 7145)   if token=' %' then begin
 868 ( 7153)     scan; uflag:=true
 869 ( 7160)   end;
 870 ( 7166)   case token of
 871 ( 7166)     'in': typ2:='i';
 872 ( 7180)     'ch': typ2:='c';
 873 ( 7197)     'pa': begin parse ('ch'); typ2:='p' end;
 874 ( 7227)     'bo': typ2:='b';
 875 ( 7240)     'rl': begin typ2:='r'; aflag:=true;
 876 ( 7263)             n:=prec(2*succ(n)) end;
 877 ( 7280)     'cp': typ2:='q';
 878 ( 7293)     'fl': typ2:='f'
 879 ( 7308)     else begin error(11); typ2:='i';end
 880 ( 7331)   end {case}
 881 ( 7333) end {gettype};
 882 ( 7333) 
 883 ( 7334) { * variable *        ( of block) }
 884 ( 7334) 
 885 ( 7334) proc variable;  { variable declarations }
 886 ( 7334) 
 887 ( 7334) var typ1,typ2: char;
 888 ( 7337)     i,l: integer;
 889 ( 7337)     aflag,uflag: boolean;
 890 ( 7337) 
 891 ( 7337) begin
 892 ( 7337)   scan;
 893 ( 7343)   repeat {main loop}
 894 ( 7343)     l:=0;
 895 ( 7345)     repeat decvar('v','i'); l:=succ(l);
 896 ( 7363)     until token<> ' ,';
 897 ( 7375)     testto(' :');
 898 ( 7388)     gettype(typ2,aflag,uflag,n);
 899 ( 7424)     if uflag then error(11);

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         16/11/23 page 16

 900 ( 7439)     if aflag then typ1:='a' else typ1:='v';
 901 ( 7457)     if typ1='a' then begin {array}
 902 ( 7471)        dpnt:=dpnt-l; {variable has been assumed}
 903 ( 7484)        for i:=succ(spnt-l) to spnt do begin
 904 ( 7511)          t2[i]:=dpnt; t3[i]:=n;
 905 ( 7527)          dpnt:=succ(dpnt+n);
 906 ( 7544)       end
 907 ( 7549)     end {array};
 908 ( 7563)     for i:=succ(spnt-l) to spnt do
 909 ( 7577)       t0[i]:=packed(typ1,typ2);
 910 ( 7603)     parse(' ;');scan
 911 ( 7630)   until token<>'id' {end main loop}
 912 ( 7641) end {variable};
 913 ( 7645) 
 914 ( 7646) { * fixup *           ( of block ) }
 915 ( 7646) 
 916 ( 7646) proc fixup(x: integer);
 917 ( 7646) begin
 918 ( 7646)   if ofno<>nooutput then begin
 919 ( 7658)     write(@ofno,'F');
 920 ( 7669)     savebyte(succ(x-offset) and 255);
 921 ( 7688)     savebyte(succ(x-offset) shr 8);
 922 ( 7707)     savebyte((pc-x-1) and 255);
 923 ( 7728)     savebyte((pc-x-1) shr 8);
 924 ( 7749)   end;
 925 ( 7749) end;
 926 ( 7749) 
 927 ( 7750) { * function *        ( of block ) }
 928 ( 7750) 
 929 ( 7750) proc function;
 930 ( 7750) 
 931 ( 7750) var n: integer;
 932 ( 7753)     typ1,typ2: char;
 933 ( 7753)     aflag,uflag: boolean;
 934 ( 7753) begin
 935 ( 7753)   if token<>' :' then begin
 936 ( 7763)     aflag:=false; uflag:=false; typ2:='i' end
 937 ( 7780)   else begin
 938 ( 7787)     gettype(typ2,aflag,uflag,n);
 939 ( 7823)     scan
 940 ( 7823)   end;
 941 ( 7827)   if aflag then begin
 942 ( 7831)     typ1:='s'; t3[succ(cproc)]:=n;
 943 ( 7845)     t2[succ(cproc)]:=t2[succ(cproc)]-n
 944 ( 7867)   end
 945 ( 7867)   else typ1:='r';
 946 ( 7881)   t0[succ(cproc)]:=packed(typ1,typ2);
 947 ( 7899)   if uflag then typ2:='u';
 948 ( 7912)   if aflag then typ1:='g'
 949 ( 7923)   else typ1:='f';
 950 ( 7934)   t0[cproc]:=packed(typ1,typ2);
 951 ( 7951) end {function};
 952 ( 7955) 
 953 ( 7956) { * parameter *       ( of block ) }
 954 ( 7956) 
 955 ( 7956) proc parameter;
 956 ( 7956) 
 957 ( 7956) var counter1,counter2,i,n,bs: integer;
 958 ( 7959)     aflag,uflag: boolean;
 959 ( 7959)     vtype1,vtype2: char;

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         16/11/23 page 17

 960 ( 7959)     vtype: packed char;
 961 ( 7959) 
 962 ( 7959) begin
 963 ( 7959)   push(0); { dummy size, fixed later }
 964 ( 7969)   if find=0 then t3[spnt-npara]:=stackpnt
 965 ( 7988)   else bs:=stackpnt;
 966 ( 7999)   counter1:=0
 967 ( 8007)   repeat {main loop}
 968 ( 8013)     counter2:=0;
 969 ( 8015)     vtype1:='d'; vtype2:='i';
 970 ( 8027)     scan;
 971 ( 8035)     if token='co' then scan
 972 ( 8043)     else if token='va' then begin
 973 ( 8061)       scan; vtype1:='w' end; {variable param}
 974 ( 8074)     end;
 975 ( 8074)     repeat {inner loop}
 976 ( 8074)       decvar(vtype1,vtype2);
 977 ( 8088)       t2[spnt]:=parlevel;
 978 ( 8092)       parlevel:=succ(parlevel);
 979 ( 8104)       npara:=succ(npara);
 980 ( 8113)       counter2:=succ(counter2);
 981 ( 8122)       until token<>' ,';
 982 ( 8134)     uflag:=false;aflag:=false; n:=0;
 983 ( 8152)     if token<>' :' then
 984 ( 8163)       vtype2:='i' {assume integer }
 985 ( 8169)     else begin
 986 ( 8176)       gettype(vtype2,aflag,uflag,n);
 987 ( 8212)       if n>63 then error(15);
 988 ( 8230)       scan
 989 ( 8230)     end;
 990 ( 8234)     if aflag then begin
 991 ( 8238)       vtype1:=succ(vtype1);
 992 ( 8245)       parlevel:=parlevel-counter2;
 993 ( 8254)     end;
 994 ( 8263)     vtype:=packed(vtype1,vtype2);
 995 ( 8272)     for i:=1 to counter2 do begin
 996 ( 8295)       if uflag then push(packed(vtype1,'u'))
 997 ( 8309)       else push(vtype);
 998 ( 8328)       if aflag then begin
 999 ( 8332)         push(n); t3[spnt-counter2+i]:=n;
1000 ( 8359)         t2[spnt-counter2+i]:=parlevel;
1001 ( 8381)         parlevel:=succ(parlevel)+n;
1002 ( 8394)       end {then};
1003 ( 8403)       t0[spnt-counter2+i]:=vtype;
1004 ( 8417)     end {for};
1005 ( 8425)     if aflag then counter2:=2*counter2;
1006 ( 8448)     counter1:=counter1+counter2;
1007 ( 8461)     until token<>' ;'; {outer loop}
1008 ( 8481)   testto(' )'); scan;
1009 ( 8494)   if find=0 then
1010 ( 8500)     stack[t3[spnt-npara]]:=counter1
1011 ( 8517)   else begin {information is allready there}
1012 ( 8528)     stack[bs]:=counter1;
1013 ( 8532)     n:=t3[fortab[find]]; {existing stack data}
1014 ( 8556)     for i:=0 to stackpnt-bs do
1015 ( 8566)       if stack[bs+1]<>stack[n+1]
1016 ( 8597)         then merror(13,'pa'); {parameter wrong}
1017 ( 8631)     stackpnt:=prec(bs) {clear the new info}
1018 ( 8635)   end  {else}
1019 ( 8640) end {parameter};

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         16/11/23 page 18

1020 ( 8640) 
1021 ( 8641) { * memory *              ( of block) }
1022 ( 8641) 
1023 ( 8641) proc memory;
1024 ( 8641) 
1025 ( 8641) var typ1,typ2:char;
1026 ( 8644)     i,l,n: integer;
1027 ( 8644)     aflag,uflag: boolean;
1028 ( 8644) 
1029 ( 8644) begin
1030 ( 8644)   scan;
1031 ( 8650)   repeat {main loop}
1032 ( 8650)     l:=0;
1033 ( 8652)     repeat
1034 ( 8656)       decvar('m','i');
1035 ( 8666)       l:=succ(l); testto(' ='); scan;
1036 ( 8688)       n:=getcon; testtype('i');
1037 ( 8706)       scan; t2[spnt]:=n;
1038 ( 8714)     until token<>' ,';
1039 ( 8729)     testto(' :');
1040 ( 8742)     gettype(typ2,aflag,uflag,n);
1041 ( 8778)     if uflag then error(11);
1042 ( 8793)     scan;
1043 ( 8797)     if token=' &' then begin {8-bit}
1044 ( 8808)       typ1:='h'; scan
1045 ( 8814)     end
1046 ( 8818)     else typ1:='m';
1047 ( 8823)     if aflag then typ1:=succ(typ1);
1048 ( 8838)     for i:=succ(spnt-l) to spnt do begin
1049 ( 8870)       t0[i]:=packed(typ1,typ2);
1050 ( 8883)       t3[i]:=n;
1051 ( 8891)     end;
1052 ( 8899)     testto(' ;'); scan;
1053 ( 8926)   until token<>'id';
1054 ( 8933) end {memory};
1055 ( 8937) 
1056 ( 8938) 
1057 ( 8938) {######################################}
1058 ( 8938) { * statement *           ( of block ) }
1059 ( 8938) {######################################}
1060 ( 8938) 
1061 ( 8938) proc statmnt;
1062 ( 8938) 
1063 ( 8938) var idpnt,relad,k2,savpc,bottom1: integer;
1064 ( 8941)     device,wln: boolean;
1065 ( 8941)     savtp1,vartyp2: char;
1066 ( 8941)     wl: boolean;
1067 ( 8941) 
1068 ( 8941) { * code4 *               ( of statement ) }
1069 ( 8941) 
1070 ( 8941) proc code4(x,y1,z1: integer); {set 4-byte code}
1071 ( 8941) 
1072 ( 8941) var y,z: integer;
1073 ( 8944) 
1074 ( 8944) begin
1075 ( 8944)   y:=y1; z:=z1;
1076 ( 8954)   if y<0 then y:=y+256;
1077 ( 8979)   if x=43 then z:=z-pc-2;
1078 ( 9005)   code1(x);code1(y);code1(z and 255);
1079 ( 9043)   code1(z shr 8)

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         16/11/23 page 19

1080 ( 9049) end {code4};
1081 ( 9056) 
1082 ( 9057) { * testferror *         ( of statement) ) }
1083 ( 9057) 
1084 ( 9057) proc testferror;
1085 ( 9057) begin
1086 ( 9057)   code1($4f);
1087 ( 9070) end;
1088 ( 9070) 
1089 ( 9071) { * gpval *              ( of statement ) }
1090 ( 9071) 
1091 ( 9071) proc gpval(idpnt: integer;
1092 ( 9071)   dir: boolean; typ: char);
1093 ( 9071) 
1094 ( 9071) var d: integer;
1095 ( 9074) 
1096 ( 9074) begin {gpval}
1097 ( 9074)   if dir then d:=1 else d:=0;
1098 ( 9094)   case typ of
1099 ( 9098)   'h':  begin code3($22,t2[idpnt]);
1100 ( 9125)           if dir then code1($3f);
1101 ( 9140)           code1($17+d) end;
1102 ( 9153)   'm':  begin code3($22,t2[idpnt]);
1103 ( 9179)           code1($3d+d) end;
1104 ( 9192)   'i':  begin
1105 ( 9202)           if dir then code1($3f);
1106 ( 9217)           code3($22,t2[idpnt]);
1107 ( 9233)           code1(3);
1108 ( 9241)           if dir then code1($3f);
1109 ( 9256)           code1($17+d) end;
1110 ( 9269)   'n':  begin if dir then code1($3f);
1111 ( 9294)           code3($22,1); code1($12);
1112 ( 9312)           code3($22,t2[idpnt]);
1113 ( 9328)           code1(3); code1($3d+d) end
1114 ( 9349)   else begin
1115 ( 9352)     if typ='q' then begin
1116 ( 9359)       code4($55,level-t1[idpnt],2*t2[idpnt]);
1117 ( 9394)     end else
1118 ( 9394)       code4($27+2*d+relad,level-t1[idpnt],
1119 ( 9420)         2*t2[idpnt]);
1120 ( 9442)     end
1121 ( 9442)   end {case}
1122 ( 9444) end;
1123 ( 9444) 
1124 ( 9445) { FORWARD decl. of mainexp (of statement) }
1125 ( 9445) 
1126 ( 9445) proc mainexp(reqtype: char;
1127 ( 9445)   var arsize: integer); forward;
1128 ( 9448) 
1129 ( 9448) { * express *           ( of statement ) }
1130 ( 9448) 
1131 ( 9448) proc express; {requests a normal 16-bit result }
1132 ( 9448) 
1133 ( 9448) var resultsize: integer;
1134 ( 9451) 
1135 ( 9451) begin {express}
1136 ( 9451)   mainexp('n',resultsize);
1137 ( 9469)   if resultsize<>0 then error(15)
1138 ( 9481) end {express};
1139 ( 9487) 

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         16/11/23 page 20

1140 ( 9488) { * arrayexp *          ( of mainexp) }
1141 ( 9488) 
1142 ( 9488) proc arrayexp(size: integer; eltype: char);
1143 ( 9488) 
1144 ( 9488) var resultsize: integer;
1145 ( 9491) 
1146 ( 9491) begin
1147 ( 9491)   mainexp(eltype,resultsize);
1148 ( 9511)   if resultsize<>size then error(15);
1149 ( 9531)   testtype(eltype);
1150 ( 9541) end;
1151 ( 9541) 
1152 ( 9542) { * getvar *            ( of statement ) }
1153 ( 9542) 
1154 ( 9542) proc getvar;
1155 ( 9542) begin
1156 ( 9542)   vartyp2:=high(t0[idpnt]);
1157 ( 9555)   vartype:=low(t0[idpnt]);
1158 ( 9568)   scan;
1159 ( 9577)   if (vartype='q') and (token=' [') and
1160 ( 9592)     ((vartyp2='v') or (vartyp2='d')) then begin
1161 ( 9609)     vartyp2:='q'; vartype:='c';
1162 ( 9620)   end;
1163 ( 9624)   case vartyp2 of
1164 ( 9624)   'a','x','s','i','n','q':
1165 ( 9667)       begin
1166 ( 9670)         if token=' [' then begin
1167 ( 9678)           scan; express; relad:=1;
1168 ( 9691)           if vartyp2='r' then begin
1169 ( 9702)             relad:=3;
1170 ( 9707)             code3($22,1); code1($12)
1171 ( 9723)           end;
1172 ( 9729)           if (vartyp2='q') and (t3[idpnt]=0) then
1173 ( 9747)             checkindex(0,63)
1174 ( 9755)           else
1175 ( 9761)             checkindex(0,t3[idpnt]);
1176 ( 9780)           testtype('i'); testto(' ]'); scan;
1177 ( 9801)         end else relad:=2;
1178 ( 9806)       end;
1179 ( 9810)   'v','w','r','h','m': relad:=0;
1180 ( 9850)   'c','d','e','t','u': error(6)
1181 ( 9894)   else error(1)
1182 ( 9905)   end {case}
1183 ( 9913) end {getvar};
1184 ( 9913) 
1185 ( 9914) { * prcall *            ( of statement ) }
1186 ( 9914) 
1187 ( 9914) proc prcall (idpn1: integer);
1188 ( 9914) 
1189 ( 9914) var bstack,numpar,i,n,n2: integer;
1190 ( 9917) 
1191 ( 9917) { body of prcall follows later }
1192 ( 9917) 
1193 ( 9917) { * prcall1 *           ( of prcall ) }
1194 ( 9917) 
1195 ( 9917) proc prcall1;
1196 ( 9917) var ressize:integer;
1197 ( 9920) 
1198 ( 9920)   proc prcall3;
1199 ( 9920)   begin {prcall3}

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         16/11/23 page 21

1200 ( 9923)     testto('id');
1201 ( 9934)     idpnt:=findid;
1202 ( 9940)     if idpnt=0 then error(5);
1203 ( 9962)     getvar;
1204 ( 9966)     if chr(stack[i] and 255)<>vartype then
1205 ( 9978)       if chr(stack[i] and 255)<>'u' then
1206 (10000)         merror(14,'01');
1207 (10015)       push(idpnt);
1208 (10025)   end {prcall3};
1209 (10025) 
1210 (10026) begin {prcall1}
1211 (10026)   case chr(stack[i] shr 8) of
1212 (10039)     'd':  begin
1213 (10047)             if chr(stack[i] and 255) = 'q' then
1214 (10061)               mainexp('q',ressize)
1215 (10067)             else
1216 (10081)               express;
1217 (10088)             if chr(stack[i] and 255)<>'u' then
1218 (10102)               testtype(chr(stack[i] and 255));
1219 (10124)           end;
1220 (10124)     'e':  begin
1221 (10134)             arrayexp(stack[succ(i)],
1222 (10139)               chr(stack[i]));
1223 (10158)             i:=succ(i);
1224 (10162)           end;
1225 (10167)     'w':  begin
1226 (10177)             prcall3;
1227 (10181)             if relad<>0 then merror(14,'02');
1228 (10202)             gpval(idpnt,false,vartyp2);
1229 (10218)           end;
1230 (10218)     'x':  begin
1231 (10228)             prcall3;
1232 (10232)             if relad<>2 then merror(14,'03');
1233 (10253)             if vartyp2='i' then error(16);
1234 (10271)             i:=succ(i);
1235 (10275)             if stack[i]<>t3[idpnt] then
1236 (10292)               error(15);
1237 (10308)             if vartyp2='n' then begin
1238 (10315)               code3($22,t2[idpnt]);
1239 (10334)               code1($3d);
1240 (10342)             end else code4($27,level-t1[idpnt],
1241 (10355)               2*t2[idpnt]);
1242 (10377)             code2($3b,stack[i]);
1243 (10393)           end
1244 (10393)     else merror(14,'04')
1245 (10401)   end {case}
1246 (10409) end {prcall1};
1247 (10409) 
1248 (10410) proc prcall2;
1249 (10410) begin
1250 (10410)   if n>0 then code3(35,-2*n);
1251 (10441)   n:=0
1252 (10441) end {prcall2};
1253 (10447) 
1254 (10448) begin {body of prcall}
1255 (10448)   if t3[idpn1]<>0 then begin
1256 (10461)     bstack:=t3[idpn1];
1257 (10468)     numpar:=stack[bstack];
1258 (10480)     parse(' ('); scan;
1259 (10501)     for i:=succ(bstack) to bstack+numpar do

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         16/11/23 page 22

1260 (10514)     begin
1261 (10528)       prcall1;
1262 (10532)       if i<bstack+numpar then begin
1263 (10546)         testto(' ,'); scan
1264 (10558)       end
1265 (10562)     end;
1266 (10562)     testto(' )');
1267 (10585)   end {then};
1268 (10585)   code4(43,level-t1[idpn1],t2[idpn1]);
1269 (10614)   if t3[idpn1]<>0 then begin
1270 (10625)     n:=0; i:=bstack+numpar;
1271 (10638)     repeat
1272 (10647)       case chr(stack[i] shr 8) of
1273 (10658)       'd':  n:=succ(n);
1274 (10670)       'w':  begin
1275 (10685)               prcall2; idpnt:=pop;
1276 (10695)               gpval(idpnt,true,
1277 (10705)                   high(t0[idpnt]));
1278 (10720)             end;
1279 (10720)       chr(0): begin
1280 (10730)             n2:=stack[i];
1281 (10734)             i:=i-1;
1282 (10748)             case chr(stack[i] shr 8) of
1283 (10764)               'e':  n:=succ(n+n2);
1284 (10781)               'x':  begin
1285 (10796)                       prcall2;
1286 (10800)                       idpnt:=pop;
1287 (10806)                       if high(t0[idpnt])='n'
1288 (10819)                       then begin
1289 (10822)                         code3($22,t2[idpnt]+
1290 (10831)                           2*t3[idpnt]);
1291 (10853)                         code1($3e)
1292 (10855)                       end else
1293 (10861)                         code4(41,
1294 (10866)                           level-t1[idpnt],
1295 (10874)                           2*(t2[idpnt]+
1296 (10885)                           t3[idpnt]));
1297 (10905)                       code2($3c,t3[idpnt])
1298 (10911)                     end
1299 (10921)               end {case}
1300 (10923)             end
1301 (10923)       end; {case}
1302 (10925)       i:=prec(i);
1303 (10929)     until i=bstack;
1304 (10938)     prcall2
1305 (10946)   end
1306 (10950) end {prcall};
1307 (10950) 
1308 (10951) 
1309 (10951) {###################################}
1310 (10951) { * mainexp *       ( of statement) }
1311 (10951) {###################################}
1312 (10951) {  see forward declaration above    }
1313 (10951) 
1314 (10951) proc mainexp(reqtype: char;
1315 (10951)   var arsize: integer);
1316 (10951) 
1317 (10951) { variables of mainexp}
1318 (10951) var opcode,roff: integer;
1319 (10954)     savtype: char;

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         16/11/23 page 23

1320 (10954) 
1321 (10954) { * argument *         ( of mainexp ) }
1322 (10954) 
1323 (10954) proc argument(rtype: char);
1324 (10954) begin
1325 (10954)   parse(' ('); scan; express;
1326 (10976)   testtype(rtype);
1327 (10986)   testto(' )'); scan
1328 (10995) end; {argument}
1329 (11000) 
1330 (11000) {#######################################}
1331 (11000) { * simexp *             ( of mainexp ) }
1332 (11000) {#######################################}
1333 (11000) 
1334 (11000) proc simexp(var arsize1: integer);
1335 (11000) 
1336 (11000) var opcode: integer;
1337 (11003)     sign: char;
1338 (11003) 
1339 (11003) {body of simexp  follows later }
1340 (11003) 
1341 (11003) {#######################################}
1342 (11003) { * term *               ( of simexp )  }
1343 (11003) {#######################################}
1344 (11003) 
1345 (11003) proc term(var arsize2: integer);
1346 (11003) 
1347 (11003) var opcode: integer;
1348 (11006) 
1349 (11006) { body of term follows later }
1350 (11006) 
1351 (11006) {#######################################}
1352 (11006) { * factor *             ( of term )    }
1353 (11006) {#######################################}
1354 (11006) 
1355 (11006) proc factor(var arsize3: integer);
1356 (11006) 
1357 (11006) var i, idpnt: integer;
1358 (11009)     h: char;
1359 (11009) 
1360 (11009) { * index *              ( of factor )  }
1361 (11009) 
1362 (11009) proc index(chk: boolean);
1363 (11009) 
1364 (11009) var savtype: char;
1365 (11012) 
1366 (11012) begin {index}
1367 (11012)   scan; savtype:=restype;
1368 (11018)   express; testtype('i'); testto(' ]');
1369 (11047)   if savtype='r' then begin
1370 (11054)     code3($22,1); code1($12);
1371 (11075)   end;
1372 (11075)   if chk then begin
1373 (11079)     if (savtype='q') and (t3[idpnt]=0) then
1374 (11100)       { is an arrayed cpnt }
1375 (11101)       checkindex(0,63)
1376 (11108)     else
1377 (11114)       checkindex(0,t3[idpnt]);
1378 (11133)   end;
1379 (11133)   restype:=savtype; scan

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         16/11/23 page 24

1380 (11141) end;
1381 (11145) 
1382 (11146) 
1383 (11146) begin { *** body of factor *** }
1384 (11146)   arsize3:=0;
1385 (11150)   case token of
1386 (11154)     'id': begin {identifier }
1387 (11166)             idpnt:=findid;
1388 (11172)             if idpnt=0 then error(5);
1389 (11194)             restype:=low(t0[idpnt]);
1390 (11202)             h:=high(t0[idpnt]);
1391 (11215)             case h of
1392 (11220)               'v','w','d':
1393 (11242)                     begin
1394 (11245)                       scan;
1395 (11249)                       if (restype='q') and (token=' [')
1396 (11263)                       then begin
1397 (11265)                         code4(39,level-t1[idpnt],
1398 (11278)                           2*t2[idpnt]);
1399 (11300)                         index(true);
1400 (11308)                         code1($03);
1401 (11316)                         code1($54);
1402 (11324)                         restype:='c';
1403 (11326)                       end else
1404 (11330)                         code4(39,level-t1[idpnt],
1405 (11343)                           2*t2[idpnt]);
1406 (11365)                     end;
1407 (11365)               'h':  begin code3($22,t2[idpnt]);
1408 (11391)                       code1($17); scan end;
1409 (11403)               'i':  begin code3($22,t2[idpnt]);
1410 (11429)                       scan;
1411 (11433)                       if token=' [' then begin
1412 (11441)                         index(true); code1($03);
1413 (11460)                         code1($17)
1414 (11462)                       end else begin
1415 (11471)                         error(16)
1416 (11473)                       end
1417 (11479)                     end;
1418 (11479)               'm':  begin code3($22,t2[idpnt]);
1419 (11505)                       code1($3d); scan
1420 (11513)                     end;
1421 (11517)               'n':  begin code3($22,t2[idpnt]);
1422 (11543)                       scan;
1423 (11547)                       if token=' [' then begin
1424 (11555)                         index(true);
1425 (11566)                         code3($22,1);code1($12);
1426 (11584)                         code1($03); code1($3d);
1427 (11600)                         if restype='r' then
1428 (11606)                         begin
1429 (11607)                           code2($3b,1);
1430 (11620)                           arsize3:=1
1431 (11620)                         end
1432 (11622)                       end else begin
1433 (11629)                         code1($3d);
1434 (11637)                         code2($3b,t3[idpnt]);
1435 (11653)                         arsize3:=t3[idpnt];
1436 (11657)                       end
1437 (11665)                     end;
1438 (11665)               'r','t': begin
1439 (11682)                       code3(35,2);

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         16/11/23 page 25

1440 (11692)                       idpnt:=prec(idpnt);
1441 (11696)                       prcall(idpnt); scan;
1442 (11715)                       restype:=low(t0[idpnt]);
1443 (11723)                     end;
1444 (11728)               'c':  if low(t0[idpnt])<>'r' then begin
1445 (11750)                       code3(34,t2[idpnt]);
1446 (11769)                       scan;
1447 (11773)                       if restype='s' then begin
1448 (11780)                         if token=' [' then begin
1449 (11791)                           index(true);
1450 (11802)                           code1($03);
1451 (11810)                           code1($58);
1452 (11818)                           code1($54);
1453 (11826)                           restype:='c';
1454 (11828)                         end else begin
1455 (11835)                           code1($58);
1456 (11843)                           restype:='q';
1457 (11845)                         end;
1458 (11849)                       end;
1459 (11849)                       {scan;}
1460 (11849)                     end else begin
1461 (11852)                       code2($3a,2);
1462 (11862)                       code2(t2[idpnt] and 255,
1463 (11872)                         t2[idpnt] shr 8);
1464 (11890)                       code2(t3[idpnt] and 255,
1465 (11900)                         t3[idpnt] shr 8);
1466 (11918)                       arsize3:=1; scan
1467 (11924)                     end;
1468 (11928)               'a','e','x':
1469 (11949)                     begin scan;
1470 (11956)                       if token=' [' then begin
1471 (11964)                         index(true);
1472 (11975)                         code4($28,
1473 (11977)                             level-t1[idpnt],
1474 (11985)                             2*t2[idpnt]);
1475 (12007)                         if restype='r' then
1476 (12013)                         begin
1477 (12014)                           code2($3b,1);
1478 (12027)                           arsize3:=1
1479 (12027)                         end
1480 (12029)                       end else begin
1481 (12036)                         code4($27,
1482 (12038)                             level-t1[idpnt],
1483 (12046)                             2*t2[idpnt]);
1484 (12068)                         code2($3b,t3[idpnt]);
1485 (12084)                         arsize3:=t3[idpnt];
1486 (12088)                       end
1487 (12096)                     end;
1488 (12096)               's','u':
1489 (12110)                     begin
1490 (12113)                       code3(35,2*t3[idpnt]+2);
1491 (12135)                       idpnt:=prec(idpnt);
1492 (12139)                       prcall(idpnt); scan;
1493 (12158)                       restype:=low(t0[idpnt]);
1494 (12166)                       idpnt:=succ(idpnt);
1495 (12175)                       arsize3:=t3[idpnt]
1496 (12180)                     end
1497 (12184)               else error(1)
1498 (12197)             end {case}
1499 (12205)           end; {identifier}

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         16/11/23 page 26

1500 (12208)     'nu': begin code3(34,value[0]); scan;
1501 (12234)             restype:='i'
1502 (12234)           end;
1503 (12240)     'ru': begin code2($3a,2);
1504 (12261)             code2(value[0] and 255,
1505 (12269)               value[0] shr 8);
1506 (12285)             code2(value[1] and 255,
1507 (12293)               value[1] shr 8);
1508 (12309)             scan; restype:='r';
1509 (12315)             arsize3:=1
1510 (12319)           end;
1511 (12325)     'st': begin
1512 (12336)           if (reqtype='n') and (value[0]<3)
1513 (12351)             then begin
1514 (12353)               if value[0]<2 then begin
1515 (12365)                 code3(34,ord(ident[1]));
1516 (12382)                 restype:='c'
1517 (12382)               end else begin
1518 (12391)                 code3(34,packed(ident[1],
1519 (12395)                   ident[2]));
1520 (12412)                 restype:='p'
1521 (12412)               end
1522 (12414)             end else begin
1523 (12421)               case reqtype of
1524 (12421)                 'c','u','n','q':
1525 (12450)                     begin
1526 (12453)                       if (vartype='q') or
1527 (12460)                          (reqtype='q') then begin
1528 (12468)                         arsize3:=0;
1529 (12473)                         restype:='q';
1530 (12479)                         code2($56,value[0]);
1531 (12497)                       end else begin
1532 (12500)                         arsize3:=prec(value[0]);
1533 (12506)                         restype:='c';
1534 (12513)                         code2($39,value[0]);
1535 (12531)                       end;
1536 (12531)                       for i:=1 to value[0] do
1537 (12539)                         code1(ord(ident[i]));
1538 (12566)                       if (vartype='q') or
1539 (12587)                          (reqtype='q') then code1(0);
1540 (12606)                     end;
1541 (12606)                 'p': begin
1542 (12616)                       if odd(value[0]) then
1543 (12622)                         error(15);
1544 (12634)                       value[0]:=value[0] shr 1;
1545 (12644)                       arsize3:=prec(value[0]);
1546 (12655)                       restype:='p';
1547 (12662)                       code2($3a,value[0]);
1548 (12680)                       for i:=1 to value[0] do
1549 (12688)                         begin
1550 (12701)                         code1(ident[2*i]);
1551 (12718)                         code1(ident[2*i-1]);
1552 (12738)                       end
1553 (12738)                     end
1554 (12738)                 else merror(14,'05')
1555 (12760)               end {case}
1556 (12768)             end;
1557 (12768)             scan
1558 (12768)           end;
1559 (12772)     'od': begin

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         16/11/23 page 27

1560 (12783)             argument('i'); code1(7);
1561 (12799)             restype:='b'
1562 (12799)           end;
1563 (12805)     'me': begin
1564 (12816)             parse(' ['); index(false);
1565 (12833)             code1(23); restype:='i';
1566 (12843)           end;
1567 (12847)     ' (': begin
1568 (12858)             scan; mainexp(reqtype,arsize3);
1569 (12880)             testto(' )'); scan
1570 (12889)           end; {no type change}
1571 (12896)     'no': begin
1572 (12904)             scan; factor(arsize3);
1573 (12920)             if (arsize3<>0) then error(15);
1574 (12938)             code1($11);
1575 (12946)             if restype<>'i' then
1576 (12952)               testtype('b')
1577 (12958)           end;
1578 (12964)     'cr': begin
1579 (12975)             argument('i'); code1(52);
1580 (12991)             restype:='c'
1581 (12991)           end;
1582 (12997)     'hi': begin
1583 (13008)             argument('p'); code1(51);
1584 (13024)             restype:='c'
1585 (13024)           end;
1586 (13030)     'lo': begin
1587 (13041)             argument('p'); code1(52);
1588 (13057)             restype:='c'
1589 (13057)           end;
1590 (13063)     'su': begin
1591 (13074)             argument('u'); code1($14);
1592 (13090)           end;
1593 (13090)     'pc': begin
1594 (13101)             argument('u'); code1($15)
1595 (13111)           end;
1596 (13117)     'cp': begin
1597 (13128)             argument('i'); restype:='q';
1598 (13138)           end;
1599 (13142)     'ni': begin
1600 (13153)             code3(34,0); scan; restype:='q';
1601 (13169)           end;
1602 (13173)     'ox': begin
1603 (13184)             argument('u');
1604 (13192)             restype:='i'
1605 (13192)           end;
1606 (13198)     ' @': begin
1607 (13209)             scan; factor(arsize3);
1608 (13225)             if arsize3<>0 then error(15);
1609 (13243)             testtype('i');
1610 (13251)             restype:='f'
1611 (13251)           end;
1612 (13257)     'tr': begin
1613 (13268)             code3(34,1); scan;
1614 (13282)             restype:='b';
1615 (13284)           end;
1616 (13288)     'fa': begin
1617 (13299)             code3(34,0); scan;
1618 (13313)             restype:='b'
1619 (13313)           end;

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         16/11/23 page 28

1620 (13319)     'tc': begin
1621 (13330)             parse(' ('); scan;
1622 (13343)             arrayexp(1,'r');
1623 (13353)             testto(' )'); scan;
1624 (13366)             code1($47); restype:='i';
1625 (13376)           end;
1626 (13380)     'cv': begin
1627 (13391)             argument('i');
1628 (13399)             code1($46); arsize3:=1;
1629 (13409)             restype:='r'
1630 (13413)           end;
1631 (13419)     'pa': begin
1632 (13430)             parse(' ('); scan; express;
1633 (13447)             testtype('c');
1634 (13455)             if token=' ,' then begin
1635 (13463)               scan; express; testtype('c');
1636 (13482)               code1(53)
1637 (13484)             end;
1638 (13490)             testto(' )'); scan; restype:='p'
1639 (13503)           end
1640 (13505)     else error(1)
1641 (13514)   end {case of token}
1642 (13522) end {factor};
1643 (13522) 
1644 (13523) begin  { *** body of term *** }
1645 (13523)   factor(arsize2);
1646 (13537)   repeat
1647 (13537)     case token of
1648 (13537)       ' *': opcode:=5;
1649 (13551)       'di': opcode:=6;
1650 (13568)       'an': opcode:=15;
1651 (13585)       'sh': opcode:=18;
1652 (13602)       'sr': opcode:=19;
1653 (13619)       ' /': opcode:=$45
1654 (13634)       else opcode:=0
1655 (13643)     end {case};
1656 (13651)     if opcode>0 then begin
1657 (13658)       if (restype='r') and
1658 (13668)             (arsize2=1) then begin
1659 (13676)         scan; factor(arsize2);
1660 (13695)         if (restype<>'r') or (arsize2<>1) then
1661 (13709)           merror(14,'06');
1662 (13724)         case opcode of
1663 (13724)           5: code1($44);
1664 (13743)           $45: code1($45)
1665 (13755)           else error(17)
1666 (13766)         end{case}
1667 (13774)       end else begin
1668 (13777)         if opcode=$45 then error(9);
1669 (13795)         if arsize2<>0 then error(15);
1670 (13813)         if (restype='b') and (opcode=15)
1671 (13826)           then begin
1672 (13828)           scan; factor(arsize2);
1673 (13847)           if arsize2<>0 then error(15);
1674 (13865)           testtype('b');
1675 (13873)           code1(opcode)
1676 (13873)         end else begin
1677 (13886)           testtype('i'); scan;
1678 (13898)           factor(arsize2);
1679 (13910)           if arsize2<>0 then error(15);

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         16/11/23 page 29

1680 (13928)           testtype('i'); code1(opcode);
1681 (13946)         end
1682 (13946)       end
1683 (13946)     end;
1684 (13946)   until opcode=0;
1685 (13952) end {term};
1686 (13956) 
1687 (13957) 
1688 (13957) begin { *** body of simexp *** }
1689 (13957)   sign:=' ';
1690 (13961)   if token=' +' then begin
1691 (13973)     sign:='+'; scan
1692 (13982)   end else if token=' -' then begin
1693 (13997)     sign:='-'; scan
1694 (14006)   end;
1695 (14010)   term(arsize1);
1696 (14022)   if sign<>' ' then begin
1697 (14029)     if (restype='r')and (arsize1=1) then begin
1698 (14047)       if sign='-' then code1($4e)
1699 (14062)     end else begin
1700 (14071)       testtype('i');
1701 (14079)       if arsize1<>0 then error(15);
1702 (14097)       if sign='-' then code1(2);
1703 (14115)     end
1704 (14115)   end;
1705 (14115)   repeat
1706 (14115)     case token of
1707 (14115)       ' &': opcode:=1;
1708 (14129)       ' +': opcode:=3;
1709 (14146)       ' -': opcode:=4;
1710 (14163)       'or': opcode:=14;
1711 (14180)       'xo': opcode:=16
1712 (14195)       else opcode:=0
1713 (14204)     end {case};
1714 (14212)     if opcode>1 then begin {if 1}
1715 (14222)       if (restype='r') and (arsize1=1)
1716 (14235)         then begin {real}
1717 (14240)         scan; term(arsize1);
1718 (14256)         if (restype<>'r') or (arsize1<>1) then
1719 (14270)           error(17);
1720 (14282)         case opcode of
1721 (14282)           3:  code1($42);
1722 (14301)           4:  code1($43)
1723 (14313)           else error(17)
1724 (14324)         end {case}
1725 (14332)       end {real}
1726 (14332)       else begin {not real}
1727 (14335)         if (arsize1<>0) then error(15);
1728 (14353)         if (restype='b') and (opcode>=14)
1729 (14366)           then begin {boolean}
1730 (14371)           scan; term(arsize1);
1731 (14387)           if arsize1<>0 then error(15);
1732 (14405)           testtype('b'); code1(opcode)
1733 (14413)         end {boolean}
1734 (14423)         else begin {not boolean}
1735 (14426)           testtype('i'); scan;
1736 (14438)           term(arsize1);
1737 (14450)           if arsize1<>0 then error(15);
1738 (14468)           testtype('i'); code1(opcode);
1739 (14486)         end {not boolean}

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         16/11/23 page 30

1740 (14486)       end {not real}
1741 (14486)     end {if 1}
1742 (14486)     else if opcode=1 then begin {else 1}
1743 (14499)       sign:=restype;
1744 (14499)       scan; term(opcode);
1745 (14523)       arsize1:=arsize1+opcode+1;
1746 (14534)       testtype(sign)
1747 (14539)     end {else 1}
1748 (14549)   until opcode=0
1749 (14553) end {simexp};
1750 (14559) 
1751 (14560) 
1752 (14560) begin { *** body of mainexp *** }
1753 (14560)   roff:=0;
1754 (14564)   simexp(arsize);
1755 (14580)   if (restype='r') and (arsize=1) then
1756 (14594)     roff:=$40;
1757 (14600)   case token of
1758 (14604)     ' =': opcode:=8;
1759 (14618)     ' <': opcode:=10;
1760 (14635)     ' >': opcode:=12;
1761 (14652)     '<>': opcode:=9;
1762 (14669)     '<=': opcode:=13;
1763 (14686)     '>=': opcode:=11
1764 (14701)     else opcode:=0
1765 (14710)   end {case};
1766 (14718)   if opcode>0 then begin
1767 (14725)     if (arsize<>0) and (roff=0) then
1768 (14742)       error(15);
1769 (14754)     scan; savtype:=restype; simexp(arsize);
1770 (14778)     if ((roff=0) and (arsize<>0))
1771 (14792)       or((roff<>0) and (arsize>1)) then
1772 (14808)       error(15);
1773 (14820)     testtype(savtype); code1(opcode+roff);
1774 (14845)     arsize:=0; restype:='b'
1775 (14851)   end
1776 (14853) end {mainexp};
1777 (14857) 
1778 (14858) 
1779 (14858) {#########################################}
1780 (14858) { * assign *             ( of statement ) }
1781 (14858) {#########################################}
1782 (14858) 
1783 (14858) proc assign;
1784 (14858) 
1785 (14858) var savetype: char;
1786 (14861) 
1787 (14861)   proc assign1;
1788 (14861)   begin
1789 (14861)     testto(':='); scan; express;
1790 (14883)     if (vartype='q') and (restype='s') then begin
1791 (14898)       code1($58); restype:='q';
1792 (14911)     end;
1793 (14915)     gpval(idpnt,true,vartyp2);
1794 (14931)   end {assign1};
1795 (14931) 
1796 (14932) begin {assign}
1797 (14932)   idpnt:=findid;
1798 (14940)   if idpnt=0 then error(5);
1799 (14962)   if t0[idpnt]='pr' then begin

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         16/11/23 page 31

1800 (14974)     prcall(idpnt);scan end
1801 (14991)   else begin
1802 (14994)     getvar; savetype:=vartype;
1803 (14998)     if relad<2 then begin
1804 (15013)       assign1; testtype(vartype)
1805 (15020)     end else begin
1806 (15033)       if vartyp2='i' then error(16); {8-bit mem}
1807 (15051)       testto(':='); scan;
1808 (15064)       if relad=3 then begin
1809 (15071)         arrayexp(1,vartype); relad:=1;
1810 (15088)         code1($53);
1811 (15100)         if vartyp2='n' then begin
1812 (15107)           code1($3f);
1813 (15118)           code3($22,1);code1($12);
1814 (15136)           code3($22,t2[idpnt]+2);
1815 (15155)           code1($3);code1($3e)
1816 (15165)         end else
1817 (15171)           code4($2a,level-t1[idpnt],
1818 (15184)             2*t2[idpnt]+2);
1819 (15209)         code2($3c,1)
1820 (15213)       end else begin
1821 (15222)         arrayexp(t3[idpnt],vartype);
1822 (15240)         if vartyp2='n' then begin
1823 (15247)           code3($22,t2[idpnt]+2*t3[idpnt]);
1824 (15278)           code1($3e);
1825 (15286)         end else
1826 (15286)           code4($29,level-t1[idpnt],
1827 (15299)             2*(t2[idpnt]+t3[idpnt]));
1828 (15330)         code2($3c,t3[idpnt]);
1829 (15346)       end
1830 (15346)     end
1831 (15346)   end
1832 (15346) end {assign};
1833 (15346) 
1834 (15347) { * case1 *             ( of statement ) }
1835 (15347) 
1836 (15347) proc case1;
1837 (15347) 
1838 (15347) var i1,i2,casave: integer;
1839 (15350)     savetype: char;
1840 (15350) 
1841 (15350)   proc case2;
1842 (15350) 
1843 (15350)     proc case3;
1844 (15353)     begin
1845 (15353)       scan; code1(22); code3(34,getcon);
1846 (15384)       testtype(savetype);
1847 (15394)       code1(8); scan
1848 (15402)     end;
1849 (15406) 
1850 (15407)   begin {case2}
1851 (15407)     i1:=0; case3;
1852 (15419)     while token=' ,' do begin
1853 (15430)       push(pc); code3(38,0); i1:=succ(i1);
1854 (15454)       case3
1855 (15459)     end;
1856 (15463)     testto(' :'); savpc:=pc; code3(37,0);
1857 (15493)     for k2:=1 to i1 do fixup(pop);
1858 (15524)     push(savpc);
1859 (15548)     scan; statmnt

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         16/11/23 page 32

1860 (15552)   end {case2};
1861 (15556) 
1862 (15557) begin {case1}
1863 (15557)   scan; express; testto('of');
1864 (15576)   savetype:=restype; i2:=1; case2;
1865 (15594)   while token=' ;' do begin
1866 (15605)     casave:=pc; code3(36,0); fixup(pop);
1867 (15635)     push(casave); i2:=succ(i2); case2
1868 (15654)   end;
1869 (15658)   if token='el' then begin
1870 (15669)     casave:=pc; code3(36,0); fixup(pop);
1871 (15702)     push(casave); scan; statmnt
1872 (15716)   end;
1873 (15720)   testto('en'); for k2:=1 to i2 do fixup(pop);
1874 (15760)   code3(35,-2); scan
1875 (15785) end {case1};
1876 (15789) 
1877 (15790) { * openrw *              ( of statement ) }
1878 (15790) 
1879 (15790) proc openrw(x: integer);
1880 (15790) begin
1881 (15790)   parse(' ('); parse('id');
1882 (15813)   idpnt:=findid;
1883 (15819)   if idpnt=0 then error(5);
1884 (15841)   getvar; code1(x);
1885 (15855)   testferror;
1886 (15859)   if relad=2 then error(15);
1887 (15877)   if vartype<>'f' then merror(14,'07');
1888 (15898)   gpval(idpnt,true,vartyp2);
1889 (15914)   testto(' )'); scan
1890 (15923) end {openrw};
1891 (15927) 
1892 (15928) { * gpsec *               ( of statement )  }
1893 (15928) 
1894 (15928) proc gpsec(code);   { get/put sector }
1895 (15928) 
1896 (15928)   proc gpsec1;
1897 (15931)   begin
1898 (15931)     scan; express; testtype('i');
1899 (15952)     testto(' ,');
1900 (15961)   end;
1901 (15961) 
1902 (15962) begin {gpsec}
1903 (15962)   parse(' ('); gpsec1; gpsec1; gpsec1;
1904 (15985)   code1(code);
1905 (15995)   parse('id'); idpnt:=findid;
1906 (16010)   if idpnt=0 then error(5);
1907 (16032)   getvar; code3(34,$db); { get file error code }
1908 (16046)   if relad=2 then error(15);
1909 (16064)   code1(23); if vartype<>'i' then merror(14,'08');
1910 (16093)   gpval(idpnt,true,vartyp2);
1911 (16109)   testto(' )');
1912 (16118) end {gpsec};
1913 (16118) 
1914 (16119) 
1915 (16119) begin {body of statement }
1916 (16119)   if token=' ;' then scan;
1917 (16136)   case token of
1918 (16136)     'id': assign;
1919 (16152) 

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         16/11/23 page 33

1920 (16155)     'if': begin {if}
1921 (16163)             scan; express; testtype('b');
1922 (16179)             testto('th'); scan;  savpc:=pc;
1923 (16192)             code3(37,0); statmnt;
1924 (16214)             if token='el' then begin {else}
1925 (16225)               k2:=pc; code3(36,0);
1926 (16243)               fixup(savpc); scan; statmnt;
1927 (16261)               fixup(k2)
1928 (16261)             end else fixup(savpc)
1929 (16274)           end; {if}
1930 (16287) 
1931 (16287)     'be':  begin {begin}
1932 (16295)             repeat
1933 (16295)               scan; statmnt
1934 (16299)             until token<>(' ;');
1935 (16310)             testto('en'); scan
1936 (16323)           end; {begin}
1937 (16330) 
1938 (16330)     'rp': begin {repeat}
1939 (16338)             savpc:=pc;
1940 (16338)             repeat
1941 (16346)               scan; statmnt
1942 (16350)             until token='un';
1943 (16361)             scan; express; testtype('b');
1944 (16381)             code3(37,savpc)
1945 (16383)           end {repeat};
1946 (16393) 
1947 (16396)     're': begin {read}
1948 (16404)             parse(' ('); scan;
1949 (16417)             if token=' @' then begin
1950 (16425)               scan; express; testtype('f');
1951 (16444)               device:=true;
1952 (16446)               code1(44); testto(' ,')
1953 (16461)             end
1954 (16467)             else begin
1955 (16470)               device:=false; code1(26)
1956 (16478)             end;
1957 (16484)             repeat
1958 (16484)               begin {main loop of read}
1959 (16484)                 if token=' ,' then scan;
1960 (16499)                 testto('id'); idpnt:=findid;
1961 (16514)                 if idpnt=0 then error(5);
1962 (16536)                 getvar;
1963 (16540)                 if relad=2 then error(15);
1964 (16558)                 case vartype of
1965 (16558)                   'i':  code1(28);
1966 (16577)                   'c':  code1(27);
1967 (16595)                   'p':  begin
1968 (16605)                         code1(27); code1(27);
1969 (16621)                         code1(53)
1970 (16623)                         end
1971 (16629)                   else error(114)
1972 (16634)                 end {case};
1973 (16642)                 gpval(idpnt,true,vartyp2)
1974 (16648)               end {mainloop of read}
1975 (16658)             until token<>' ,';
1976 (16665)             testto(' )'); scan;
1977 (16682)             if device then code1(45);
1978 (16697)           end {read};
1979 (16697) 

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         16/11/23 page 34

1980 (16700)     'wr','wl':
1981 (16713)           begin {write,writeln}
1982 (16716)             if token='wl' then wln:=true
1983 (16727)             else wln:=false;
1984 (16738)             scan;
1985 (16746)             if token=' (' then begin
1986 (16754)               scan;
1987 (16761)               if token=' @' then begin
1988 (16769)                 scan; express; testtype('f');
1989 (16788)                 device:=true; code1(44);
1990 (16802)                 testto(' ,');
1991 (16811)               end else device:=false;
1992 (16816)               repeat
1993 (16820)                 if token=' ,' then scan;
1994 (16835)                 if (token=' )') and device
1995 (16843)                        and wln then
1996 (16848)                    {empty writeln except device}
1997 (16853)                    k2:=k2 {do nothing}
1998 (16856)                 else if token='st' then begin
1999 (16875)                   {string}
2000 (16878)                   code1(50);
2001 (16886)                   for k2:=1 to value[0]-1 do
2002 (16900)                     code1(ord(ident[k2])
2003 (16914)                         and 127);
2004 (16927)                   code1(ord(ident[value[0]])
2005 (16947)                       or 128);
2006 (16960)                   scan
2007 (16960)                 end else begin
2008 (16967)                   {expression}
2009 (16967)                   express;
2010 (16971)                   case restype of
2011 (16971)                     'i':  code1(30);
2012 (16990)                     'c':  code1(29);
2013 (17008)                     'q':  code1($57);
2014 (17026)                     's':  begin
2015 (17036)                             code1($58);
2016 (17044)                             code1($57);
2017 (17052)                           end;
2018 (17052)                     'p':  begin
2019 (17062)                             code1(22);
2020 (17070)                             code1(51);
2021 (17078)                             code1(29);
2022 (17086)                             code1(52);
2023 (17094)                             code1(29);
2024 (17102)                           end
2025 (17102)                     else merror(14,'09')
2026 (17110)                   end {case}
2027 (17118)                 end {expression}
2028 (17118)               until token<>' ,';
2029 (17125)               if wln then begin {writeln(..)}
2030 (17136)                 code2(32,13); code1(29);
2031 (17154)                 code2(32,10); code1(29);
2032 (17172)               end;
2033 (17172)               if device then code1(45);
2034 (17187)               testto(' )'); scan
2035 (17196)             end {if}
2036 (17200)             else if wln then begin {writeln}
2037 (17210)               code2(32,13); code1(29);
2038 (17228)               code2(32,10); code1(29);
2039 (17246)             end

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         16/11/23 page 35

2040 (17246)           end {write, writeln};
2041 (17246) 
2042 (17249)     'cs': case1; {case statement}
2043 (17264) 
2044 (17264)     'wh': begin {while}
2045 (17272)             scan; savpc:=pc; express;
2046 (17288)             testtype('b');
2047 (17296)             k2:=pc; code3(37,0);
2048 (17314)             testto('do'); scan; statmnt;
2049 (17331)             code3(36,savpc); fixup(k2)
2050 (17343)           end {while};
2051 (17353) 
2052 (17356)     'fo': begin {for}
2053 (17364)             parse('id'); assign;
2054 (17377)             if t0[idpnt]='pr' then error(1);
2055 (17400)             savtp1:=low(t0[idpnt]);
2056 (17408)             case token of
2057 (17413)               'to': k2:=1;
2058 (17427)               'dw': k2:=0
2059 (17442)               else merror(2,'to')
2060 (17456)             end {case of token};
2061 (17464)             scan; express; testtype(savtp1);
2062 (17482)             bottom1:=pc; code1(22);
2063 (17498)             gpval(idpnt,false,vartyp2);
2064 (17514)             code1(13-k2-k2);
2065 (17532)             savpc:=pc; code3(37,0);
2066 (17550)             testto('do'); scan; statmnt;
2067 (17567)             gpval(idpnt,false,vartyp2);
2068 (17583)             code1(21-k2);
2069 (17596)             gpval(idpnt,true,vartyp2);
2070 (17612)             code3(36,bottom1); fixup(savpc);
2071 (17634)             code3(35,-2);
2072 (17645)           end {for};
2073 (17645) 
2074 (17648)     'me': begin {mem}
2075 (17656)             parse(' ['); scan; express;
2076 (17673)             testtype('i');
2077 (17681)             testto(' ]'); parse(':=');
2078 (17699)             scan; express; code1(24);
2079 (17715)             testtype('i');
2080 (17723)           end {mem};
2081 (17723) 
2082 (17726)     'ca': begin {call}
2083 (17734)             parse(' ('); scan; express;
2084 (17751)             testtype('i');
2085 (17759)             testto(' )'); code1(25); scan
2086 (17776)           end {call};
2087 (17780) 
2088 (17783)     'op': openrw(47);
2089 (17799) 
2090 (17802)     'ow': openrw(48);
2091 (17818) 
2092 (17821)     'ob': openrw(80);
2093 (17837) 
2094 (17840)     'gb': begin
2095 (17848)             parse(' ('); scan; express;
2096 (17865)             testtype('f'); testto(' ,');
2097 (17882)             scan; express; testtype('i');
2098 (17898)             testto(' ,'); scan; testto('id');
2099 (17920)             idpnt:=findid;

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         16/11/23 page 36

2100 (17926)             if idpnt=0 then error(5);
2101 (17948)             getvar;
2102 (17952)             if relad<>0 then error(15);
2103 (17970)             code1($51); testferror;
2104 (17982)             gpval(idpnt,true,vartyp2);
2105 (17998)             testto(' )'); scan
2106 (18007)           end;
2107 (18011) 
2108 (18014)     'pb': begin
2109 (18022)             parse(' ('); scan; express;
2110 (18039)             testtype('f'); testto(' ,');
2111 (18056)             scan; express; testtype('i');
2112 (18072)             testto(' ,'); scan; express;
2113 (18089)             code1($52);testferror;
2114 (18101)             testto(' )');
2115 (18110)             scan
2116 (18110)           end;
2117 (18114) 
2118 (18117)     'ru': begin
2119 (18125)             code1($41); scan;
2120 (18137)           end;
2121 (18137) 
2122 (18140)     'fi': begin
2123 (18148)             code1(46); scan
2124 (18156)           end;
2125 (18160) 
2126 (18163)     'ge': gpsec(55);
2127 (18179) 
2128 (18182)     'pu': gpsec(56);
2129 (18198) 
2130 (18201)     'ex': begin {exit}
2131 (18209)             if level>0 then code1(1) else code1(0);
2132 (18238)             scan;
2133 (18242)           end;
2134 (18242) 
2135 (18245)     'cl': begin {close}
2136 (18253)             parse(' (');
2137 (18262)             repeat
2138 (18262)               scan; express; code1(49);
2139 (18278)               testtype('f');
2140 (18286)               testferror
2141 (18286)             until token<>' ,';
2142 (18297)             testto(' )'); scan;
2143 (18314)           end {close}
2144 (18314) 
2145 (18314)     else if (token<>'en') and (token<>' ;')
2146 (18332)       and (token<>'un') then begin
2147 (18343)       error(10); scan
2148 (18354)     end
2149 (18358)   end {case of statements}
2150 (18360) end;
2151 (18360) 
2152 (18361) { * findforw *          ( of block ) }
2153 (18361) 
2154 (18361) func findforw;
2155 (18361) 
2156 (18361) var i,j,sav1: integer;
2157 (18364) 
2158 (18364)   func found(start: integer):boolean;
2159 (18364)   var ii,i9: integer;

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         16/11/23 page 37

2160 (18367)   begin {compare}
2161 (18367)     ii:= 0;
2162 (18371)     repeat
2163 (18375)       ii:=succ(ii);
2164 (18379)     until (ii >= 8) or
2165 (18391)       (ident[ii] <> idtab[start+ii]);
2166 (18414)     found:=(ii >= 8);
2167 (18425)   end {compare};
2168 (18429) 
2169 (18430) 
2170 (18430) begin {findforw}
2171 (18430)   i:=succ(forwpn);
2172 (18436)   repeat
2173 (18441)     i:=prec(i)
2174 (18441)   until (i=0) or found(8*fortab[i]);
2175 (18476)   findforw:=i;
2176 (18480)   if i>0 then
2177 (18494)     if i=forwpn then forwpn:=forwpn-1
2178 (18514)     else begin
2179 (18524)       sav1:=fortab[i];
2180 (18528)       for j:=1 to forwpn-1 do
2181 (18548)       fortab[j]:=fortab[succ(j)];
2182 (18567)       fortab[forwpn]:=sav1;
2183 (18593)       findforw:=forwpn;
2184 (18601)       forwpn:=forwpn-1
2185 (18613)     end
2186 (18615) end {findforw};
2187 (18620) 
2188 (18621) 
2189 (18621) begin { *** body of block *** }
2190 (18621)   dpnt:=3; t2[bottom]:=pc;
2191 (18633)   code3(36,0);
2192 (18651)   stackpn1:=stackpnt; forwpn:=0;
2193 (18661) 
2194 (18665)   if token='co' then begin    { * const * }
2195 (18676)     scan;
2196 (18680)     repeat
2197 (18680)       deccon; testto(' ;'); scan
2198 (18693)     until token <> 'id';
2199 (18704)   end {const};
2200 (18708) 
2201 (18708)   if token='me' then memory;  { * mem * }
2202 (18723) 
2203 (18723)   if token='va' then variable;{ * var * }
2204 (18738) 
2205 (18738)   while (token='pr')or (token='fu') do begin
2206 (18758)     parlevel:=0;
2207 (18760)     case token of
2208 (18764)     'pr': begin               { * proc * }
2209 (18776)             parse('id'); npara:=0;
2210 (18787)             putsym('p','r'); cproc:=spnt;
2211 (18801)             level:=succ(level);
2212 (18813)           end;
2213 (18818)     'fu': begin               { * func * }
2214 (18829)             parse('id'); npara:=1;
2215 (18840)             putsym('f','i');
2216 (18854)             cproc:=spnt; level:=succ(level);
2217 (18866)             putsym('f','i');
2218 (18881)             t2[spnt]:=parlevel;
2219 (18885)             parlevel:=succ(parlevel);

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         16/11/23 page 38

2220 (18897)           end
2221 (18902)     end; {case of token}
2222 (18904)     if forwpn=0 then find:=0
2223 (18914)     else find:=findforw;
2224 (18929)     if find<>0 then begin
2225 (18940)       spnt:=spnt-npara-1;
2226 (18954)       cproc:=fortab[find];
2227 (18963)       fixup(t2[cproc]);
2228 (18985)     end;
2229 (18985)     scan; spnt1:=spnt;
2230 (18989)     dpnt1:=dpnt;
2231 (18997)     if token=' (' then parameter;
2232 (19020)     if t0[cproc]='fi' then function;
2233 (19039)     testto(' ;');
2234 (19048)     for i:=1 to npara do
2235 (19054)     t2[succ(spnt-i)]:=t2[succ(spnt-i)]
2236 (19086)           -parlevel;
2237 (19091)     scan;
2238 (19118)     if token='fw' then begin
2239 (19126)       if forwpn=8 then merror(13,'ov');
2240 (19150)       forwpn:=succ(forwpn);
2241 (19154)       fortab[forwpn]:=cproc;
2242 (19163)       t2[cproc]:=pc;
2243 (19175)       code3(36,0);
2244 (19193)       scan
2245 (19193)     end else block(cproc);
2246 (19210)     level:=prec(level);
2247 (19214)     dpnt:=dpnt1; spnt:=spnt1;
2248 (19227)     case high(t0[spnt]) of
2249 (19243)       'r':  t0[spnt]:=packed('t',low(t0[spnt]));
2250 (19267)       's':  t0[spnt]:=packed('u',low(t0[spnt]))
2251 (19295)     end {case};
2252 (19303)     testto(' ;'); scan
2253 (19312)   end {procedure of function};
2254 (19316) 
2255 (19319)   testto('be');     { * begin * }
2256 (19328)   if forwpn<>0 then merror(13,'ur');
2257 (19349)   scan; fixup(t2[bottom]);
2258 (19367)   t2[bottom]:=pc;
2259 (19371)   code3(35,2*dpnt);
2260 (19394)   repeat
2261 (19394)     statmnt
2262 (19394)   until token='en';
2263 (19405)   scan;
2264 (19413)   if level>0 then code1(1) else code1(0);
2265 (19442)   stackpnt:=stackpn1;
2266 (19442) end {block};
2267 (19450) 
2268 (19451) { * savtable *    ( global) }
2269 (19451) 
2270 (19451) proc savtable; { save lib table in @ofno }
2271 (19451) 
2272 (19451) var i,j,num: integer;
2273 (19454)     vtype1: char;
2274 (19454) 
2275 (19454) begin
2276 (19454)   writeln(@ofno,spnt,',',pc+2);
2277 (19483)   for i:=1 to spnt do begin {for every entry }
2278 (19502)     for j:=1 to 8 do begin
2279 (19519)       write(@ofno,idtab[8*i+j])

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         16/11/23 page 39

2280 (19539)     end;
2281 (19543)     writeln(@ofno,',',t0[i],',',t1[i],',',
2282 (19590)       t2[i],',',t3[i]);
2283 (19617)     vtype1:=high(t0[i]);
2284 (19625)     if ((vtype1='p') or (vtype1='f') or
2285 (19644)       (vtype1='g')) and (t3[i]<>0) then begin
2286 (19665)       num:=stack[t3[i]];
2287 (19676)       write(@ofno,num);
2288 (19695)       for j:=1 to num do
2289 (19701)         write(@ofno,',',stack[t3[i]+j]);
2290 (19740)       write(@ofno,cr,lf);
2291 (19766)     end {then};
2292 (19766)   end {for}
2293 (19766) end {savtable};
2294 (19780) 
2295 (19781) { * main program * }
2296 (19781) 
2297 (19781) begin {main}
2298 (19781)   init;scan;
2299 (19792)   case token of
2300 (19792)     'pg': begin
2301 (19804)             libflg:=false;
2302 (19806)             asetfile(pname,scyclus,sdrive,'Q');
2303 (19832)           end;
2304 (19832)     'li': begin
2305 (19843)             libflg:=true;
2306 (19845)             asetfile(pname,scyclus,sdrive,'T');
2307 (19871)           end
2308 (19871)     else
2309 (19871)       merror(2,'pg')
2310 (19879)   end {case}
2311 (19887)   parse('id');
2312 (19896)   i:=0;
2313 (19898)   repeat
2314 (19902)     i:=succ(i);
2315 (19906)   until (i>7) or (pname[i] = ':') or
2316 (19929)       (pname[i]<>uppercase(ident[i+1]));
2317 (19958)   if i<8 then
2318 (19968)     merror(2,packed(pname[0],pname[1]));
2319 (19993)     { name differs from filename }
2320 (19993)   parse(' ;');
2321 (20002)   if ofno<>nooutput then openw(ofno);
2322 (20018)   scan;
2323 (20022)   if (token='us') and (libflg=false) then begin
2324 (20038)     repeat
2325 (20041)       getlib; scan
2326 (20045)     until token<>' ,';
2327 (20056)     testto(' ;'); scan
2328 (20069)   end;
2329 (20073)   block(0); testto(' .');
2330 (20090)   if ofno<>nooutput then begin
2331 (20097)     write(@ofno,'E');
2332 (20108)     savebyte(pc and 255);
2333 (20121)     savebyte(pc shr 8);
2334 (20134)     close(ofno);
2335 (20140)     if libflg then begin
2336 (20144)       asetfile(pname,scyclus,sdrive,'L');
2337 (20169)       openw(ofno);
2338 (20175)       savtable;
2339 (20179)       close(ofno)

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         16/11/23 page 40

2340 (20179)     end
2341 (20185)   end else
2342 (20185)     runerr:=$87; {no loader file}
2343 (20194)   writeln;
2344 (20194)   writeln;
2345 (20200)   writeln('End compile');
2346 (20224)   writeln;
2347 (20224)   writeln('Code lenght:          ',pc);
2348 (20264)   writeln('Compiler stack size:  ',stackmax);
2349 (20298)   writeln('Ident stack size:     ',spntmax);
2350 (20332)   write('Pascal errors:        ');
2351 (20355)   if numerr>0 then write(invvid);
2352 (20368)   writeln(numerr,norvid);
2353 (20382)   if prt then begin
2354 (20386)     write(prtoff);
2355 (20392)     setemucom(9);
2356 (20400)   end;
2357 (20400)   close(fno);
2358 (20406)   { check whether second pass is not required }
2359 (20406)   if (runerr=0) and libflg then runerr:=-1;
2360 (20422) end {main}.
2361 (20427) 

End compile

Code lenght:          20426
Compiler stack size:  134
Ident stack size:     210
Pascal errors:        0

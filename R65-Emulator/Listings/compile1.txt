
R65 COMPILE 4.2: program COMPILE1         18/11/23 page 1


   1 (    4) {   ********************************
   2 (    4)     *                              *
   3 (    4)     *  R65 "Tiny" Pascal Compiler  *
   4 (    4)     *            Pass 1            *
   5 (    4)     *                              *
   6 (    4)     ********************************
   7 (    4) 
   8 (    4) First version 1978 by rricharz
   9 (    4) Original version 3.7 (20K)  01/08/82 rricharz
  10 (    4) 
  11 (    4) Recovered 2018 by rricharz (r77@bluewin.ch)
  12 (    4) Improved 2018-2023 by rricharz
  13 (    4) Version 4 with cpnt strings and exit statement
  14 (    4) 
  15 (    4) Original derived from the publication by
  16 (    4) Kin-Man Chung and Herbert Yen in
  17 (    4) Byte, Volume 3, Number 9 and Number 10, 1978
  18 (    4) 
  19 (    4) Adapted for the R65 computer system and
  20 (    4) substantially enhanced by rricharz 1978-1982
  21 (    4) 
  22 (    4) This is a Pascal derivative optimized for 8-bit
  23 (    4) microprocessors (integer type is 16 bit) with
  24 (    4) additional features (mem) to interact directly
  25 (    4) with the microprocessor hardware. Only one
  26 (    4) dimensional arrays and no records or user
  27 (    4) defined types. Floating point numbers (real)
  28 (    4) and file io to floppy disks are supported.
  29 (    4) 
  30 (    4) Precompiled libraries are merged in the loader.
  31 (    4) The table of reserved words and the library
  32 (    4) tables are loaded from the same drive as
  33 (    4) the compiler.
  34 (    4) 
  35 (    4) The output of the program is a loader file for
  36 (    4) the Pascal loader (compile2).
  37 (    4) 
  38 (    4) usage:
  39 (    4)  compile1 name[.cy[,drv]] [xxx]
  40 (    4)   where x:       l,p: no hard copy print
  41 (    4)                  i,r: index bound checking
  42 (    4)                  n: no loader file
  43 (    4)   [] means not required
  44 (    4) 
  45 (    4) The compiler uses 2 fixed memory areas to store
  46 (    4) the table of reserved words and the table of
  47 (    4) idents. The top of the Pascal stack (endstk) is
  48 (    4) adjusted accordingly. The reason for this hack
  49 (    4) is speed and convenience. A normal Pascal array
  50 (    4) of chars would store the chars as 16 bit
  51 (    4) numers and would therefore require twice the
  52 (    4) space. An array of packed chars would require
  53 (    4) more coding and slow the scanner module of the
  54 (    4) compiler down.                                }
  55 (    4) 
  56 (    4) program compile1;
  57 (    4) 
  58 (    4) uses syslib, arglib;
  59 ( 1093) 

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         18/11/23 page 2

  60 ( 1093) const version='4.2';
  61 ( 1100) 
  62 ( 1100)     table     =$97ff; {user ident table -1}
  63 ( 1100)     idtab     =$95ff; {resword table -1}
  64 ( 1100)     idlength  =64;    {max. length of ident}
  65 ( 1100)     stacksize =256;   {stack size}
  66 ( 1100)     pagelenght=60;    {no of lines per page}
  67 ( 1100)     nooutput  =@0;
  68 ( 1100)     maxfi     =3;     {max number of ins fls}
  69 ( 1100) 
  70 ( 1100)     nresw=63;   {number of res. words, max 64}
  71 ( 1100)     symbsize=256;     {id table entries}
  72 ( 1100)     reswtabpos=$c600; { up to $c7ff }
  73 ( 1100)     idtabpos=$be00;   { up to $c5ff }
  74 ( 1100) 
  75 ( 1100)     yesoutput=@255;
  76 ( 1100) 
  77 ( 1100) mem endstk  =$000e: integer;
  78 ( 1100)     reswtab =reswtabpos: array[$200] of char&;
  79 ( 1100)     idtab   =idtabpos: array[$800] of char&;
  80 ( 1100) 
  81 ( 1100) var tpos,pc,level,line,offset,dpnt,spnt,fipnt,
  82 ( 1100)     npara,i,stackpnt,stackmax,spntmax,numerr
  83 ( 1100)                               :integer;
  84 ( 1100) 
  85 ( 1100)     scyclus,sdrive,cdrive: integer;
  86 ( 1100) 
  87 ( 1100)     pname: array[15] of char;
  88 ( 1100) 
  89 ( 1100)     value: array[1] of integer;
  90 ( 1100) 
  91 ( 1100)     ch,restype,vartype:char;
  92 ( 1100) 
  93 ( 1100)     token: packed char;
  94 ( 1100) 
  95 ( 1100)     prt,libflg,icheck,ateof,lineflg,nlflg: boolean;
  96 ( 1100) 
  97 ( 1100)     fno,ofno: file;
  98 ( 1100) 
  99 ( 1100)     filstk: array[maxfi] of file;
 100 ( 1100) 
 101 ( 1100)     ident: array[idlength] of char;
 102 ( 1100)     { Only the first 8 characters are
 103 ( 1100)       used to find and differentiate ids }
 104 ( 1100) 
 105 ( 1100)     t0: array[symbsize] of packed char;
 106 ( 1100)            {type of symbol}
 107 ( 1100) 
 108 ( 1100)         {High letter:
 109 ( 1100)          a:array, c:constant, d;const parameter
 110 ( 1100)          e:constant array parameter, f:function
 111 ( 1100)          g:array function, h;8-bit memory var
 112 ( 1100)          i:8-bit array memory variable
 113 ( 1100)          m:16-bit memory variable
 114 ( 1100)          n:16-bit array memory variable
 115 ( 1100)          p:procedure
 116 ( 1100)          q:indexed cpnt
 117 ( 1100)          r,t:function result
 118 ( 1100)          s,u:array function result
 119 ( 1100)          v:variable, w:variable parameter

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         18/11/23 page 3

 120 ( 1100)          x:variable array parameter
 121 ( 1100) 
 122 ( 1100)          Low letter:
 123 ( 1100)          i:integer, c:char, p:packed char
 124 ( 1100)          q:cpoint (pointer to char)
 125 ( 1100)          r:real(array multiple of two)
 126 ( 1100)          s:const cpnt
 127 ( 1100)          f:file, b:boolean, u:undefined  }
 128 ( 1100) 
 129 ( 1100)     t1: array[symbsize] of integer;
 130 ( 1100)          {level}
 131 ( 1100)     t2: array[symbsize] of integer;
 132 ( 1100)          {val,dis,addr}
 133 ( 1100)     t3: array[symbsize] of integer;
 134 ( 1100)          {stack pointer,size of array}
 135 ( 1100) 
 136 ( 1100)     reswcod:array[nresw] of packed char;
 137 ( 1100) 
 138 ( 1100)     stack: array[stacksize] of integer;
 139 ( 1100) 
 140 ( 1100) 
 141 ( 1100) {       * savebyte *    (global)        }
 142 ( 1100) 
 143 ( 1100) proc savebyte(x: integer);
 144 ( 1100) 
 145 ( 1100) begin
 146 ( 1100)     if ofno<>nooutput then begin
 147 ( 1112)       write(@ofno,
 148 ( 1115)         chr(((x and 255) shr 4)+ord('0')));
 149 ( 1136)       write(@ofno,chr((x and 15)+ord('0')))
 150 ( 1151)     end
 151 ( 1154) end {savebyte};
 152 ( 1154) 
 153 ( 1155) {       * crlf *        (global)        }
 154 ( 1155) 
 155 ( 1155) proc newpage; forward;
 156 ( 1158) 
 157 ( 1158) proc crlf;
 158 ( 1158)   var i: integer;
 159 ( 1161) begin
 160 ( 1161)   writeln;
 161 ( 1163)   line:=succ(line);
 162 ( 1173)   if (line div pagelenght)*pagelength=line
 163 ( 1188)     then newpage;
 164 ( 1200) end {crlf};
 165 ( 1200) 
 166 ( 1201) {       error message   (global)        }
 167 ( 1201) 
 168 ( 1201) proc merror(x: integer; code: packed char);
 169 ( 1201) 
 170 ( 1201) var i: integer;
 171 ( 1204)     answer: char;
 172 ( 1204) 
 173 ( 1204) begin
 174 ( 1204)   crlf; numerr:=succ(numerr);
 175 ( 1214)   for i:=2 to tpos do write(' ');
 176 ( 1240)   write('^'); crlf;
 177 ( 1260)   write('*** (',numerr,',',pc,')   ');
 178 ( 1283)   case x of
 179 ( 1283)     01: write('Ident');

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         18/11/23 page 4

 180 ( 1300)     02: write('Ident ',code,' expected');
 181 ( 1336)     03: write('Var declaration');
 182 ( 1362)     04: write('Const expected');
 183 ( 1387)     05: write('Ident unknown');
 184 ( 1411)     06: write('Cannot be assigned');
 185 ( 1440)     07: write('Symbol table overflow');
 186 ( 1472)     08: write('Stack overflow');
 187 ( 1497)     09: write('Expression');
 188 ( 1518)     10: write('Statement');
 189 ( 1538)     11: write('Declaration');
 190 ( 1560)     12: write('Constant');
 191 ( 1579)     13: write('Forward reference: ',code);
 192 ( 1618)     14: write('Type mismatch: ',code);
 193 ( 1653)     15: write('Array size');
 194 ( 1674)     16: write('Array (8-bit)');
 195 ( 1698)     17: write('Real');
 196 ( 1713)     18: write('File table overflow');
 197 ( 1743)     19: write('Parameter')
 198 ( 1763)   end {case};
 199 ( 1765)   writeln;
 200 ( 1765)   write('Continue?');
 201 ( 1781)   read(@key,answer);
 202 ( 1789)   if answer<>'Y' then begin
 203 ( 1797)     crlf; write(prtoff); setemucom(9); close(fno);
 204 ( 1821)     if (ofno<>nooutput) and (ofno<>yesoutput)
 205 ( 1834)       then close(ofno);
 206 ( 1845)     writeln('Aborting compile1 on request');
 207 ( 1880)     abort
 208 ( 1880)   end
 209 ( 1884)   else crlf;
 210 ( 1891)   if (ofno<>nooutput) and (ofno<>yesoutput)
 211 ( 1904)     then close(ofno);
 212 ( 1915)   ofno:=nooutput;
 213 ( 1917) end {merror};
 214 ( 1921) 
 215 ( 1922) proc error(x: integer);
 216 ( 1922) 
 217 ( 1922) begin
 218 ( 1922)   merror(x,'##')
 219 ( 1934) end;
 220 ( 1940) 
 221 ( 1941) {       * push & pop *  (global) }
 222 ( 1941) 
 223 ( 1941) proc push(x: %integer);
 224 ( 1941) 
 225 ( 1941) begin
 226 ( 1941)   if stackpnt>=stacksize then error(8)
 227 ( 1959)   else stackpnt:=succ(stackpnt);
 228 ( 1972)   if stackpnt>stackmax then stackmax:=stackpnt;
 229 ( 1989)   stack[stackpnt]:=x;
 230 ( 2001) end {push};
 231 ( 2009) 
 232 ( 2010) func pop: integer;
 233 ( 2010) 
 234 ( 2010) begin
 235 ( 2010)   pop:=stack[stackpnt];
 236 ( 2019)   stackpnt:=prec(stackpnt)
 237 ( 2027) end {pop};
 238 ( 2036) 
 239 ( 2037) {       * newpage *     (global) }

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         18/11/23 page 5

 240 ( 2037) 
 241 ( 2037) proc newpage;
 242 ( 2037) 
 243 ( 2037) var i: integer;
 244 ( 2040) 
 245 ( 2040) begin
 246 ( 2040)   if (line<>0) and prt then
 247 ( 2049)     write(@printer,formfeed);
 248 ( 2064)   writeln; { Do not count this line}
 249 ( 2070)   if pname[0]<>'x' then begin
 250 ( 2079)     write('R65 COMPILE ');
 251 ( 2095)     write(version);
 252 ( 2100)     if libflg then write(': library ')
 253 ( 2118)     else write(': program ');
 254 ( 2132)     prtext16(output,pname);
 255 ( 2146)   end;
 256 ( 2146)   write(' ');
 257 ( 2148)   prtdate(output);
 258 ( 2156)   writeln(' page ',(line div pagelenght)+1);
 259 ( 2180)   writeln;
 260 ( 2180) end {newpage};
 261 ( 2186) 
 262 ( 2187) {        * code1 *      (global) }
 263 ( 2187) 
 264 ( 2187) proc code1(x: %integer);  {set one byte p-code}
 265 ( 2187) begin
 266 ( 2187)   savebyte(x); pc:=succ(pc)
 267 ( 2202) end;
 268 ( 2211) 
 269 ( 2212) {       * getchr *      (global) }
 270 ( 2212) 
 271 ( 2212) proc getchr;
 272 ( 2212) 
 273 ( 2212)   proc writenum(i: integer);
 274 ( 2215)   begin
 275 ( 2215)     if i<=999 then write(' ');
 276 ( 2233)     if i<=99 then write(' ');
 277 ( 2245)     if i<=9 then write(' ');
 278 ( 2257)     write(i);
 279 ( 2262)   end;
 280 ( 2262) 
 281 ( 2263) begin
 282 ( 2263)   if ateof then begin
 283 ( 2269)     writeln('Unexpected eof');
 284 ( 2293)     abort;
 285 ( 2297)   end else begin
 286 ( 2300)     read(@fno,ch);
 287 ( 2310)     if ch=cr then begin
 288 ( 2318)       crlf;
 289 ( 2325)       nlflg:=true;
 290 ( 2327)       writenum(line); write(' (');
 291 ( 2344)       if (pc+2)<9999 then write(' ');
 292 ( 2360)       writenum(pc+2); write(') ');
 293 ( 2376)       ch:=' ';
 294 ( 2378)     end {if}
 295 ( 2382)     else if ch=eof then begin
 296 ( 2392)       ateof:=true;
 297 ( 2397)       { we need to suppy one more char }
 298 ( 2401)       { for end. at end of file to work properly }
 299 ( 2401)       ch:=' ';

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         18/11/23 page 6

 300 ( 2403)     end {else if}
 301 ( 2407)     else write(ch);
 302 ( 2415)   end;
 303 ( 2415) end {getchr};
 304 ( 2415) 
 305 ( 2416) {       * splitconv *   (global) }
 306 ( 2416) 
 307 ( 2416) proc splitconv(a: array[1] of %integer;
 308 ( 2416)   var b:array[1] of %integer);
 309 ( 2416) 
 310 ( 2416) begin
 311 ( 2416)   b:=a;
 312 ( 2421) end;
 313 ( 2433) 
 314 ( 2434) {       * init *        (global) }
 315 ( 2434) 
 316 ( 2434) proc init;
 317 ( 2434) 
 318 ( 2434) const char96=chr(20);
 319 ( 2437) 
 320 ( 2437) var i,j,dummy: integer;
 321 ( 2437)     dch: char;
 322 ( 2437)     pch: packed char;
 323 ( 2437)     request: array[15] of char;
 324 ( 2437)     default: boolean;
 325 ( 2437) 
 326 ( 2437) begin {init}
 327 ( 2437)   writeln('R65 PASCAL COMPILER version ', version,
 328 ( 2471)     ', Pass  1');
 329 ( 2489)   ateof:=false;
 330 ( 2491)   cdrive:=fildrv; { drive of compile program }
 331 ( 2502)   fipnt:=-1;
 332 ( 2504)   endstk:=idtabpos-144;
 333 ( 2514)   pc:=2; dpnt:=0; spnt:=0; offset:=2;
 334 ( 2538)   npara:=0; level:=0;
 335 ( 2550)   stackpnt:=0; libflg:=false;
 336 ( 2562)   stackmax:=0;spntmax:=0; numerr:=0;
 337 ( 2580)   t0[0]:='vi'; t1[0]:=0; t2[0]:=0; t3[0]:=0;
 338 ( 2613)   { prepare resword table }
 339 ( 2617)   writeln('Reading list of reserved words');
 340 ( 2654)   asetfile('RESWORDS:W      ',0,cdrive,'W');
 341 ( 2686)   openr(fno);
 342 ( 2692)   for i:=0 to nresw do begin
 343 ( 2709)     read(@fno,pch,dch);
 344 ( 2726)     reswcod[i]:=pch;
 345 ( 2731)     for j:=0 to 7 do reswtab[8*i+j]:=' ';
 346 ( 2770)     j:=0;
 347 ( 2793)     while (j<8) and (dch<>cr) do begin
 348 ( 2815)       read(@fno,dch);
 349 ( 2825)       if (dch<>cr) then
 350 ( 2833)         reswtab[8*i+j]:=dch;
 351 ( 2848)       j:=succ(j)
 352 ( 2859)     end;
 353 ( 2868)     while (dch<>cr) and (dch<>eof) do
 354 ( 2885)       read(@fno,dch)
 355 ( 2894)   end;
 356 ( 2903)   close(fno);
 357 ( 2923) 
 358 ( 2923)   writeln;
 359 ( 2923) 

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         18/11/23 page 7

 360 ( 2929)   sdrive:=1; {default drive for source }
 361 ( 2935)   scyclus:=0;
 362 ( 2937)   agetstring(pname,default,scyclus,sdrive);
 363 ( 2981) 
 364 ( 2981)   agetstring(request,default,dummy,dummy);
 365 ( 3021)   icheck:=false;
 366 ( 3023)   prt:=true; ofno:=yesoutput; lineflg:=false;
 367 ( 3041)   if not default then begin
 368 ( 3050)     if request[0]<>'/' then argerror(103);
 369 ( 3073)     for i:=1 to 8 do
 370 ( 3081)       case request[i] of
 371 ( 3094)         'P': prt:=false;
 372 ( 3107)         'L': lineflg:=true;
 373 ( 3123)         'I','R': icheck:=true;
 374 ( 3146)         'N': ofno:=nooutput;
 375 ( 3162)         ' ': begin end
 376 ( 3176)         else argerror(104)
 377 ( 3181)       end; {case}
 378 ( 3203)   end;
 379 ( 3203) 
 380 ( 3203)   asetfile(pname,scyclus,sdrive,'P');
 381 ( 3225)   openr(fno);
 382 ( 3231)   scyclus:=filcyc; { may have changed }
 383 ( 3239) 
 384 ( 3239)   {save cyclus and drive for compile2}
 385 ( 3239)   arglist[8]:=scyclus;
 386 ( 3241)   arglist[9]:=sdrive;
 387 ( 3255)   numarg:=1;
 388 ( 3269) 
 389 ( 3273)   if prt then begin
 390 ( 3277)     write(prton);
 391 ( 3283)     setemucom(8);
 392 ( 3291)   end
 393 ( 3291) 
 394 ( 3291)   line:=0; newpage; crlf; line:=1;
 395 ( 3307)   write('   1 (    4) '); getchr
 396 ( 3325) end {init};
 397 ( 3329) 
 398 ( 3330) 
 399 ( 3330) { ############################# }
 400 ( 3330) {       *scan*              (global)    }
 401 ( 3330) { ############################# }
 402 ( 3330) { scan input and make tokens }
 403 ( 3330) 
 404 ( 3330) proc scan;
 405 ( 3330) 
 406 ( 3330) var count,ll,hh,i,i1,co: integer;
 407 ( 3333)     name: array[7] of char;
 408 ( 3333) 
 409 ( 3333) {       * compresw*     (of scan)       }
 410 ( 3333) 
 411 ( 3333) func compresw(index: integer);
 412 ( 3333) 
 413 ( 3333) var addr,ci,i: integer;
 414 ( 3336) 
 415 ( 3336) begin
 416 ( 3336)   addr:=8*index; i:=0;
 417 ( 3351)   repeat
 418 ( 3355)     ci:=ord(ident[i+1])-ord(reswtab[addr+i]);
 419 ( 3380)     i:=succ(i)

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         18/11/23 page 8

 420 ( 3385)   until (ci<>0) or (i>=8);
 421 ( 3408)   compresw:=ci
 422 ( 3412) end {compresw};
 423 ( 3420) 
 424 ( 3421) {       * clear *       (of scan)              }
 425 ( 3421) 
 426 ( 3421) proc clear; {clears 8 chars of identifier}
 427 ( 3421) 
 428 ( 3421) var i: integer;
 429 ( 3424) 
 430 ( 3424) begin
 431 ( 3424)   for i:=1 to 8 do ident[i]:=' '
 432 ( 3447) end;
 433 ( 3467) 
 434 ( 3468) {       * pack *        (of scan)              }
 435 ( 3468) 
 436 ( 3468) proc pack;  {packs token and ch to token }
 437 ( 3468) 
 438 ( 3468) begin
 439 ( 3468)   token:=packed(low(token),ch); getchr
 440 ( 3487) end;
 441 ( 3491) 
 442 ( 3492) {       * setval *      (of scan)              }
 443 ( 3492) 
 444 ( 3492) proc setval;
 445 ( 3492) 
 446 ( 3492) var r: real;
 447 ( 3495)     n,n1: integer;
 448 ( 3495)     ems: boolean;
 449 ( 3495) 
 450 ( 3495)   func times10(r:real):real;
 451 ( 3495)   { slightly more accurate than 10.0*r }
 452 ( 3495)   var r2,r4:real;
 453 ( 3498)   begin
 454 ( 3498)     r2:=r+r;
 455 ( 3506)     r4:=r2+r2;
 456 ( 3525)     times10:=r2+r4+r4;
 457 ( 3551)   end;
 458 ( 3564) 
 459 ( 3565) begin
 460 ( 3565)   r:=0.0;
 461 ( 3573)   repeat
 462 ( 3579)     r:=times10(r)+conv(ord(ch)-ord('0'));
 463 ( 3600)     getchr;
 464 ( 3612)   until (ch<'0') or (ch>'9');
 465 ( 3626)   if ch<>'.' then begin {numeric integer}
 466 ( 3640)     token:='nu';
 467 ( 3643)     value[0]:=trunc(r+0.5);
 468 ( 3662)   end
 469 ( 3667)   else begin {numeric real}
 470 ( 3670)     n:=0; getchr;
 471 ( 3680)     while (ch<='9') and (ch>='0') do begin
 472 ( 3698)       r:=times10(r)+conv(ord(ch)-ord('0'));
 473 ( 3719)       n:=prec(n); getchr
 474 ( 3736)     end;
 475 ( 3740)     if ch='e' then begin
 476 ( 3750)       ems:=false; getchr;
 477 ( 3763)       case ch of
 478 ( 3763)         '+': getchr;
 479 ( 3778)         '-': begin ems:=true; getchr end

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         18/11/23 page 9

 480 ( 3798)       end;
 481 ( 3800)       if (ch>'9') or (ch<'0') then error(17)
 482 ( 3820)       else begin
 483 ( 3829)         n1:=ord(ch)-ord('0');
 484 ( 3835)         getchr;
 485 ( 3844)         if (ch<='9') and (ch>='0') then begin
 486 ( 3859)           n1:=10*n1+ord(ch)-ord('0');
 487 ( 3876)           getchr
 488 ( 3881)         end;
 489 ( 3885)         if ems then n:=n-n1 else n:=n+n1
 490 ( 3912)       end
 491 ( 3912)     end;
 492 ( 3921)     while n>0 do begin
 493 ( 3931)       n:=prec(n);
 494 ( 3935)       r:=times10(r);
 495 ( 3954)     end;
 496 ( 3960)     while n<0 do begin
 497 ( 3973)       n:=succ(n); r:=0.1*r;
 498 ( 3988)     end;
 499 ( 4001)     splitconv(r,value);
 500 ( 4028)     token:='ru'
 501 ( 4028)   end
 502 ( 4031) end {setval};
 503 ( 4035) 
 504 ( 4036) {       * setid *       (of scan)              }
 505 ( 4036) 
 506 ( 4036) proc setid; {sets one char to ident}
 507 ( 4036) 
 508 ( 4036) begin
 509 ( 4036)   if count<=idlength then begin
 510 ( 4048)     ident[count]:=ch; count:=succ(count)
 511 ( 4063)   end;
 512 ( 4072)   getchr;
 513 ( 4076) end {setid};
 514 ( 4076) 
 515 ( 4077) begin { ***** body of scan ***** }
 516 ( 4077)   count:=1; while ch=' ' do getchr;
 517 ( 4099)   tpos:=curpos;
 518 ( 4105) 
 519 ( 4109)   { delayed because of token lookahead }
 520 ( 4109)   if nlflg then begin
 521 ( 4113)     if lineflg and (pc>2) then begin
 522 ( 4128)       code1($59);
 523 ( 4139)       code1((line) and 255);
 524 ( 4152)       code1((line) shr 8);
 525 ( 4165)     end;
 526 ( 4165)     nlflg:=false;
 527 ( 4167)   end;
 528 ( 4171) 
 529 ( 4171)   if (ch<'a') or (ch>'z') then begin {main if}
 530 ( 4189)     if (ch<'0') or (ch>'9') then begin {symb}
 531 ( 4207)       token:=packed(' ',ch); getchr;
 532 ( 4222)       case low(token) of
 533 ( 4226)         '<': if (ch='=') or (ch='>') then pack;
 534 ( 4256)         '>',':': if (ch='=') then pack;
 535 ( 4287)         '{': begin repeat
 536 ( 4297)                getchr until ch='}'; getchr; scan
 537 ( 4315)              end;
 538 ( 4319)         '$': begin {hex constant}
 539 ( 4329)                token:='nu'; value[0]:=0;

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         18/11/23 page 10

 540 ( 4340)                while ((ch>='0')and(ch<='9'))
 541 ( 4358)                      or((ch>='a')and(ch<='f'))
 542 ( 4373)                      do begin
 543 ( 4378)                  if ch>'9' then
 544 ( 4384)                    value[0]:=(value[0] shl 4)
 545 ( 4398)                      +ord(ch)-ord('a')+10
 546 ( 4407)                  else
 547 ( 4409)                    value[0]:=(value[0] shl 4)
 548 ( 4427)                      +ord(ch)-ord('0');
 549 ( 4435)                  getchr
 550 ( 4440)                end {do}
 551 ( 4444)              end; {hex constant}
 552 ( 4450)         chr(39): begin {string}
 553 ( 4457)                token:='st';
 554 ( 4460)                repeat setid until ch=chr(39);
 555 ( 4474)                value[0]:=prec(count); getchr
 556 ( 4490)               end
 557 ( 4494)       end {case of token}
 558 ( 4496)     end {special symbols}
 559 ( 4496)     else setval {numeric value}
 560 ( 4503)   end {main if}
 561 ( 4503)   else begin {ident}
 562 ( 4506)     clear;
 563 ( 4510)     repeat
 564 ( 4510)       setid
 565 ( 4510)       until (ch<'0') or (ch>'z') or
 566 ( 4528)         ((ch>'9') and (ch<'A')) or
 567 ( 4544)         ((ch>'Z') and (ch<'a'));
 568 ( 4560)     ll:=0; hh:=nresw; {look up in resword table}
 569 ( 4576)     repeat
 570 ( 4576)       i:=(ll+hh) shr 1; co:=compresw(i);
 571 ( 4604)       if (co<0) then hh:=prec(i)
 572 ( 4618)       else ll:=succ(i);
 573 ( 4634)       until (co=0) or (ll>hh);
 574 ( 4655)     if (co=0) then
 575 ( 4666)       token:=reswcod[i] {reserved word found}
 576 ( 4673)     else token:='id' {ident}
 577 ( 4687)   end {odent}
 578 ( 4691) end {scan};
 579 ( 4691) 
 580 ( 4692) { * testto/parse * }
 581 ( 4692) 
 582 ( 4692) { parce source for specific token; else error }
 583 ( 4692) 
 584 ( 4692) proc testto(x: packed char); { current token }
 585 ( 4692) begin
 586 ( 4692)   if token<>x then merror(2,x)
 587 ( 4711) end;
 588 ( 4721) 
 589 ( 4722) proc parse(x: packed char); { next token }
 590 ( 4722) begin
 591 ( 4722)   scan; testto(x);
 592 ( 4741) end;
 593 ( 4741) 
 594 ( 4742) { * getlib * }
 595 ( 4742) 
 596 ( 4742) proc getlib;  { read library data }
 597 ( 4742) 
 598 ( 4742) var i,j,nent,addr,size,num,x,base: integer;
 599 ( 4745)     libfil: file;

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         18/11/23 page 11

 600 ( 4745)     ch,ltyp2,dummy: char;
 601 ( 4745)     name: array[7] of char;
 602 ( 4745) 
 603 ( 4745) begin
 604 ( 4745)   scan; if token=' ,' then scan;
 605 ( 4766)   testto('id');
 606 ( 4775)   base:=pc-2;
 607 ( 4781)   if (ofno<>nooutput) then write(@ofno,'L');
 608 ( 4804)   for i:=0 to 7 do begin
 609 ( 4821)     name[i]:=ident[succ(i)];
 610 ( 4830)     if ofno<>nooutput then
 611 ( 4844)       write(@ofno,ident[succ(i)])
 612 ( 4858)   end;
 613 ( 4864)   write(prtoff);
 614 ( 4881)   asetfile(name&'        ',0,cdrive,'L');
 615 ( 4911)   openr(libfil);  { get table file }
 616 ( 4917)   read(@libfil,nent,size);
 617 ( 4932)   {including cr,lf}
 618 ( 4933)   for i:=succ(spnt) to spnt+nent do begin
 619 ( 4960)     if spnt>symbsize then error(7);
 620 ( 4979)     spnt:=succ(spnt); addr:=8*i+1;
 621 ( 4997)     for j:=0 to 7 do begin
 622 ( 5019)       read(@libfil,ch);
 623 ( 5029)       idtab[addr+j]:=ch
 624 ( 5039)     end;
 625 ( 5050)     read(@libfil,ch);
 626 ( 5074)     read(@libfil,t0[i],dummy,t1[i],t2[i],t3[i]);
 627 ( 5123)     t1[i]:=t1[i]+level;
 628 ( 5136)     ltyp2:=high(t0[i]);
 629 ( 5153)     if (ltyp2='p')or(ltyp2='f')
 630 ( 5171)       or(ltyp2='g') then begin
 631 ( 5181)       t2[i]:=t2[i]+base;
 632 ( 5196)       if t3[i]<>0 then begin {stack data}
 633 ( 5219)         read(@libfil,num);
 634 ( 5229)         push(num); t3[i]:=stackpnt;
 635 ( 5244)         for j:=1 to num do begin
 636 ( 5271)           read(@libfil,x);
 637 ( 5281)           push(x);
 638 ( 5292)         end {for j};
 639 ( 5292)       end {stack data}
 640 ( 5306)     end {if ltyp2}
 641 ( 5306)   end {for i}
 642 ( 5306)   level:=succ(level); pc:=pc+size; offset:=pc;
 643 ( 5342)   close(libfil);
 644 ( 5356)   if spnt>spntmax then spntmax:=spnt;
 645 ( 5368)   if stackpnt>stackmax then stackmax:=stackpnt;
 646 ( 5388)   if prt then write(prton);
 647 ( 5406) end {getlib};
 648 ( 5406) 
 649 ( 5407) 
 650 ( 5407) { #################################### }
 651 ( 5407) {       * block * (global): handle one block }
 652 ( 5407) { #################################### }
 653 ( 5407) 
 654 ( 5407) 
 655 ( 5407) proc block(bottom: integer);
 656 ( 5407) 
 657 ( 5407) var l,f9,i,n,stackpn1,forwpn,find,cproc,
 658 ( 5410)     spnt1,dpnt1,parlevel: integer;
 659 ( 5410)     fortab: array[8] of integer;

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         18/11/23 page 12

 660 ( 5410) 
 661 ( 5410) { * find ident *    (of block) }
 662 ( 5410) { this is a fast version for compiler speed }
 663 ( 5410) 
 664 ( 5410) func findid; {search in table for id }
 665 ( 5410) 
 666 ( 5410) var k,i: integer;
 667 ( 5413)     id1: char;
 668 ( 5413) 
 669 ( 5413) begin
 670 ( 5413) 
 671 ( 5413)   i:=1; k:=8*spnt+9; id1:=ident[1];
 672 ( 5437) 
 673 ( 5445)   repeat
 674 ( 5445)     k:=k-8;
 675 ( 5451)     while (idtab[k]<>id1) and (k>0) do k:=k-8;
 676 ( 5487)     if k>0 then begin
 677 ( 5502)        i:=1;
 678 ( 5507)        repeat i:=succ(i)
 679 ( 5511)          until (i>8) or
 680 ( 5527)              (idtab[k+i-1]<>ident[i]);
 681 ( 5553)     end;
 682 ( 5557)     until (i>8) or (k<=0);
 683 ( 5571)   if k<=0 then begin
 684 ( 5582)     findid:=0;
 685 ( 5587)   end
 686 ( 5591)   else
 687 ( 5591)     findid:=(k-1) shr 3;
 688 ( 5603) end;
 689 ( 5608) 
 690 ( 5609) { * code2 *    (of block) }
 691 ( 5609) 
 692 ( 5609) proc code2(x,y: integer);
 693 ( 5609) begin
 694 ( 5609)   code1(x); code1(y);
 695 ( 5634) end;
 696 ( 5634) 
 697 ( 5635) { * code3 *    (of block) }
 698 ( 5635) 
 699 ( 5635) proc code3(x: integer; y1: %integer);
 700 ( 5635) 
 701 ( 5635) var y: integer;
 702 ( 5638) 
 703 ( 5638) begin {code3}
 704 ( 5638)   y:=y1;
 705 ( 5640)   if (x=34) and (y>=0) and (y<256) then
 706 ( 5671)     code2(32,y)
 707 ( 5677)   else begin
 708 ( 5690)     if (x=35) and (y>-128) and (y<=127) then
 709 ( 5713)       begin
 710 ( 5714)         if (y<0) then y:=y+256;
 711 ( 5734)         code2(33,y);
 712 ( 5751)       end
 713 ( 5751)     else begin
 714 ( 5754)       if (x>=36) and (x<=38) then y:=y-pc-1;
 715 ( 5783)       code1(x); code1(y and 255);
 716 ( 5811)       code1(y shr 8);
 717 ( 5824)     end
 718 ( 5824)   end
 719 ( 5824) end {code3};

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         18/11/23 page 13

 720 ( 5824) 
 721 ( 5825) { * testtype *      (of block) }
 722 ( 5825) 
 723 ( 5825) proc testtype(ttype: char);
 724 ( 5825) 
 725 ( 5825) begin
 726 ( 5825)   if restype<>ttype then
 727 ( 5834)     if (restype<>'u') and (ttype<>'u') then
 728 ( 5856)       merror(14,packed(ttype,restype));
 729 ( 5877) end;
 730 ( 5877) 
 731 ( 5878) { * putsym *   (of block) }
 732 ( 5878) 
 733 ( 5878) proc putsym(ltyp1,ltyp2: char);
 734 ( 5878) 
 735 ( 5878) var i,addr: integer;
 736 ( 5881) begin
 737 ( 5881)   if spnt>symbsize then error(7)
 738 ( 5896)   else spnt:=succ(spnt);
 739 ( 5909)   if spnt>spntmax then spntmax:=spnt;
 740 ( 5926)   t0[spnt]:=packed(ltyp1,ltyp2);
 741 ( 5947)   t3[spnt]:=0;
 742 ( 5957)   addr:=8*spnt;
 743 ( 5963)   for i:=1 to 8 do idtab[addr+i]:=ident[i];
 744 ( 6002)   if ltyp1='v' then begin
 745 ( 6034)     t2[spnt]:=dpnt; dpnt:=succ(dpnt);
 746 ( 6053)   end;
 747 ( 6058)   t1[spnt]:=level
 748 ( 6062) end {putsym};
 749 ( 6070) 
 750 ( 6071) { * checkindex *  (of block) }
 751 ( 6071) 
 752 ( 6071) proc checkindex(lowlim,highlim: integer);
 753 ( 6071) begin
 754 ( 6071)   if icheck then begin
 755 ( 6080)     code3($40,lowlim-1);
 756 ( 6098)     code2(highlim and 255, highlim shr 8)
 757 ( 6111)   end
 758 ( 6118) end;
 759 ( 6118) 
 760 ( 6119) { * getcon *      (of block) }
 761 ( 6119) 
 762 ( 6119) func getcon;
 763 ( 6119) 
 764 ( 6119) var idpnt,val,ii: integer;
 765 ( 6122)     rval: real;
 766 ( 6122)     sign: char;
 767 ( 6122) begin
 768 ( 6122)   restype:='i';
 769 ( 6126)   if token=' -' then begin
 770 ( 6138)     sign:='-'; scan
 771 ( 6147)   end else begin
 772 ( 6154)     sign:='+'; if token=' +' then scan
 773 ( 6168)   end;
 774 ( 6175)   case token of
 775 ( 6175)     'nu': val:=value[0];
 776 ( 6189)     'ru': begin val:=value[0];
 777 ( 6210)             restype:='r' end;
 778 ( 6224)     'st': if value[0]=1 then begin
 779 ( 6244)             restype:='c';

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         18/11/23 page 14

 780 ( 6249)             val:=ord(ident[1])
 781 ( 6255)           end else if value[0]=2 then begin
 782 ( 6275)             val:=(ord(ident[1]) shl 8) +
 783 ( 6287)               ord(ident[2]);
 784 ( 6293)             restype:='p';
 785 ( 6300)           end else if value[0]>2 then begin
 786 ( 6316)             val:=pc;
 787 ( 6319)             for ii:=1 to value[0] do
 788 ( 6335)                         code1(ord(ident[ii]));
 789 ( 6362)             code1(0); value[0]:=0; restype:='s';
 790 ( 6394)           end else error(15);
 791 ( 6409)     'cr': begin parse(' ('); scan; val:=getcon;
 792 ( 6439)             if (val>127) or (val<0) then
 793 ( 6457)               error(12);
 794 ( 6469)             testtype('i');
 795 ( 6477)             restype:='c'; parse(' )');
 796 ( 6492)           end;
 797 ( 6492)     'tr': begin val:=1; restype:='b' end;
 798 ( 6515)     'fa': begin val:=0; restype:='b' end;
 799 ( 6538)     'cp': begin
 800 ( 6549)             scan; val:=getcon;
 801 ( 6559)             testtype('i'); restype:='q';
 802 ( 6573)           end;
 803 ( 6577)     ' @': begin scan; val:=getcon;
 804 ( 6598)             testtype('i'); restype:='f'
 805 ( 6610)           end
 806 ( 6612)     else begin
 807 ( 6619)       testto('id'); idpnt:=findid;
 808 ( 6634)       if (idpnt>0) and (high(t0[idpnt])='c')
 809 ( 6656)       then begin
 810 ( 6658)         val:=t2[idpnt];
 811 ( 6665)         restype:=low(t0[idpnt]);
 812 ( 6681)         if restype='r' then
 813 ( 6692)           value[1]:=t3[idpnt];
 814 ( 6702)       end
 815 ( 6710)       else begin error(4); val:=0;
 816 ( 6723)         restype:='i'
 817 ( 6727)       end
 818 ( 6729)     end
 819 ( 6733)   end {case};
 820 ( 6735)   if sign='-' then
 821 ( 6741)     case restype of
 822 ( 6745)       'i': getcon:=-val;
 823 ( 6756)       'r': begin value[0]:=val;
 824 ( 6777)              splitconv(value,rval);
 825 ( 6809)              splitconv(-rval,value);
 826 ( 6834)              getcon:=value[0]
 827 ( 6836)            end
 828 ( 6836)       else error(12)
 829 ( 6849)     end {case}
 830 ( 6857)   else getcon:=val;
 831 ( 6860) end {getcon};
 832 ( 6868) 
 833 ( 6869) { * deccon *         ( of block ) }
 834 ( 6869) 
 835 ( 6869) proc deccon;    { declare constant }
 836 ( 6869) begin
 837 ( 6869)   if token=' ;' then scan;
 838 ( 6889)   testto('id');
 839 ( 6898)   putsym('c','i');

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         18/11/23 page 15

 840 ( 6908)   parse(' ='); scan;
 841 ( 6921)   t2[spnt]:=getcon;
 842 ( 6931)   if (restype='r') then t3[spnt]:=value[1];
 843 ( 6951)   if restype<>'i' then
 844 ( 6965)     t0[spnt]:=packed('c',restype);
 845 ( 6980)   scan
 846 ( 6984) end {deccon};
 847 ( 6988) 
 848 ( 6989) { * decvar *          ( of block ) }
 849 ( 6989) 
 850 ( 6989) proc decvar(typ1,typ2: char);
 851 ( 6989) begin
 852 ( 6989)   if token=' ,' then scan;
 853 ( 7009)   testto('id');
 854 ( 7018)   putsym(typ1,typ2);
 855 ( 7032)   scan;
 856 ( 7036) end {decvar};
 857 ( 7036) 
 858 ( 7037) { * gettype *         ( of block ) }
 859 ( 7037) 
 860 ( 7037) proc gettype(var typ2: char;
 861 ( 7037)   var aflag,uflag: boolean; var n: integer);
 862 ( 7037) 
 863 ( 7037) begin
 864 ( 7037)   aflag:=false; n:=0; uflag:=false;
 865 ( 7056)   scan;
 866 ( 7064)   if token='ar' then begin
 867 ( 7072)     parse(' ['); scan;
 868 ( 7088)     n:=getcon; testtype('i');
 869 ( 7106)     if (n<1) then begin error(15); n:=1 end;
 870 ( 7130)     parse(' ]'); parse('of'); scan;
 871 ( 7152)     aflag:=true
 872 ( 7152)   end;
 873 ( 7158)   if token=' %' then begin
 874 ( 7166)     scan; uflag:=true
 875 ( 7173)   end;
 876 ( 7179)   case token of
 877 ( 7179)     'in': typ2:='i';
 878 ( 7193)     'ch': typ2:='c';
 879 ( 7210)     'pa': begin parse ('ch'); typ2:='p' end;
 880 ( 7240)     'bo': typ2:='b';
 881 ( 7253)     'rl': begin typ2:='r'; aflag:=true;
 882 ( 7276)             n:=prec(2*succ(n)) end;
 883 ( 7293)     'cp': typ2:='q';
 884 ( 7306)     'fl': typ2:='f'
 885 ( 7321)     else begin error(11); typ2:='i';end
 886 ( 7344)   end {case}
 887 ( 7346) end {gettype};
 888 ( 7346) 
 889 ( 7347) { * variable *        ( of block) }
 890 ( 7347) 
 891 ( 7347) proc variable;  { variable declarations }
 892 ( 7347) 
 893 ( 7347) var typ1,typ2: char;
 894 ( 7350)     i,l: integer;
 895 ( 7350)     aflag,uflag: boolean;
 896 ( 7350) 
 897 ( 7350) begin
 898 ( 7350)   scan;
 899 ( 7356)   repeat {main loop}

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         18/11/23 page 16

 900 ( 7356)     l:=0;
 901 ( 7358)     repeat decvar('v','i'); l:=succ(l);
 902 ( 7376)     until token<> ' ,';
 903 ( 7388)     testto(' :');
 904 ( 7401)     gettype(typ2,aflag,uflag,n);
 905 ( 7437)     if uflag then error(11);
 906 ( 7452)     if aflag then typ1:='a' else typ1:='v';
 907 ( 7470)     if typ1='a' then begin {array}
 908 ( 7484)        dpnt:=dpnt-l; {variable has been assumed}
 909 ( 7497)        for i:=succ(spnt-l) to spnt do begin
 910 ( 7524)          t2[i]:=dpnt; t3[i]:=n;
 911 ( 7540)          dpnt:=succ(dpnt+n);
 912 ( 7557)       end
 913 ( 7562)     end {array};
 914 ( 7576)     for i:=succ(spnt-l) to spnt do
 915 ( 7590)       t0[i]:=packed(typ1,typ2);
 916 ( 7616)     parse(' ;');scan
 917 ( 7643)   until token<>'id' {end main loop}
 918 ( 7654) end {variable};
 919 ( 7658) 
 920 ( 7659) { * fixup *           ( of block ) }
 921 ( 7659) 
 922 ( 7659) proc fixup(x: integer);
 923 ( 7659) begin
 924 ( 7659)   if ofno<>nooutput then begin
 925 ( 7671)     write(@ofno,'F');
 926 ( 7682)     savebyte(succ(x-offset) and 255);
 927 ( 7701)     savebyte(succ(x-offset) shr 8);
 928 ( 7720)     savebyte((pc-x-1) and 255);
 929 ( 7741)     savebyte((pc-x-1) shr 8);
 930 ( 7762)   end;
 931 ( 7762) end;
 932 ( 7762) 
 933 ( 7763) { * function *        ( of block ) }
 934 ( 7763) 
 935 ( 7763) proc function;
 936 ( 7763) 
 937 ( 7763) var n: integer;
 938 ( 7766)     typ1,typ2: char;
 939 ( 7766)     aflag,uflag: boolean;
 940 ( 7766) begin
 941 ( 7766)   if token<>' :' then begin
 942 ( 7776)     aflag:=false; uflag:=false; typ2:='i' end
 943 ( 7793)   else begin
 944 ( 7800)     gettype(typ2,aflag,uflag,n);
 945 ( 7836)     scan
 946 ( 7836)   end;
 947 ( 7840)   if aflag then begin
 948 ( 7844)     typ1:='s'; t3[succ(cproc)]:=n;
 949 ( 7858)     t2[succ(cproc)]:=t2[succ(cproc)]-n
 950 ( 7880)   end
 951 ( 7880)   else typ1:='r';
 952 ( 7894)   t0[succ(cproc)]:=packed(typ1,typ2);
 953 ( 7912)   if uflag then typ2:='u';
 954 ( 7925)   if aflag then typ1:='g'
 955 ( 7936)   else typ1:='f';
 956 ( 7947)   t0[cproc]:=packed(typ1,typ2);
 957 ( 7964) end {function};
 958 ( 7968) 
 959 ( 7969) { * parameter *       ( of block ) }

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         18/11/23 page 17

 960 ( 7969) 
 961 ( 7969) proc parameter;
 962 ( 7969) 
 963 ( 7969) var counter1,counter2,i,n,bs: integer;
 964 ( 7972)     aflag,uflag: boolean;
 965 ( 7972)     vtype1,vtype2: char;
 966 ( 7972)     vtype: packed char;
 967 ( 7972) 
 968 ( 7972) begin
 969 ( 7972)   push(0); { dummy size, fixed later }
 970 ( 7982)   if find=0 then t3[spnt-npara]:=stackpnt
 971 ( 8001)   else bs:=stackpnt;
 972 ( 8012)   counter1:=0
 973 ( 8020)   repeat {main loop}
 974 ( 8026)     counter2:=0;
 975 ( 8028)     vtype1:='d'; vtype2:='i';
 976 ( 8040)     scan;
 977 ( 8048)     if token='co' then scan
 978 ( 8056)     else if token='va' then begin
 979 ( 8074)       scan; vtype1:='w' end; {variable param}
 980 ( 8087)     end;
 981 ( 8087)     repeat {inner loop}
 982 ( 8087)       decvar(vtype1,vtype2);
 983 ( 8101)       t2[spnt]:=parlevel;
 984 ( 8105)       parlevel:=succ(parlevel);
 985 ( 8117)       npara:=succ(npara);
 986 ( 8126)       counter2:=succ(counter2);
 987 ( 8135)       until token<>' ,';
 988 ( 8147)     uflag:=false;aflag:=false; n:=0;
 989 ( 8165)     if token<>' :' then
 990 ( 8176)       vtype2:='i' {assume integer }
 991 ( 8182)     else begin
 992 ( 8189)       gettype(vtype2,aflag,uflag,n);
 993 ( 8225)       if n>63 then error(15);
 994 ( 8243)       scan
 995 ( 8243)     end;
 996 ( 8247)     if aflag then begin
 997 ( 8251)       vtype1:=succ(vtype1);
 998 ( 8258)       parlevel:=parlevel-counter2;
 999 ( 8267)     end;
1000 ( 8276)     vtype:=packed(vtype1,vtype2);
1001 ( 8285)     for i:=1 to counter2 do begin
1002 ( 8308)       if uflag then push(packed(vtype1,'u'))
1003 ( 8322)       else push(vtype);
1004 ( 8341)       if aflag then begin
1005 ( 8345)         push(n); t3[spnt-counter2+i]:=n;
1006 ( 8372)         t2[spnt-counter2+i]:=parlevel;
1007 ( 8394)         parlevel:=succ(parlevel)+n;
1008 ( 8407)       end {then};
1009 ( 8416)       t0[spnt-counter2+i]:=vtype;
1010 ( 8430)     end {for};
1011 ( 8438)     if aflag then counter2:=2*counter2;
1012 ( 8461)     counter1:=counter1+counter2;
1013 ( 8474)     until token<>' ;'; {outer loop}
1014 ( 8494)   testto(' )'); scan;
1015 ( 8507)   if find=0 then
1016 ( 8513)     stack[t3[spnt-npara]]:=counter1
1017 ( 8530)   else begin {information is allready there}
1018 ( 8541)     stack[bs]:=counter1;
1019 ( 8545)     n:=t3[fortab[find]]; {existing stack data}

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         18/11/23 page 18

1020 ( 8569)     for i:=0 to stackpnt-bs do
1021 ( 8579)       if stack[bs+1]<>stack[n+1]
1022 ( 8610)         then merror(13,'pa'); {parameter wrong}
1023 ( 8644)     stackpnt:=prec(bs) {clear the new info}
1024 ( 8648)   end  {else}
1025 ( 8653) end {parameter};
1026 ( 8653) 
1027 ( 8654) { * memory *              ( of block) }
1028 ( 8654) 
1029 ( 8654) proc memory;
1030 ( 8654) 
1031 ( 8654) var typ1,typ2:char;
1032 ( 8657)     i,l,n: integer;
1033 ( 8657)     aflag,uflag: boolean;
1034 ( 8657) 
1035 ( 8657) begin
1036 ( 8657)   scan;
1037 ( 8663)   repeat {main loop}
1038 ( 8663)     l:=0;
1039 ( 8665)     repeat
1040 ( 8669)       decvar('m','i');
1041 ( 8679)       l:=succ(l); testto(' ='); scan;
1042 ( 8701)       n:=getcon; testtype('i');
1043 ( 8719)       scan; t2[spnt]:=n;
1044 ( 8727)     until token<>' ,';
1045 ( 8742)     testto(' :');
1046 ( 8755)     gettype(typ2,aflag,uflag,n);
1047 ( 8791)     if uflag then error(11);
1048 ( 8806)     scan;
1049 ( 8810)     if token=' &' then begin {8-bit}
1050 ( 8821)       typ1:='h'; scan
1051 ( 8827)     end
1052 ( 8831)     else typ1:='m';
1053 ( 8836)     if aflag then typ1:=succ(typ1);
1054 ( 8851)     for i:=succ(spnt-l) to spnt do begin
1055 ( 8883)       t0[i]:=packed(typ1,typ2);
1056 ( 8896)       t3[i]:=n;
1057 ( 8904)     end;
1058 ( 8912)     testto(' ;'); scan;
1059 ( 8939)   until token<>'id';
1060 ( 8946) end {memory};
1061 ( 8950) 
1062 ( 8951) 
1063 ( 8951) {######################################}
1064 ( 8951) { * statement *           ( of block ) }
1065 ( 8951) {######################################}
1066 ( 8951) 
1067 ( 8951) proc statmnt;
1068 ( 8951) 
1069 ( 8951) var idpnt,relad,k2,savpc,bottom1: integer;
1070 ( 8954)     device,wln: boolean;
1071 ( 8954)     savtp1,vartyp2: char;
1072 ( 8954)     wl: boolean;
1073 ( 8954) 
1074 ( 8954) { * code4 *               ( of statement ) }
1075 ( 8954) 
1076 ( 8954) proc code4(x,y1,z1: integer); {set 4-byte code}
1077 ( 8954) 
1078 ( 8954) var y,z: integer;
1079 ( 8957) 

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         18/11/23 page 19

1080 ( 8957) begin
1081 ( 8957)   y:=y1; z:=z1;
1082 ( 8967)   if y<0 then y:=y+256;
1083 ( 8992)   if x=43 then z:=z-pc-2;
1084 ( 9018)   code1(x);code1(y);code1(z and 255);
1085 ( 9056)   code1(z shr 8)
1086 ( 9062) end {code4};
1087 ( 9069) 
1088 ( 9070) { * testferror *         ( of statement) ) }
1089 ( 9070) 
1090 ( 9070) proc testferror;
1091 ( 9070) begin
1092 ( 9070)   code1($4f);
1093 ( 9083) end;
1094 ( 9083) 
1095 ( 9084) { * gpval *              ( of statement ) }
1096 ( 9084) 
1097 ( 9084) proc gpval(idpnt: integer;
1098 ( 9084)   dir: boolean; typ: char);
1099 ( 9084) 
1100 ( 9084) var d: integer;
1101 ( 9087) 
1102 ( 9087) begin {gpval}
1103 ( 9087)   if dir then d:=1 else d:=0;
1104 ( 9107)   case typ of
1105 ( 9111)   'h':  begin code3($22,t2[idpnt]);
1106 ( 9138)           if dir then code1($3f);
1107 ( 9153)           code1($17+d) end;
1108 ( 9166)   'm':  begin code3($22,t2[idpnt]);
1109 ( 9192)           code1($3d+d) end;
1110 ( 9205)   'i':  begin
1111 ( 9215)           if dir then code1($3f);
1112 ( 9230)           code3($22,t2[idpnt]);
1113 ( 9246)           code1(3);
1114 ( 9254)           if dir then code1($3f);
1115 ( 9269)           code1($17+d) end;
1116 ( 9282)   'n':  begin if dir then code1($3f);
1117 ( 9307)           code3($22,1); code1($12);
1118 ( 9325)           code3($22,t2[idpnt]);
1119 ( 9341)           code1(3); code1($3d+d) end
1120 ( 9362)   else begin
1121 ( 9365)     if typ='q' then begin
1122 ( 9372)       code4($55,level-t1[idpnt],2*t2[idpnt]);
1123 ( 9407)     end else
1124 ( 9407)       code4($27+2*d+relad,level-t1[idpnt],
1125 ( 9433)         2*t2[idpnt]);
1126 ( 9455)     end
1127 ( 9455)   end {case}
1128 ( 9457) end;
1129 ( 9457) 
1130 ( 9458) { FORWARD decl. of mainexp (of statement) }
1131 ( 9458) 
1132 ( 9458) proc mainexp(reqtype: char;
1133 ( 9458)   var arsize: integer); forward;
1134 ( 9461) 
1135 ( 9461) { * express *           ( of statement ) }
1136 ( 9461) 
1137 ( 9461) proc express; {requests a normal 16-bit result }
1138 ( 9461) 
1139 ( 9461) var resultsize: integer;

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         18/11/23 page 20

1140 ( 9464) 
1141 ( 9464) begin {express}
1142 ( 9464)   mainexp('n',resultsize);
1143 ( 9482)   if resultsize<>0 then error(15)
1144 ( 9494) end {express};
1145 ( 9500) 
1146 ( 9501) { * arrayexp *          ( of mainexp) }
1147 ( 9501) 
1148 ( 9501) proc arrayexp(size: integer; eltype: char);
1149 ( 9501) 
1150 ( 9501) var resultsize: integer;
1151 ( 9504) 
1152 ( 9504) begin
1153 ( 9504)   mainexp(eltype,resultsize);
1154 ( 9524)   if resultsize<>size then error(15);
1155 ( 9544)   testtype(eltype);
1156 ( 9554) end;
1157 ( 9554) 
1158 ( 9555) { * getvar *            ( of statement ) }
1159 ( 9555) 
1160 ( 9555) proc getvar;
1161 ( 9555) begin
1162 ( 9555)   vartyp2:=high(t0[idpnt]);
1163 ( 9568)   vartype:=low(t0[idpnt]);
1164 ( 9581)   scan;
1165 ( 9590)   if (vartype='q') and (token=' [') and
1166 ( 9605)     ((vartyp2='v') or (vartyp2='d')) then begin
1167 ( 9622)     vartyp2:='q'; vartype:='c';
1168 ( 9633)   end;
1169 ( 9637)   case vartyp2 of
1170 ( 9637)   'a','x','s','i','n','q':
1171 ( 9680)       begin
1172 ( 9683)         if token=' [' then begin
1173 ( 9691)           scan; express; relad:=1;
1174 ( 9704)           if vartyp2='r' then begin
1175 ( 9715)             relad:=3;
1176 ( 9720)             code3($22,1); code1($12)
1177 ( 9736)           end;
1178 ( 9742)           if (vartyp2='q') and (t3[idpnt]=0) then
1179 ( 9760)             checkindex(0,63)
1180 ( 9768)           else
1181 ( 9774)             checkindex(0,t3[idpnt]);
1182 ( 9793)           testtype('i'); testto(' ]'); scan;
1183 ( 9814)         end else relad:=2;
1184 ( 9819)       end;
1185 ( 9823)   'v','w','r','h','m': relad:=0;
1186 ( 9863)   'c','d','e','t','u': error(6)
1187 ( 9907)   else error(1)
1188 ( 9918)   end {case}
1189 ( 9926) end {getvar};
1190 ( 9926) 
1191 ( 9927) { * prcall *            ( of statement ) }
1192 ( 9927) 
1193 ( 9927) proc prcall (idpn1: integer);
1194 ( 9927) 
1195 ( 9927) var bstack,numpar,i,n,n2: integer;
1196 ( 9930) 
1197 ( 9930) { body of prcall follows later }
1198 ( 9930) 
1199 ( 9930) { * prcall1 *           ( of prcall ) }

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         18/11/23 page 21

1200 ( 9930) 
1201 ( 9930) proc prcall1;
1202 ( 9930) var ressize:integer;
1203 ( 9933) 
1204 ( 9933)   proc prcall3;
1205 ( 9933)   begin {prcall3}
1206 ( 9936)     testto('id');
1207 ( 9947)     idpnt:=findid;
1208 ( 9953)     if idpnt=0 then error(5);
1209 ( 9975)     getvar;
1210 ( 9979)     if chr(stack[i] and 255)<>vartype then
1211 ( 9991)       if chr(stack[i] and 255)<>'u' then
1212 (10013)         merror(14,'01');
1213 (10028)       push(idpnt);
1214 (10038)   end {prcall3};
1215 (10038) 
1216 (10039) begin {prcall1}
1217 (10039)   case chr(stack[i] shr 8) of
1218 (10052)     'd':  begin
1219 (10060)             if chr(stack[i] and 255) = 'q' then
1220 (10074)               mainexp('q',ressize)
1221 (10080)             else
1222 (10094)               express;
1223 (10101)             if chr(stack[i] and 255)<>'u' then
1224 (10115)               testtype(chr(stack[i] and 255));
1225 (10137)           end;
1226 (10137)     'e':  begin
1227 (10147)             arrayexp(stack[succ(i)],
1228 (10152)               chr(stack[i]));
1229 (10171)             i:=succ(i);
1230 (10175)           end;
1231 (10180)     'w':  begin
1232 (10190)             prcall3;
1233 (10194)             if relad<>0 then merror(14,'02');
1234 (10215)             gpval(idpnt,false,vartyp2);
1235 (10231)           end;
1236 (10231)     'x':  begin
1237 (10241)             prcall3;
1238 (10245)             if relad<>2 then merror(14,'03');
1239 (10266)             if vartyp2='i' then error(16);
1240 (10284)             i:=succ(i);
1241 (10288)             if stack[i]<>t3[idpnt] then
1242 (10305)               error(15);
1243 (10321)             if vartyp2='n' then begin
1244 (10328)               code3($22,t2[idpnt]);
1245 (10347)               code1($3d);
1246 (10355)             end else code4($27,level-t1[idpnt],
1247 (10368)               2*t2[idpnt]);
1248 (10390)             code2($3b,stack[i]);
1249 (10406)           end
1250 (10406)     else merror(14,'04')
1251 (10414)   end {case}
1252 (10422) end {prcall1};
1253 (10422) 
1254 (10423) proc prcall2;
1255 (10423) begin
1256 (10423)   if n>0 then code3(35,-2*n);
1257 (10454)   n:=0
1258 (10454) end {prcall2};
1259 (10460) 

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         18/11/23 page 22

1260 (10461) begin {body of prcall}
1261 (10461)   if t3[idpn1]<>0 then begin
1262 (10474)     bstack:=t3[idpn1];
1263 (10481)     numpar:=stack[bstack];
1264 (10493)     parse(' ('); scan;
1265 (10514)     for i:=succ(bstack) to bstack+numpar do
1266 (10527)     begin
1267 (10541)       prcall1;
1268 (10545)       if i<bstack+numpar then begin
1269 (10559)         testto(' ,'); scan
1270 (10571)       end
1271 (10575)     end;
1272 (10575)     testto(' )');
1273 (10598)   end {then};
1274 (10598)   code4(43,level-t1[idpn1],t2[idpn1]);
1275 (10627)   if t3[idpn1]<>0 then begin
1276 (10638)     n:=0; i:=bstack+numpar;
1277 (10651)     repeat
1278 (10660)       case chr(stack[i] shr 8) of
1279 (10671)       'd':  n:=succ(n);
1280 (10683)       'w':  begin
1281 (10698)               prcall2; idpnt:=pop;
1282 (10708)               gpval(idpnt,true,
1283 (10718)                   high(t0[idpnt]));
1284 (10733)             end;
1285 (10733)       chr(0): begin
1286 (10743)             n2:=stack[i];
1287 (10747)             i:=i-1;
1288 (10761)             case chr(stack[i] shr 8) of
1289 (10777)               'e':  n:=succ(n+n2);
1290 (10794)               'x':  begin
1291 (10809)                       prcall2;
1292 (10813)                       idpnt:=pop;
1293 (10819)                       if high(t0[idpnt])='n'
1294 (10832)                       then begin
1295 (10835)                         code3($22,t2[idpnt]+
1296 (10844)                           2*t3[idpnt]);
1297 (10866)                         code1($3e)
1298 (10868)                       end else
1299 (10874)                         code4(41,
1300 (10879)                           level-t1[idpnt],
1301 (10887)                           2*(t2[idpnt]+
1302 (10898)                           t3[idpnt]));
1303 (10918)                       code2($3c,t3[idpnt])
1304 (10924)                     end
1305 (10934)               end {case}
1306 (10936)             end
1307 (10936)       end; {case}
1308 (10938)       i:=prec(i);
1309 (10942)     until i=bstack;
1310 (10951)     prcall2
1311 (10959)   end
1312 (10963) end {prcall};
1313 (10963) 
1314 (10964) 
1315 (10964) {###################################}
1316 (10964) { * mainexp *       ( of statement) }
1317 (10964) {###################################}
1318 (10964) {  see forward declaration above    }
1319 (10964) 

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         18/11/23 page 23

1320 (10964) proc mainexp(reqtype: char;
1321 (10964)   var arsize: integer);
1322 (10964) 
1323 (10964) { variables of mainexp}
1324 (10964) var opcode,roff: integer;
1325 (10967)     savtype: char;
1326 (10967) 
1327 (10967) { * argument *         ( of mainexp ) }
1328 (10967) 
1329 (10967) proc argument(rtype: char);
1330 (10967) begin
1331 (10967)   parse(' ('); scan; express;
1332 (10989)   testtype(rtype);
1333 (10999)   testto(' )'); scan
1334 (11008) end; {argument}
1335 (11013) 
1336 (11013) {#######################################}
1337 (11013) { * simexp *             ( of mainexp ) }
1338 (11013) {#######################################}
1339 (11013) 
1340 (11013) proc simexp(var arsize1: integer);
1341 (11013) 
1342 (11013) var opcode: integer;
1343 (11016)     sign: char;
1344 (11016) 
1345 (11016) {body of simexp  follows later }
1346 (11016) 
1347 (11016) {#######################################}
1348 (11016) { * term *               ( of simexp )  }
1349 (11016) {#######################################}
1350 (11016) 
1351 (11016) proc term(var arsize2: integer);
1352 (11016) 
1353 (11016) var opcode: integer;
1354 (11019) 
1355 (11019) { body of term follows later }
1356 (11019) 
1357 (11019) {#######################################}
1358 (11019) { * factor *             ( of term )    }
1359 (11019) {#######################################}
1360 (11019) 
1361 (11019) proc factor(var arsize3: integer);
1362 (11019) 
1363 (11019) var i, idpnt: integer;
1364 (11022)     h: char;
1365 (11022) 
1366 (11022) { * index *              ( of factor )  }
1367 (11022) 
1368 (11022) proc index(chk: boolean);
1369 (11022) 
1370 (11022) var savtype: char;
1371 (11025) 
1372 (11025) begin {index}
1373 (11025)   scan; savtype:=restype;
1374 (11031)   express; testtype('i'); testto(' ]');
1375 (11060)   if savtype='r' then begin
1376 (11067)     code3($22,1); code1($12);
1377 (11088)   end;
1378 (11088)   if chk then begin
1379 (11092)     if (savtype='q') and (t3[idpnt]=0) then

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         18/11/23 page 24

1380 (11113)       { is an arrayed cpnt }
1381 (11114)       checkindex(0,63)
1382 (11121)     else
1383 (11127)       checkindex(0,t3[idpnt]);
1384 (11146)   end;
1385 (11146)   restype:=savtype; scan
1386 (11154) end;
1387 (11158) 
1388 (11159) 
1389 (11159) begin { *** body of factor *** }
1390 (11159)   arsize3:=0;
1391 (11163)   case token of
1392 (11167)     'id': begin {identifier }
1393 (11179)             idpnt:=findid;
1394 (11185)             if idpnt=0 then error(5);
1395 (11207)             restype:=low(t0[idpnt]);
1396 (11215)             h:=high(t0[idpnt]);
1397 (11228)             case h of
1398 (11233)               'v','w','d':
1399 (11255)                     begin
1400 (11258)                       scan;
1401 (11262)                       if (restype='q') and (token=' [')
1402 (11276)                       then begin
1403 (11278)                         code4(39,level-t1[idpnt],
1404 (11291)                           2*t2[idpnt]);
1405 (11313)                         index(true);
1406 (11321)                         code1($03);
1407 (11329)                         code1($54);
1408 (11337)                         restype:='c';
1409 (11339)                       end else
1410 (11343)                         code4(39,level-t1[idpnt],
1411 (11356)                           2*t2[idpnt]);
1412 (11378)                     end;
1413 (11378)               'h':  begin code3($22,t2[idpnt]);
1414 (11404)                       code1($17); scan end;
1415 (11416)               'i':  begin code3($22,t2[idpnt]);
1416 (11442)                       scan;
1417 (11446)                       if token=' [' then begin
1418 (11454)                         index(true); code1($03);
1419 (11473)                         code1($17)
1420 (11475)                       end else begin
1421 (11484)                         error(16)
1422 (11486)                       end
1423 (11492)                     end;
1424 (11492)               'm':  begin code3($22,t2[idpnt]);
1425 (11518)                       code1($3d); scan
1426 (11526)                     end;
1427 (11530)               'n':  begin code3($22,t2[idpnt]);
1428 (11556)                       scan;
1429 (11560)                       if token=' [' then begin
1430 (11568)                         index(true);
1431 (11579)                         code3($22,1);code1($12);
1432 (11597)                         code1($03); code1($3d);
1433 (11613)                         if restype='r' then
1434 (11619)                         begin
1435 (11620)                           code2($3b,1);
1436 (11633)                           arsize3:=1
1437 (11633)                         end
1438 (11635)                       end else begin
1439 (11642)                         code1($3d);

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         18/11/23 page 25

1440 (11650)                         code2($3b,t3[idpnt]);
1441 (11666)                         arsize3:=t3[idpnt];
1442 (11670)                       end
1443 (11678)                     end;
1444 (11678)               'r','t': begin
1445 (11695)                       code3(35,2);
1446 (11705)                       idpnt:=prec(idpnt);
1447 (11709)                       prcall(idpnt); scan;
1448 (11728)                       restype:=low(t0[idpnt]);
1449 (11736)                     end;
1450 (11741)               'c':  if low(t0[idpnt])<>'r' then begin
1451 (11763)                       code3(34,t2[idpnt]);
1452 (11782)                       scan;
1453 (11786)                       if restype='s' then begin
1454 (11793)                         if token=' [' then begin
1455 (11804)                           index(true);
1456 (11815)                           code1($03);
1457 (11823)                           code1($58);
1458 (11831)                           code1($54);
1459 (11839)                           restype:='c';
1460 (11841)                         end else begin
1461 (11848)                           code1($58);
1462 (11856)                           restype:='q';
1463 (11858)                         end;
1464 (11862)                       end;
1465 (11862)                       {scan;}
1466 (11862)                     end else begin
1467 (11865)                       code2($3a,2);
1468 (11875)                       code2(t2[idpnt] and 255,
1469 (11885)                         t2[idpnt] shr 8);
1470 (11903)                       code2(t3[idpnt] and 255,
1471 (11913)                         t3[idpnt] shr 8);
1472 (11931)                       arsize3:=1; scan
1473 (11937)                     end;
1474 (11941)               'a','e','x':
1475 (11962)                     begin scan;
1476 (11969)                       if token=' [' then begin
1477 (11977)                         index(true);
1478 (11988)                         code4($28,
1479 (11990)                             level-t1[idpnt],
1480 (11998)                             2*t2[idpnt]);
1481 (12020)                         if restype='r' then
1482 (12026)                         begin
1483 (12027)                           code2($3b,1);
1484 (12040)                           arsize3:=1
1485 (12040)                         end
1486 (12042)                       end else begin
1487 (12049)                         code4($27,
1488 (12051)                             level-t1[idpnt],
1489 (12059)                             2*t2[idpnt]);
1490 (12081)                         code2($3b,t3[idpnt]);
1491 (12097)                         arsize3:=t3[idpnt];
1492 (12101)                       end
1493 (12109)                     end;
1494 (12109)               's','u':
1495 (12123)                     begin
1496 (12126)                       code3(35,2*t3[idpnt]+2);
1497 (12148)                       idpnt:=prec(idpnt);
1498 (12152)                       prcall(idpnt); scan;
1499 (12171)                       restype:=low(t0[idpnt]);

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         18/11/23 page 26

1500 (12179)                       idpnt:=succ(idpnt);
1501 (12188)                       arsize3:=t3[idpnt]
1502 (12193)                     end
1503 (12197)               else error(1)
1504 (12210)             end {case}
1505 (12218)           end; {identifier}
1506 (12221)     'nu': begin code3(34,value[0]); scan;
1507 (12247)             restype:='i'
1508 (12247)           end;
1509 (12253)     'ru': begin code2($3a,2);
1510 (12274)             code2(value[0] and 255,
1511 (12282)               value[0] shr 8);
1512 (12298)             code2(value[1] and 255,
1513 (12306)               value[1] shr 8);
1514 (12322)             scan; restype:='r';
1515 (12328)             arsize3:=1
1516 (12332)           end;
1517 (12338)     'st': begin
1518 (12349)           if (reqtype='n') and (value[0]<3)
1519 (12364)             then begin
1520 (12366)               if value[0]<2 then begin
1521 (12378)                 code3(34,ord(ident[1]));
1522 (12395)                 restype:='c'
1523 (12395)               end else begin
1524 (12404)                 code3(34,packed(ident[1],
1525 (12408)                   ident[2]));
1526 (12425)                 restype:='p'
1527 (12425)               end
1528 (12427)             end else begin
1529 (12434)               case reqtype of
1530 (12434)                 'c','u','n','q':
1531 (12463)                     begin
1532 (12466)                       if (vartype='q') or
1533 (12473)                          (reqtype='q') then begin
1534 (12481)                         arsize3:=0;
1535 (12486)                         restype:='q';
1536 (12492)                         code2($56,value[0]);
1537 (12510)                       end else begin
1538 (12513)                         arsize3:=prec(value[0]);
1539 (12519)                         restype:='c';
1540 (12526)                         code2($39,value[0]);
1541 (12544)                       end;
1542 (12544)                       for i:=1 to value[0] do
1543 (12552)                         code1(ord(ident[i]));
1544 (12579)                       if (vartype='q') or
1545 (12600)                          (reqtype='q') then code1(0);
1546 (12619)                     end;
1547 (12619)                 'p': begin
1548 (12629)                       if odd(value[0]) then
1549 (12635)                         error(15);
1550 (12647)                       value[0]:=value[0] shr 1;
1551 (12657)                       arsize3:=prec(value[0]);
1552 (12668)                       restype:='p';
1553 (12675)                       code2($3a,value[0]);
1554 (12693)                       for i:=1 to value[0] do
1555 (12701)                         begin
1556 (12714)                         code1(ident[2*i]);
1557 (12731)                         code1(ident[2*i-1]);
1558 (12751)                       end
1559 (12751)                     end

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         18/11/23 page 27

1560 (12751)                 else merror(14,'05')
1561 (12773)               end {case}
1562 (12781)             end;
1563 (12781)             scan
1564 (12781)           end;
1565 (12785)     'od': begin
1566 (12796)             argument('i'); code1(7);
1567 (12812)             restype:='b'
1568 (12812)           end;
1569 (12818)     'me': begin
1570 (12829)             parse(' ['); index(false);
1571 (12846)             code1(23); restype:='i';
1572 (12856)           end;
1573 (12860)     ' (': begin
1574 (12871)             scan; mainexp(reqtype,arsize3);
1575 (12893)             testto(' )'); scan
1576 (12902)           end; {no type change}
1577 (12909)     'no': begin
1578 (12917)             scan; factor(arsize3);
1579 (12933)             if (arsize3<>0) then error(15);
1580 (12951)             code1($11);
1581 (12959)             if restype<>'i' then
1582 (12965)               testtype('b')
1583 (12971)           end;
1584 (12977)     'cr': begin
1585 (12988)             argument('i'); code1(52);
1586 (13004)             restype:='c'
1587 (13004)           end;
1588 (13010)     'hi': begin
1589 (13021)             argument('p'); code1(51);
1590 (13037)             restype:='c'
1591 (13037)           end;
1592 (13043)     'lo': begin
1593 (13054)             argument('p'); code1(52);
1594 (13070)             restype:='c'
1595 (13070)           end;
1596 (13076)     'su': begin
1597 (13087)             argument('u'); code1($14);
1598 (13103)           end;
1599 (13103)     'pc': begin
1600 (13114)             argument('u'); code1($15)
1601 (13124)           end;
1602 (13130)     'cp': begin
1603 (13141)             argument('i'); restype:='q';
1604 (13151)           end;
1605 (13155)     'ni': begin
1606 (13166)             code3(34,0); scan; restype:='q';
1607 (13182)           end;
1608 (13186)     'ox': begin
1609 (13197)             argument('u');
1610 (13205)             restype:='i'
1611 (13205)           end;
1612 (13211)     ' @': begin
1613 (13222)             scan; factor(arsize3);
1614 (13238)             if arsize3<>0 then error(15);
1615 (13256)             testtype('i');
1616 (13264)             restype:='f'
1617 (13264)           end;
1618 (13270)     'tr': begin
1619 (13281)             code3(34,1); scan;

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         18/11/23 page 28

1620 (13295)             restype:='b';
1621 (13297)           end;
1622 (13301)     'fa': begin
1623 (13312)             code3(34,0); scan;
1624 (13326)             restype:='b'
1625 (13326)           end;
1626 (13332)     'tc': begin
1627 (13343)             parse(' ('); scan;
1628 (13356)             arrayexp(1,'r');
1629 (13366)             testto(' )'); scan;
1630 (13379)             code1($47); restype:='i';
1631 (13389)           end;
1632 (13393)     'cv': begin
1633 (13404)             argument('i');
1634 (13412)             code1($46); arsize3:=1;
1635 (13422)             restype:='r'
1636 (13426)           end;
1637 (13432)     'pa': begin
1638 (13443)             parse(' ('); scan; express;
1639 (13460)             testtype('c');
1640 (13468)             if token=' ,' then begin
1641 (13476)               scan; express; testtype('c');
1642 (13495)               code1(53)
1643 (13497)             end;
1644 (13503)             testto(' )'); scan; restype:='p'
1645 (13516)           end
1646 (13518)     else error(1)
1647 (13527)   end {case of token}
1648 (13535) end {factor};
1649 (13535) 
1650 (13536) begin  { *** body of term *** }
1651 (13536)   factor(arsize2);
1652 (13550)   repeat
1653 (13550)     case token of
1654 (13550)       ' *': opcode:=5;
1655 (13564)       'di': opcode:=6;
1656 (13581)       'an': opcode:=15;
1657 (13598)       'sh': opcode:=18;
1658 (13615)       'sr': opcode:=19;
1659 (13632)       ' /': opcode:=$45
1660 (13647)       else opcode:=0
1661 (13656)     end {case};
1662 (13664)     if opcode>0 then begin
1663 (13671)       if (restype='r') and
1664 (13681)             (arsize2=1) then begin
1665 (13689)         scan; factor(arsize2);
1666 (13708)         if (restype<>'r') or (arsize2<>1) then
1667 (13722)           merror(14,'06');
1668 (13737)         case opcode of
1669 (13737)           5: code1($44);
1670 (13756)           $45: code1($45)
1671 (13768)           else error(17)
1672 (13779)         end{case}
1673 (13787)       end else begin
1674 (13790)         if opcode=$45 then error(9);
1675 (13808)         if arsize2<>0 then error(15);
1676 (13826)         if (restype='b') and (opcode=15)
1677 (13839)           then begin
1678 (13841)           scan; factor(arsize2);
1679 (13860)           if arsize2<>0 then error(15);

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         18/11/23 page 29

1680 (13878)           testtype('b');
1681 (13886)           code1(opcode)
1682 (13886)         end else begin
1683 (13899)           testtype('i'); scan;
1684 (13911)           factor(arsize2);
1685 (13923)           if arsize2<>0 then error(15);
1686 (13941)           testtype('i'); code1(opcode);
1687 (13959)         end
1688 (13959)       end
1689 (13959)     end;
1690 (13959)   until opcode=0;
1691 (13965) end {term};
1692 (13969) 
1693 (13970) 
1694 (13970) begin { *** body of simexp *** }
1695 (13970)   sign:=' ';
1696 (13974)   if token=' +' then begin
1697 (13986)     sign:='+'; scan
1698 (13995)   end else if token=' -' then begin
1699 (14010)     sign:='-'; scan
1700 (14019)   end;
1701 (14023)   term(arsize1);
1702 (14035)   if sign<>' ' then begin
1703 (14042)     if (restype='r')and (arsize1=1) then begin
1704 (14060)       if sign='-' then code1($4e)
1705 (14075)     end else begin
1706 (14084)       testtype('i');
1707 (14092)       if arsize1<>0 then error(15);
1708 (14110)       if sign='-' then code1(2);
1709 (14128)     end
1710 (14128)   end;
1711 (14128)   repeat
1712 (14128)     case token of
1713 (14128)       ' &': opcode:=1;
1714 (14142)       ' +': opcode:=3;
1715 (14159)       ' -': opcode:=4;
1716 (14176)       'or': opcode:=14;
1717 (14193)       'xo': opcode:=16
1718 (14208)       else opcode:=0
1719 (14217)     end {case};
1720 (14225)     if opcode>1 then begin {if 1}
1721 (14235)       if (restype='r') and (arsize1=1)
1722 (14248)         then begin {real}
1723 (14253)         scan; term(arsize1);
1724 (14269)         if (restype<>'r') or (arsize1<>1) then
1725 (14283)           error(17);
1726 (14295)         case opcode of
1727 (14295)           3:  code1($42);
1728 (14314)           4:  code1($43)
1729 (14326)           else error(17)
1730 (14337)         end {case}
1731 (14345)       end {real}
1732 (14345)       else begin {not real}
1733 (14348)         if (arsize1<>0) then error(15);
1734 (14366)         if (restype='b') and (opcode>=14)
1735 (14379)           then begin {boolean}
1736 (14384)           scan; term(arsize1);
1737 (14400)           if arsize1<>0 then error(15);
1738 (14418)           testtype('b'); code1(opcode)
1739 (14426)         end {boolean}

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         18/11/23 page 30

1740 (14436)         else begin {not boolean}
1741 (14439)           testtype('i'); scan;
1742 (14451)           term(arsize1);
1743 (14463)           if arsize1<>0 then error(15);
1744 (14481)           testtype('i'); code1(opcode);
1745 (14499)         end {not boolean}
1746 (14499)       end {not real}
1747 (14499)     end {if 1}
1748 (14499)     else if opcode=1 then begin {else 1}
1749 (14512)       sign:=restype;
1750 (14512)       scan; term(opcode);
1751 (14536)       arsize1:=arsize1+opcode+1;
1752 (14547)       testtype(sign)
1753 (14552)     end {else 1}
1754 (14562)   until opcode=0
1755 (14566) end {simexp};
1756 (14572) 
1757 (14573) 
1758 (14573) begin { *** body of mainexp *** }
1759 (14573)   roff:=0;
1760 (14577)   simexp(arsize);
1761 (14593)   if (restype='r') and (arsize=1) then
1762 (14607)     roff:=$40;
1763 (14613)   case token of
1764 (14617)     ' =': opcode:=8;
1765 (14631)     ' <': opcode:=10;
1766 (14648)     ' >': opcode:=12;
1767 (14665)     '<>': opcode:=9;
1768 (14682)     '<=': opcode:=13;
1769 (14699)     '>=': opcode:=11
1770 (14714)     else opcode:=0
1771 (14723)   end {case};
1772 (14731)   if opcode>0 then begin
1773 (14738)     if (arsize<>0) and (roff=0) then
1774 (14755)       error(15);
1775 (14767)     scan; savtype:=restype; simexp(arsize);
1776 (14791)     if ((roff=0) and (arsize<>0))
1777 (14805)       or((roff<>0) and (arsize>1)) then
1778 (14821)       error(15);
1779 (14833)     testtype(savtype); code1(opcode+roff);
1780 (14858)     arsize:=0; restype:='b'
1781 (14864)   end
1782 (14866) end {mainexp};
1783 (14870) 
1784 (14871) 
1785 (14871) {#########################################}
1786 (14871) { * assign *             ( of statement ) }
1787 (14871) {#########################################}
1788 (14871) 
1789 (14871) proc assign;
1790 (14871) 
1791 (14871) var savetype: char;
1792 (14874) 
1793 (14874)   proc assign1;
1794 (14874)   begin
1795 (14874)     testto(':='); scan; express;
1796 (14896)     if (vartype='q') and (restype='s') then begin
1797 (14911)       code1($58); restype:='q';
1798 (14924)     end;
1799 (14928)     gpval(idpnt,true,vartyp2);

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         18/11/23 page 31

1800 (14944)   end {assign1};
1801 (14944) 
1802 (14945) begin {assign}
1803 (14945)   idpnt:=findid;
1804 (14953)   if idpnt=0 then error(5);
1805 (14975)   if t0[idpnt]='pr' then begin
1806 (14987)     prcall(idpnt);scan end
1807 (15004)   else begin
1808 (15007)     getvar; savetype:=vartype;
1809 (15011)     if relad<2 then begin
1810 (15026)       assign1; testtype(vartype)
1811 (15033)     end else begin
1812 (15046)       if vartyp2='i' then error(16); {8-bit mem}
1813 (15064)       testto(':='); scan;
1814 (15077)       if relad=3 then begin
1815 (15084)         arrayexp(1,vartype); relad:=1;
1816 (15101)         code1($53);
1817 (15113)         if vartyp2='n' then begin
1818 (15120)           code1($3f);
1819 (15131)           code3($22,1);code1($12);
1820 (15149)           code3($22,t2[idpnt]+2);
1821 (15168)           code1($3);code1($3e)
1822 (15178)         end else
1823 (15184)           code4($2a,level-t1[idpnt],
1824 (15197)             2*t2[idpnt]+2);
1825 (15222)         code2($3c,1)
1826 (15226)       end else begin
1827 (15235)         arrayexp(t3[idpnt],vartype);
1828 (15253)         if vartyp2='n' then begin
1829 (15260)           code3($22,t2[idpnt]+2*t3[idpnt]);
1830 (15291)           code1($3e);
1831 (15299)         end else
1832 (15299)           code4($29,level-t1[idpnt],
1833 (15312)             2*(t2[idpnt]+t3[idpnt]));
1834 (15343)         code2($3c,t3[idpnt]);
1835 (15359)       end
1836 (15359)     end
1837 (15359)   end
1838 (15359) end {assign};
1839 (15359) 
1840 (15360) { * case1 *             ( of statement ) }
1841 (15360) 
1842 (15360) proc case1;
1843 (15360) 
1844 (15360) var i1,i2,casave: integer;
1845 (15363)     savetype: char;
1846 (15363) 
1847 (15363)   proc case2;
1848 (15363) 
1849 (15363)     proc case3;
1850 (15366)     begin
1851 (15366)       scan; code1(22); code3(34,getcon);
1852 (15397)       testtype(savetype);
1853 (15407)       code1(8); scan
1854 (15415)     end;
1855 (15419) 
1856 (15420)   begin {case2}
1857 (15420)     i1:=0; case3;
1858 (15432)     while token=' ,' do begin
1859 (15443)       push(pc); code3(38,0); i1:=succ(i1);

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         18/11/23 page 32

1860 (15467)       case3
1861 (15472)     end;
1862 (15476)     testto(' :'); savpc:=pc; code3(37,0);
1863 (15506)     for k2:=1 to i1 do fixup(pop);
1864 (15537)     push(savpc);
1865 (15561)     scan; statmnt
1866 (15565)   end {case2};
1867 (15569) 
1868 (15570) begin {case1}
1869 (15570)   scan; express; testto('of');
1870 (15589)   savetype:=restype; i2:=1; case2;
1871 (15607)   while token=' ;' do begin
1872 (15618)     casave:=pc; code3(36,0); fixup(pop);
1873 (15648)     push(casave); i2:=succ(i2); case2
1874 (15667)   end;
1875 (15671)   if token='el' then begin
1876 (15682)     casave:=pc; code3(36,0); fixup(pop);
1877 (15715)     push(casave); scan; statmnt
1878 (15729)   end;
1879 (15733)   testto('en'); for k2:=1 to i2 do fixup(pop);
1880 (15773)   code3(35,-2); scan
1881 (15798) end {case1};
1882 (15802) 
1883 (15803) { * openrw *              ( of statement ) }
1884 (15803) 
1885 (15803) proc openrw(x: integer);
1886 (15803) begin
1887 (15803)   parse(' ('); parse('id');
1888 (15826)   idpnt:=findid;
1889 (15832)   if idpnt=0 then error(5);
1890 (15854)   getvar; code1(x);
1891 (15868)   testferror;
1892 (15872)   if relad=2 then error(15);
1893 (15890)   if vartype<>'f' then merror(14,'07');
1894 (15911)   gpval(idpnt,true,vartyp2);
1895 (15927)   testto(' )'); scan
1896 (15936) end {openrw};
1897 (15940) 
1898 (15941) { * gpsec *               ( of statement )  }
1899 (15941) 
1900 (15941) proc gpsec(code);   { get/put sector }
1901 (15941) 
1902 (15941)   proc gpsec1;
1903 (15944)   begin
1904 (15944)     scan; express; testtype('i');
1905 (15965)     testto(' ,');
1906 (15974)   end;
1907 (15974) 
1908 (15975) begin {gpsec}
1909 (15975)   parse(' ('); gpsec1; gpsec1; gpsec1;
1910 (15998)   code1(code);
1911 (16008)   parse('id'); idpnt:=findid;
1912 (16023)   if idpnt=0 then error(5);
1913 (16045)   getvar; code3(34,$db); { get file error code }
1914 (16059)   if relad=2 then error(15);
1915 (16077)   code1(23); if vartype<>'i' then merror(14,'08');
1916 (16106)   gpval(idpnt,true,vartyp2);
1917 (16122)   testto(' )');
1918 (16131) end {gpsec};
1919 (16131) 

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         18/11/23 page 33

1920 (16132) 
1921 (16132) begin {body of statement }
1922 (16132)   if token=' ;' then scan;
1923 (16149)   case token of
1924 (16149)     'id': assign;
1925 (16165) 
1926 (16168)     'if': begin {if}
1927 (16176)             scan; express; testtype('b');
1928 (16192)             testto('th'); scan;  savpc:=pc;
1929 (16205)             code3(37,0); statmnt;
1930 (16227)             if token='el' then begin {else}
1931 (16238)               k2:=pc; code3(36,0);
1932 (16256)               fixup(savpc); scan; statmnt;
1933 (16274)               fixup(k2)
1934 (16274)             end else fixup(savpc)
1935 (16287)           end; {if}
1936 (16300) 
1937 (16300)     'be':  begin {begin}
1938 (16308)             repeat
1939 (16308)               scan; statmnt
1940 (16312)             until token<>(' ;');
1941 (16323)             testto('en'); scan
1942 (16336)           end; {begin}
1943 (16343) 
1944 (16343)     'rp': begin {repeat}
1945 (16351)             savpc:=pc;
1946 (16351)             repeat
1947 (16359)               scan; statmnt
1948 (16363)             until token='un';
1949 (16374)             scan; express; testtype('b');
1950 (16394)             code3(37,savpc)
1951 (16396)           end {repeat};
1952 (16406) 
1953 (16409)     're': begin {read}
1954 (16417)             parse(' ('); scan;
1955 (16430)             if token=' @' then begin
1956 (16438)               scan; express; testtype('f');
1957 (16457)               device:=true;
1958 (16459)               code1(44); testto(' ,')
1959 (16474)             end
1960 (16480)             else begin
1961 (16483)               device:=false; code1(26)
1962 (16491)             end;
1963 (16497)             repeat
1964 (16497)               begin {main loop of read}
1965 (16497)                 if token=' ,' then scan;
1966 (16512)                 testto('id'); idpnt:=findid;
1967 (16527)                 if idpnt=0 then error(5);
1968 (16549)                 getvar;
1969 (16553)                 if relad=2 then error(15);
1970 (16571)                 case vartype of
1971 (16571)                   'i':  code1(28);
1972 (16590)                   'c':  code1(27);
1973 (16608)                   'p':  begin
1974 (16618)                         code1(27); code1(27);
1975 (16634)                         code1(53)
1976 (16636)                         end
1977 (16642)                   else error(114)
1978 (16647)                 end {case};
1979 (16655)                 gpval(idpnt,true,vartyp2)

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         18/11/23 page 34

1980 (16661)               end {mainloop of read}
1981 (16671)             until token<>' ,';
1982 (16678)             testto(' )'); scan;
1983 (16695)             if device then code1(45);
1984 (16710)           end {read};
1985 (16710) 
1986 (16713)     'wr','wl':
1987 (16726)           begin {write,writeln}
1988 (16729)             if token='wl' then wln:=true
1989 (16740)             else wln:=false;
1990 (16751)             scan;
1991 (16759)             if token=' (' then begin
1992 (16767)               scan;
1993 (16774)               if token=' @' then begin
1994 (16782)                 scan; express; testtype('f');
1995 (16801)                 device:=true; code1(44);
1996 (16815)                 testto(' ,');
1997 (16824)               end else device:=false;
1998 (16829)               repeat
1999 (16833)                 if token=' ,' then scan;
2000 (16848)                 if (token=' )') and device
2001 (16856)                        and wln then
2002 (16861)                    {empty writeln except device}
2003 (16866)                    k2:=k2 {do nothing}
2004 (16869)                 else if token='st' then begin
2005 (16888)                   {string}
2006 (16891)                   code1(50);
2007 (16899)                   for k2:=1 to value[0]-1 do
2008 (16913)                     code1(ord(ident[k2])
2009 (16927)                         and 127);
2010 (16940)                   code1(ord(ident[value[0]])
2011 (16960)                       or 128);
2012 (16973)                   scan
2013 (16973)                 end else begin
2014 (16980)                   {expression}
2015 (16980)                   express;
2016 (16984)                   case restype of
2017 (16984)                     'i':  code1(30);
2018 (17003)                     'c':  code1(29);
2019 (17021)                     'q':  code1($57);
2020 (17039)                     's':  begin
2021 (17049)                             code1($58);
2022 (17057)                             code1($57);
2023 (17065)                           end;
2024 (17065)                     'p':  begin
2025 (17075)                             code1(22);
2026 (17083)                             code1(51);
2027 (17091)                             code1(29);
2028 (17099)                             code1(52);
2029 (17107)                             code1(29);
2030 (17115)                           end
2031 (17115)                     else merror(14,'09')
2032 (17123)                   end {case}
2033 (17131)                 end {expression}
2034 (17131)               until token<>' ,';
2035 (17138)               if wln then begin {writeln(..)}
2036 (17149)                 code2(32,13); code1(29);
2037 (17167)                 code2(32,10); code1(29);
2038 (17185)               end;
2039 (17185)               if device then code1(45);

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         18/11/23 page 35

2040 (17200)               testto(' )'); scan
2041 (17209)             end {if}
2042 (17213)             else if wln then begin {writeln}
2043 (17223)               code2(32,13); code1(29);
2044 (17241)               code2(32,10); code1(29);
2045 (17259)             end
2046 (17259)           end {write, writeln};
2047 (17259) 
2048 (17262)     'cs': case1; {case statement}
2049 (17277) 
2050 (17277)     'wh': begin {while}
2051 (17285)             scan; savpc:=pc; express;
2052 (17301)             testtype('b');
2053 (17309)             k2:=pc; code3(37,0);
2054 (17327)             testto('do'); scan; statmnt;
2055 (17344)             code3(36,savpc); fixup(k2)
2056 (17356)           end {while};
2057 (17366) 
2058 (17369)     'fo': begin {for}
2059 (17377)             parse('id'); assign;
2060 (17390)             if t0[idpnt]='pr' then error(1);
2061 (17413)             savtp1:=low(t0[idpnt]);
2062 (17421)             case token of
2063 (17426)               'to': k2:=1;
2064 (17440)               'dw': k2:=0
2065 (17455)               else merror(2,'to')
2066 (17469)             end {case of token};
2067 (17477)             scan; express; testtype(savtp1);
2068 (17495)             bottom1:=pc; code1(22);
2069 (17511)             gpval(idpnt,false,vartyp2);
2070 (17527)             code1(13-k2-k2);
2071 (17545)             savpc:=pc; code3(37,0);
2072 (17563)             testto('do'); scan; statmnt;
2073 (17580)             gpval(idpnt,false,vartyp2);
2074 (17596)             code1(21-k2);
2075 (17609)             gpval(idpnt,true,vartyp2);
2076 (17625)             code3(36,bottom1); fixup(savpc);
2077 (17647)             code3(35,-2);
2078 (17658)           end {for};
2079 (17658) 
2080 (17661)     'me': begin {mem}
2081 (17669)             parse(' ['); scan; express;
2082 (17686)             testtype('i');
2083 (17694)             testto(' ]'); parse(':=');
2084 (17712)             scan; express; code1(24);
2085 (17728)             testtype('i');
2086 (17736)           end {mem};
2087 (17736) 
2088 (17739)     'ca': begin {call}
2089 (17747)             parse(' ('); scan; express;
2090 (17764)             testtype('i');
2091 (17772)             testto(' )'); code1(25); scan
2092 (17789)           end {call};
2093 (17793) 
2094 (17796)     'op': openrw(47);
2095 (17812) 
2096 (17815)     'ow': openrw(48);
2097 (17831) 
2098 (17834)     'ob': openrw(80);
2099 (17850) 

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         18/11/23 page 36

2100 (17853)     'gb': begin
2101 (17861)             parse(' ('); scan; express;
2102 (17878)             testtype('f'); testto(' ,');
2103 (17895)             scan; express; testtype('i');
2104 (17911)             testto(' ,'); scan; testto('id');
2105 (17933)             idpnt:=findid;
2106 (17939)             if idpnt=0 then error(5);
2107 (17961)             getvar;
2108 (17965)             if relad<>0 then error(15);
2109 (17983)             code1($51); testferror;
2110 (17995)             gpval(idpnt,true,vartyp2);
2111 (18011)             testto(' )'); scan
2112 (18020)           end;
2113 (18024) 
2114 (18027)     'pb': begin
2115 (18035)             parse(' ('); scan; express;
2116 (18052)             testtype('f'); testto(' ,');
2117 (18069)             scan; express; testtype('i');
2118 (18085)             testto(' ,'); scan; express;
2119 (18102)             code1($52);testferror;
2120 (18114)             testto(' )');
2121 (18123)             scan
2122 (18123)           end;
2123 (18127) 
2124 (18130)     'ru': begin
2125 (18138)             code1($41); scan;
2126 (18150)           end;
2127 (18150) 
2128 (18153)     'fi': begin
2129 (18161)             code1(46); scan
2130 (18169)           end;
2131 (18173) 
2132 (18176)     'ge': gpsec(55);
2133 (18192) 
2134 (18195)     'pu': gpsec(56);
2135 (18211) 
2136 (18214)     'ex': begin {exit}
2137 (18222)             if level>0 then code1(1) else code1(0);
2138 (18251)             scan;
2139 (18255)           end;
2140 (18255) 
2141 (18258)     'cl': begin {close}
2142 (18266)             parse(' (');
2143 (18275)             repeat
2144 (18275)               scan; express; code1(49);
2145 (18291)               testtype('f');
2146 (18299)               testferror
2147 (18299)             until token<>' ,';
2148 (18310)             testto(' )'); scan;
2149 (18327)           end {close}
2150 (18327) 
2151 (18327)     else if (token<>'en') and (token<>' ;')
2152 (18345)       and (token<>'un') then begin
2153 (18356)       error(10); scan
2154 (18367)     end
2155 (18371)   end {case of statements}
2156 (18373) end;
2157 (18373) 
2158 (18374) { * findforw *          ( of block ) }
2159 (18374) 

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         18/11/23 page 37

2160 (18374) func findforw;
2161 (18374) 
2162 (18374) var i,j,sav1: integer;
2163 (18377) 
2164 (18377)   func found(start: integer):boolean;
2165 (18377)   var ii,i9: integer;
2166 (18380)   begin {compare}
2167 (18380)     ii:= 0;
2168 (18384)     repeat
2169 (18388)       ii:=succ(ii);
2170 (18392)     until (ii >= 8) or
2171 (18404)       (ident[ii] <> idtab[start+ii]);
2172 (18427)     found:=(ii >= 8);
2173 (18438)   end {compare};
2174 (18442) 
2175 (18443) 
2176 (18443) begin {findforw}
2177 (18443)   i:=succ(forwpn);
2178 (18449)   repeat
2179 (18454)     i:=prec(i)
2180 (18454)   until (i=0) or found(8*fortab[i]);
2181 (18489)   findforw:=i;
2182 (18493)   if i>0 then
2183 (18507)     if i=forwpn then forwpn:=forwpn-1
2184 (18527)     else begin
2185 (18537)       sav1:=fortab[i];
2186 (18541)       for j:=1 to forwpn-1 do
2187 (18561)       fortab[j]:=fortab[succ(j)];
2188 (18580)       fortab[forwpn]:=sav1;
2189 (18606)       findforw:=forwpn;
2190 (18614)       forwpn:=forwpn-1
2191 (18626)     end
2192 (18628) end {findforw};
2193 (18633) 
2194 (18634) 
2195 (18634) begin { *** body of block *** }
2196 (18634)   dpnt:=3; t2[bottom]:=pc;
2197 (18646)   code3(36,0);
2198 (18664)   stackpn1:=stackpnt; forwpn:=0;
2199 (18674) 
2200 (18678)   if token='co' then begin    { * const * }
2201 (18689)     scan;
2202 (18693)     repeat
2203 (18693)       deccon; testto(' ;'); scan
2204 (18706)     until token <> 'id';
2205 (18717)   end {const};
2206 (18721) 
2207 (18721)   if token='me' then memory;  { * mem * }
2208 (18736) 
2209 (18736)   if token='va' then variable;{ * var * }
2210 (18751) 
2211 (18751)   while (token='pr')or (token='fu') do begin
2212 (18771)     parlevel:=0;
2213 (18773)     case token of
2214 (18777)     'pr': begin               { * proc * }
2215 (18789)             parse('id'); npara:=0;
2216 (18800)             putsym('p','r'); cproc:=spnt;
2217 (18814)             level:=succ(level);
2218 (18826)           end;
2219 (18831)     'fu': begin               { * func * }

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         18/11/23 page 38

2220 (18842)             parse('id'); npara:=1;
2221 (18853)             putsym('f','i');
2222 (18867)             cproc:=spnt; level:=succ(level);
2223 (18879)             putsym('f','i');
2224 (18894)             t2[spnt]:=parlevel;
2225 (18898)             parlevel:=succ(parlevel);
2226 (18910)           end
2227 (18915)     end; {case of token}
2228 (18917)     if forwpn=0 then find:=0
2229 (18927)     else find:=findforw;
2230 (18942)     if find<>0 then begin
2231 (18953)       spnt:=spnt-npara-1;
2232 (18967)       cproc:=fortab[find];
2233 (18976)       fixup(t2[cproc]);
2234 (18998)     end;
2235 (18998)     scan; spnt1:=spnt;
2236 (19002)     dpnt1:=dpnt;
2237 (19010)     if token=' (' then parameter;
2238 (19033)     if t0[cproc]='fi' then function;
2239 (19052)     testto(' ;');
2240 (19061)     for i:=1 to npara do
2241 (19067)     t2[succ(spnt-i)]:=t2[succ(spnt-i)]
2242 (19099)           -parlevel;
2243 (19104)     scan;
2244 (19131)     if token='fw' then begin
2245 (19139)       if forwpn=8 then merror(13,'ov');
2246 (19163)       forwpn:=succ(forwpn);
2247 (19167)       fortab[forwpn]:=cproc;
2248 (19176)       t2[cproc]:=pc;
2249 (19188)       code3(36,0);
2250 (19206)       scan
2251 (19206)     end else block(cproc);
2252 (19223)     level:=prec(level);
2253 (19227)     dpnt:=dpnt1; spnt:=spnt1;
2254 (19240)     case high(t0[spnt]) of
2255 (19256)       'r':  t0[spnt]:=packed('t',low(t0[spnt]));
2256 (19280)       's':  t0[spnt]:=packed('u',low(t0[spnt]))
2257 (19308)     end {case};
2258 (19316)     testto(' ;'); scan
2259 (19325)   end {procedure of function};
2260 (19329) 
2261 (19332)   testto('be');     { * begin * }
2262 (19341)   if forwpn<>0 then merror(13,'ur');
2263 (19362)   fixup(t2[bottom]);
2264 (19376)   t2[bottom]:=pc;
2265 (19380)   scan;
2266 (19392)   code3(35,2*dpnt);
2267 (19407)   repeat
2268 (19407)     statmnt
2269 (19407)   until token='en';
2270 (19418)   scan;
2271 (19426)   if level>0 then code1(1) else code1(0);
2272 (19455)   stackpnt:=stackpn1;
2273 (19455) end {block};
2274 (19463) 
2275 (19464) { * savtable *    ( global) }
2276 (19464) 
2277 (19464) proc savtable; { save lib table in @ofno }
2278 (19464) 
2279 (19464) var i,j,num: integer;

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         18/11/23 page 39

2280 (19467)     vtype1: char;
2281 (19467) 
2282 (19467) begin
2283 (19467)   writeln(@ofno,spnt,',',pc+2);
2284 (19496)   for i:=1 to spnt do begin {for every entry }
2285 (19515)     for j:=1 to 8 do begin
2286 (19532)       write(@ofno,idtab[8*i+j])
2287 (19552)     end;
2288 (19556)     writeln(@ofno,',',t0[i],',',t1[i],',',
2289 (19603)       t2[i],',',t3[i]);
2290 (19630)     vtype1:=high(t0[i]);
2291 (19638)     if ((vtype1='p') or (vtype1='f') or
2292 (19657)       (vtype1='g')) and (t3[i]<>0) then begin
2293 (19678)       num:=stack[t3[i]];
2294 (19689)       write(@ofno,num);
2295 (19708)       for j:=1 to num do
2296 (19714)         write(@ofno,',',stack[t3[i]+j]);
2297 (19753)       write(@ofno,cr,lf);
2298 (19779)     end {then};
2299 (19779)   end {for}
2300 (19779) end {savtable};
2301 (19793) 
2302 (19794) { * main program * }
2303 (19794) 
2304 (19794) begin {main}
2305 (19794)   nlflg:=false;
2306 (19799)   init;scan;
2307 (19811)   case token of
2308 (19811)     'pg': begin
2309 (19823)             libflg:=false;
2310 (19825)             asetfile(pname,scyclus,sdrive,'Q');
2311 (19851)           end;
2312 (19851)     'li': begin
2313 (19862)             libflg:=true;
2314 (19864)             asetfile(pname,scyclus,sdrive,'T');
2315 (19890)           end
2316 (19890)     else
2317 (19890)       merror(2,'pg')
2318 (19898)   end {case}
2319 (19906)   parse('id');
2320 (19915)   i:=0;
2321 (19917)   repeat
2322 (19921)     i:=succ(i);
2323 (19925)   until (i>7) or (pname[i] = ':') or
2324 (19948)       (pname[i]<>uppercase(ident[i+1]));
2325 (19977)   if i<8 then
2326 (19987)     merror(2,packed(pname[0],pname[1]));
2327 (20012)     { name differs from filename }
2328 (20012)   parse(' ;');
2329 (20021)   if ofno<>nooutput then openw(ofno);
2330 (20037)   scan;
2331 (20041)   if (token='us') and (libflg=false) then begin
2332 (20057)     repeat
2333 (20060)       getlib; scan
2334 (20064)     until token<>' ,';
2335 (20075)     testto(' ;'); scan
2336 (20088)   end;
2337 (20092)   block(0); testto(' .');
2338 (20109)   if ofno<>nooutput then begin
2339 (20116)     write(@ofno,'E');

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         18/11/23 page 40

2340 (20127)     savebyte(pc and 255);
2341 (20140)     savebyte(pc shr 8);
2342 (20153)     close(ofno);
2343 (20159)     if libflg then begin
2344 (20163)       asetfile(pname,scyclus,sdrive,'L');
2345 (20188)       openw(ofno);
2346 (20194)       savtable;
2347 (20198)       close(ofno)
2348 (20198)     end
2349 (20204)   end else
2350 (20204)     runerr:=$87; {no loader file}
2351 (20213)   writeln;
2352 (20213)   writeln;
2353 (20219)   writeln('End compile');
2354 (20243)   writeln;
2355 (20243)   writeln('Code lenght:          ',pc);
2356 (20283)   writeln('Compiler stack size:  ',stackmax);
2357 (20317)   writeln('Ident stack size:     ',spntmax);
2358 (20351)   write('Pascal errors:        ');
2359 (20374)   if numerr>0 then write(invvid);
2360 (20387)   writeln(numerr,norvid);
2361 (20401)   if prt then begin
2362 (20405)     write(prtoff);
2363 (20411)     setemucom(9);
2364 (20419)   end;
2365 (20419)   close(fno);
2366 (20425)   { check whether second pass is not required }
2367 (20425)   if (runerr=0) and libflg then runerr:=-1;
2368 (20441) end {main}.
2369 (20446) 

End compile

Code lenght:          20445
Compiler stack size:  134
Ident stack size:     211
Pascal errors:        0


R65 COMPILE 4.2: program COMPILE1         12/11/23 page 1


   1 (    4) {   ********************************
   2 (    4)     *                              *
   3 (    4)     *  R65 "Tiny" Pascal Compiler  *
   4 (    4)     *            Pass 1            *
   5 (    4)     *                              *
   6 (    4)     ********************************
   7 (    4) 
   8 (    4) First version 1978 by rricharz
   9 (    4) Original version 3.7 (20K)  01/08/82 rricharz
  10 (    4) 
  11 (    4) Recovered 2018 by rricharz (r77@bluewin.ch)
  12 (    4) Improved 2018-2023 by rricharz
  13 (    4) Version 4 with cpnt strings and exit statement
  14 (    4) 
  15 (    4) Original derived from the publication by
  16 (    4) Kin-Man Chung and Herbert Yen in
  17 (    4) Byte, Volume 3, Number 9 and Number 10, 1978
  18 (    4) 
  19 (    4) Adapted for the R65 computer system and
  20 (    4) substantially enhanced by rricharz 1978-1982
  21 (    4) 
  22 (    4) This is a Pascal derivative optimized for 8-bit
  23 (    4) microprocessors (integer type is 16 bit) with
  24 (    4) additional features (mem) to interact directly
  25 (    4) with the microprocessor hardware. Only one
  26 (    4) dimensional arrays and no records or user
  27 (    4) defined types. Floating point numbers (real)
  28 (    4) and file io to floppy disks are supported.
  29 (    4) 
  30 (    4) Precompiled libraries are merged in the loader.
  31 (    4) The table of reserved words and the library
  32 (    4) tables are loaded from the same drive as
  33 (    4) the compiler.
  34 (    4) 
  35 (    4) The output of the program is a loader file for
  36 (    4) the Pascal loader (compile2).
  37 (    4) 
  38 (    4) usage:
  39 (    4)  compile1 name[.cy[,drv]] [xxx]
  40 (    4)   where x:       l,p: no hard copy print
  41 (    4)                  i,r: index bound checking
  42 (    4)                  n: no loader file
  43 (    4)   [] means not required
  44 (    4) 
  45 (    4) The compiler uses 2 fixed memory areas to store
  46 (    4) the table of reserved words and the table of
  47 (    4) idents. The top of the Pascal stack (endstk) is
  48 (    4) adjusted accordingly. The reason for this hack
  49 (    4) is speed and convenience. A normal Pascal array
  50 (    4) of chars would store the chars as 16 bit
  51 (    4) numers and would therefore require twice the
  52 (    4) space. An array of packed chars would require
  53 (    4) more coding and slow the scanner module of the
  54 (    4) compiler down.                                }
  55 (    4) 
  56 (    4) program compile1;
  57 (    4) 
  58 (    4) uses syslib, arglib;
  59 ( 1093) 

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         12/11/23 page 2

  60 ( 1093) const version='4.2';
  61 ( 1100) 
  62 ( 1100)     table     =$97ff; {user ident table -1}
  63 ( 1100)     idtab     =$95ff; {resword table -1}
  64 ( 1100)     idlength  =64;    {max. length of ident}
  65 ( 1100)     stacksize =256;   {stack size}
  66 ( 1100)     pagelenght=60;    {no of lines per page}
  67 ( 1100)     nooutput  =@0;
  68 ( 1100)     maxfi     =3;     {max number of ins fls}
  69 ( 1100) 
  70 ( 1100)     nresw=63;   {number of res. words, max 64}
  71 ( 1100)     symbsize=256;     {id table entries}
  72 ( 1100)     reswtabpos=$c600; { up to $c7ff }
  73 ( 1100)     idtabpos=$be00;   { up to $c5ff }
  74 ( 1100) 
  75 ( 1100)     yesoutput=@255;
  76 ( 1100) 
  77 ( 1100) mem endstk  =$000e: integer;
  78 ( 1100)     reswtab =reswtabpos: array[$200] of char&;
  79 ( 1100)     idtab   =idtabpos: array[$800] of char&;
  80 ( 1100) 
  81 ( 1100) var tpos,pc,level,line,offset,dpnt,spnt,fipnt,
  82 ( 1100)     npara,i,stackpnt,stackmax,spntmax,numerr
  83 ( 1100)                               :integer;
  84 ( 1100) 
  85 ( 1100)     scyclus,sdrive,cdrive: integer;
  86 ( 1100) 
  87 ( 1100)     pname: array[15] of char;
  88 ( 1100) 
  89 ( 1100)     value: array[1] of integer;
  90 ( 1100) 
  91 ( 1100)     ch,restype,vartype:char;
  92 ( 1100) 
  93 ( 1100)     token: packed char;
  94 ( 1100) 
  95 ( 1100)     prt,libflg,icheck,ateof: boolean;
  96 ( 1100) 
  97 ( 1100)     fno,ofno: file;
  98 ( 1100) 
  99 ( 1100)     filstk: array[maxfi] of file;
 100 ( 1100) 
 101 ( 1100)     ident: array[idlength] of char;
 102 ( 1100)     { Only the first 8 characters are
 103 ( 1100)       used to find and differentiate ids }
 104 ( 1100) 
 105 ( 1100)     t0: array[symbsize] of packed char;
 106 ( 1100)            {type of symbol}
 107 ( 1100) 
 108 ( 1100)         {High letter:
 109 ( 1100)          a:array, c:constant, d;const parameter
 110 ( 1100)          e:constant array parameter, f:function
 111 ( 1100)          g:array function, h;8-bit memory var
 112 ( 1100)          i:8-bit array memory variable
 113 ( 1100)          m:16-bit memory variable
 114 ( 1100)          n:16-bit array memory variable
 115 ( 1100)          p:procedure
 116 ( 1100)          q:indexed cpnt
 117 ( 1100)          r,t:function result
 118 ( 1100)          s,u:array function result
 119 ( 1100)          v:variable, w:variable parameter

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         12/11/23 page 3

 120 ( 1100)          x:variable array parameter
 121 ( 1100) 
 122 ( 1100)          Low letter:
 123 ( 1100)          i:integer, c:char, p:packed char
 124 ( 1100)          q:cpoint (pointer to char)
 125 ( 1100)          r:real(array multiple of two)
 126 ( 1100)          s:const cpnt
 127 ( 1100)          f:file, b:boolean, u:undefined  }
 128 ( 1100) 
 129 ( 1100)     t1: array[symbsize] of integer;
 130 ( 1100)          {level}
 131 ( 1100)     t2: array[symbsize] of integer;
 132 ( 1100)          {val,dis,addr}
 133 ( 1100)     t3: array[symbsize] of integer;
 134 ( 1100)          {stack pointer,size of array}
 135 ( 1100) 
 136 ( 1100)     reswcod:array[nresw] of packed char;
 137 ( 1100) 
 138 ( 1100)     stack: array[stacksize] of integer;
 139 ( 1100) 
 140 ( 1100) 
 141 ( 1100) {       * savebyte *    (global)        }
 142 ( 1100) 
 143 ( 1100) proc savebyte(x: integer);
 144 ( 1100) 
 145 ( 1100) begin
 146 ( 1100)     if ofno<>nooutput then begin
 147 ( 1112)       write(@ofno,
 148 ( 1115)         chr(((x and 255) shr 4)+ord('0')));
 149 ( 1136)       write(@ofno,chr((x and 15)+ord('0')))
 150 ( 1151)     end
 151 ( 1154) end {savebyte};
 152 ( 1154) 
 153 ( 1155) {       * crlf *        (global)        }
 154 ( 1155) 
 155 ( 1155) proc newpage; forward;
 156 ( 1158) 
 157 ( 1158) proc crlf;
 158 ( 1158)   var i: integer;
 159 ( 1161) begin
 160 ( 1161)   writeln;
 161 ( 1163)   line:=succ(line);
 162 ( 1173)   if (line div pagelenght)*pagelength=line
 163 ( 1188)     then newpage;
 164 ( 1200) end {crlf};
 165 ( 1200) 
 166 ( 1201) {       error message   (global)        }
 167 ( 1201) 
 168 ( 1201) proc merror(x: integer; code: packed char);
 169 ( 1201) 
 170 ( 1201) var i: integer;
 171 ( 1204)     answer: char;
 172 ( 1204) 
 173 ( 1204) begin
 174 ( 1204)   crlf; numerr:=succ(numerr);
 175 ( 1214)   for i:=2 to tpos do write(' ');
 176 ( 1240)   write('^'); crlf;
 177 ( 1260)   write('*** (',numerr,',',pc,')   ');
 178 ( 1283)   case x of
 179 ( 1283)     01: write('Ident');

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         12/11/23 page 4

 180 ( 1300)     02: write('Ident ',code,' expected');
 181 ( 1336)     03: write('Var declaration');
 182 ( 1362)     04: write('Const expected');
 183 ( 1387)     05: write('Ident unknown');
 184 ( 1411)     06: write('Cannot be assigned');
 185 ( 1440)     07: write('Symbol table overflow');
 186 ( 1472)     08: write('Stack overflow');
 187 ( 1497)     09: write('Expression');
 188 ( 1518)     10: write('Statement');
 189 ( 1538)     11: write('Declaration');
 190 ( 1560)     12: write('Constant');
 191 ( 1579)     13: write('Forward reference: ',code);
 192 ( 1618)     14: write('Type mismatch: ',code);
 193 ( 1653)     15: write('Array size');
 194 ( 1674)     16: write('Array (8-bit)');
 195 ( 1698)     17: write('Real');
 196 ( 1713)     18: write('File table overflow');
 197 ( 1743)     19: write('Parameter')
 198 ( 1763)   end {case};
 199 ( 1765)   writeln;
 200 ( 1765)   write('Continue?');
 201 ( 1781)   read(@key,answer);
 202 ( 1789)   if answer<>'Y' then begin
 203 ( 1797)     crlf; write(prtoff); setemucom(9); close(fno);
 204 ( 1821)     if (ofno<>nooutput) and (ofno<>yesoutput)
 205 ( 1834)       then close(ofno);
 206 ( 1845)     writeln('Aborting compile1 on request');
 207 ( 1880)     abort
 208 ( 1880)   end
 209 ( 1884)   else crlf;
 210 ( 1891)   if (ofno<>nooutput) and (ofno<>yesoutput)
 211 ( 1904)     then close(ofno);
 212 ( 1915)   ofno:=nooutput;
 213 ( 1917) end {merror};
 214 ( 1921) 
 215 ( 1922) proc error(x: integer);
 216 ( 1922) 
 217 ( 1922) begin
 218 ( 1922)   merror(x,'##')
 219 ( 1934) end;
 220 ( 1940) 
 221 ( 1941) {       * push & pop *  (global) }
 222 ( 1941) 
 223 ( 1941) proc push(x: %integer);
 224 ( 1941) 
 225 ( 1941) begin
 226 ( 1941)   if stackpnt>=stacksize then error(8)
 227 ( 1959)   else stackpnt:=succ(stackpnt);
 228 ( 1972)   if stackpnt>stackmax then stackmax:=stackpnt;
 229 ( 1989)   stack[stackpnt]:=x;
 230 ( 2001) end {push};
 231 ( 2009) 
 232 ( 2010) func pop: integer;
 233 ( 2010) 
 234 ( 2010) begin
 235 ( 2010)   pop:=stack[stackpnt];
 236 ( 2019)   stackpnt:=prec(stackpnt)
 237 ( 2027) end {pop};
 238 ( 2036) 
 239 ( 2037) {       * newpage *     (global) }

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         12/11/23 page 5

 240 ( 2037) 
 241 ( 2037) proc newpage;
 242 ( 2037) 
 243 ( 2037) var i: integer;
 244 ( 2040) 
 245 ( 2040) begin
 246 ( 2040)   if (line<>0) and prt then
 247 ( 2049)     write(@printer,formfeed);
 248 ( 2064)   writeln; { Do not count this line}
 249 ( 2070)   if pname[0]<>'x' then begin
 250 ( 2079)     write('R65 COMPILE ');
 251 ( 2095)     write(version);
 252 ( 2100)     if libflg then write(': library ')
 253 ( 2118)     else write(': program ');
 254 ( 2132)     prtext16(output,pname);
 255 ( 2146)   end;
 256 ( 2146)   write(' ');
 257 ( 2148)   prtdate(output);
 258 ( 2156)   writeln(' page ',(line div pagelenght)+1);
 259 ( 2180)   writeln;
 260 ( 2180) end {newpage};
 261 ( 2186) 
 262 ( 2187) {       * getchr *      (global) }
 263 ( 2187) 
 264 ( 2187) proc getchr;
 265 ( 2187) 
 266 ( 2187)   proc writenum(i: integer);
 267 ( 2190)   begin
 268 ( 2190)     if i<=999 then write(' ');
 269 ( 2208)     if i<=99 then write(' ');
 270 ( 2220)     if i<=9 then write(' ');
 271 ( 2232)     write(i);
 272 ( 2237)   end;
 273 ( 2237) 
 274 ( 2238) begin
 275 ( 2238)   if ateof then begin
 276 ( 2244)     writeln('Unexpected eof');
 277 ( 2268)     abort;
 278 ( 2272)   end else begin
 279 ( 2275)     read(@fno,ch);
 280 ( 2285)     if ch=cr then begin
 281 ( 2293)       crlf;
 282 ( 2300)       writenum(line); write(' (');
 283 ( 2313)       if (pc+2)<9999 then write(' ');
 284 ( 2329)       writenum(pc+2); write(') ');
 285 ( 2345)       ch:=' ';
 286 ( 2347)     end {if}
 287 ( 2351)     else if ch=eof then begin
 288 ( 2361)       ateof:=true;
 289 ( 2366)       { we need to suppy one more char }
 290 ( 2370)       { for end. at end of file to work properly }
 291 ( 2370)       ch:=' ';
 292 ( 2372)     end {else if}
 293 ( 2376)     else write(ch);
 294 ( 2384)   end;
 295 ( 2384) end {getchr};
 296 ( 2384) 
 297 ( 2385) {       * splitconv *   (global) }
 298 ( 2385) 
 299 ( 2385) proc splitconv(a: array[1] of %integer;

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         12/11/23 page 6

 300 ( 2385)   var b:array[1] of %integer);
 301 ( 2385) 
 302 ( 2385) begin
 303 ( 2385)   b:=a;
 304 ( 2390) end;
 305 ( 2402) 
 306 ( 2403) {       * init *        (global) }
 307 ( 2403) 
 308 ( 2403) proc init;
 309 ( 2403) 
 310 ( 2403) const char96=chr(20);
 311 ( 2406) 
 312 ( 2406) var i,j,dummy: integer;
 313 ( 2406)     dch: char;
 314 ( 2406)     pch: packed char;
 315 ( 2406)     request: array[15] of char;
 316 ( 2406)     default: boolean;
 317 ( 2406) 
 318 ( 2406) begin {init}
 319 ( 2406)   writeln('R65 PASCAL COMPILER version ', version,
 320 ( 2440)     ', Pass  1');
 321 ( 2458)   ateof:=false;
 322 ( 2460)   cdrive:=fildrv; { drive of compile program }
 323 ( 2471)   fipnt:=-1;
 324 ( 2473)   endstk:=idtabpos-144;
 325 ( 2483)   pc:=2; dpnt:=0; spnt:=0; offset:=2;
 326 ( 2507)   npara:=0; level:=0;
 327 ( 2519)   stackpnt:=0; libflg:=false;
 328 ( 2531)   stackmax:=0;spntmax:=0; numerr:=0;
 329 ( 2549)   t0[0]:='vi'; t1[0]:=0; t2[0]:=0; t3[0]:=0;
 330 ( 2582)   { prepare resword table }
 331 ( 2586)   writeln('Reading list of reserved words');
 332 ( 2623)   asetfile('RESWORDS:W      ',0,cdrive,'W');
 333 ( 2655)   openr(fno);
 334 ( 2661)   for i:=0 to nresw do begin
 335 ( 2678)     read(@fno,pch,dch);
 336 ( 2695)     reswcod[i]:=pch;
 337 ( 2700)     for j:=0 to 7 do reswtab[8*i+j]:=' ';
 338 ( 2739)     j:=0;
 339 ( 2762)     while (j<8) and (dch<>cr) do begin
 340 ( 2784)       read(@fno,dch);
 341 ( 2794)       if (dch<>cr) then
 342 ( 2802)         reswtab[8*i+j]:=dch;
 343 ( 2817)       j:=succ(j)
 344 ( 2828)     end;
 345 ( 2837)     while (dch<>cr) and (dch<>eof) do
 346 ( 2854)       read(@fno,dch)
 347 ( 2863)   end;
 348 ( 2872)   close(fno);
 349 ( 2892) 
 350 ( 2892)   writeln;
 351 ( 2892) 
 352 ( 2898)   sdrive:=1; {default drive for source }
 353 ( 2904)   scyclus:=0;
 354 ( 2906)   agetstring(pname,default,scyclus,sdrive);
 355 ( 2950) 
 356 ( 2950)   agetstring(request,default,dummy,dummy);
 357 ( 2990)   icheck:=false;
 358 ( 2992)   prt:=true; ofno:=yesoutput;
 359 ( 3004)   if not default then begin

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         12/11/23 page 7

 360 ( 3013)     if request[0]<>'/' then argerror(103);
 361 ( 3036)     for i:=1 to 8 do
 362 ( 3044)       case request[i] of
 363 ( 3057)         'P','L': prt:=false;
 364 ( 3077)         'I','R': icheck:=true;
 365 ( 3100)         'N': ofno:=nooutput;
 366 ( 3116)         ' ': begin end
 367 ( 3130)         else argerror(104)
 368 ( 3135)       end; {case}
 369 ( 3157)   end;
 370 ( 3157) 
 371 ( 3157)   asetfile(pname,scyclus,sdrive,'P');
 372 ( 3179)   openr(fno);
 373 ( 3185)   scyclus:=filcyc; { may have changed }
 374 ( 3193) 
 375 ( 3193)   {save cyclus and drive for compile2}
 376 ( 3193)   arglist[8]:=scyclus;
 377 ( 3195)   arglist[9]:=sdrive;
 378 ( 3209)   numarg:=1;
 379 ( 3223) 
 380 ( 3227)   if prt then begin
 381 ( 3231)     write(prton);
 382 ( 3237)     setemucom(8);
 383 ( 3245)   end
 384 ( 3245) 
 385 ( 3245)   line:=0; newpage; crlf; line:=1;
 386 ( 3261)   write('   1 (    4) '); getchr
 387 ( 3279) end {init};
 388 ( 3283) 
 389 ( 3284) 
 390 ( 3284) { ############################# }
 391 ( 3284) {       *scan*              (global)    }
 392 ( 3284) { ############################# }
 393 ( 3284) { scan input and make tokens }
 394 ( 3284) 
 395 ( 3284) proc scan;
 396 ( 3284) 
 397 ( 3284) var count,ll,hh,i,i1,co: integer;
 398 ( 3287)     name: array[7] of char;
 399 ( 3287) 
 400 ( 3287) {       * compresw*     (of scan)       }
 401 ( 3287) 
 402 ( 3287) func compresw(index: integer);
 403 ( 3287) 
 404 ( 3287) var addr,ci,i: integer;
 405 ( 3290) 
 406 ( 3290) begin
 407 ( 3290)   addr:=8*index; i:=0;
 408 ( 3305)   repeat
 409 ( 3309)     ci:=ord(ident[i+1])-ord(reswtab[addr+i]);
 410 ( 3334)     i:=succ(i)
 411 ( 3339)   until (ci<>0) or (i>=8);
 412 ( 3362)   compresw:=ci
 413 ( 3366) end {compresw};
 414 ( 3374) 
 415 ( 3375) {       * clear *       (of scan)              }
 416 ( 3375) 
 417 ( 3375) proc clear; {clears 8 chars of identifier}
 418 ( 3375) 
 419 ( 3375) var i: integer;

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         12/11/23 page 8

 420 ( 3378) 
 421 ( 3378) begin
 422 ( 3378)   for i:=1 to 8 do ident[i]:=' '
 423 ( 3401) end;
 424 ( 3421) 
 425 ( 3422) {       * pack *        (of scan)              }
 426 ( 3422) 
 427 ( 3422) proc pack;  {packs token and ch to token }
 428 ( 3422) 
 429 ( 3422) begin
 430 ( 3422)   token:=packed(low(token),ch); getchr
 431 ( 3441) end;
 432 ( 3445) 
 433 ( 3446) {       * setval *      (of scan)              }
 434 ( 3446) 
 435 ( 3446) proc setval;
 436 ( 3446) 
 437 ( 3446) var r: real;
 438 ( 3449)     n,n1: integer;
 439 ( 3449)     ems: boolean;
 440 ( 3449) 
 441 ( 3449)   func times10(r:real):real;
 442 ( 3449)   { slightly more accurate than 10.0*r }
 443 ( 3449)   var r2,r4:real;
 444 ( 3452)   begin
 445 ( 3452)     r2:=r+r;
 446 ( 3460)     r4:=r2+r2;
 447 ( 3479)     times10:=r2+r4+r4;
 448 ( 3505)   end;
 449 ( 3518) 
 450 ( 3519) begin
 451 ( 3519)   r:=0.0;
 452 ( 3527)   repeat
 453 ( 3533)     r:=times10(r)+conv(ord(ch)-ord('0'));
 454 ( 3554)     getchr;
 455 ( 3566)   until (ch<'0') or (ch>'9');
 456 ( 3580)   if ch<>'.' then begin {numeric integer}
 457 ( 3594)     token:='nu';
 458 ( 3597)     value[0]:=trunc(r+0.5);
 459 ( 3616)   end
 460 ( 3621)   else begin {numeric real}
 461 ( 3624)     n:=0; getchr;
 462 ( 3634)     while (ch<='9') and (ch>='0') do begin
 463 ( 3652)       r:=times10(r)+conv(ord(ch)-ord('0'));
 464 ( 3673)       n:=prec(n); getchr
 465 ( 3690)     end;
 466 ( 3694)     if ch='e' then begin
 467 ( 3704)       ems:=false; getchr;
 468 ( 3717)       case ch of
 469 ( 3717)         '+': getchr;
 470 ( 3732)         '-': begin ems:=true; getchr end
 471 ( 3752)       end;
 472 ( 3754)       if (ch>'9') or (ch<'0') then error(17)
 473 ( 3774)       else begin
 474 ( 3783)         n1:=ord(ch)-ord('0');
 475 ( 3789)         getchr;
 476 ( 3798)         if (ch<='9') and (ch>='0') then begin
 477 ( 3813)           n1:=10*n1+ord(ch)-ord('0');
 478 ( 3830)           getchr
 479 ( 3835)         end;

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         12/11/23 page 9

 480 ( 3839)         if ems then n:=n-n1 else n:=n+n1
 481 ( 3866)       end
 482 ( 3866)     end;
 483 ( 3875)     while n>0 do begin
 484 ( 3885)       n:=prec(n);
 485 ( 3889)       r:=times10(r);
 486 ( 3908)     end;
 487 ( 3914)     while n<0 do begin
 488 ( 3927)       n:=succ(n); r:=0.1*r;
 489 ( 3942)     end;
 490 ( 3955)     splitconv(r,value);
 491 ( 3982)     token:='ru'
 492 ( 3982)   end
 493 ( 3985) end {setval};
 494 ( 3989) 
 495 ( 3990) {       * setid *       (of scan)              }
 496 ( 3990) 
 497 ( 3990) proc setid; {sets one char to ident}
 498 ( 3990) 
 499 ( 3990) begin
 500 ( 3990)   if count<=idlength then begin
 501 ( 4002)     ident[count]:=ch; count:=succ(count)
 502 ( 4017)   end;
 503 ( 4026)   getchr;
 504 ( 4030) end {setid};
 505 ( 4030) 
 506 ( 4031) begin { ***** body of scan ***** }
 507 ( 4031)   count:=1; while ch=' ' do getchr;
 508 ( 4053)   tpos:=curpos;
 509 ( 4059) 
 510 ( 4063)   if (ch<'a') or (ch>'z') then begin {main if}
 511 ( 4081)     if (ch<'0') or (ch>'9') then begin {symb}
 512 ( 4099)       token:=packed(' ',ch); getchr;
 513 ( 4114)       case low(token) of
 514 ( 4118)         '<': if (ch='=') or (ch='>') then pack;
 515 ( 4148)         '>',':': if (ch='=') then pack;
 516 ( 4179)         '{': begin repeat
 517 ( 4189)                getchr until ch='}'; getchr; scan
 518 ( 4207)              end;
 519 ( 4211)         '$': begin {hex constant}
 520 ( 4221)                token:='nu'; value[0]:=0;
 521 ( 4232)                while ((ch>='0')and(ch<='9'))
 522 ( 4250)                      or((ch>='a')and(ch<='f'))
 523 ( 4265)                      do begin
 524 ( 4270)                  if ch>'9' then
 525 ( 4276)                    value[0]:=(value[0] shl 4)
 526 ( 4290)                      +ord(ch)-ord('a')+10
 527 ( 4299)                  else
 528 ( 4301)                    value[0]:=(value[0] shl 4)
 529 ( 4319)                      +ord(ch)-ord('0');
 530 ( 4327)                  getchr
 531 ( 4332)                end {do}
 532 ( 4336)              end; {hex constant}
 533 ( 4342)         chr(39): begin {string}
 534 ( 4349)                token:='st';
 535 ( 4352)                repeat setid until ch=chr(39);
 536 ( 4366)                value[0]:=prec(count); getchr
 537 ( 4382)               end
 538 ( 4386)       end {case of token}
 539 ( 4388)     end {special symbols}

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         12/11/23 page 10

 540 ( 4388)     else setval {numeric value}
 541 ( 4395)   end {main if}
 542 ( 4395)   else begin {ident}
 543 ( 4398)     clear;
 544 ( 4402)     repeat
 545 ( 4402)       setid
 546 ( 4402)       until (ch<'0') or (ch>'z') or
 547 ( 4420)         ((ch>'9') and (ch<'A')) or
 548 ( 4436)         ((ch>'Z') and (ch<'a'));
 549 ( 4452)     ll:=0; hh:=nresw; {look up in resword table}
 550 ( 4468)     repeat
 551 ( 4468)       i:=(ll+hh) shr 1; co:=compresw(i);
 552 ( 4496)       if (co<0) then hh:=prec(i)
 553 ( 4510)       else ll:=succ(i);
 554 ( 4526)       until (co=0) or (ll>hh);
 555 ( 4547)     if (co=0) then
 556 ( 4558)       token:=reswcod[i] {reserved word found}
 557 ( 4565)     else token:='id' {ident}
 558 ( 4579)   end {odent}
 559 ( 4583) end {scan};
 560 ( 4583) 
 561 ( 4584) { * testto/parse * }
 562 ( 4584) 
 563 ( 4584) { parce source for specific token; else error }
 564 ( 4584) 
 565 ( 4584) proc testto(x: packed char); { current token }
 566 ( 4584) begin
 567 ( 4584)   if token<>x then merror(2,x)
 568 ( 4603) end;
 569 ( 4613) 
 570 ( 4614) proc parse(x: packed char); { next token }
 571 ( 4614) begin
 572 ( 4614)   scan; testto(x);
 573 ( 4633) end;
 574 ( 4633) 
 575 ( 4634) { * getlib * }
 576 ( 4634) 
 577 ( 4634) proc getlib;  { read library data }
 578 ( 4634) 
 579 ( 4634) var i,j,nent,addr,size,num,x,base: integer;
 580 ( 4637)     libfil: file;
 581 ( 4637)     ch,ltyp2,dummy: char;
 582 ( 4637)     name: array[7] of char;
 583 ( 4637) 
 584 ( 4637) begin
 585 ( 4637)   scan; if token=' ,' then scan;
 586 ( 4658)   testto('id');
 587 ( 4667)   base:=pc-2;
 588 ( 4673)   if (ofno<>nooutput) then write(@ofno,'L');
 589 ( 4696)   for i:=0 to 7 do begin
 590 ( 4713)     name[i]:=ident[succ(i)];
 591 ( 4722)     if ofno<>nooutput then
 592 ( 4736)       write(@ofno,ident[succ(i)])
 593 ( 4750)   end;
 594 ( 4756)   write(prtoff);
 595 ( 4773)   asetfile(name&'        ',0,cdrive,'L');
 596 ( 4803)   openr(libfil);  { get table file }
 597 ( 4809)   read(@libfil,nent,size);
 598 ( 4824)   {including cr,lf}
 599 ( 4825)   for i:=succ(spnt) to spnt+nent do begin

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         12/11/23 page 11

 600 ( 4852)     if spnt>symbsize then error(7);
 601 ( 4871)     spnt:=succ(spnt); addr:=8*i+1;
 602 ( 4889)     for j:=0 to 7 do begin
 603 ( 4911)       read(@libfil,ch);
 604 ( 4921)       idtab[addr+j]:=ch
 605 ( 4931)     end;
 606 ( 4942)     read(@libfil,ch);
 607 ( 4966)     read(@libfil,t0[i],dummy,t1[i],t2[i],t3[i]);
 608 ( 5015)     t1[i]:=t1[i]+level;
 609 ( 5028)     ltyp2:=high(t0[i]);
 610 ( 5045)     if (ltyp2='p')or(ltyp2='f')
 611 ( 5063)       or(ltyp2='g') then begin
 612 ( 5073)       t2[i]:=t2[i]+base;
 613 ( 5088)       if t3[i]<>0 then begin {stack data}
 614 ( 5111)         read(@libfil,num);
 615 ( 5121)         push(num); t3[i]:=stackpnt;
 616 ( 5136)         for j:=1 to num do begin
 617 ( 5163)           read(@libfil,x);
 618 ( 5173)           push(x);
 619 ( 5184)         end {for j};
 620 ( 5184)       end {stack data}
 621 ( 5198)     end {if ltyp2}
 622 ( 5198)   end {for i}
 623 ( 5198)   level:=succ(level); pc:=pc+size; offset:=pc;
 624 ( 5234)   close(libfil);
 625 ( 5248)   if spnt>spntmax then spntmax:=spnt;
 626 ( 5260)   if stackpnt>stackmax then stackmax:=stackpnt;
 627 ( 5280)   if prt then write(prton);
 628 ( 5298) end {getlib};
 629 ( 5298) 
 630 ( 5299) 
 631 ( 5299) { #################################### }
 632 ( 5299) {       * block * (global): handle one block }
 633 ( 5299) { #################################### }
 634 ( 5299) 
 635 ( 5299) 
 636 ( 5299) proc block(bottom: integer);
 637 ( 5299) 
 638 ( 5299) var l,f9,i,n,stackpn1,forwpn,find,cproc,
 639 ( 5302)     spnt1,dpnt1,parlevel: integer;
 640 ( 5302)     fortab: array[8] of integer;
 641 ( 5302) 
 642 ( 5302) { * find ident *    (of block) }
 643 ( 5302) { this is a fast version for compiler speed }
 644 ( 5302) 
 645 ( 5302) func findid; {search in table for id }
 646 ( 5302) 
 647 ( 5302) var k,i: integer;
 648 ( 5305)     id1: char;
 649 ( 5305) 
 650 ( 5305) begin
 651 ( 5305) 
 652 ( 5305)   i:=1; k:=8*spnt+9; id1:=ident[1];
 653 ( 5329) 
 654 ( 5337)   repeat
 655 ( 5337)     k:=k-8;
 656 ( 5343)     while (idtab[k]<>id1) and (k>0) do k:=k-8;
 657 ( 5379)     if k>0 then begin
 658 ( 5394)        i:=1;
 659 ( 5399)        repeat i:=succ(i)

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         12/11/23 page 12

 660 ( 5403)          until (i>8) or
 661 ( 5419)              (idtab[k+i-1]<>ident[i]);
 662 ( 5445)     end;
 663 ( 5449)     until (i>8) or (k<=0);
 664 ( 5463)   if k<=0 then begin
 665 ( 5474)     findid:=0;
 666 ( 5479)   end
 667 ( 5483)   else
 668 ( 5483)     findid:=(k-1) shr 3;
 669 ( 5495) end;
 670 ( 5500) 
 671 ( 5501) { * code1 *      (of block) }
 672 ( 5501) 
 673 ( 5501) proc code1(x: %integer);  {set one byte p-code}
 674 ( 5501) begin
 675 ( 5501)   savebyte(x); pc:=succ(pc)
 676 ( 5516) end;
 677 ( 5525) 
 678 ( 5526) { * code2 *    (of block) }
 679 ( 5526) 
 680 ( 5526) proc code2(x,y: integer);
 681 ( 5526) begin
 682 ( 5526)   code1(x); code1(y);
 683 ( 5551) end;
 684 ( 5551) 
 685 ( 5552) { * code3 *    (of block) }
 686 ( 5552) 
 687 ( 5552) proc code3(x: integer; y1: %integer);
 688 ( 5552) 
 689 ( 5552) var y: integer;
 690 ( 5555) 
 691 ( 5555) begin {code3}
 692 ( 5555)   y:=y1;
 693 ( 5557)   if (x=34) and (y>=0) and (y<256) then
 694 ( 5588)     code2(32,y)
 695 ( 5594)   else begin
 696 ( 5607)     if (x=35) and (y>-128) and (y<=127) then
 697 ( 5630)       begin
 698 ( 5631)         if (y<0) then y:=y+256;
 699 ( 5651)         code2(33,y);
 700 ( 5668)       end
 701 ( 5668)     else begin
 702 ( 5671)       if (x>=36) and (x<=38) then y:=y-pc-1;
 703 ( 5700)       code1(x); code1(y and 255);
 704 ( 5728)       code1(y shr 8);
 705 ( 5741)     end
 706 ( 5741)   end
 707 ( 5741) end {code3};
 708 ( 5741) 
 709 ( 5742) { * testtype *      (of block) }
 710 ( 5742) 
 711 ( 5742) proc testtype(ttype: char);
 712 ( 5742) 
 713 ( 5742) begin
 714 ( 5742)   if restype<>ttype then
 715 ( 5751)     if (restype<>'u') and (ttype<>'u') then
 716 ( 5773)       merror(14,packed(ttype,restype));
 717 ( 5794) end;
 718 ( 5794) 
 719 ( 5795) { * putsym *   (of block) }

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         12/11/23 page 13

 720 ( 5795) 
 721 ( 5795) proc putsym(ltyp1,ltyp2: char);
 722 ( 5795) 
 723 ( 5795) var i,addr: integer;
 724 ( 5798) begin
 725 ( 5798)   if spnt>symbsize then error(7)
 726 ( 5813)   else spnt:=succ(spnt);
 727 ( 5826)   if spnt>spntmax then spntmax:=spnt;
 728 ( 5843)   t0[spnt]:=packed(ltyp1,ltyp2);
 729 ( 5864)   t3[spnt]:=0;
 730 ( 5874)   addr:=8*spnt;
 731 ( 5880)   for i:=1 to 8 do idtab[addr+i]:=ident[i];
 732 ( 5919)   if ltyp1='v' then begin
 733 ( 5951)     t2[spnt]:=dpnt; dpnt:=succ(dpnt);
 734 ( 5970)   end;
 735 ( 5975)   t1[spnt]:=level
 736 ( 5979) end {putsym};
 737 ( 5987) 
 738 ( 5988) { * checkindex *  (of block) }
 739 ( 5988) 
 740 ( 5988) proc checkindex(lowlim,highlim: integer);
 741 ( 5988) begin
 742 ( 5988)   if icheck then begin
 743 ( 5997)     code3($40,lowlim-1);
 744 ( 6015)     code2(highlim and 255, highlim shr 8)
 745 ( 6028)   end
 746 ( 6035) end;
 747 ( 6035) 
 748 ( 6036) { * getcon *      (of block) }
 749 ( 6036) 
 750 ( 6036) func getcon;
 751 ( 6036) 
 752 ( 6036) var idpnt,val,ii: integer;
 753 ( 6039)     rval: real;
 754 ( 6039)     sign: char;
 755 ( 6039) begin
 756 ( 6039)   restype:='i';
 757 ( 6043)   if token=' -' then begin
 758 ( 6055)     sign:='-'; scan
 759 ( 6064)   end else begin
 760 ( 6071)     sign:='+'; if token=' +' then scan
 761 ( 6085)   end;
 762 ( 6092)   case token of
 763 ( 6092)     'nu': val:=value[0];
 764 ( 6106)     'ru': begin val:=value[0];
 765 ( 6127)             restype:='r' end;
 766 ( 6141)     'st': if value[0]=1 then begin
 767 ( 6161)             restype:='c';
 768 ( 6166)             val:=ord(ident[1])
 769 ( 6172)           end else if value[0]=2 then begin
 770 ( 6192)             val:=(ord(ident[1]) shl 8) +
 771 ( 6204)               ord(ident[2]);
 772 ( 6210)             restype:='p';
 773 ( 6217)           end else if value[0]>2 then begin
 774 ( 6233)             val:=pc;
 775 ( 6236)             for ii:=1 to value[0] do
 776 ( 6252)                         code1(ord(ident[ii]));
 777 ( 6279)             code1(0); value[0]:=0; restype:='s';
 778 ( 6311)           end else error(15);
 779 ( 6326)     'cr': begin parse(' ('); scan; val:=getcon;

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         12/11/23 page 14

 780 ( 6356)             if (val>127) or (val<0) then
 781 ( 6374)               error(12);
 782 ( 6386)             testtype('i');
 783 ( 6394)             restype:='c'; parse(' )');
 784 ( 6409)           end;
 785 ( 6409)     'tr': begin val:=1; restype:='b' end;
 786 ( 6432)     'fa': begin val:=0; restype:='b' end;
 787 ( 6455)     'cp': begin
 788 ( 6466)             scan; val:=getcon;
 789 ( 6476)             testtype('i'); restype:='q';
 790 ( 6490)           end;
 791 ( 6494)     ' @': begin scan; val:=getcon;
 792 ( 6515)             testtype('i'); restype:='f'
 793 ( 6527)           end
 794 ( 6529)     else begin
 795 ( 6536)       testto('id'); idpnt:=findid;
 796 ( 6551)       if (idpnt>0) and (high(t0[idpnt])='c')
 797 ( 6573)       then begin
 798 ( 6575)         val:=t2[idpnt];
 799 ( 6582)         restype:=low(t0[idpnt]);
 800 ( 6598)         if restype='r' then
 801 ( 6609)           value[1]:=t3[idpnt];
 802 ( 6619)       end
 803 ( 6627)       else begin error(4); val:=0;
 804 ( 6640)         restype:='i'
 805 ( 6644)       end
 806 ( 6646)     end
 807 ( 6650)   end {case};
 808 ( 6652)   if sign='-' then
 809 ( 6658)     case restype of
 810 ( 6662)       'i': getcon:=-val;
 811 ( 6673)       'r': begin value[0]:=val;
 812 ( 6694)              splitconv(value,rval);
 813 ( 6726)              splitconv(-rval,value);
 814 ( 6751)              getcon:=value[0]
 815 ( 6753)            end
 816 ( 6753)       else error(12)
 817 ( 6766)     end {case}
 818 ( 6774)   else getcon:=val;
 819 ( 6777) end {getcon};
 820 ( 6785) 
 821 ( 6786) { * deccon *         ( of block ) }
 822 ( 6786) 
 823 ( 6786) proc deccon;    { declare constant }
 824 ( 6786) begin
 825 ( 6786)   if token=' ;' then scan;
 826 ( 6806)   testto('id');
 827 ( 6815)   putsym('c','i');
 828 ( 6825)   parse(' ='); scan;
 829 ( 6838)   t2[spnt]:=getcon;
 830 ( 6848)   if (restype='r') then t3[spnt]:=value[1];
 831 ( 6868)   if restype<>'i' then
 832 ( 6882)     t0[spnt]:=packed('c',restype);
 833 ( 6897)   scan
 834 ( 6901) end {deccon};
 835 ( 6905) 
 836 ( 6906) { * decvar *          ( of block ) }
 837 ( 6906) 
 838 ( 6906) proc decvar(typ1,typ2: char);
 839 ( 6906) begin

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         12/11/23 page 15

 840 ( 6906)   if token=' ,' then scan;
 841 ( 6926)   testto('id');
 842 ( 6935)   putsym(typ1,typ2);
 843 ( 6949)   scan;
 844 ( 6953) end {decvar};
 845 ( 6953) 
 846 ( 6954) { * gettype *         ( of block ) }
 847 ( 6954) 
 848 ( 6954) proc gettype(var typ2: char;
 849 ( 6954)   var aflag,uflag: boolean; var n: integer);
 850 ( 6954) 
 851 ( 6954) begin
 852 ( 6954)   aflag:=false; n:=0; uflag:=false;
 853 ( 6973)   scan;
 854 ( 6981)   if token='ar' then begin
 855 ( 6989)     parse(' ['); scan;
 856 ( 7005)     n:=getcon; testtype('i');
 857 ( 7023)     if (n<1) then begin error(15); n:=1 end;
 858 ( 7047)     parse(' ]'); parse('of'); scan;
 859 ( 7069)     aflag:=true
 860 ( 7069)   end;
 861 ( 7075)   if token=' %' then begin
 862 ( 7083)     scan; uflag:=true
 863 ( 7090)   end;
 864 ( 7096)   case token of
 865 ( 7096)     'in': typ2:='i';
 866 ( 7110)     'ch': typ2:='c';
 867 ( 7127)     'pa': begin parse ('ch'); typ2:='p' end;
 868 ( 7157)     'bo': typ2:='b';
 869 ( 7170)     'rl': begin typ2:='r'; aflag:=true;
 870 ( 7193)             n:=prec(2*succ(n)) end;
 871 ( 7210)     'cp': typ2:='q';
 872 ( 7223)     'fl': typ2:='f'
 873 ( 7238)     else begin error(11); typ2:='i';end
 874 ( 7261)   end {case}
 875 ( 7263) end {gettype};
 876 ( 7263) 
 877 ( 7264) { * variable *        ( of block) }
 878 ( 7264) 
 879 ( 7264) proc variable;  { variable declarations }
 880 ( 7264) 
 881 ( 7264) var typ1,typ2: char;
 882 ( 7267)     i,l: integer;
 883 ( 7267)     aflag,uflag: boolean;
 884 ( 7267) 
 885 ( 7267) begin
 886 ( 7267)   scan;
 887 ( 7273)   repeat {main loop}
 888 ( 7273)     l:=0;
 889 ( 7275)     repeat decvar('v','i'); l:=succ(l);
 890 ( 7293)     until token<> ' ,';
 891 ( 7305)     testto(' :');
 892 ( 7318)     gettype(typ2,aflag,uflag,n);
 893 ( 7354)     if uflag then error(11);
 894 ( 7369)     if aflag then typ1:='a' else typ1:='v';
 895 ( 7387)     if typ1='a' then begin {array}
 896 ( 7401)        dpnt:=dpnt-l; {variable has been assumed}
 897 ( 7414)        for i:=succ(spnt-l) to spnt do begin
 898 ( 7441)          t2[i]:=dpnt; t3[i]:=n;
 899 ( 7457)          dpnt:=succ(dpnt+n);

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         12/11/23 page 16

 900 ( 7474)       end
 901 ( 7479)     end {array};
 902 ( 7493)     for i:=succ(spnt-l) to spnt do
 903 ( 7507)       t0[i]:=packed(typ1,typ2);
 904 ( 7533)     parse(' ;');scan
 905 ( 7560)   until token<>'id' {end main loop}
 906 ( 7571) end {variable};
 907 ( 7575) 
 908 ( 7576) { * fixup *           ( of block ) }
 909 ( 7576) 
 910 ( 7576) proc fixup(x: integer);
 911 ( 7576) begin
 912 ( 7576)   if ofno<>nooutput then begin
 913 ( 7588)     write(@ofno,'F');
 914 ( 7599)     savebyte(succ(x-offset) and 255);
 915 ( 7618)     savebyte(succ(x-offset) shr 8);
 916 ( 7637)     savebyte((pc-x-1) and 255);
 917 ( 7658)     savebyte((pc-x-1) shr 8);
 918 ( 7679)   end;
 919 ( 7679) end;
 920 ( 7679) 
 921 ( 7680) { * function *        ( of block ) }
 922 ( 7680) 
 923 ( 7680) proc function;
 924 ( 7680) 
 925 ( 7680) var n: integer;
 926 ( 7683)     typ1,typ2: char;
 927 ( 7683)     aflag,uflag: boolean;
 928 ( 7683) begin
 929 ( 7683)   if token<>' :' then begin
 930 ( 7693)     aflag:=false; uflag:=false; typ2:='i' end
 931 ( 7710)   else begin
 932 ( 7717)     gettype(typ2,aflag,uflag,n);
 933 ( 7753)     scan
 934 ( 7753)   end;
 935 ( 7757)   if aflag then begin
 936 ( 7761)     typ1:='s'; t3[succ(cproc)]:=n;
 937 ( 7775)     t2[succ(cproc)]:=t2[succ(cproc)]-n
 938 ( 7797)   end
 939 ( 7797)   else typ1:='r';
 940 ( 7811)   t0[succ(cproc)]:=packed(typ1,typ2);
 941 ( 7829)   if uflag then typ2:='u';
 942 ( 7842)   if aflag then typ1:='g'
 943 ( 7853)   else typ1:='f';
 944 ( 7864)   t0[cproc]:=packed(typ1,typ2);
 945 ( 7881) end {function};
 946 ( 7885) 
 947 ( 7886) { * parameter *       ( of block ) }
 948 ( 7886) 
 949 ( 7886) proc parameter;
 950 ( 7886) 
 951 ( 7886) var counter1,counter2,i,n,bs: integer;
 952 ( 7889)     aflag,uflag: boolean;
 953 ( 7889)     vtype1,vtype2: char;
 954 ( 7889)     vtype: packed char;
 955 ( 7889) 
 956 ( 7889) begin
 957 ( 7889)   push(0); { dummy size, fixed later }
 958 ( 7899)   if find=0 then t3[spnt-npara]:=stackpnt
 959 ( 7918)   else bs:=stackpnt;

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         12/11/23 page 17

 960 ( 7929)   counter1:=0
 961 ( 7937)   repeat {main loop}
 962 ( 7943)     counter2:=0;
 963 ( 7945)     vtype1:='d'; vtype2:='i';
 964 ( 7957)     scan;
 965 ( 7965)     if token='co' then scan
 966 ( 7973)     else if token='va' then begin
 967 ( 7991)       scan; vtype1:='w' end; {variable param}
 968 ( 8004)     end;
 969 ( 8004)     repeat {inner loop}
 970 ( 8004)       decvar(vtype1,vtype2);
 971 ( 8018)       t2[spnt]:=parlevel;
 972 ( 8022)       parlevel:=succ(parlevel);
 973 ( 8034)       npara:=succ(npara);
 974 ( 8043)       counter2:=succ(counter2);
 975 ( 8052)       until token<>' ,';
 976 ( 8064)     uflag:=false;aflag:=false; n:=0;
 977 ( 8082)     if token<>' :' then
 978 ( 8093)       vtype2:='i' {assume integer }
 979 ( 8099)     else begin
 980 ( 8106)       gettype(vtype2,aflag,uflag,n);
 981 ( 8142)       if n>63 then error(15);
 982 ( 8160)       scan
 983 ( 8160)     end;
 984 ( 8164)     if aflag then begin
 985 ( 8168)       vtype1:=succ(vtype1);
 986 ( 8175)       parlevel:=parlevel-counter2;
 987 ( 8184)     end;
 988 ( 8193)     vtype:=packed(vtype1,vtype2);
 989 ( 8202)     for i:=1 to counter2 do begin
 990 ( 8225)       if uflag then push(packed(vtype1,'u'))
 991 ( 8239)       else push(vtype);
 992 ( 8258)       if aflag then begin
 993 ( 8262)         push(n); t3[spnt-counter2+i]:=n;
 994 ( 8289)         t2[spnt-counter2+i]:=parlevel;
 995 ( 8311)         parlevel:=succ(parlevel)+n;
 996 ( 8324)       end {then};
 997 ( 8333)       t0[spnt-counter2+i]:=vtype;
 998 ( 8347)     end {for};
 999 ( 8355)     if aflag then counter2:=2*counter2;
1000 ( 8378)     counter1:=counter1+counter2;
1001 ( 8391)     until token<>' ;'; {outer loop}
1002 ( 8411)   testto(' )'); scan;
1003 ( 8424)   if find=0 then
1004 ( 8430)     stack[t3[spnt-npara]]:=counter1
1005 ( 8447)   else begin {information is allready there}
1006 ( 8458)     stack[bs]:=counter1;
1007 ( 8462)     n:=t3[fortab[find]]; {existing stack data}
1008 ( 8486)     for i:=0 to stackpnt-bs do
1009 ( 8496)       if stack[bs+1]<>stack[n+1]
1010 ( 8527)         then merror(13,'pa'); {parameter wrong}
1011 ( 8561)     stackpnt:=prec(bs) {clear the new info}
1012 ( 8565)   end  {else}
1013 ( 8570) end {parameter};
1014 ( 8570) 
1015 ( 8571) { * memory *              ( of block) }
1016 ( 8571) 
1017 ( 8571) proc memory;
1018 ( 8571) 
1019 ( 8571) var typ1,typ2:char;

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         12/11/23 page 18

1020 ( 8574)     i,l,n: integer;
1021 ( 8574)     aflag,uflag: boolean;
1022 ( 8574) 
1023 ( 8574) begin
1024 ( 8574)   scan;
1025 ( 8580)   repeat {main loop}
1026 ( 8580)     l:=0;
1027 ( 8582)     repeat
1028 ( 8586)       decvar('m','i');
1029 ( 8596)       l:=succ(l); testto(' ='); scan;
1030 ( 8618)       n:=getcon; testtype('i');
1031 ( 8636)       scan; t2[spnt]:=n;
1032 ( 8644)     until token<>' ,';
1033 ( 8659)     testto(' :');
1034 ( 8672)     gettype(typ2,aflag,uflag,n);
1035 ( 8708)     if uflag then error(11);
1036 ( 8723)     scan;
1037 ( 8727)     if token=' &' then begin {8-bit}
1038 ( 8738)       typ1:='h'; scan
1039 ( 8744)     end
1040 ( 8748)     else typ1:='m';
1041 ( 8753)     if aflag then typ1:=succ(typ1);
1042 ( 8768)     for i:=succ(spnt-l) to spnt do begin
1043 ( 8800)       t0[i]:=packed(typ1,typ2);
1044 ( 8813)       t3[i]:=n;
1045 ( 8821)     end;
1046 ( 8829)     testto(' ;'); scan;
1047 ( 8856)   until token<>'id';
1048 ( 8863) end {memory};
1049 ( 8867) 
1050 ( 8868) 
1051 ( 8868) {######################################}
1052 ( 8868) { * statement *           ( of block ) }
1053 ( 8868) {######################################}
1054 ( 8868) 
1055 ( 8868) proc statmnt;
1056 ( 8868) 
1057 ( 8868) var idpnt,relad,k2,savpc,bottom1: integer;
1058 ( 8871)     device,wln: boolean;
1059 ( 8871)     savtp1,vartyp2: char;
1060 ( 8871)     wl: boolean;
1061 ( 8871) 
1062 ( 8871) { * code4 *               ( of statement ) }
1063 ( 8871) 
1064 ( 8871) proc code4(x,y1,z1: integer); {set 4-byte code}
1065 ( 8871) 
1066 ( 8871) var y,z: integer;
1067 ( 8874) 
1068 ( 8874) begin
1069 ( 8874)   y:=y1; z:=z1;
1070 ( 8884)   if y<0 then y:=y+256;
1071 ( 8909)   if x=43 then z:=z-pc-2;
1072 ( 8935)   code1(x);code1(y);code1(z and 255);
1073 ( 8973)   code1(z shr 8)
1074 ( 8979) end {code4};
1075 ( 8986) 
1076 ( 8987) { * testferror *         ( of statement) ) }
1077 ( 8987) 
1078 ( 8987) proc testferror;
1079 ( 8987) begin

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         12/11/23 page 19

1080 ( 8987)   code1($4f);
1081 ( 9000) end;
1082 ( 9000) 
1083 ( 9001) { * gpval *              ( of statement ) }
1084 ( 9001) 
1085 ( 9001) proc gpval(idpnt: integer;
1086 ( 9001)   dir: boolean; typ: char);
1087 ( 9001) 
1088 ( 9001) var d: integer;
1089 ( 9004) 
1090 ( 9004) begin {gpval}
1091 ( 9004)   if dir then d:=1 else d:=0;
1092 ( 9024)   case typ of
1093 ( 9028)   'h':  begin code3($22,t2[idpnt]);
1094 ( 9055)           if dir then code1($3f);
1095 ( 9070)           code1($17+d) end;
1096 ( 9083)   'm':  begin code3($22,t2[idpnt]);
1097 ( 9109)           code1($3d+d) end;
1098 ( 9122)   'i':  begin
1099 ( 9132)           if dir then code1($3f);
1100 ( 9147)           code3($22,t2[idpnt]);
1101 ( 9163)           code1(3);
1102 ( 9171)           if dir then code1($3f);
1103 ( 9186)           code1($17+d) end;
1104 ( 9199)   'n':  begin if dir then code1($3f);
1105 ( 9224)           code3($22,1); code1($12);
1106 ( 9242)           code3($22,t2[idpnt]);
1107 ( 9258)           code1(3); code1($3d+d) end
1108 ( 9279)   else begin
1109 ( 9282)     if typ='q' then begin
1110 ( 9289)       code4($55,level-t1[idpnt],2*t2[idpnt]);
1111 ( 9324)     end else
1112 ( 9324)       code4($27+2*d+relad,level-t1[idpnt],
1113 ( 9350)         2*t2[idpnt]);
1114 ( 9372)     end
1115 ( 9372)   end {case}
1116 ( 9374) end;
1117 ( 9374) 
1118 ( 9375) { FORWARD decl. of mainexp (of statement) }
1119 ( 9375) 
1120 ( 9375) proc mainexp(reqtype: char;
1121 ( 9375)   var arsize: integer); forward;
1122 ( 9378) 
1123 ( 9378) { * express *           ( of statement ) }
1124 ( 9378) 
1125 ( 9378) proc express; {requests a normal 16-bit result }
1126 ( 9378) 
1127 ( 9378) var resultsize: integer;
1128 ( 9381) 
1129 ( 9381) begin {express}
1130 ( 9381)   mainexp('n',resultsize);
1131 ( 9399)   if resultsize<>0 then error(15)
1132 ( 9411) end {express};
1133 ( 9417) 
1134 ( 9418) { * arrayexp *          ( of mainexp) }
1135 ( 9418) 
1136 ( 9418) proc arrayexp(size: integer; eltype: char);
1137 ( 9418) 
1138 ( 9418) var resultsize: integer;
1139 ( 9421) 

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         12/11/23 page 20

1140 ( 9421) begin
1141 ( 9421)   mainexp(eltype,resultsize);
1142 ( 9441)   if resultsize<>size then error(15);
1143 ( 9461)   testtype(eltype);
1144 ( 9471) end;
1145 ( 9471) 
1146 ( 9472) { * getvar *            ( of statement ) }
1147 ( 9472) 
1148 ( 9472) proc getvar;
1149 ( 9472) begin
1150 ( 9472)   vartyp2:=high(t0[idpnt]);
1151 ( 9485)   vartype:=low(t0[idpnt]);
1152 ( 9498)   scan;
1153 ( 9507)   if (vartype='q') and (token=' [') and
1154 ( 9522)     ((vartyp2='v') or (vartyp2='d')) then begin
1155 ( 9539)     vartyp2:='q'; vartype:='c';
1156 ( 9550)   end;
1157 ( 9554)   case vartyp2 of
1158 ( 9554)   'a','x','s','i','n','q':
1159 ( 9597)       begin
1160 ( 9600)         if token=' [' then begin
1161 ( 9608)           scan; express; relad:=1;
1162 ( 9621)           if vartyp2='r' then begin
1163 ( 9632)             relad:=3;
1164 ( 9637)             code3($22,1); code1($12)
1165 ( 9653)           end;
1166 ( 9659)           if (vartyp2='q') and (t3[idpnt]=0) then
1167 ( 9677)             checkindex(0,63)
1168 ( 9685)           else
1169 ( 9691)             checkindex(0,t3[idpnt]);
1170 ( 9710)           testtype('i'); testto(' ]'); scan;
1171 ( 9731)         end else relad:=2;
1172 ( 9736)       end;
1173 ( 9740)   'v','w','r','h','m': relad:=0;
1174 ( 9780)   'c','d','e','t','u': error(6)
1175 ( 9824)   else error(1)
1176 ( 9835)   end {case}
1177 ( 9843) end {getvar};
1178 ( 9843) 
1179 ( 9844) { * prcall *            ( of statement ) }
1180 ( 9844) 
1181 ( 9844) proc prcall (idpn1: integer);
1182 ( 9844) 
1183 ( 9844) var bstack,numpar,i,n,n2: integer;
1184 ( 9847) 
1185 ( 9847) { body of prcall follows later }
1186 ( 9847) 
1187 ( 9847) { * prcall1 *           ( of prcall ) }
1188 ( 9847) 
1189 ( 9847) proc prcall1;
1190 ( 9847) var ressize:integer;
1191 ( 9850) 
1192 ( 9850)   proc prcall3;
1193 ( 9850)   begin {prcall3}
1194 ( 9853)     testto('id');
1195 ( 9864)     idpnt:=findid;
1196 ( 9870)     if idpnt=0 then error(5);
1197 ( 9892)     getvar;
1198 ( 9896)     if chr(stack[i] and 255)<>vartype then
1199 ( 9908)       if chr(stack[i] and 255)<>'u' then

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         12/11/23 page 21

1200 ( 9930)         merror(14,'01');
1201 ( 9945)       push(idpnt);
1202 ( 9955)   end {prcall3};
1203 ( 9955) 
1204 ( 9956) begin {prcall1}
1205 ( 9956)   case chr(stack[i] shr 8) of
1206 ( 9969)     'd':  begin
1207 ( 9977)             if chr(stack[i] and 255) = 'q' then
1208 ( 9991)               mainexp('q',ressize)
1209 ( 9997)             else
1210 (10011)               express;
1211 (10018)             if chr(stack[i] and 255)<>'u' then
1212 (10032)               testtype(chr(stack[i] and 255));
1213 (10054)           end;
1214 (10054)     'e':  begin
1215 (10064)             arrayexp(stack[succ(i)],
1216 (10069)               chr(stack[i]));
1217 (10088)             i:=succ(i);
1218 (10092)           end;
1219 (10097)     'w':  begin
1220 (10107)             prcall3;
1221 (10111)             if relad<>0 then merror(14,'02');
1222 (10132)             gpval(idpnt,false,vartyp2);
1223 (10148)           end;
1224 (10148)     'x':  begin
1225 (10158)             prcall3;
1226 (10162)             if relad<>2 then merror(14,'03');
1227 (10183)             if vartyp2='i' then error(16);
1228 (10201)             i:=succ(i);
1229 (10205)             if stack[i]<>t3[idpnt] then
1230 (10222)               error(15);
1231 (10238)             if vartyp2='n' then begin
1232 (10245)               code3($22,t2[idpnt]);
1233 (10264)               code1($3d);
1234 (10272)             end else code4($27,level-t1[idpnt],
1235 (10285)               2*t2[idpnt]);
1236 (10307)             code2($3b,stack[i]);
1237 (10323)           end
1238 (10323)     else merror(14,'04')
1239 (10331)   end {case}
1240 (10339) end {prcall1};
1241 (10339) 
1242 (10340) proc prcall2;
1243 (10340) begin
1244 (10340)   if n>0 then code3(35,-2*n);
1245 (10371)   n:=0
1246 (10371) end {prcall2};
1247 (10377) 
1248 (10378) begin {body of prcall}
1249 (10378)   if t3[idpn1]<>0 then begin
1250 (10391)     bstack:=t3[idpn1];
1251 (10398)     numpar:=stack[bstack];
1252 (10410)     parse(' ('); scan;
1253 (10431)     for i:=succ(bstack) to bstack+numpar do
1254 (10444)     begin
1255 (10458)       prcall1;
1256 (10462)       if i<bstack+numpar then begin
1257 (10476)         testto(' ,'); scan
1258 (10488)       end
1259 (10492)     end;

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         12/11/23 page 22

1260 (10492)     testto(' )');
1261 (10515)   end {then};
1262 (10515)   code4(43,level-t1[idpn1],t2[idpn1]);
1263 (10544)   if t3[idpn1]<>0 then begin
1264 (10555)     n:=0; i:=bstack+numpar;
1265 (10568)     repeat
1266 (10577)       case chr(stack[i] shr 8) of
1267 (10588)       'd':  n:=succ(n);
1268 (10600)       'w':  begin
1269 (10615)               prcall2; idpnt:=pop;
1270 (10625)               gpval(idpnt,true,
1271 (10635)                   high(t0[idpnt]));
1272 (10650)             end;
1273 (10650)       chr(0): begin
1274 (10660)             n2:=stack[i];
1275 (10664)             i:=i-1;
1276 (10678)             case chr(stack[i] shr 8) of
1277 (10694)               'e':  n:=succ(n+n2);
1278 (10711)               'x':  begin
1279 (10726)                       prcall2;
1280 (10730)                       idpnt:=pop;
1281 (10736)                       if high(t0[idpnt])='n'
1282 (10749)                       then begin
1283 (10752)                         code3($22,t2[idpnt]+
1284 (10761)                           2*t3[idpnt]);
1285 (10783)                         code1($3e)
1286 (10785)                       end else
1287 (10791)                         code4(41,
1288 (10796)                           level-t1[idpnt],
1289 (10804)                           2*(t2[idpnt]+
1290 (10815)                           t3[idpnt]));
1291 (10835)                       code2($3c,t3[idpnt])
1292 (10841)                     end
1293 (10851)               end {case}
1294 (10853)             end
1295 (10853)       end; {case}
1296 (10855)       i:=prec(i);
1297 (10859)     until i=bstack;
1298 (10868)     prcall2
1299 (10876)   end
1300 (10880) end {prcall};
1301 (10880) 
1302 (10881) 
1303 (10881) {###################################}
1304 (10881) { * mainexp *       ( of statement) }
1305 (10881) {###################################}
1306 (10881) {  see forward declaration above    }
1307 (10881) 
1308 (10881) proc mainexp(reqtype: char;
1309 (10881)   var arsize: integer);
1310 (10881) 
1311 (10881) { variables of mainexp}
1312 (10881) var opcode,roff: integer;
1313 (10884)     savtype: char;
1314 (10884) 
1315 (10884) { * argument *         ( of mainexp ) }
1316 (10884) 
1317 (10884) proc argument(rtype: char);
1318 (10884) begin
1319 (10884)   parse(' ('); scan; express;

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         12/11/23 page 23

1320 (10906)   testtype(rtype);
1321 (10916)   testto(' )'); scan
1322 (10925) end; {argument}
1323 (10930) 
1324 (10930) {#######################################}
1325 (10930) { * simexp *             ( of mainexp ) }
1326 (10930) {#######################################}
1327 (10930) 
1328 (10930) proc simexp(var arsize1: integer);
1329 (10930) 
1330 (10930) var opcode: integer;
1331 (10933)     sign: char;
1332 (10933) 
1333 (10933) {body of simexp  follows later }
1334 (10933) 
1335 (10933) {#######################################}
1336 (10933) { * term *               ( of simexp )  }
1337 (10933) {#######################################}
1338 (10933) 
1339 (10933) proc term(var arsize2: integer);
1340 (10933) 
1341 (10933) var opcode: integer;
1342 (10936) 
1343 (10936) { body of term follows later }
1344 (10936) 
1345 (10936) {#######################################}
1346 (10936) { * factor *             ( of term )    }
1347 (10936) {#######################################}
1348 (10936) 
1349 (10936) proc factor(var arsize3: integer);
1350 (10936) 
1351 (10936) var i, idpnt: integer;
1352 (10939)     h: char;
1353 (10939) 
1354 (10939) { * index *              ( of factor )  }
1355 (10939) 
1356 (10939) proc index(chk: boolean);
1357 (10939) 
1358 (10939) var savtype: char;
1359 (10942) 
1360 (10942) begin {index}
1361 (10942)   scan; savtype:=restype;
1362 (10948)   express; testtype('i'); testto(' ]');
1363 (10977)   if savtype='r' then begin
1364 (10984)     code3($22,1); code1($12);
1365 (11005)   end;
1366 (11005)   if chk then begin
1367 (11009)     if (savtype='q') and (t3[idpnt]=0) then
1368 (11030)       { is an arrayed cpnt }
1369 (11031)       checkindex(0,63)
1370 (11038)     else
1371 (11044)       checkindex(0,t3[idpnt]);
1372 (11063)   end;
1373 (11063)   restype:=savtype; scan
1374 (11071) end;
1375 (11075) 
1376 (11076) 
1377 (11076) begin { *** body of factor *** }
1378 (11076)   arsize3:=0;
1379 (11080)   case token of

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         12/11/23 page 24

1380 (11084)     'id': begin {identifier }
1381 (11096)             idpnt:=findid;
1382 (11102)             if idpnt=0 then error(5);
1383 (11124)             restype:=low(t0[idpnt]);
1384 (11132)             h:=high(t0[idpnt]);
1385 (11145)             case h of
1386 (11150)               'v','w','d':
1387 (11172)                     begin
1388 (11175)                       scan;
1389 (11179)                       if (restype='q') and (token=' [')
1390 (11193)                       then begin
1391 (11195)                         code4(39,level-t1[idpnt],
1392 (11208)                           2*t2[idpnt]);
1393 (11230)                         index(true);
1394 (11238)                         code1($03);
1395 (11246)                         code1($54);
1396 (11254)                         restype:='c';
1397 (11256)                       end else
1398 (11260)                         code4(39,level-t1[idpnt],
1399 (11273)                           2*t2[idpnt]);
1400 (11295)                     end;
1401 (11295)               'h':  begin code3($22,t2[idpnt]);
1402 (11321)                       code1($17); scan end;
1403 (11333)               'i':  begin code3($22,t2[idpnt]);
1404 (11359)                       scan;
1405 (11363)                       if token=' [' then begin
1406 (11371)                         index(true); code1($03);
1407 (11390)                         code1($17)
1408 (11392)                       end else begin
1409 (11401)                         error(16)
1410 (11403)                       end
1411 (11409)                     end;
1412 (11409)               'm':  begin code3($22,t2[idpnt]);
1413 (11435)                       code1($3d); scan
1414 (11443)                     end;
1415 (11447)               'n':  begin code3($22,t2[idpnt]);
1416 (11473)                       scan;
1417 (11477)                       if token=' [' then begin
1418 (11485)                         index(true);
1419 (11496)                         code3($22,1);code1($12);
1420 (11514)                         code1($03); code1($3d);
1421 (11530)                         if restype='r' then
1422 (11536)                         begin
1423 (11537)                           code2($3b,1);
1424 (11550)                           arsize3:=1
1425 (11550)                         end
1426 (11552)                       end else begin
1427 (11559)                         code1($3d);
1428 (11567)                         code2($3b,t3[idpnt]);
1429 (11583)                         arsize3:=t3[idpnt];
1430 (11587)                       end
1431 (11595)                     end;
1432 (11595)               'r','t': begin
1433 (11612)                       code3(35,2);
1434 (11622)                       idpnt:=prec(idpnt);
1435 (11626)                       prcall(idpnt); scan;
1436 (11645)                       restype:=low(t0[idpnt]);
1437 (11653)                     end;
1438 (11658)               'c':  if low(t0[idpnt])<>'r' then begin
1439 (11680)                       code3(34,t2[idpnt]);

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         12/11/23 page 25

1440 (11699)                       scan;
1441 (11703)                       if restype='s' then begin
1442 (11710)                         if token=' [' then begin
1443 (11721)                           index(true);
1444 (11732)                           code1($03);
1445 (11740)                           code1($58);
1446 (11748)                           code1($54);
1447 (11756)                           restype:='c';
1448 (11758)                         end else begin
1449 (11765)                           code1($58);
1450 (11773)                           restype:='q';
1451 (11775)                         end;
1452 (11779)                       end;
1453 (11779)                       {scan;}
1454 (11779)                     end else begin
1455 (11782)                       code2($3a,2);
1456 (11792)                       code2(t2[idpnt] and 255,
1457 (11802)                         t2[idpnt] shr 8);
1458 (11820)                       code2(t3[idpnt] and 255,
1459 (11830)                         t3[idpnt] shr 8);
1460 (11848)                       arsize3:=1; scan
1461 (11854)                     end;
1462 (11858)               'a','e','x':
1463 (11879)                     begin scan;
1464 (11886)                       if token=' [' then begin
1465 (11894)                         index(true);
1466 (11905)                         code4($28,
1467 (11907)                             level-t1[idpnt],
1468 (11915)                             2*t2[idpnt]);
1469 (11937)                         if restype='r' then
1470 (11943)                         begin
1471 (11944)                           code2($3b,1);
1472 (11957)                           arsize3:=1
1473 (11957)                         end
1474 (11959)                       end else begin
1475 (11966)                         code4($27,
1476 (11968)                             level-t1[idpnt],
1477 (11976)                             2*t2[idpnt]);
1478 (11998)                         code2($3b,t3[idpnt]);
1479 (12014)                         arsize3:=t3[idpnt];
1480 (12018)                       end
1481 (12026)                     end;
1482 (12026)               's','u':
1483 (12040)                     begin
1484 (12043)                       code3(35,2*t3[idpnt]+2);
1485 (12065)                       idpnt:=prec(idpnt);
1486 (12069)                       prcall(idpnt); scan;
1487 (12088)                       restype:=low(t0[idpnt]);
1488 (12096)                       idpnt:=succ(idpnt);
1489 (12105)                       arsize3:=t3[idpnt]
1490 (12110)                     end
1491 (12114)               else error(1)
1492 (12127)             end {case}
1493 (12135)           end; {identifier}
1494 (12138)     'nu': begin code3(34,value[0]); scan;
1495 (12164)             restype:='i'
1496 (12164)           end;
1497 (12170)     'ru': begin code2($3a,2);
1498 (12191)             code2(value[0] and 255,
1499 (12199)               value[0] shr 8);

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         12/11/23 page 26

1500 (12215)             code2(value[1] and 255,
1501 (12223)               value[1] shr 8);
1502 (12239)             scan; restype:='r';
1503 (12245)             arsize3:=1
1504 (12249)           end;
1505 (12255)     'st': begin
1506 (12266)           if (reqtype='n') and (value[0]<3)
1507 (12281)             then begin
1508 (12283)               if value[0]<2 then begin
1509 (12295)                 code3(34,ord(ident[1]));
1510 (12312)                 restype:='c'
1511 (12312)               end else begin
1512 (12321)                 code3(34,packed(ident[1],
1513 (12325)                   ident[2]));
1514 (12342)                 restype:='p'
1515 (12342)               end
1516 (12344)             end else begin
1517 (12351)               case reqtype of
1518 (12351)                 'c','u','n','q':
1519 (12380)                     begin
1520 (12383)                       if (vartype='q') or
1521 (12390)                          (reqtype='q') then begin
1522 (12398)                         arsize3:=0;
1523 (12403)                         restype:='q';
1524 (12409)                         code2($56,value[0]);
1525 (12427)                       end else begin
1526 (12430)                         arsize3:=prec(value[0]);
1527 (12436)                         restype:='c';
1528 (12443)                         code2($39,value[0]);
1529 (12461)                       end;
1530 (12461)                       for i:=1 to value[0] do
1531 (12469)                         code1(ord(ident[i]));
1532 (12496)                       if (vartype='q') or
1533 (12517)                          (reqtype='q') then code1(0);
1534 (12536)                     end;
1535 (12536)                 'p': begin
1536 (12546)                       if odd(value[0]) then
1537 (12552)                         error(15);
1538 (12564)                       value[0]:=value[0] shr 1;
1539 (12574)                       arsize3:=prec(value[0]);
1540 (12585)                       restype:='p';
1541 (12592)                       code2($3a,value[0]);
1542 (12610)                       for i:=1 to value[0] do
1543 (12618)                         begin
1544 (12631)                         code1(ident[2*i]);
1545 (12648)                         code1(ident[2*i-1]);
1546 (12668)                       end
1547 (12668)                     end
1548 (12668)                 else merror(14,'05')
1549 (12690)               end {case}
1550 (12698)             end;
1551 (12698)             scan
1552 (12698)           end;
1553 (12702)     'od': begin
1554 (12713)             argument('i'); code1(7);
1555 (12729)             restype:='b'
1556 (12729)           end;
1557 (12735)     'me': begin
1558 (12746)             parse(' ['); index(false);
1559 (12763)             code1(23); restype:='i';

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         12/11/23 page 27

1560 (12773)           end;
1561 (12777)     ' (': begin
1562 (12788)             scan; mainexp(reqtype,arsize3);
1563 (12810)             testto(' )'); scan
1564 (12819)           end; {no type change}
1565 (12826)     'no': begin
1566 (12834)             scan; factor(arsize3);
1567 (12850)             if (arsize3<>0) then error(15);
1568 (12868)             code1($11);
1569 (12876)             if restype<>'i' then
1570 (12882)               testtype('b')
1571 (12888)           end;
1572 (12894)     'cr': begin
1573 (12905)             argument('i'); code1(52);
1574 (12921)             restype:='c'
1575 (12921)           end;
1576 (12927)     'hi': begin
1577 (12938)             argument('p'); code1(51);
1578 (12954)             restype:='c'
1579 (12954)           end;
1580 (12960)     'lo': begin
1581 (12971)             argument('p'); code1(52);
1582 (12987)             restype:='c'
1583 (12987)           end;
1584 (12993)     'su': begin
1585 (13004)             argument('u'); code1($14);
1586 (13020)           end;
1587 (13020)     'pc': begin
1588 (13031)             argument('u'); code1($15)
1589 (13041)           end;
1590 (13047)     'cp': begin
1591 (13058)             argument('i'); restype:='q';
1592 (13068)           end;
1593 (13072)     'ni': begin
1594 (13083)             code3(34,0); scan; restype:='q';
1595 (13099)           end;
1596 (13103)     'ox': begin
1597 (13114)             argument('u');
1598 (13122)             restype:='i'
1599 (13122)           end;
1600 (13128)     ' @': begin
1601 (13139)             scan; factor(arsize3);
1602 (13155)             if arsize3<>0 then error(15);
1603 (13173)             testtype('i');
1604 (13181)             restype:='f'
1605 (13181)           end;
1606 (13187)     'tr': begin
1607 (13198)             code3(34,1); scan;
1608 (13212)             restype:='b';
1609 (13214)           end;
1610 (13218)     'fa': begin
1611 (13229)             code3(34,0); scan;
1612 (13243)             restype:='b'
1613 (13243)           end;
1614 (13249)     'tc': begin
1615 (13260)             parse(' ('); scan;
1616 (13273)             arrayexp(1,'r');
1617 (13283)             testto(' )'); scan;
1618 (13296)             code1($47); restype:='i';
1619 (13306)           end;

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         12/11/23 page 28

1620 (13310)     'cv': begin
1621 (13321)             argument('i');
1622 (13329)             code1($46); arsize3:=1;
1623 (13339)             restype:='r'
1624 (13343)           end;
1625 (13349)     'pa': begin
1626 (13360)             parse(' ('); scan; express;
1627 (13377)             testtype('c');
1628 (13385)             if token=' ,' then begin
1629 (13393)               scan; express; testtype('c');
1630 (13412)               code1(53)
1631 (13414)             end;
1632 (13420)             testto(' )'); scan; restype:='p'
1633 (13433)           end
1634 (13435)     else error(1)
1635 (13444)   end {case of token}
1636 (13452) end {factor};
1637 (13452) 
1638 (13453) begin  { *** body of term *** }
1639 (13453)   factor(arsize2);
1640 (13467)   repeat
1641 (13467)     case token of
1642 (13467)       ' *': opcode:=5;
1643 (13481)       'di': opcode:=6;
1644 (13498)       'an': opcode:=15;
1645 (13515)       'sh': opcode:=18;
1646 (13532)       'sr': opcode:=19;
1647 (13549)       ' /': opcode:=$45
1648 (13564)       else opcode:=0
1649 (13573)     end {case};
1650 (13581)     if opcode>0 then begin
1651 (13588)       if (restype='r') and
1652 (13598)             (arsize2=1) then begin
1653 (13606)         scan; factor(arsize2);
1654 (13625)         if (restype<>'r') or (arsize2<>1) then
1655 (13639)           merror(14,'06');
1656 (13654)         case opcode of
1657 (13654)           5: code1($44);
1658 (13673)           $45: code1($45)
1659 (13685)           else error(17)
1660 (13696)         end{case}
1661 (13704)       end else begin
1662 (13707)         if opcode=$45 then error(9);
1663 (13725)         if arsize2<>0 then error(15);
1664 (13743)         if (restype='b') and (opcode=15)
1665 (13756)           then begin
1666 (13758)           scan; factor(arsize2);
1667 (13777)           if arsize2<>0 then error(15);
1668 (13795)           testtype('b');
1669 (13803)           code1(opcode)
1670 (13803)         end else begin
1671 (13816)           testtype('i'); scan;
1672 (13828)           factor(arsize2);
1673 (13840)           if arsize2<>0 then error(15);
1674 (13858)           testtype('i'); code1(opcode);
1675 (13876)         end
1676 (13876)       end
1677 (13876)     end;
1678 (13876)   until opcode=0;
1679 (13882) end {term};

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         12/11/23 page 29

1680 (13886) 
1681 (13887) 
1682 (13887) begin { *** body of simexp *** }
1683 (13887)   sign:=' ';
1684 (13891)   if token=' +' then begin
1685 (13903)     sign:='+'; scan
1686 (13912)   end else if token=' -' then begin
1687 (13927)     sign:='-'; scan
1688 (13936)   end;
1689 (13940)   term(arsize1);
1690 (13952)   if sign<>' ' then begin
1691 (13959)     if (restype='r')and (arsize1=1) then begin
1692 (13977)       if sign='-' then code1($4e)
1693 (13992)     end else begin
1694 (14001)       testtype('i');
1695 (14009)       if arsize1<>0 then error(15);
1696 (14027)       if sign='-' then code1(2);
1697 (14045)     end
1698 (14045)   end;
1699 (14045)   repeat
1700 (14045)     case token of
1701 (14045)       ' &': opcode:=1;
1702 (14059)       ' +': opcode:=3;
1703 (14076)       ' -': opcode:=4;
1704 (14093)       'or': opcode:=14;
1705 (14110)       'xo': opcode:=16
1706 (14125)       else opcode:=0
1707 (14134)     end {case};
1708 (14142)     if opcode>1 then begin {if 1}
1709 (14152)       if (restype='r') and (arsize1=1)
1710 (14165)         then begin {real}
1711 (14170)         scan; term(arsize1);
1712 (14186)         if (restype<>'r') or (arsize1<>1) then
1713 (14200)           error(17);
1714 (14212)         case opcode of
1715 (14212)           3:  code1($42);
1716 (14231)           4:  code1($43)
1717 (14243)           else error(17)
1718 (14254)         end {case}
1719 (14262)       end {real}
1720 (14262)       else begin {not real}
1721 (14265)         if (arsize1<>0) then error(15);
1722 (14283)         if (restype='b') and (opcode>=14)
1723 (14296)           then begin {boolean}
1724 (14301)           scan; term(arsize1);
1725 (14317)           if arsize1<>0 then error(15);
1726 (14335)           testtype('b'); code1(opcode)
1727 (14343)         end {boolean}
1728 (14353)         else begin {not boolean}
1729 (14356)           testtype('i'); scan;
1730 (14368)           term(arsize1);
1731 (14380)           if arsize1<>0 then error(15);
1732 (14398)           testtype('i'); code1(opcode);
1733 (14416)         end {not boolean}
1734 (14416)       end {not real}
1735 (14416)     end {if 1}
1736 (14416)     else if opcode=1 then begin {else 1}
1737 (14429)       sign:=restype;
1738 (14429)       scan; term(opcode);
1739 (14453)       arsize1:=arsize1+opcode+1;

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         12/11/23 page 30

1740 (14464)       testtype(sign)
1741 (14469)     end {else 1}
1742 (14479)   until opcode=0
1743 (14483) end {simexp};
1744 (14489) 
1745 (14490) 
1746 (14490) begin { *** body of mainexp *** }
1747 (14490)   roff:=0;
1748 (14494)   simexp(arsize);
1749 (14510)   if (restype='r') and (arsize=1) then
1750 (14524)     roff:=$40;
1751 (14530)   case token of
1752 (14534)     ' =': opcode:=8;
1753 (14548)     ' <': opcode:=10;
1754 (14565)     ' >': opcode:=12;
1755 (14582)     '<>': opcode:=9;
1756 (14599)     '<=': opcode:=13;
1757 (14616)     '>=': opcode:=11
1758 (14631)     else opcode:=0
1759 (14640)   end {case};
1760 (14648)   if opcode>0 then begin
1761 (14655)     if (arsize<>0) and (roff=0) then
1762 (14672)       error(15);
1763 (14684)     scan; savtype:=restype; simexp(arsize);
1764 (14708)     if ((roff=0) and (arsize<>0))
1765 (14722)       or((roff<>0) and (arsize>1)) then
1766 (14738)       error(15);
1767 (14750)     testtype(savtype); code1(opcode+roff);
1768 (14775)     arsize:=0; restype:='b'
1769 (14781)   end
1770 (14783) end {mainexp};
1771 (14787) 
1772 (14788) 
1773 (14788) {#########################################}
1774 (14788) { * assign *             ( of statement ) }
1775 (14788) {#########################################}
1776 (14788) 
1777 (14788) proc assign;
1778 (14788) 
1779 (14788) var savetype: char;
1780 (14791) 
1781 (14791)   proc assign1;
1782 (14791)   begin
1783 (14791)     testto(':='); scan; express;
1784 (14813)     if (vartype='q') and (restype='s') then begin
1785 (14828)       code1($58); restype:='q';
1786 (14841)     end;
1787 (14845)     gpval(idpnt,true,vartyp2);
1788 (14861)   end {assign1};
1789 (14861) 
1790 (14862) begin {assign}
1791 (14862)   idpnt:=findid;
1792 (14870)   if idpnt=0 then error(5);
1793 (14892)   if t0[idpnt]='pr' then begin
1794 (14904)     prcall(idpnt);scan end
1795 (14921)   else begin
1796 (14924)     getvar; savetype:=vartype;
1797 (14928)     if relad<2 then begin
1798 (14943)       assign1; testtype(vartype)
1799 (14950)     end else begin

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         12/11/23 page 31

1800 (14963)       if vartyp2='i' then error(16); {8-bit mem}
1801 (14981)       testto(':='); scan;
1802 (14994)       if relad=3 then begin
1803 (15001)         arrayexp(1,vartype); relad:=1;
1804 (15018)         code1($53);
1805 (15030)         if vartyp2='n' then begin
1806 (15037)           code1($3f);
1807 (15048)           code3($22,1);code1($12);
1808 (15066)           code3($22,t2[idpnt]+2);
1809 (15085)           code1($3);code1($3e)
1810 (15095)         end else
1811 (15101)           code4($2a,level-t1[idpnt],
1812 (15114)             2*t2[idpnt]+2);
1813 (15139)         code2($3c,1)
1814 (15143)       end else begin
1815 (15152)         arrayexp(t3[idpnt],vartype);
1816 (15170)         if vartyp2='n' then begin
1817 (15177)           code3($22,t2[idpnt]+2*t3[idpnt]);
1818 (15208)           code1($3e);
1819 (15216)         end else
1820 (15216)           code4($29,level-t1[idpnt],
1821 (15229)             2*(t2[idpnt]+t3[idpnt]));
1822 (15260)         code2($3c,t3[idpnt]);
1823 (15276)       end
1824 (15276)     end
1825 (15276)   end
1826 (15276) end {assign};
1827 (15276) 
1828 (15277) { * case1 *             ( of statement ) }
1829 (15277) 
1830 (15277) proc case1;
1831 (15277) 
1832 (15277) var i1,i2,casave: integer;
1833 (15280)     savetype: char;
1834 (15280) 
1835 (15280)   proc case2;
1836 (15280) 
1837 (15280)     proc case3;
1838 (15283)     begin
1839 (15283)       scan; code1(22); code3(34,getcon);
1840 (15314)       testtype(savetype);
1841 (15324)       code1(8); scan
1842 (15332)     end;
1843 (15336) 
1844 (15337)   begin {case2}
1845 (15337)     i1:=0; case3;
1846 (15349)     while token=' ,' do begin
1847 (15360)       push(pc); code3(38,0); i1:=succ(i1);
1848 (15384)       case3
1849 (15389)     end;
1850 (15393)     testto(' :'); savpc:=pc; code3(37,0);
1851 (15423)     for k2:=1 to i1 do fixup(pop);
1852 (15454)     push(savpc);
1853 (15478)     scan; statmnt
1854 (15482)   end {case2};
1855 (15486) 
1856 (15487) begin {case1}
1857 (15487)   scan; express; testto('of');
1858 (15506)   savetype:=restype; i2:=1; case2;
1859 (15524)   while token=' ;' do begin

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         12/11/23 page 32

1860 (15535)     casave:=pc; code3(36,0); fixup(pop);
1861 (15565)     push(casave); i2:=succ(i2); case2
1862 (15584)   end;
1863 (15588)   if token='el' then begin
1864 (15599)     casave:=pc; code3(36,0); fixup(pop);
1865 (15632)     push(casave); scan; statmnt
1866 (15646)   end;
1867 (15650)   testto('en'); for k2:=1 to i2 do fixup(pop);
1868 (15690)   code3(35,-2); scan
1869 (15715) end {case1};
1870 (15719) 
1871 (15720) { * openrw *              ( of statement ) }
1872 (15720) 
1873 (15720) proc openrw(x: integer);
1874 (15720) begin
1875 (15720)   parse(' ('); parse('id');
1876 (15743)   idpnt:=findid;
1877 (15749)   if idpnt=0 then error(5);
1878 (15771)   getvar; code1(x);
1879 (15785)   testferror;
1880 (15789)   if relad=2 then error(15);
1881 (15807)   if vartype<>'f' then merror(14,'07');
1882 (15828)   gpval(idpnt,true,vartyp2);
1883 (15844)   testto(' )'); scan
1884 (15853) end {openrw};
1885 (15857) 
1886 (15858) { * gpsec *               ( of statement )  }
1887 (15858) 
1888 (15858) proc gpsec(code);   { get/put sector }
1889 (15858) 
1890 (15858)   proc gpsec1;
1891 (15861)   begin
1892 (15861)     scan; express; testtype('i');
1893 (15882)     testto(' ,');
1894 (15891)   end;
1895 (15891) 
1896 (15892) begin {gpsec}
1897 (15892)   parse(' ('); gpsec1; gpsec1; gpsec1;
1898 (15915)   code1(code);
1899 (15925)   parse('id'); idpnt:=findid;
1900 (15940)   if idpnt=0 then error(5);
1901 (15962)   getvar; code3(34,$db); { get file error code }
1902 (15976)   if relad=2 then error(15);
1903 (15994)   code1(23); if vartype<>'i' then merror(14,'08');
1904 (16023)   gpval(idpnt,true,vartyp2);
1905 (16039)   testto(' )');
1906 (16048) end {gpsec};
1907 (16048) 
1908 (16049) 
1909 (16049) begin {body of statement }
1910 (16049)   if token=' ;' then scan;
1911 (16066)   case token of
1912 (16066)     'id': assign;
1913 (16082) 
1914 (16085)     'if': begin {if}
1915 (16093)             scan; express; testtype('b');
1916 (16109)             testto('th'); scan;  savpc:=pc;
1917 (16122)             code3(37,0); statmnt;
1918 (16144)             if token='el' then begin {else}
1919 (16155)               k2:=pc; code3(36,0);

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         12/11/23 page 33

1920 (16173)               fixup(savpc); scan; statmnt;
1921 (16191)               fixup(k2)
1922 (16191)             end else fixup(savpc)
1923 (16204)           end; {if}
1924 (16217) 
1925 (16217)     'be':  begin {begin}
1926 (16225)             repeat
1927 (16225)               scan; statmnt
1928 (16229)             until token<>(' ;');
1929 (16240)             testto('en'); scan
1930 (16253)           end; {begin}
1931 (16260) 
1932 (16260)     'rp': begin {repeat}
1933 (16268)             savpc:=pc;
1934 (16268)             repeat
1935 (16276)               scan; statmnt
1936 (16280)             until token='un';
1937 (16291)             scan; express; testtype('b');
1938 (16311)             code3(37,savpc)
1939 (16313)           end {repeat};
1940 (16323) 
1941 (16326)     're': begin {read}
1942 (16334)             parse(' ('); scan;
1943 (16347)             if token=' @' then begin
1944 (16355)               scan; express; testtype('f');
1945 (16374)               device:=true;
1946 (16376)               code1(44); testto(' ,')
1947 (16391)             end
1948 (16397)             else begin
1949 (16400)               device:=false; code1(26)
1950 (16408)             end;
1951 (16414)             repeat
1952 (16414)               begin {main loop of read}
1953 (16414)                 if token=' ,' then scan;
1954 (16429)                 testto('id'); idpnt:=findid;
1955 (16444)                 if idpnt=0 then error(5);
1956 (16466)                 getvar;
1957 (16470)                 if relad=2 then error(15);
1958 (16488)                 case vartype of
1959 (16488)                   'i':  code1(28);
1960 (16507)                   'c':  code1(27);
1961 (16525)                   'p':  begin
1962 (16535)                         code1(27); code1(27);
1963 (16551)                         code1(53)
1964 (16553)                         end
1965 (16559)                   else error(114)
1966 (16564)                 end {case};
1967 (16572)                 gpval(idpnt,true,vartyp2)
1968 (16578)               end {mainloop of read}
1969 (16588)             until token<>' ,';
1970 (16595)             testto(' )'); scan;
1971 (16612)             if device then code1(45);
1972 (16627)           end {read};
1973 (16627) 
1974 (16630)     'wr','wl':
1975 (16643)           begin {write,writeln}
1976 (16646)             if token='wl' then wln:=true
1977 (16657)             else wln:=false;
1978 (16668)             scan;
1979 (16676)             if token=' (' then begin

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         12/11/23 page 34

1980 (16684)               scan;
1981 (16691)               if token=' @' then begin
1982 (16699)                 scan; express; testtype('f');
1983 (16718)                 device:=true; code1(44);
1984 (16732)                 testto(' ,');
1985 (16741)               end else device:=false;
1986 (16746)               repeat
1987 (16750)                 if token=' ,' then scan;
1988 (16765)                 if (token=' )') and device
1989 (16773)                        and wln then
1990 (16778)                    {empty writeln except device}
1991 (16783)                    k2:=k2 {do nothing}
1992 (16786)                 else if token='st' then begin
1993 (16805)                   {string}
1994 (16808)                   code1(50);
1995 (16816)                   for k2:=1 to value[0]-1 do
1996 (16830)                     code1(ord(ident[k2])
1997 (16844)                         and 127);
1998 (16857)                   code1(ord(ident[value[0]])
1999 (16877)                       or 128);
2000 (16890)                   scan
2001 (16890)                 end else begin
2002 (16897)                   {expression}
2003 (16897)                   express;
2004 (16901)                   case restype of
2005 (16901)                     'i':  code1(30);
2006 (16920)                     'c':  code1(29);
2007 (16938)                     'q':  code1($57);
2008 (16956)                     's':  begin
2009 (16966)                             code1($58);
2010 (16974)                             code1($57);
2011 (16982)                           end;
2012 (16982)                     'p':  begin
2013 (16992)                             code1(22);
2014 (17000)                             code1(51);
2015 (17008)                             code1(29);
2016 (17016)                             code1(52);
2017 (17024)                             code1(29);
2018 (17032)                           end
2019 (17032)                     else merror(14,'09')
2020 (17040)                   end {case}
2021 (17048)                 end {expression}
2022 (17048)               until token<>' ,';
2023 (17055)               if wln then begin {writeln(..)}
2024 (17066)                 code2(32,13); code1(29);
2025 (17084)                 code2(32,10); code1(29);
2026 (17102)               end;
2027 (17102)               if device then code1(45);
2028 (17117)               testto(' )'); scan
2029 (17126)             end {if}
2030 (17130)             else if wln then begin {writeln}
2031 (17140)               code2(32,13); code1(29);
2032 (17158)               code2(32,10); code1(29);
2033 (17176)             end
2034 (17176)           end {write, writeln};
2035 (17176) 
2036 (17179)     'cs': case1; {case statement}
2037 (17194) 
2038 (17194)     'wh': begin {while}
2039 (17202)             scan; savpc:=pc; express;

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         12/11/23 page 35

2040 (17218)             testtype('b');
2041 (17226)             k2:=pc; code3(37,0);
2042 (17244)             testto('do'); scan; statmnt;
2043 (17261)             code3(36,savpc); fixup(k2)
2044 (17273)           end {while};
2045 (17283) 
2046 (17286)     'fo': begin {for}
2047 (17294)             parse('id'); assign;
2048 (17307)             if t0[idpnt]='pr' then error(1);
2049 (17330)             savtp1:=low(t0[idpnt]);
2050 (17338)             case token of
2051 (17343)               'to': k2:=1;
2052 (17357)               'dw': k2:=0
2053 (17372)               else merror(2,'to')
2054 (17386)             end {case of token};
2055 (17394)             scan; express; testtype(savtp1);
2056 (17412)             bottom1:=pc; code1(22);
2057 (17428)             gpval(idpnt,false,vartyp2);
2058 (17444)             code1(13-k2-k2);
2059 (17462)             savpc:=pc; code3(37,0);
2060 (17480)             testto('do'); scan; statmnt;
2061 (17497)             gpval(idpnt,false,vartyp2);
2062 (17513)             code1(21-k2);
2063 (17526)             gpval(idpnt,true,vartyp2);
2064 (17542)             code3(36,bottom1); fixup(savpc);
2065 (17564)             code3(35,-2);
2066 (17575)           end {for};
2067 (17575) 
2068 (17578)     'me': begin {mem}
2069 (17586)             parse(' ['); scan; express;
2070 (17603)             testtype('i');
2071 (17611)             testto(' ]'); parse(':=');
2072 (17629)             scan; express; code1(24);
2073 (17645)             testtype('i');
2074 (17653)           end {mem};
2075 (17653) 
2076 (17656)     'ca': begin {call}
2077 (17664)             parse(' ('); scan; express;
2078 (17681)             testtype('i');
2079 (17689)             testto(' )'); code1(25); scan
2080 (17706)           end {call};
2081 (17710) 
2082 (17713)     'op': openrw(47);
2083 (17729) 
2084 (17732)     'ow': openrw(48);
2085 (17748) 
2086 (17751)     'ob': openrw(80);
2087 (17767) 
2088 (17770)     'gb': begin
2089 (17778)             parse(' ('); scan; express;
2090 (17795)             testtype('f'); testto(' ,');
2091 (17812)             scan; express; testtype('i');
2092 (17828)             testto(' ,'); scan; testto('id');
2093 (17850)             idpnt:=findid;
2094 (17856)             if idpnt=0 then error(5);
2095 (17878)             getvar;
2096 (17882)             if relad<>0 then error(15);
2097 (17900)             code1($51); testferror;
2098 (17912)             gpval(idpnt,true,vartyp2);
2099 (17928)             testto(' )'); scan

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         12/11/23 page 36

2100 (17937)           end;
2101 (17941) 
2102 (17944)     'pb': begin
2103 (17952)             parse(' ('); scan; express;
2104 (17969)             testtype('f'); testto(' ,');
2105 (17986)             scan; express; testtype('i');
2106 (18002)             testto(' ,'); scan; express;
2107 (18019)             code1($52);testferror;
2108 (18031)             testto(' )');
2109 (18040)             scan
2110 (18040)           end;
2111 (18044) 
2112 (18047)     'ru': begin
2113 (18055)             code1($41); scan;
2114 (18067)           end;
2115 (18067) 
2116 (18070)     'fi': begin
2117 (18078)             code1(46); scan
2118 (18086)           end;
2119 (18090) 
2120 (18093)     'ge': gpsec(55);
2121 (18109) 
2122 (18112)     'pu': gpsec(56);
2123 (18128) 
2124 (18131)     'ex': begin {exit}
2125 (18139)             if level>0 then code1(1) else code1(0);
2126 (18168)             scan;
2127 (18172)           end;
2128 (18172) 
2129 (18175)     'cl': begin {close}
2130 (18183)             parse(' (');
2131 (18192)             repeat
2132 (18192)               scan; express; code1(49);
2133 (18208)               testtype('f');
2134 (18216)               testferror
2135 (18216)             until token<>' ,';
2136 (18227)             testto(' )'); scan;
2137 (18244)           end {close}
2138 (18244) 
2139 (18244)     else if (token<>'en') and (token<>' ;')
2140 (18262)       and (token<>'un') then begin
2141 (18273)       error(10); scan
2142 (18284)     end
2143 (18288)   end {case of statements}
2144 (18290) end;
2145 (18290) 
2146 (18291) { * findforw *          ( of block ) }
2147 (18291) 
2148 (18291) func findforw;
2149 (18291) 
2150 (18291) var i,j,sav1: integer;
2151 (18294) 
2152 (18294)   func found(start: integer):boolean;
2153 (18294)   var ii,i9: integer;
2154 (18297)   begin {compare}
2155 (18297)     ii:= 0;
2156 (18301)     repeat
2157 (18305)       ii:=succ(ii);
2158 (18309)     until (ii >= 8) or
2159 (18321)       (ident[ii] <> idtab[start+ii]);

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         12/11/23 page 37

2160 (18344)     found:=(ii >= 8);
2161 (18355)   end {compare};
2162 (18359) 
2163 (18360) 
2164 (18360) begin {findforw}
2165 (18360)   i:=succ(forwpn);
2166 (18366)   repeat
2167 (18371)     i:=prec(i)
2168 (18371)   until (i=0) or found(8*fortab[i]);
2169 (18406)   findforw:=i;
2170 (18410)   if i>0 then
2171 (18424)     if i=forwpn then forwpn:=forwpn-1
2172 (18444)     else begin
2173 (18454)       sav1:=fortab[i];
2174 (18458)       for j:=1 to forwpn-1 do
2175 (18478)       fortab[j]:=fortab[succ(j)];
2176 (18497)       fortab[forwpn]:=sav1;
2177 (18523)       findforw:=forwpn;
2178 (18531)       forwpn:=forwpn-1
2179 (18543)     end
2180 (18545) end {findforw};
2181 (18550) 
2182 (18551) 
2183 (18551) begin { *** body of block *** }
2184 (18551)   dpnt:=3; t2[bottom]:=pc;
2185 (18563)   code3(36,0);
2186 (18581)   stackpn1:=stackpnt; forwpn:=0;
2187 (18591) 
2188 (18595)   if token='co' then begin    { * const * }
2189 (18606)     scan;
2190 (18610)     repeat
2191 (18610)       deccon; testto(' ;'); scan
2192 (18623)     until token <> 'id';
2193 (18634)   end {const};
2194 (18638) 
2195 (18638)   if token='me' then memory;  { * mem * }
2196 (18653) 
2197 (18653)   if token='va' then variable;{ * var * }
2198 (18668) 
2199 (18668)   while (token='pr')or (token='fu') do begin
2200 (18688)     parlevel:=0;
2201 (18690)     case token of
2202 (18694)     'pr': begin               { * proc * }
2203 (18706)             parse('id'); npara:=0;
2204 (18717)             putsym('p','r'); cproc:=spnt;
2205 (18731)             level:=succ(level);
2206 (18743)           end;
2207 (18748)     'fu': begin               { * func * }
2208 (18759)             parse('id'); npara:=1;
2209 (18770)             putsym('f','i');
2210 (18784)             cproc:=spnt; level:=succ(level);
2211 (18796)             putsym('f','i');
2212 (18811)             t2[spnt]:=parlevel;
2213 (18815)             parlevel:=succ(parlevel);
2214 (18827)           end
2215 (18832)     end; {case of token}
2216 (18834)     if forwpn=0 then find:=0
2217 (18844)     else find:=findforw;
2218 (18859)     if find<>0 then begin
2219 (18870)       spnt:=spnt-npara-1;

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         12/11/23 page 38

2220 (18884)       cproc:=fortab[find];
2221 (18893)       fixup(t2[cproc]);
2222 (18915)     end;
2223 (18915)     scan; spnt1:=spnt;
2224 (18919)     dpnt1:=dpnt;
2225 (18927)     if token=' (' then parameter;
2226 (18950)     if t0[cproc]='fi' then function;
2227 (18969)     testto(' ;');
2228 (18978)     for i:=1 to npara do
2229 (18984)     t2[succ(spnt-i)]:=t2[succ(spnt-i)]
2230 (19016)           -parlevel;
2231 (19021)     scan;
2232 (19048)     if token='fw' then begin
2233 (19056)       if forwpn=8 then merror(13,'ov');
2234 (19080)       forwpn:=succ(forwpn);
2235 (19084)       fortab[forwpn]:=cproc;
2236 (19093)       t2[cproc]:=pc;
2237 (19105)       code3(36,0);
2238 (19123)       scan
2239 (19123)     end else block(cproc);
2240 (19140)     level:=prec(level);
2241 (19144)     dpnt:=dpnt1; spnt:=spnt1;
2242 (19157)     case high(t0[spnt]) of
2243 (19173)       'r':  t0[spnt]:=packed('t',low(t0[spnt]));
2244 (19197)       's':  t0[spnt]:=packed('u',low(t0[spnt]))
2245 (19225)     end {case};
2246 (19233)     testto(' ;'); scan
2247 (19242)   end {procedure of function};
2248 (19246) 
2249 (19249)   testto('be');     { * begin * }
2250 (19258)   if forwpn<>0 then merror(13,'ur');
2251 (19279)   scan; fixup(t2[bottom]);
2252 (19297)   t2[bottom]:=pc;
2253 (19301)   code3(35,2*dpnt);
2254 (19324)   repeat
2255 (19324)     statmnt
2256 (19324)   until token='en';
2257 (19335)   scan;
2258 (19343)   if level>0 then code1(1) else code1(0);
2259 (19372)   stackpnt:=stackpn1;
2260 (19372) end {block};
2261 (19380) 
2262 (19381) { * savtable *    ( global) }
2263 (19381) 
2264 (19381) proc savtable; { save lib table in @ofno }
2265 (19381) 
2266 (19381) var i,j,num: integer;
2267 (19384)     vtype1: char;
2268 (19384) 
2269 (19384) begin
2270 (19384)   writeln(@ofno,spnt,',',pc+2);
2271 (19413)   for i:=1 to spnt do begin {for every entry }
2272 (19432)     for j:=1 to 8 do begin
2273 (19449)       write(@ofno,idtab[8*i+j])
2274 (19469)     end;
2275 (19473)     writeln(@ofno,',',t0[i],',',t1[i],',',
2276 (19520)       t2[i],',',t3[i]);
2277 (19547)     vtype1:=high(t0[i]);
2278 (19555)     if ((vtype1='p') or (vtype1='f') or
2279 (19574)       (vtype1='g')) and (t3[i]<>0) then begin

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         12/11/23 page 39

2280 (19595)       num:=stack[t3[i]];
2281 (19606)       write(@ofno,num);
2282 (19625)       for j:=1 to num do
2283 (19631)         write(@ofno,',',stack[t3[i]+j]);
2284 (19670)       write(@ofno,cr,lf);
2285 (19696)     end {then};
2286 (19696)   end {for}
2287 (19696) end {savtable};
2288 (19710) 
2289 (19711) { * main program * }
2290 (19711) 
2291 (19711) begin {main}
2292 (19711)   init;scan;
2293 (19722)   case token of
2294 (19722)     'pg': begin
2295 (19734)             libflg:=false;
2296 (19736)             asetfile(pname,scyclus,sdrive,'Q');
2297 (19762)           end;
2298 (19762)     'li': begin
2299 (19773)             libflg:=true;
2300 (19775)             asetfile(pname,scyclus,sdrive,'T');
2301 (19801)           end
2302 (19801)     else
2303 (19801)       merror(2,'pg')
2304 (19809)   end {case}
2305 (19817)   parse('id');
2306 (19826)   i:=0;
2307 (19828)   repeat
2308 (19832)     i:=succ(i);
2309 (19836)   until (i>7) or (pname[i] = ':') or
2310 (19859)       (pname[i]<>uppercase(ident[i+1]));
2311 (19888)   if i<8 then
2312 (19898)     merror(2,packed(pname[0],pname[1]));
2313 (19923)     { name differs from filename }
2314 (19923)   parse(' ;');
2315 (19932)   if ofno<>nooutput then openw(ofno);
2316 (19948)   scan;
2317 (19952)   if (token='us') and (libflg=false) then begin
2318 (19968)     repeat
2319 (19971)       getlib; scan
2320 (19975)     until token<>' ,';
2321 (19986)     testto(' ;'); scan
2322 (19999)   end;
2323 (20003)   block(0); testto(' .');
2324 (20020)   if ofno<>nooutput then begin
2325 (20027)     write(@ofno,'E');
2326 (20038)     savebyte(pc and 255);
2327 (20051)     savebyte(pc shr 8);
2328 (20064)     close(ofno);
2329 (20070)     if libflg then begin
2330 (20074)       asetfile(pname,scyclus,sdrive,'L');
2331 (20099)       openw(ofno);
2332 (20105)       savtable;
2333 (20109)       close(ofno)
2334 (20109)     end
2335 (20115)   end else
2336 (20115)     runerr:=$87; {no loader file}
2337 (20124)   writeln;
2338 (20124)   writeln;
2339 (20130)   writeln('End compile');

----------------------------------------------------------------------

R65 COMPILE 4.2: program COMPILE1         12/11/23 page 40

2340 (20154)   writeln;
2341 (20154)   writeln('Code lenght:          ',pc);
2342 (20194)   writeln('Compiler stack size:  ',stackmax);
2343 (20228)   writeln('Ident stack size:     ',spntmax);
2344 (20262)   write('Pascal errors:        ');
2345 (20285)   if numerr>0 then write(invvid);
2346 (20298)   writeln(numerr,norvid);
2347 (20312)   if prt then begin
2348 (20316)     write(prtoff);
2349 (20322)     setemucom(9);
2350 (20330)   end;
2351 (20330)   close(fno);
2352 (20336)   { check whether second pass is not required }
2353 (20336)   if (runerr=0) and libflg then runerr:=-1;
2354 (20352) end {main}.
2355 (20357) 

End compile

Code lenght:          20356
Compiler stack size:  134
Ident stack size:     209
Pascal errors:        0


R65 Pascal program PUTSOURCE       4/11/23     page 1


                   1 (    4)  {
                   2 (    4)          *****************
                   3 (    4)          *               *
                   4 (    4)          *   putsource   *
                   5 (    4)          *               *
                   6 (    4)          *****************
                   7 (    4) 
                   8 (    4)     move the source file from the WORK disk
                   9 (    4)     on the disk SOURCEPASCAL or SOURCECOMPIL
                  10 (    4) 
                  11 (    4)     usage: putsource filename
                  12 (    4) 
                  13 (    4)     2019 rricharz (r77@bluewin.ch)
                  14 (    4) }
                  15 (    4) 
                  16 (    4) program putsource;
                  17 (    4) uses syslib,arglib;
                  18 ( 1093) 
                  19 ( 1093) const afloppy=$c827; { exdos vector }
                  20 ( 1096)       aexport=$c82a; { exdos vector }
                  21 ( 1096) 
                  22 ( 1096) mem filerr=$db: integer&;
                  23 ( 1096) 
                  24 ( 1096) var cyclus,drive,k: integer;
                  25 ( 1096)     fname,dname: array[15] of char;
                  26 ( 1096)     default,ok: boolean;
                  27 ( 1096) 
                  28 ( 1096) func contains(t:array[7] of char):boolean;
                  29 ( 1096) { check for substring in fname }
                  30 ( 1096) { the substring must end with a blank }
                  31 ( 1096) var i,i1,j:integer;
                  32 ( 1099)     found:boolean;
                  33 ( 1099) begin
                  34 ( 1099)   i:=0; found:=false;
                  35 ( 1109)   repeat
                  36 ( 1113)     j:=0;
                  37 ( 1115)     if fname[i]=t[j] then begin
                  38 ( 1136)       i1:=i;
                  39 ( 1139)       repeat
                  40 ( 1147)         i1:=i1+1;
                  41 ( 1153)         j:=j+1;
                  42 ( 1164)         found:=t[j]=' ';
                  43 ( 1179)       until (i1>14) or (fname[i1]<>t[j])
                  44 ( 1203)                              or found;
                  45 ( 1209)     end;
                  46 ( 1217)     i:=i+1;
                  47 ( 1223)   until found or (i>15);
                  48 ( 1239)   contains:=found;
                  49 ( 1243) end;
                  50 ( 1251) 
                  51 ( 1252) proc runprog
                  52 ( 1252)   (name: array[15] of char;
                  53 ( 1252)    cyc: integer; drv: integer);
                  54 ( 1252) var i: integer;
                  55 ( 1255) begin
                  56 ( 1255)   for i:=0 to 15 do filnm1[i]:=name[i];
                  57 ( 1282)   filcy1:=cyc; fildrv:=drv; filflg:=$40;
                  58 ( 1326)   run
                  59 ( 1330) end;

----------------------------------------------------------------------

R65 Pascal program PUTSOURCE       4/11/23     page 2

                  60 ( 1331) 
                  61 ( 1332) proc writename(text: array[15] of char);
                  62 ( 1332) { write name without blanks }
                  63 ( 1332) var i: integer;
                  64 ( 1335) 
                  65 ( 1335) begin
                  66 ( 1335)   for i:=0 to 15 do
                  67 ( 1345)     if text[i]<>' ' then write(text[i]);
                  68 ( 1377) end;
                  69 ( 1391) 
                  70 ( 1392) proc setsubtype(subtype:char);
                  71 ( 1392) var i:integer;
                  72 ( 1395) begin
                  73 ( 1395)   i:=0;
                  74 ( 1399)   repeat
                  75 ( 1403)     i:=i+1;
                  76 ( 1409)   until (fname[i]=':') or
                  77 ( 1425)     (fname[i]=' ') or (i>=14);
                  78 ( 1444)   fname[i]:=':';
                  79 ( 1454)   fname[i+1]:=subtype;
                  80 ( 1465) end;
                  81 ( 1473) 
                  82 ( 1474) func letter(ch:char):boolean;
                  83 ( 1474) begin
                  84 ( 1474)   letter:=(ch>='A') and (ch<='Z');
                  85 ( 1493) end;
                  86 ( 1498) 
                  87 ( 1499) proc setargs(name:array[15] of char;
                  88 ( 1499)   carg,cyc,drv:integer);
                  89 ( 1499) var k:integer;
                  90 ( 1502) begin
                  91 ( 1502)   argtype[carg]:='s';
                  92 ( 1510)     for k:=0 to 7 do
                  93 ( 1524)       arglist[carg+k]:=
                  94 ( 1542)         ord(packed(fname[2*k+1],
                  95 ( 1552)                     fname[2*k]));
                  96 ( 1568)     argtype[carg+8]:='i';
                  97 ( 1599)     arglist[carg+8]:=cyc;
                  98 ( 1612)     argtype[carg+9]:='i';
                  99 ( 1633)     arglist[carg+9]:=drv;
                 100 ( 1646) end;
                 101 ( 1658) 
                 102 ( 1659) proc setargi(val,carg:integer);
                 103 ( 1659) begin
                 104 ( 1659)   argtype[carg]:='i';
                 105 ( 1670)   arglist[carg]:=val;
                 106 ( 1680) end;
                 107 ( 1692) 
                 108 ( 1693) begin
                 109 ( 1693)   ok:=true;
                 110 ( 1697)   filerr:=0;
                 111 ( 1703)   { get the argument (file name) }
                 112 ( 1707)   cyclus:=0; drive:=0;
                 113 ( 1715)   agetstring(fname,default,cyclus,drive);
                 114 ( 1759)   if default or not letter(fname[0]) then
                 115 ( 1777)     writeln('Usage: putsource filename')
                 116 ( 1808)   else begin
                 117 ( 1817)     setsubtype('P');
                 118 ( 1825)       dname:='PSOURCE         ';
                 119 ( 1843)     { make sure that WORK is on drive 1 }

----------------------------------------------------------------------

R65 Pascal program PUTSOURCE       4/11/23     page 3

                 120 ( 1849)     writeln('Putting disk WORK in drive 1');
                 121 ( 1884)     cyclus:=0; drive:=1;
                 122 ( 1892)     asetfile('WORK            ',cyclus,drive,' ');
                 123 ( 1930)     call(afloppy);
                 124 ( 1934)     if (filerr<>0) then ok:=false;
                 125 ( 1945)     { make sure that dname is on drive 0 }
                 126 ( 1949)     write('Putting disk ');  writename(dname);
                 127 ( 1975)     writeln(' in drive 0');
                 128 ( 1993)     cyclus:=0; drive:=0;
                 129 ( 2001)     asetfile(dname,cyclus,drive,' ');
                 130 ( 2027)     call(afloppy);
                 131 ( 2031)     if (filerr<>0) then ok:=false;
                 132 ( 2042)     { clean WORK }
                 133 ( 2046)     setargi(1,0);
                 134 ( 2056)     argtype[1]:=chr(0);
                 135 ( 2060)     cyclus:=0; drive:=0; filerr:=0;
                 136 ( 2081)     runprog('CLEAN:R         ',cyclus,drive);
                 137 ( 2117)     if (filerr<>0) or (runerr<>0) then
                 138 ( 2129)       ok:=false;
                 139 ( 2135)     { copy the source file }
                 140 ( 2139)     if ok then begin
                 141 ( 2143)       write('Copying ');
                 142 ( 2155)       writename(fname);
                 143 ( 2167)       writeln(',1,0');
                 144 ( 2178)       setargs(fname,0,0,1);
                 145 ( 2196)       argtype[10]:='i';
                 146 ( 2200)       arglist[10]:=0; {copy to drive 0}
                 147 ( 2218)       argtype[11]:=chr(0);
                 148 ( 2222)       cyclus:=0; drive:=0; filerr:=0;
                 149 ( 2243)       runprog('COPY:R          ',cyclus,drive);
                 150 ( 2279)     end;
                 151 ( 2279)     if (filerr<>0) or (runerr<>0) then begin
                 152 ( 2292)       ok:=false;
                 153 ( 2297)       if filerr=6 then
                 154 ( 2306)         writeln(invvid,
                 155 ( 2312)           'Source file not found',norvid)
                 156 ( 2337)       else
                 157 ( 2344)         writeln(invvid,'Copy failed',norvid);
                 158 ( 2371)     end else begin {if successfull}
                 159 ( 2374)       setargi(filcyc,8);
                 160 ( 2386) 
                 161 ( 2386)       { export the source file }
                 162 ( 2386)       write('Exporting the source file');
                 163 ( 2412)       fildrv:=1;
                 164 ( 2414)       call(aexport);
                 165 ( 2422)       writeln;
                 166 ( 2422) 
                 167 ( 2428)       { delete the source file }
                 168 ( 2428)       writeln('Deleting the source file');
                 169 ( 2459)       drive:=0; filerr:=0;
                 170 ( 2467)       runprog('DELETE:R        ',cyclus,drive);
                 171 ( 2503)       if (filerr<>0) or (runerr<>0) then  begin
                 172 ( 2516)         ok:=false;
                 173 ( 2521)         writeln(invvid,
                 174 ( 2527)           'Deleting original failed',norvid);
                 175 ( 2562)       end;
                 176 ( 2562) 
                 177 ( 2562)       { clean the destination drive }
                 178 ( 2562)       setargi(0,0);
                 179 ( 2572)       argtype[1]:=chr(0);

----------------------------------------------------------------------

R65 Pascal program PUTSOURCE       4/11/23     page 4

                 180 ( 2576)       cyclus:=0; drive:=0; filerr:=0;
                 181 ( 2597)       runprog('CLEAN:R         ',cyclus,drive);
                 182 ( 2633)       if (filerr<>0) or (runerr<>0) then
                 183 ( 2645)          ok:=false;
                 184 ( 2651) 
                 185 ( 2655)       { pack the destination drive }
                 186 ( 2655)       writeln('Packing PSOURCE');
                 187 ( 2677)       setargi(0,0);
                 188 ( 2687)       argtype[1]:=chr(0);
                 189 ( 2691)       cyclus:=0; drive:=0; filerr:=0;
                 190 ( 2712)       runprog('PACK:R          ',cyclus,drive);
                 191 ( 2748)       if (filerr<>0) or (runerr<>0) then
                 192 ( 2760)          ok:=false;
                 193 ( 2766)     end;
                 194 ( 2770) 
                 195 ( 2770)     { make sure that PASCAL is on drive 0 }
                 196 ( 2770)     writeln('Putting disk PASCAL in drive 0');
                 197 ( 2807)     cyclus:=0; drive:=0;
                 198 ( 2815)     asetfile('PASCAL          ',cyclus,drive,' ');
                 199 ( 2853)     call(afloppy);
                 200 ( 2857)     if (filerr<>0) then ok:=false;
                 201 ( 2868)   end;
                 202 ( 2872)   if not ok then begin
                 203 ( 2877)     writeln(invvid,'Putsource failed',norvid);
                 204 ( 2909)     filerr:=0; runerr:=0;
                 205 ( 2917)   end;
                 206 ( 2921) end.
                 207 ( 2921) 

End compile

Code lenght:          2920
Compiler stack size:  68
Ident stack size:     92
Pascal errors:        0

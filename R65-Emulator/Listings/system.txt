
R65 Pascal program SYSTEM          11/11/23     page 1


                   1 (    4) {
                   2 (    4)          **************************
                   3 (    4)          *                        *
                   4 (    4)          * R65 Pascal Main System *
                   5 (    4)          *                        *
                   6 (    4)          **************************
                   7 (    4) 
                   8 (    4)      Based on version 01/08/82 rricharz
                   9 (    4)      1979-1982  rricharz (r77@bluewin.ch)
                  10 (    4)      2018       recovered
                  11 (    4)      2023       last change version 5.4
                  12 (    4) 
                  13 (    4) R65 Pascal System Program. This program is
                  14 (    4) called, when Pascal is executed. It allows to
                  15 (    4) call other programs by names and with
                  16 (    4) arguments.
                  17 (    4) 
                  18 (    4) Examples:
                  19 (    4)   compile test1:p
                  20 (    4)   compile test1:p:04,1
                  21 (    4)   copy test3:P,0,1
                  22 (    4)   copy test3:P,0 1
                  23 (    4)   find test*
                  24 (    4) 
                  25 (    4) First tries to run program from drive 1,
                  26 (    4) unless a drive is specified in the call.
                  27 (    4) If not found there and not specified,
                  28 (    4) tries to run in from drive 0.
                  29 (    4) Default for arguments is drive 1.
                  30 (    4) }
                  31 (    4) 
                  32 (    4) program system;
                  33 (    4) uses syslib;
                  34 (  373) 
                  35 (  373) const title='R65 PASCAL VERSION 5.4';
                  36 (  399) 
                  37 (  399)   stopcode=$2010;
                  38 (  399) 
                  39 (  399) var
                  40 (  399)   i, m, n: integer;
                  41 (  399)   ch: char;
                  42 (  399)   ok: boolean;
                  43 (  399)   argerr: integer;
                  44 (  399)   runname,aname: array[15] of char;
                  45 (  399)   drive1,drive2: integer;
                  46 (  399)   cyclus1,cyclus2: integer;
                  47 (  399) 
                  48 (  399) { * runprog * }
                  49 (  399) 
                  50 (  399) proc runprog
                  51 (  399)   (name: array[15] of char;
                  52 (  399)    drv: integer; cyc: integer);
                  53 (  399) 
                  54 (  399) var i: integer;
                  55 (  402) 
                  56 (  402) begin
                  57 (  402)   for i:=0 to 15 do filnm1[i]:=name[i];
                  58 (  429)   filcy1:=cyc; fildrv:=drv; filflg:=$40;
                  59 (  473)   run

----------------------------------------------------------------------

R65 Pascal program SYSTEM          11/11/23     page 2

                  60 (  477) end;
                  61 (  478) 
                  62 (  479) { * uppercase * }
                  63 (  479) 
                  64 (  479) func uppercase(ch1: char): char;
                  65 (  479) 
                  66 (  479) begin
                  67 (  479)   if (ch1 >= 'a') and (ch1 <= 'z') then
                  68 (  498)     uppercase := chr(ord(ch1) - 32)
                  69 (  508)   else
                  70 (  509)     uppercase := ch1;
                  71 (  517) end;
                  72 (  525) 
                  73 (  526) { * next * }
                  74 (  526) 
                  75 (  526) proc next;
                  76 (  526) 
                  77 (  526) begin
                  78 (  526)   read(@input,ch);
                  79 (  539)   ch:=uppercase(ch);
                  80 (  552) end;
                  81 (  556) 
                  82 (  557) { * getnum * }
                  83 (  557) 
                  84 (  557) proc getnum
                  85 (  557)   (var num: integer);
                  86 (  557) 
                  87 (  557) var sign: integer;
                  88 (  560) 
                  89 (  560) begin
                  90 (  560)   sign:=1; num:=0;
                  91 (  570)   case ch of
                  92 (  574)     '+': next;
                  93 (  589)     '-':  begin sign:=-1; next end
                  94 (  610)   end; {case}
                  95 (  612)   ok:=ok and ((ch>='0') and (ch<='9'));
                  96 (  631)   while (ch>='0') and (ch<='9') do begin
                  97 (  654)     num:=10*num+ord(ch)-ord('0');
                  98 (  668)     next
                  99 (  673)   end;
                 100 (  677)   num:=sign*num
                 101 (  684) end;
                 102 (  693) 
                 103 (  694) { * getfname * }
                 104 (  694) 
                 105 (  694) proc getfname
                 106 (  694)   (var name: array[15] of char;
                 107 (  694)    ptype: char; var ok: boolean;
                 108 (  694)    var drv: integer; var cyc: integer);
                 109 (  694) 
                 110 (  694) var i, j: integer;
                 111 (  697) 
                 112 (  697)   func nexthexdigit: integer;
                 113 (  697) 
                 114 (  697)   var d: integer;
                 115 (  700) 
                 116 (  700)   begin
                 117 (  700)     next;
                 118 (  706)     if (ch>='0') and (ch<='9') then
                 119 (  720)       nexthexdigit:= ord(ch)-ord('0')

----------------------------------------------------------------------

R65 Pascal program SYSTEM          11/11/23     page 3

                 120 (  730)     else if (ch>='A') and (ch<='Z') then
                 121 (  752)       nexthexdigit:= ord(ch)-ord('A')+10
                 122 (  763)     else begin
                 123 (  773)       ok:=false;
                 124 (  775)     nexthexdigit:=0;
                 125 (  781)     end;
                 126 (  785)   end;
                 127 (  785) 
                 128 (  786) begin
                 129 (  786)   ok:=((ch>='A') and (ch<='Z'))
                 130 (  802)     or (ch='*') or (ch='?') or (ch='/');
                 131 (  826)   i:=0;
                 132 (  833)   repeat
                 133 (  837)     name[i]:=ch; i:=succ(i);
                 134 (  853)     next
                 135 (  858)     until (i>12) or (ch=' ') or (ch=cr) or
                 136 (  884)       (ch=',') or (ch=':') or (ch='.');
                 137 (  908)   for j:=i to 15 do name[j]:=' ';
                 138 (  937)   if ch=':' then begin
                 139 (  962)     next;
                 140 (  969)     name[i]:=':';
                 141 (  975)     name[i+1]:=ch;
                 142 (  986)     next
                 143 (  994)   end
                 144 (  998)   else if ptype <> ' ' then begin
                 145 ( 1008)     name[i]:=':';
                 146 ( 1017)     name[i+1]:=ptype
                 147 ( 1028)   end;
                 148 ( 1036)   if (ch='.') then begin
                 149 ( 1043)     cyc:=nexthexdigit*16+nexthexdigit;
                 150 ( 1061)     next;
                 151 ( 1070)   end
                 152 ( 1070)   if (ch=',') then begin
                 153 ( 1077)     next;
                 154 ( 1084)     getnum(drv);
                 155 ( 1096)     if (drv<0) or (drv>1) then
                 156 ( 1110)       argerr:=105;
                 157 ( 1116)   end
                 158 ( 1120) end;
                 159 ( 1120) 
                 160 ( 1121) { * clearinput * }
                 161 ( 1121) 
                 162 ( 1121) proc clearinput;
                 163 ( 1121) 
                 164 ( 1121) begin
                 165 ( 1121)   buffpn:=-1;
                 166 ( 1128) end;
                 167 ( 1133) 
                 168 ( 1134) { * main * }
                 169 ( 1134) 
                 170 ( 1134) begin {main}
                 171 ( 1134)   maxseq:=mmaxseq-1;
                 172 ( 1140)   for i:=0 to mmaxseq-1 do fidrtb[i]:=0;
                 173 ( 1172)   clearinput; writeln;
                 174 ( 1197)   writeln(title);
                 175 ( 1214)   ok:=true;
                 176 ( 1216) 
                 177 ( 1220)   repeat {main loop (endless)}
                 178 ( 1220)     write('P*');
                 179 ( 1223)     next;

----------------------------------------------------------------------

R65 Pascal program SYSTEM          11/11/23     page 4

                 180 ( 1227)     if ch=cr then call(stopcode);
                 181 ( 1241)     while (ch=' ') or (ch=chr(13)) do next;
                 182 ( 1264)     { default for program to run is drive 1,
                 183 ( 1267)       if not found, run from drive 0,
                 184 ( 1267)       user input is ignored }
                 185 ( 1267)     drive1:=0; cyclus1:=0;
                 186 ( 1275)     getfname(runname,'R',ok,drive1,cyclus1);
                 187 ( 1323)     for i:=0 to 31 do argtype[i]:=chr(0);
                 188 ( 1346)     if ok then begin
                 189 ( 1371)       numarg:=0; n:=0; argerr:=0;
                 190 ( 1388)       if ch=' ' then begin  {arguments}
                 191 ( 1402)         repeat
                 192 ( 1402)           next;
                 193 ( 1406)           if (ch>='0') and (ch<='9') then
                 194 ( 1420)           begin {number}
                 195 ( 1424)             getnum(m);
                 196 ( 1436)             arglist[n]:=m;
                 197 ( 1440)             argtype[n]:='i';
                 198 ( 1458)           end {number}
                 199 ( 1464)           else if ((ch>='A') and (ch<='Z'))
                 200 ( 1481)             or (ch='*') or (ch='?') or (ch='/')
                 201 ( 1504)               then begin {letter}
                 202 ( 1509)               { default for arg is drive 1 }
                 203 ( 1509)               drive2:=255; cyclus2:=0;
                 204 ( 1517)               getfname(aname,' ',ok,
                 205 ( 1529)                 drive2,cyclus2);
                 206 ( 1565)               if not ok then argerr:=106;
                 207 ( 1575)               argtype[n]:='s';
                 208 ( 1585)               if n>22 then argerr:=107
                 209 ( 1601)               else begin
                 210 ( 1610)                 for i:=0 to 7 do
                 211 ( 1618)                   arglist[n+i]:=
                 212 ( 1636)                     ord(packed(aname[2*i+1],
                 213 ( 1646)                     aname[2*i]));
                 214 ( 1662)                 n:=n+7;
                 215 ( 1690)               end;
                 216 ( 1695)             arglist[n+1]:=cyclus2;
                 217 ( 1702)             argtype[n+1]:='i';
                 218 ( 1723)             if drive2=255 then begin {default}
                 219 ( 1739)               arglist[n+2]:=1;
                 220 ( 1748)               argtype[n+2]:='d';
                 221 ( 1765)             end else begin
                 222 ( 1774)               arglist[n+2]:=drive2;
                 223 ( 1781)               argtype[n+2]:='i';
                 224 ( 1802)             end;
                 225 ( 1808)             n:=n+2;
                 226 ( 1814)           end {letter}
                 227 ( 1819)           else begin
                 228 ( 1822)             arglist[n]:=0;
                 229 ( 1828)             argtype[n]:='d';
                 230 ( 1842)           end;
                 231 ( 1848)           n:=n+1; numarg:=numarg+1;
                 232 ( 1864)         until (argerr<>0) or (n>31)
                 233 ( 1882)             or ((ch<>' ') and (ch<>','));
                 234 ( 1899)         if ch<>cr then argerr:=106;
                 235 ( 1915)       end; {arguments}
                 236 ( 1919)       if ch<>cr then argerr:=106;
                 237 ( 1931)     end {ok}
                 238 ( 1935)     else argerr:=106;
                 239 ( 1940) 

----------------------------------------------------------------------

R65 Pascal program SYSTEM          11/11/23     page 5

                 240 ( 1944)     if argerr<>0 then begin
                 241 ( 1951)       writeln;
                 242 ( 1954)       writeln(invvid,'Argument error ', argerr,norvid);
                 243 ( 1993)       clearinput;
                 244 ( 1997)     end
                 245 ( 1997)     else begin
                 246 ( 2000)       clearinput;
                 247 ( 2004)       endstk:=topmem-144;
                 248 ( 2009)       { try to run program from drive 1 }
                 249 ( 2013)       runprog(runname,1,cyclus1);
                 250 ( 2031)       if runerr=$84 then begin
                 251 ( 2037)         { if failed, run from drive 0 }
                 252 ( 2040)         runerr:=0;
                 253 ( 2042)         runprog(runname,0,cyclus1);
                 254 ( 2064)         if runerr=$84 then begin
                 255 ( 2070)           writeln(invvid,'Program not found',norvid);
                 256 ( 2103)           runerr:=0;
                 257 ( 2105)         end;
                 258 ( 2109)       end;
                 259 ( 2109)       endstk:=topmem-144;
                 260 ( 2114)       iocheck:=true;
                 261 ( 2120)       if runerr<>0 then begin
                 262 ( 2130)         writeln;
                 263 ( 2133)         writeln(invvid,'Program aborted',norvid);
                 264 ( 2167)       end
                 265 ( 2167)     end
                 266 ( 2167)   until false;
                 267 ( 2169) end.
                 268 ( 2172) 

End compile

Code lenght:          2171
Compiler stack size:  41
Ident stack size:     81
Pascal errors:        0

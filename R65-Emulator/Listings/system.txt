
R65 Pascal program SYSTEM          6/11/23     page 1


                   1 (    4) {
                   2 (    4)          **************************
                   3 (    4)          *                        *
                   4 (    4)          * R65 Pascal Main System *
                   5 (    4)          *                        *
                   6 (    4)          **************************
                   7 (    4)  
                   8 (    4)      Based on version 01/08/82 rricharz
                   9 (    4)      1979-1982  rricharz (r77@bluewin.ch)
                  10 (    4)      2018       recovered
                  11 (    4)      2023       last change
                  12 (    4)  
                  13 (    4) R65 Pascal System Program. This program is
                  14 (    4) called, when Pascal is executed. It allows to
                  15 (    4) call other programs by names and with
                  16 (    4) arguments.
                  17 (    4)  
                  18 (    4) Examples:
                  19 (    4)   compile test1:p
                  20 (    4)   compile test1:p:04,1
                  21 (    4)   copy test3:P,0,1
                  22 (    4)   copy test3:P,0 1
                  23 (    4)   find test*
                  24 (    4)  
                  25 (    4) First tries to run program from drive 1,
                  26 (    4) unless a drive is specified in the call.
                  27 (    4) If not found there and not specified,
                  28 (    4) tries to run in from drive 0.
                  29 (    4) Default for arguments is drive 1.
                  30 (    4) }
                  31 (    4)  
                  32 (    4) program system;
                  33 (    4) uses syslib;
                  34 (  373)  
                  35 (  373) const stopcode=$2010;
                  36 (  376)  
                  37 (  376) var
                  38 (  376)   i, m, n: integer;
                  39 (  376)   ch: char;
                  40 (  376)   ok: boolean;
                  41 (  376)   argerr: integer;
                  42 (  376)   runname,aname: array[15] of char;
                  43 (  376)   drive1,drive2: integer;
                  44 (  376)   cyclus1,cyclus2: integer;
                  45 (  376)  
                  46 (  376) { * runprog * }
                  47 (  376)  
                  48 (  376) proc runprog
                  49 (  376)   (name: array[15] of char;
                  50 (  376)    drv: integer; cyc: integer);
                  51 (  376)  
                  52 (  376) var i: integer;
                  53 (  379)  
                  54 (  379) begin
                  55 (  379)   for i:=0 to 15 do filnm1[i]:=name[i];
                  56 (  406)   filcy1:=cyc; fildrv:=drv; filflg:=$40;
                  57 (  450)   run
                  58 (  454) end;
                  59 (  455)  

----------------------------------------------------------------------

R65 Pascal program SYSTEM          6/11/23     page 2

                  60 (  456) { * uppercase * }
                  61 (  456)  
                  62 (  456) func uppercase(ch1: char): char;
                  63 (  456)  
                  64 (  456) begin
                  65 (  456)   if (ch1 >= 'a') and (ch1 <= 'z') then
                  66 (  475)     uppercase := chr(ord(ch1) - 32)
                  67 (  485)   else
                  68 (  486)     uppercase := ch1;
                  69 (  494) end;
                  70 (  502)  
                  71 (  503) { * next * }
                  72 (  503)  
                  73 (  503) proc next;
                  74 (  503)  
                  75 (  503) begin
                  76 (  503)   read(@input,ch);
                  77 (  516)   ch:=uppercase(ch);
                  78 (  529) end;
                  79 (  533)  
                  80 (  534) { * getnum * }
                  81 (  534)  
                  82 (  534) proc getnum
                  83 (  534)   (var num: integer);
                  84 (  534)  
                  85 (  534) var sign: integer;
                  86 (  537)  
                  87 (  537) begin
                  88 (  537)   sign:=1; num:=0;
                  89 (  547)   case ch of
                  90 (  551)     '+': next;
                  91 (  566)     '-':  begin sign:=-1; next end
                  92 (  587)   end; {case}
                  93 (  589)   ok:=ok and ((ch>='0') and (ch<='9'));
                  94 (  608)   while (ch>='0') and (ch<='9') do begin
                  95 (  631)     num:=10*num+ord(ch)-ord('0');
                  96 (  645)     next
                  97 (  650)   end;
                  98 (  654)   num:=sign*num
                  99 (  661) end;
                 100 (  670)  
                 101 (  671) { * getfname * }
                 102 (  671)  
                 103 (  671) proc getfname
                 104 (  671)   (var name: array[15] of char;
                 105 (  671)    ptype: char; var ok: boolean;
                 106 (  671)    var drv: integer; var cyc: integer);
                 107 (  671)  
                 108 (  671) var i, j: integer;
                 109 (  674)  
                 110 (  674)   func nexthexdigit: integer;
                 111 (  674)  
                 112 (  674)   var d: integer;
                 113 (  677)  
                 114 (  677)   begin
                 115 (  677)     next;
                 116 (  683)     if (ch>='0') and (ch<='9') then
                 117 (  697)       nexthexdigit:= ord(ch)-ord('0')
                 118 (  707)     else if (ch>='A') and (ch<='Z') then
                 119 (  729)       nexthexdigit:= ord(ch)-ord('A')+10

----------------------------------------------------------------------

R65 Pascal program SYSTEM          6/11/23     page 3

                 120 (  740)     else begin
                 121 (  750)       ok:=false;
                 122 (  752)     nexthexdigit:=0;
                 123 (  758)     end;
                 124 (  762)   end;
                 125 (  762)  
                 126 (  763) begin
                 127 (  763)   ok:=((ch>='A') and (ch<='Z'))
                 128 (  779)     or (ch='*') or (ch='?') or (ch='/');
                 129 (  803)   i:=0;
                 130 (  810)   repeat
                 131 (  814)     name[i]:=ch; i:=succ(i);
                 132 (  830)     next
                 133 (  835)     until (i>12) or (ch=' ') or (ch=cr) or
                 134 (  861)       (ch=',') or (ch=':') or (ch='.');
                 135 (  885)   for j:=i to 15 do name[j]:=' ';
                 136 (  914)   if ch=':' then begin
                 137 (  939)     next;
                 138 (  946)     name[i]:=':';
                 139 (  952)     name[i+1]:=ch;
                 140 (  963)     next
                 141 (  971)   end
                 142 (  975)   else if ptype <> ' ' then begin
                 143 (  985)     name[i]:=':';
                 144 (  994)     name[i+1]:=ptype
                 145 ( 1005)   end;
                 146 ( 1013)   if (ch='.') then begin
                 147 ( 1020)     cyc:=nexthexdigit*16+nexthexdigit;
                 148 ( 1038)     next;
                 149 ( 1047)   end
                 150 ( 1047)   if (ch=',') then begin
                 151 ( 1054)     next;
                 152 ( 1061)     getnum(drv);
                 153 ( 1073)     if (drv<0) or (drv>1) then
                 154 ( 1087)       argerr:=105;
                 155 ( 1093)   end
                 156 ( 1097) end;
                 157 ( 1097)  
                 158 ( 1098) { * clearinput * }
                 159 ( 1098)  
                 160 ( 1098) proc clearinput;
                 161 ( 1098)  
                 162 ( 1098) begin
                 163 ( 1098)   buffpn:=-1;
                 164 ( 1105) end;
                 165 ( 1110)  
                 166 ( 1111) { * main * }
                 167 ( 1111)  
                 168 ( 1111) begin {main}
                 169 ( 1111)   maxseq:=mmaxseq-1;
                 170 ( 1117)   for i:=0 to mmaxseq-1 do fidrtb[i]:=0;
                 171 ( 1149)   clearinput; writeln;
                 172 ( 1174)   writeln('R65 Pascal (06/11/23)');
                 173 ( 1208)   ok:=true;
                 174 ( 1210)  
                 175 ( 1214)   repeat {main loop (endless)}
                 176 ( 1214)     write('P*');
                 177 ( 1217)     next;
                 178 ( 1221)     if ch=cr then call(stopcode);
                 179 ( 1235)     while (ch=' ') or (ch=chr(13)) do next;

----------------------------------------------------------------------

R65 Pascal program SYSTEM          6/11/23     page 4

                 180 ( 1258)     { default for program to run is drive 1,
                 181 ( 1261)       if not found, run from drive 0,
                 182 ( 1261)       user input is ignored }
                 183 ( 1261)     drive1:=0; cyclus1:=0;
                 184 ( 1269)     getfname(runname,'R',ok,drive1,cyclus1);
                 185 ( 1317)     for i:=0 to 31 do argtype[i]:=chr(0);
                 186 ( 1340)     if ok then begin
                 187 ( 1365)       numarg:=0; n:=0; argerr:=0;
                 188 ( 1382)       if ch=' ' then begin  {arguments}
                 189 ( 1396)         repeat
                 190 ( 1396)           next;
                 191 ( 1400)           if (ch>='0') and (ch<='9') then
                 192 ( 1414)           begin {number}
                 193 ( 1418)             getnum(m);
                 194 ( 1430)             arglist[n]:=m;
                 195 ( 1434)             argtype[n]:='i';
                 196 ( 1452)           end {number}
                 197 ( 1458)           else if ((ch>='A') and (ch<='Z'))
                 198 ( 1475)             or (ch='*') or (ch='?') or (ch='/')
                 199 ( 1498)               then begin {letter}
                 200 ( 1503)               { default for arg is drive 1 }
                 201 ( 1503)               drive2:=255; cyclus2:=0;
                 202 ( 1511)               getfname(aname,' ',ok,
                 203 ( 1523)                 drive2,cyclus2);
                 204 ( 1559)               if not ok then argerr:=106;
                 205 ( 1569)               argtype[n]:='s';
                 206 ( 1579)               if n>22 then argerr:=107
                 207 ( 1595)               else begin
                 208 ( 1604)                 for i:=0 to 7 do
                 209 ( 1612)                   arglist[n+i]:=
                 210 ( 1630)                     ord(packed(aname[2*i+1],
                 211 ( 1640)                     aname[2*i]));
                 212 ( 1656)                 n:=n+7;
                 213 ( 1684)               end;
                 214 ( 1689)             arglist[n+1]:=cyclus2;
                 215 ( 1696)             argtype[n+1]:='i';
                 216 ( 1717)             if drive2=255 then begin {default}
                 217 ( 1733)               arglist[n+2]:=1;
                 218 ( 1742)               argtype[n+2]:='d';
                 219 ( 1759)             end else begin
                 220 ( 1768)               arglist[n+2]:=drive2;
                 221 ( 1775)               argtype[n+2]:='i';
                 222 ( 1796)             end;
                 223 ( 1802)             n:=n+2;
                 224 ( 1808)           end {letter}
                 225 ( 1813)           else begin
                 226 ( 1816)             arglist[n]:=0;
                 227 ( 1822)             argtype[n]:='d';
                 228 ( 1836)           end;
                 229 ( 1842)           n:=n+1; numarg:=numarg+1;
                 230 ( 1858)         until (argerr<>0) or (n>31)
                 231 ( 1876)             or ((ch<>' ') and (ch<>','));
                 232 ( 1893)         if ch<>cr then argerr:=106;
                 233 ( 1909)       end; {arguments}
                 234 ( 1913)       if ch<>cr then argerr:=106;
                 235 ( 1925)     end {ok}
                 236 ( 1929)     else argerr:=106;
                 237 ( 1934)  
                 238 ( 1938)     if argerr<>0 then begin
                 239 ( 1945)       writeln;

----------------------------------------------------------------------

R65 Pascal program SYSTEM          6/11/23     page 5

                 240 ( 1948)       writeln(invvid,'Argument error ', argerr,norvid);
                 241 ( 1987)       clearinput;
                 242 ( 1991)     end
                 243 ( 1991)     else begin
                 244 ( 1994)       clearinput;
                 245 ( 1998)       endstk:=topmem-144;
                 246 ( 2003)       { try to run program from drive 1 }
                 247 ( 2007)       runprog(runname,1,cyclus1);
                 248 ( 2025)       if runerr=$84 then begin
                 249 ( 2031)         { if failed, run from drive 0 }
                 250 ( 2034)         runerr:=0;
                 251 ( 2036)         runprog(runname,0,cyclus1);
                 252 ( 2058)         if runerr=$84 then begin
                 253 ( 2064)           writeln(invvid,'Program not found',norvid);
                 254 ( 2097)           runerr:=0;
                 255 ( 2099)         end;
                 256 ( 2103)       end;
                 257 ( 2103)       endstk:=topmem-144;
                 258 ( 2108)       iocheck:=true;
                 259 ( 2114)       if runerr<>0 then begin
                 260 ( 2124)         writeln;
                 261 ( 2127)         writeln(invvid,'Program aborted',norvid);
                 262 ( 2161)       end
                 263 ( 2161)     end
                 264 ( 2161)   until false;
                 265 ( 2163) end.
                 266 ( 2166) 

End compile

Code lenght:          2165
Compiler stack size:  41
Ident stack size:     80
Pascal errors:        0

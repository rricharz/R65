
R65 COMPILE 4.2: program CALC             7/12/23 page 1


   1 (    4)  {
   2 (    4)    Pascal CALC for R65 computer system
   3 (    4) 
   4 (    4)    Note: The R65 Pascal system used
   5 (    4)    32 bit floating point representation,
   6 (    4)    which is not suitable for serious
   7 (    4)    calculations, but was widely used
   8 (    4)    in early 8-bit microprocessor
   9 (    4)    systems. CALC tries to handle
  10 (    4)    this limited accuracy.
  11 (    4) 
  12 (    4)    Written 2019-2023 by rricharz  }
  13 (    4) 
  14 (    4) program calc;
  15 (    4) uses syslib,mathlib,strlib,ledlib;
  16 ( 5588) 
  17 ( 5588) mem vidpnt=$00e9:integer;
  18 ( 5591) 
  19 ( 5591) var ch: char;
  20 ( 5591)     r,lastr: real;
  21 ( 5591)     stop,dotused,firsterror: boolean;
  22 ( 5591) 
  23 ( 5591) proc clearinput;
  24 ( 5591) {**************}
  25 ( 5591) begin
  26 ( 5591)   buffpn:=-1;
  27 ( 5598) end;
  28 ( 5603) 
  29 ( 5604) proc error(s1,s2:cpnt);
  30 ( 5604) {*********************}
  31 ( 5604) begin
  32 ( 5604)   if firsterror then
  33 ( 5609)     writeln(invvid,'Error: ',s1,' ',s2,norvid);
  34 ( 5648)   firsterror:=false;
  35 ( 5650) end;
  36 ( 5654) 
  37 ( 5655) proc readch;
  38 ( 5655) {**********}
  39 ( 5655) begin
  40 ( 5655)   if firsterror then read(@input,ch)
  41 ( 5670)   else ch:=cr;
  42 ( 5681) end;
  43 ( 5685) 
  44 ( 5686) func fix(rf: real): integer;
  45 ( 5686) {**************************}
  46 ( 5686) var rnd:real;
  47 ( 5689) begin
  48 ( 5689)   if rf>=0.0 then rnd:=0.5 else rnd:=-0.5;
  49 ( 5728)   if (rf>=32767.5) then begin
  50 ( 5748)       error('Integer value exceeds',
  51 ( 5775)         'upper limit, set to 32767');
  52 ( 5809)       fix:=$7fff;
  53 ( 5812)     end else if (rf<=-32768.5) then begin
  54 ( 5833)       error('Integer value exceeds',
  55 ( 5860)         ' lower limit, set to -32768');
  56 ( 5896)       fix:=$8000;
  57 ( 5899)     end else fix:=trunc(rf+rnd);
  58 ( 5919) end;
  59 ( 5924) 

----------------------------------------------------------------------

R65 COMPILE 4.2: program CALC             7/12/23 page 2

  60 ( 5925) proc checkfor(c: char);
  61 ( 5925) {*********************}
  62 ( 5925) var s1,s2:cpnt;
  63 ( 5928) begin
  64 ( 5928)   if ch<>c then begin
  65 ( 5939)     s1:=new; s2:=new;
  66 ( 5958)     strcpy('Expected ',s1);
  67 ( 5984)     if c=cr then strcpy('Expected <eol>',s1)
  68 ( 6011)     else strinsc(c,9,s1);
  69 ( 6040)     strcpy('but found ',s2);
  70 ( 6063)     if ch=cr then strcpy('but found <eol>',s2)
  71 ( 6091)     else strinsc(ch,10,s2);
  72 ( 6120)     error(s1,s2);
  73 ( 6134)     release(s2); release(s1);
  74 ( 6154)   end;
  75 ( 6154) end;
  76 ( 6154) 
  77 ( 6155) proc skip(c:char);
  78 ( 6155) {****************}
  79 ( 6155) begin
  80 ( 6155)   checkfor(c); readch;
  81 ( 6174) end;
  82 ( 6174) 
  83 ( 6175) func isnumber(cn:char):boolean;
  84 ( 6175) {*****************************}
  85 ( 6175) begin
  86 ( 6175)   isnumber:=(cn>='0') and (cn<='9');
  87 ( 6194) end;
  88 ( 6199) 
  89 ( 6200) proc writehex(f:file; r: integer);
  90 ( 6200) {********************************}
  91 ( 6200) var mask, m, n, r1: integer;
  92 ( 6203) begin
  93 ( 6203)   write(@f,'$'); mask := $f000; n := 12;
  94 ( 6222)   while mask <>0 do begin
  95 ( 6236)     r1 := (r and mask) shr n;
  96 ( 6245)     if r1 < 10 then write(@f,r1)
  97 ( 6269)     else  write(@f,chr(ord(r1)+ord('A')-10));
  98 ( 6296)     mask := mask shr 4; n := n - 4;
  99 ( 6313)   end;
 100 ( 6318) end;
 101 ( 6321) 
 102 ( 6322) proc writebinary(f:file; r: integer);
 103 ( 6322) {***********************************}
 104 ( 6322) var mask: integer;
 105 ( 6325) begin
 106 ( 6325)   write(@f,'% '); mask := $8000;
 107 ( 6339)   while mask <> 0 do begin
 108 ( 6353)    if (r and mask) <> 0 then write(@f,'1')
 109 ( 6375)    else write(@f,'0');
 110 ( 6387)    mask := mask shr 1;
 111 ( 6393)    if mask = $0800 then write(@f,' ');
 112 ( 6417)    if mask = $0080 then write(@f,' ');
 113 ( 6435)    if mask = $0008 then write(@f,' ');
 114 ( 6453)   end;
 115 ( 6453) end;
 116 ( 6456) 
 117 ( 6457) proc showled(s1:cpnt);
 118 ( 6457) {********************}
 119 ( 6457) var s2:cpnt;

----------------------------------------------------------------------

R65 COMPILE 4.2: program CALC             7/12/23 page 3

 120 ( 6460)     pos,i,l:integer;
 121 ( 6460) begin
 122 ( 6460)   s2:=new;
 123 ( 6468)   strcpy(s1,s2);
 124 ( 6486)   { remove any space }
 125 ( 6486)   pos:=strpos(' ',s2,0);
 126 ( 6502)   while pos>=0 do begin
 127 ( 6516)     strdelc(pos,s2);
 128 ( 6530)     pos:=strpos(' ',s2,0);
 129 ( 6546)   end;
 130 ( 6550)   { remove any plus sign }
 131 ( 6553)   pos:=strpos('+',s2,0);
 132 ( 6569)   while pos>=0 do begin
 133 ( 6583)     strdelc(pos,s2);
 134 ( 6597)     pos:=strpos('+',s2,0);
 135 ( 6613)   end;
 136 ( 6617)   { convert point to bit 8 }
 137 ( 6620)   pos:=strpos('.',s2,0);
 138 ( 6636)   while pos>0 do begin
 139 ( 6650)     strdelc(pos,s2);
 140 ( 6664)     s2[pos-1]:=chr(ord(s2[pos-1]) or 128);
 141 ( 6687)     pos:=strpos('.',s2,0);
 142 ( 6708)   end;
 143 ( 6712)   { remove unnecessary 0 in exponent, if necessary }
 144 ( 6715)   l:=strlen(s2);
 145 ( 6727)   if (l>8) and (s2[l-2]='0') and
 146 ( 6754)     (strpos('e',s2,0)>0) then strdelc(l-2,s2);
 147 ( 6795)   { remove e as a last resort (exp is negative) }
 148 ( 6795)   if strlen(s2)>8 then begin
 149 ( 6810)     pos:=strpos('e',s2,0);
 150 ( 6829)     if pos>0 then strdelc(pos,s2);
 151 ( 6857)   end;
 152 ( 6857)   { right justify }
 153 ( 6857)   while strlen(s2)<8 do strinsc(' ',0,s2);
 154 ( 6889)   { show converted string }
 155 ( 6892)   ledstring(s2);
 156 ( 6902)   release(s2);
 157 ( 6912) end;
 158 ( 6912) 
 159 ( 6913) proc writeauto(f:file;r:real);
 160 ( 6913) {****************************}
 161 ( 6913) { outputs 5 digits }
 162 ( 6913) var m,m1,max,rnd: real;
 163 ( 6916)     i1,d1:integer;
 164 ( 6916)     sign: char;
 165 ( 6916) begin
 166 ( 6916)   sign:=' '; m:=r;
 167 ( 6924)   if m<0. then begin
 168 ( 6949)     sign:='-'; m:=-m;
 169 ( 6958)   end;
 170 ( 6971)   if dotused and (m>=10000.0) then writeflo(f,r)
 171 ( 6996)   else if m=0. then write(@f,' 0')
 172 ( 7035)   else if r=conv($8000) then write(@f,'-32768 ')
 173 ( 7066)   else if m>=32767.5 then writeflo(f,r)
 174 ( 7090)   else if m<0.01 then writeflo(f,r)
 175 ( 7125)   else begin
 176 ( 7140)     if m>=10000. then begin
 177 ( 7153)       d1:=0; rnd:=0.5
 178 ( 7162)     end else if m>=1000. then begin
 179 ( 7190)       d1:=1; rnd:=0.05

----------------------------------------------------------------------

R65 COMPILE 4.2: program CALC             7/12/23 page 4

 180 ( 7199)     end else if m>=100. then begin
 181 ( 7227)       d1:=2; rnd:=0.005
 182 ( 7236)     end else if m>=10. then begin
 183 ( 7264)       d1:=3; rnd:=0.0005
 184 ( 7273)     end else if m>=1. then begin
 185 ( 7301)       d1:=4; rnd:=0.00005
 186 ( 7310)     end else if m>=0.1 then begin
 187 ( 7338)       d1:=5; rnd:=0.000005
 188 ( 7347)     end else begin
 189 ( 7362)       d1:=6; rnd:=0.0000005
 190 ( 7368)     end;
 191 ( 7380)     m:=m+rnd; { round }
 192 ( 7399)     write(@f,sign,trunc(m));
 193 ( 7418)     m1:=m-conv(trunc(m));
 194 ( 7431)     if m1<=rnd then begin
 195 ( 7452)       for i1:=1 to d1+1 do write(@f,' ');
 196 ( 7485)       d1:=0;
 197 ( 7501)     end;
 198 ( 7505)     if d1>0 then write(@f,'.');
 199 ( 7523)     for i1:=1 to d1 do begin
 200 ( 7542)       m1:=10.*m1; write(@f,trunc(m1));
 201 ( 7575)       m1:=m1-conv(trunc(m1));
 202 ( 7588)     end;
 203 ( 7596)   end;
 204 ( 7610) end;
 205 ( 7610) 
 206 ( 7611) proc showresult;
 207 ( 7611) {**************}
 208 ( 7611) var s1: cpnt;
 209 ( 7614)     rnd: real;
 210 ( 7614) begin
 211 ( 7614)   s1:=new;
 212 ( 7622)   writeauto(@s1,r);
 213 ( 7642)   write(s1);
 214 ( 7647)   if (r>-32768.5) and (r<32767.5) then begin
 215 ( 7675)     if r>=0.0 then rnd:=0.5 else rnd:=-0.5;
 216 ( 7715)     tab(16); writehex(output,fix(r));
 217 ( 7752)     tab(24); writebinary(output,fix(r));
 218 ( 7782)   end;
 219 ( 7782)   writeln;
 220 ( 7782)   showled(s1);
 221 ( 7798)   release(s1);
 222 ( 7808) end;
 223 ( 7808) 
 224 ( 7809) func express:real;
 225 ( 7809) {****************}
 226 ( 7809) var
 227 ( 7809)   re: real;
 228 ( 7812) 
 229 ( 7812) func binval: integer;
 230 ( 7812) {*******************}
 231 ( 7812) begin
 232 ( 7812)   if (ch='0') then binval:=0
 233 ( 7827)   else if (ch='1') then binval:=1
 234 ( 7846)   else binval:=-1;
 235 ( 7857) end;
 236 ( 7862) 
 237 ( 7863) func hexval: integer;
 238 ( 7863) {*******************}
 239 ( 7863) begin

----------------------------------------------------------------------

R65 COMPILE 4.2: program CALC             7/12/23 page 5

 240 ( 7863)   if (ch>='0') and (ch<='9')
 241 ( 7881)     then hexval:=ord(ch)-ord('0')
 242 ( 7892)   else if (ch>='A') and (ch<='F')
 243 ( 7913)     then hexval:=ord(ch)-ord('A')+10
 244 ( 7925)   else hexval:=-1;
 245 ( 7937) end;
 246 ( 7942) 
 247 ( 7943) func isletter(ch:char):boolean;
 248 ( 7943) {*****************************}
 249 ( 7943) begin
 250 ( 7943)   isletter:=(ord(ch)>=ord('A'))and(ord(ch)<=ord('Z'))
 251 ( 7961) end;
 252 ( 7967) 
 253 ( 7968) func function:real;
 254 ( 7968) {*****************}
 255 ( 7968) var i: integer;
 256 ( 7971)     r: real;
 257 ( 7971)     lstring: cpnt;
 258 ( 7971) begin
 259 ( 7971)   lstring:=new;
 260 ( 7979)   lstring[0]:=chr(0);
 261 ( 7987)   strinsc(ch,0,lstring); readch; i:=1;
 262 ( 8014)   while isletter(ch) do begin
 263 ( 8033)     strinsc(ch,i,lstring); readch; i:=i+1;
 264 ( 8061)   end;
 265 ( 8066)   stop:=false;
 266 ( 8071)   if strcmp(lstring,'R')=0 then begin
 267 ( 8094)     function:=lastr; release(lstring); exit;
 268 ( 8120)   end;
 269 ( 8120)   if strcmp(lstring,'PI')=0 then begin
 270 ( 8140)     function:=pi; release(lstring); exit;
 271 ( 8166)   end;
 272 ( 8166)   if strcmp(lstring,'E')=0 then begin
 273 ( 8185)     function:=e; release(lstring); exit;
 274 ( 8211)   end;
 275 ( 8211)   { functions with single argument follow }
 276 ( 8211)   checkfor('('); r:=express; skip(')');
 277 ( 8239)   if strcmp(lstring,'SQR')=0 then begin
 278 ( 8260)     function:=r*r; release(lstring); exit;
 279 ( 8293)   end;
 280 ( 8293)   if strcmp(lstring,'SQRT')=0 then begin
 281 ( 8315)     function:=sqrt(r); release(lstring); exit;
 282 ( 8349)   end;
 283 ( 8349)   if strcmp(lstring,'SIN')=0 then begin
 284 ( 8370)     function:=sin(r); release(lstring); exit;
 285 ( 8404)   end;
 286 ( 8404)   if strcmp(lstring,'COS')=0 then begin
 287 ( 8425)     function:=cos(r); release(lstring); exit;
 288 ( 8459)   end;
 289 ( 8459)   if strcmp(lstring,'TAN')=0 then begin
 290 ( 8480)     function:=tan(r); release(lstring); exit;
 291 ( 8514)   end;
 292 ( 8514)   if strcmp(lstring,'EXP')=0 then begin
 293 ( 8535)     function:=exp(r); release(lstring); exit;
 294 ( 8569)   end;
 295 ( 8569)   if strcmp(lstring,'LN')=0 then begin
 296 ( 8589)     function:=ln(r); release(lstring); exit;
 297 ( 8623)   end;
 298 ( 8623)   if strcmp(lstring,'LOG')=0 then begin
 299 ( 8644)     function:=log(r); release(lstring); exit;

----------------------------------------------------------------------

R65 COMPILE 4.2: program CALC             7/12/23 page 6

 300 ( 8678)   end;
 301 ( 8678)   error('Unknow function',lstring);
 302 ( 8706)   function:=0.0;
 303 ( 8712)   release(lstring);
 304 ( 8728) end;
 305 ( 8728) 
 306 ( 8729) proc exponent(var r:real);
 307 ( 8729) {************************}
 308 ( 8729) var minus:boolean;
 309 ( 8732)     exp:integer;
 310 ( 8732) begin
 311 ( 8732)   minus:=false;
 312 ( 8736)   if ch='-' then begin minus:=true; readch end
 313 ( 8760)   else if ch='+' then readch;
 314 ( 8777)   exp:=0;
 315 ( 8779)   if isnumber(ch) then begin
 316 ( 8795)     exp:=ord(ch)-ord('0'); readch
 317 ( 8809)   end else error('Expecting','exponent');
 318 ( 8845)   if isnumber(ch) then begin
 319 ( 8857)     exp:=10*exp+(ord(ch)-ord('0')); readch;
 320 ( 8883)   end;
 321 ( 8883)   if minus then
 322 ( 8883)     while exp>0 do begin r:=0.1*r; exp:=exp-1 end
 323 ( 8925)   else
 324 ( 8930)     while exp>0 do begin r:=10.0*r; exp:=exp-1 end;
 325 ( 8976) end;
 326 ( 8979) 
 327 ( 8980) func factor:real;
 328 ( 8980) {***************}
 329 ( 8980) var negative:boolean;
 330 ( 8983)     rf,rt: real;
 331 ( 8983)     i,iv: integer;
 332 ( 8983) begin
 333 ( 8983)   negative:=false; rf:=0.;  readch;
 334 ( 9007)   if ch='-' then begin
 335 ( 9014)     negative:=true; readch;
 336 ( 9027)   end;
 337 ( 9027)   if ch='(' then begin
 338 ( 9034)     stop:=false; rf:=express;
 339 ( 9049)     checkfor(')'); readch;
 340 ( 9067)   end else if ch='%' then begin
 341 ( 9077)     stop:=false; readch; iv:=0;
 342 ( 9092)     while binval>=0 do begin
 343 ( 9108)       iv:=(iv shl 1)+binval; readch;
 344 ( 9130)     end;
 345 ( 9130)     rf:=conv(iv);
 346 ( 9137)   end else if ch='$' then begin
 347 ( 9154)     stop:=false; readch; iv:=0;
 348 ( 9169)     while hexval>=0 do begin
 349 ( 9185)       iv:=(iv shl 4)+hexval; readch;
 350 ( 9207)     end;
 351 ( 9207)     rf:=conv(iv);
 352 ( 9214)   end else if isletter(ch) then rf:=function
 353 ( 9239)   else if ch<>chr(0) then begin
 354 ( 9262)     if ch<>cr then begin
 355 ( 9272)       if ch<>cr then stop:=false;
 356 ( 9287)       if ch='+' then readch;
 357 ( 9305)       {if ch='-' then begin
 358 ( 9305)         negative:=true; readch;
 359 ( 9305)       end;}

----------------------------------------------------------------------

R65 COMPILE 4.2: program CALC             7/12/23 page 7

 360 ( 9305)       if not isnumber(ch) then
 361 ( 9317)         error('Expected','number');
 362 ( 9347)       while isnumber(ch) do begin
 363 ( 9362)         rt:=rf+rf; rt:=rt+rt;
 364 ( 9387)         rf:=rt+rt+rf+rf+conv(ord(ch)-ord('0'));
 365 ( 9434)         readch;
 366 ( 9446)       end;
 367 ( 9446)       if ch='.' then begin
 368 ( 9456)         dotused:=true; readch; rt:=0.1;
 369 ( 9475)         while isnumber(ch) do begin
 370 ( 9496)           rf:=rf+conv(ord(ch)-ord('0'))*rt;
 371 ( 9510)           rt:=rt/10.; readch;
 372 ( 9547)         end;
 373 ( 9547)       end;
 374 ( 9550)       if ch='E' then begin readch; exponent(rf) end;
 375 ( 9580)     end;
 376 ( 9580)     if negative then rf:=-rf;
 377 ( 9587)   end;
 378 ( 9600)   factor:=rf;
 379 ( 9600) end;
 380 ( 9612) 
 381 ( 9613) func simexp:real;
 382 ( 9613) {***************}
 383 ( 9613) var
 384 ( 9613)   rs,divisor: real;
 385 ( 9616) begin
 386 ( 9616)   rs:=factor;
 387 ( 9624)   while (ch='*') or (ch='/') or (ch='&') or (ch='<')
 388 ( 9659)     or (ch='>') or (ch='^') do begin
 389 ( 9680)     case ch of
 390 ( 9680)       '*': begin rs:=rs*factor; end;
 391 ( 9710)       '/': begin
 392 ( 9720)              divisor:=factor;
 393 ( 9726)              if divisor=0.0 then
 394 ( 9744)                error('Division','by zero')
 395 ( 9769)              else
 396 ( 9775)                rs:=rs/divisor;
 397 ( 9784)            end;
 398 ( 9797)       '&': rs:=conv(fix(rs) and fix(factor));
 399 ( 9836)       '^': rs:=exp(factor*ln(rs));
 400 ( 9882)       '<': begin
 401 ( 9898)              readch; checkfor('<');
 402 ( 9910)              rs:=conv(fix(rs) shl fix(factor));
 403 ( 9939)              end;
 404 ( 9946)       '>': begin
 405 ( 9956)              readch; checkfor('>');
 406 ( 9968)              rs:=conv(fix(rs) shr fix(factor));
 407 ( 9997)            end
 408 (10004)       end {case};
 409 (10006)   end;
 410 (10006)   simexp:=rs;
 411 (10009) end;
 412 (10021) 
 413 (10022) {********body of express********}
 414 (10022) begin
 415 (10022)   re:=simexp;
 416 (10030)   while (ch='+') or (ch='-') or (ch='|') do begin
 417 (10062)     case ch of
 418 (10062)       '+': begin re:=re+simexp; end;
 419 (10092)       '-': begin re:=re-simexp; end;

----------------------------------------------------------------------

R65 COMPILE 4.2: program CALC             7/12/23 page 8

 420 (10121)       '|': begin
 421 (10131)              re:=conv(fix(re) or fix(factor));
 422 (10160)            end
 423 (10167)     end {case};
 424 (10169)   end;
 425 (10169)   express:=re;
 426 (10172) end;
 427 (10184) 
 428 (10185) {*********main body********}
 429 (10185) begin
 430 (10185)   write(invvid);
 431 (10190)   writeln('Enter an expression, for example:        ');
 432 (10238)   writeln('32767      input decimal number          ');
 433 (10286)   writeln('$FFF       input hex number              ');
 434 (10334)   writeln('%1101      input binary number           ');
 435 (10382)   writeln('-55.35     input negative number         ');
 436 (10430)   writeln('2*(5+28)   math expression               ');
 437 (10478)   writeln('R*3        last result                   ');
 438 (10526)   writeln('<return>,<esc>    exit                   ');
 439 (10574)   writeln('Operators: +,-,*,/,^,(),&,|,<<,>>        ');
 440 (10622)   writeln('Functions: SQRT(),SQR(),SIN(),COS()      ');
 441 (10670)   writeln('           TAN(),EXP(),LN(),LOG()        ');
 442 (10718)   writeln(norvid);
 443 (10727)   r:=0.0; lastr:=0.0; dotused:=false;
 444 (10753)   repeat
 445 (10757)     firsterror:=true;
 446 (10759)     clearinput;
 447 (10767)     stop:=true; showresult;
 448 (10777)     dotused:=false; lastr:=r; r:=express; checkfor(cr);
 449 (10815)   until stop;
 450 (10815) end.

End compile

Code lenght:          10821
Compiler stack size:  142
Ident stack size:     139
Pascal errors:        0


R65 COMPILE 4.2: program BOUNCE           10/2/24 page 1


   1 (    4) {
   2 (    4)         *****************
   3 (    4)         *               *
   4 (    4)         *     BOUNCE    *
   5 (    4)         *               *
   6 (    4)         *****************
   7 (    4) 
   8 (    4) A bouncing ball simulation for the
   9 (    4) R65 Graphics display
  10 (    4) 
  11 (    4)     Original    1979 rricharz
  12 (    4)     New version 2019 rricharz
  13 (    4)                                 }
  14 (    4) 
  15 (    4) program bounce;
  16 (    4) uses syslib,plotlib;
  17 ( 1566) 
  18 ( 1566) const gravity=0.15;
  19 ( 1569)       keyfactor=1.05;
  20 ( 1569)       erase=0; ball=$6ff6;
  21 ( 1569) 
  22 ( 1569) var x,y,xspeed,yspeed: real;
  23 ( 1569)     xi,yi,xl,yl,keycode: integer;
  24 ( 1569) 
  25 ( 1569) proc expaint;
  26 ( 1569) begin
  27 ( 1569)   yspeed:=yspeed-gravity;
  28 ( 1586)   x:=x+xspeed;
  29 ( 1599)   y:=y+yspeed;
  30 ( 1618)   if x<1.5 then begin
  31 ( 1644)     x:=1.5;
  32 ( 1653)     xspeed:=-xspeed;
  33 ( 1659)   end else if x>conv(xsize-4) then begin
  34 ( 1688)     x:=conv(xsize-4);
  35 ( 1696)     xspeed:=-xspeed;
  36 ( 1703)   end;
  37 ( 1716)   if y<1.5 then begin
  38 ( 1729)     y:=1.5;
  39 ( 1738)     yspeed:=-yspeed+0.5*gravity;
  40 ( 1763)   end else if y>conv(ysize-18) then begin
  41 ( 1787)     yspeed:=-0.95*yspeed;
  42 ( 1796)     y:=conv(ysize-18);
  43 ( 1815)   end;
  44 ( 1822) 
  45 ( 1822)   xi:=trunc(x);
  46 ( 1828)   yi:=trunc(y);
  47 ( 1839)   plotmap(xl,yl,erase);
  48 ( 1860)   plotmap(xi,yi,ball);
  49 ( 1877)   xl:=xi;
  50 ( 1877)   yl:=yi;
  51 ( 1885) end;
  52 ( 1893) 
  53 ( 1894) func exkey(ch:char):boolean;
  54 ( 1894) begin
  55 ( 1894)   exkey:=false
  56 ( 1899)   case ord(ch) of
  57 ( 1909)     26: yspeed:=yspeed*keyfactor;
  58 ( 1928)     03: xspeed:=xspeed/keyfactor;
  59 ( 1957)     22: xspeed:=xspeed*keyfactor;
  60 ( 1986)     24: yspeed:=yspeed/keyfactor;
  61 ( 2015)     0:  exkey:=true
  62 ( 2032)   end {case};
  63 ( 2040)   if xspeed>4.0 then xspeed:=4.0
  64 ( 2056)   else if xspeed<-4.0 then xspeed:=-4.0;
  65 ( 2094)   if yspeed>6.0 then yspeed:=6.0
  66 ( 2117)   else if yspeed<-6.0 then yspeed:=-6.0;
  67 ( 2155) end;
  68 ( 2162) 
  69 ( 2163) {$I ANIMATE:P }
ANIMATE:P       .06  SP 0000-0300 0010 10/02/24
{I}    1 ( 2163) { animate - run animation in loop
{I}    2 ( 2163)   Calls expaint to paint one picture
{I}    3 ( 2163)   and apply motion.
{I}    4 ( 2163)   Calls exkey to check for key in loop
{I}    5 ( 2163)   and stops loop if true  }
{I}    6 ( 2163) 
{I}    7 ( 2163) proc animate;
{I}    8 ( 2163) const toggle=chr($0c);
{I}    9 ( 2166) mem sflag=$1781:integer&;
{I}   10 ( 2166) var ch:char;
{I}   11 ( 2166)     dummy:integer;
{I}   12 ( 2166) begin
{I}   13 ( 2166)   repeat
{I}   14 ( 2166)     repeat
{I}   15 ( 2168)       expaint;
{I}   16 ( 2172)       dummy:=syncscreen; { sleep for up to 30 msec }
{I}   17 ( 2182)       ch:=keypressed; { sleep for 10 msec }
{I}   18 ( 2190)       { sflag bit 8 is escape flag. Pass it through }
{I}   19 ( 2190)     until (ord(ch)<>0) or ((sflag and $80)<>0);
{I}   20 ( 2207)     read(@key,ch);
{I}   21 ( 2219)     sflag:=sflag and $7f; { clear escape flag }
{I}   22 ( 2232)     if ch=toggle then write(toggle);
{I}   23 ( 2245)   until exkey(ch);
{I}   24 ( 2257) end;
  70 ( 2261) 
  71 ( 2261) begin
  72 ( 2261)   grinit;
  73 ( 2267)   cleargr;
  74 ( 2271)   xspeed:=4.0*conv(random)/conv(xsize)+0.25;
  75 ( 2295)   yspeed:=conv(random)/(conv(ysize))+0.5;
  76 ( 2319)   x:=1.5;
  77 ( 2332)   y:=conv(ysize)/2.0;
  78 ( 2347)   xl:=trunc(x);
  79 ( 2360)   yl:=trunc(y);
  80 ( 2371) 
  81 ( 2376)   move(0,ysize);
  82 ( 2386)   draw(0,0,white);
  83 ( 2398)   draw(xsize,0,white);
  84 ( 2410)   draw(xsize,ysize,white);
  85 ( 2422)   draw(0,ysize,white);
  86 ( 2434)   move(0,ysize-14);
  87 ( 2447)   draw(xsize,ysize-14,white);
  88 ( 2462) 
  89 ( 2462)   move(6,ysize-11);
  90 ( 2475)   write(@plotdev,
  91 ( 2477)     'Use arrows to change speed');
  92 ( 2506) 
  93 ( 2506)   animate;
  94 ( 2510) 
  95 ( 2510)   grend;
  96 ( 2514) end.

End compile

Code lenght:          2513
Compiler stack size:  45
Ident stack size:     95
Pascal errors:        0


R65 COMPILE 4.3: program BOUNCE           13/2/24 page 1


   1 (    4) {
   2 (    4)         *****************
   3 (    4)         *               *
   4 (    4)         *     BOUNCE    *
   5 (    4)         *               *
   6 (    4)         *****************
   7 (    4) 
   8 (    4) A bouncing ball simulation for the
   9 (    4) R65 Graphics display.
  10 (    4) 
  11 (    4) With circle in the center of the canvas
  12 (    4) 
  13 (    4)     Original    1979 rricharz
  14 (    4)     New version 2024 rricharz
  15 (    4)                                 }
  16 (    4) 
  17 (    4) program bounce;
  18 (    4) uses syslib,plotlib,mathlib;
  19 ( 5287) 
  20 ( 5287) const gravity=0.15; keyfactor=1.2;
  21 ( 5290)       erase=0; ball=$6ff6;
  22 ( 5290)       autorepeat=false;
  23 ( 5290)       cleft=chr($03); cright=chr($16);
  24 ( 5290)       cup=chr($1a); cdown=chr($18); escape=chr(0);
  25 ( 5290) 
  26 ( 5290) var x,y,xspeed,yspeed: real;
  27 ( 5290)     xi,yi,xl,yl,keycode,mode,lastmode: integer;
  28 ( 5290)     xc,yc,rc: real;
  29 ( 5290) 
  30 ( 5290) {$I IRANDOM:P}
IRANDOM:P       .02  SP 0000-0200 0002 12/02/24
{I}    1 ( 5290) { irandom: real and integer random functions with limit
{I}    2 ( 5290) }
{I}    3 ( 5290) 
{I}    4 ( 5290) func rrandom(min,max:real):real;
{I}    5 ( 5290) begin
{I}    6 ( 5290)   rrandom := min + (conv(random)/255.0) * (max - min);
{I}    7 ( 5328) end;
{I}    8 ( 5336) 
{I}    9 ( 5337) func irandom(min,max:integer):integer;
{I}   10 ( 5337) begin
{I}   11 ( 5337)   irandom := trunc(rrandom(conv(min),conv(max)));
{I}   12 ( 5360) end;
{I}   13 ( 5365) 
  31 ( 5366) {$I ICIRCLE:P }
ICIRCLE:P       .04  SP 0000-0200 0000 12/02/24
{I}    1 ( 5366) proc circle(x,y,r,c:integer);
{I}    2 ( 5366) var step,rr,angle:real;
{I}    3 ( 5369) begin
{I}    4 ( 5369)  rr:=conv(r); step:=180.0/rr; angle:=0.0;
{I}    5 ( 5407)  if step>22.5 then step:=22.5;
{I}    6 ( 5435)  move(x+r,y);
{I}    7 ( 5460)  repeat
{I}    8 ( 5460)    angle:=angle+step;
{I}    9 ( 5466)    draw(x+trunc(rr*cos(angle)+0.5),
{I}   10 ( 5511)         y+trunc(rr*sin(angle)+0.5),c);
{I}   11 ( 5557)  until angle>=360.0;
{I}   12 ( 5569) end;
  32 ( 5574) 
  33 ( 5574) proc initmode;
  34 ( 5574) begin

----------------------------------------------------------------------

R65 COMPILE 4.3: program BOUNCE           13/2/24 page 2

  35 ( 5574)   cleargr;
  36 ( 5583)   xspeed:=rrandom(0.4,4.0);
  37 ( 5603)   yspeed:=rrandom(0.4,3.0);
  38 ( 5629) 
  39 ( 5635)   move(0,ysize);
  40 ( 5645)   draw(0,0,white);
  41 ( 5657)   draw(xsize,0,white);
  42 ( 5669)   draw(xsize,ysize,white);
  43 ( 5681)   draw(0,ysize,white);
  44 ( 5693)   move(0,ysize-14);
  45 ( 5706)   draw(xsize,ysize-14,white);
  46 ( 5721)   move(2,ysize - 11);
  47 ( 5734)   write(@plotdev,'mode ',mode);
  48 ( 5749)   write(@plotdev,' Use arrows,space,esc');
  49 ( 5775) 
  50 ( 5775)   case mode of
  51 ( 5775)     1: begin
  52 ( 5786)          x:=2.5; y:=conv(ysize)/2.0;
  53 ( 5807)          xl:=trunc(x); yl:=trunc(y);
  54 ( 5831)        end;
  55 ( 5836)     2: begin
  56 ( 5846)          x:=2.5; y:=conv(ysize)/2.0;
  57 ( 5867)          xl:=trunc(x); yl:=trunc(y);
  58 ( 5891)          xc:=conv(xsize) * 0.5;
  59 ( 5905)          yc:=conv(ysize-14) * 0.5;
  60 ( 5924)          rc:=conv(ysize-14) * 0.25;
  61 ( 5943)          circle(trunc(xc),trunc(yc),trunc(rc),white);
  62 ( 5979)        end;
  63 ( 5979)     3: begin
  64 ( 5989)          x:=conv(xsize)/2.0; y:=conv(ysize)/2.0;
  65 ( 6014)          xl:=trunc(x); yl:=trunc(y);
  66 ( 6038)          xc:=conv(xsize) * 0.5;
  67 ( 6052)          yc:=conv(ysize-14) * 0.5;
  68 ( 6071)          rc:=conv(ysize-14) * 0.5 - 1.0;
  69 ( 6097)          circle(trunc(xc),trunc(yc),trunc(rc),white);
  70 ( 6133)        end
  71 ( 6133)     end {case};
  72 ( 6135) end;
  73 ( 6135) 
  74 ( 6136) proc reflect;
  75 ( 6136) var radx,rady,l,sp1,sp2,mx,my,rx,ry:real;
  76 ( 6139) begin
  77 ( 6139)   { calculate radius vector }
  78 ( 6139)   rx:=xc-x; ry:=yc-y;
  79 ( 6166)   { normalize this vector, make lenght = 1 }
  80 ( 6179)   l:=sqrt(rx*rx+ry*ry);
  81 ( 6214)   rx:=rx/l; ry:=ry/l;
  82 ( 6245)   { calculate dot product of radius and motion }
  83 ( 6258)   sp1:=rx*xspeed+ry*yspeed;
  84 ( 6277)   { calculate dot product of tangent and motion }
  85 ( 6291)   sp2:=ry*xspeed-rx*yspeed;
  86 ( 6310)   { project motion vector on radius and tangent }
  87 ( 6324)   { invert radial component}
  88 ( 6324)   xspeed:=-rx*sp1+ry*sp2; yspeed:=-ry*sp1-rx*sp2;
  89 ( 6378)   { put ball back outside of circle }
  90 ( 6392)   x:=conv(xl); y:=conv(yl);
  91 ( 6407) end;
  92 ( 6414) 
  93 ( 6415) func expaint:boolean;
  94 ( 6415) begin

----------------------------------------------------------------------

R65 COMPILE 4.3: program BOUNCE           13/2/24 page 3

  95 ( 6415)   expaint:=false;
  96 ( 6422)   if mode<>lastmode then initmode;
  97 ( 6442)   lastmode:=mode;
  98 ( 6442) 
  99 ( 6450)   { check speed }
 100 ( 6450)   if xspeed>8.0 then xspeed:=8.0
 101 ( 6466)   else if xspeed<-8.0 then xspeed:=-8.0;
 102 ( 6504)   if yspeed>8.0 then yspeed:=8.0
 103 ( 6527)   else if xspeed<-8.0 then yspeed:=-8.0;
 104 ( 6565)   yspeed:=yspeed-gravity;
 105 ( 6584) 
 106 ( 6591)   { check position on canvas }
 107 ( 6591)   x:=x+xspeed;
 108 ( 6597)   y:=y+yspeed;
 109 ( 6616)   if x<2.5 then begin
 110 ( 6642)     x:=2.5;
 111 ( 6651)     xspeed:=-xspeed;
 112 ( 6657)   end else if x>conv(xsize-3) then begin
 113 ( 6686)     x:=conv(xsize-3);
 114 ( 6694)     xspeed:=-xspeed;
 115 ( 6701)   end;
 116 ( 6714)   if y<2.5 then begin
 117 ( 6727)     y:=2.5;
 118 ( 6736)     yspeed:=-yspeed+0.5*gravity;
 119 ( 6761)   end else if y>conv(ysize-17) then begin
 120 ( 6785)     yspeed:=-yspeed;
 121 ( 6788)     y:=conv(ysize-18);
 122 ( 6806)   end;
 123 ( 6813) 
 124 ( 6813)   case mode of
 125 ( 6813)     2: if (xc-x)*(xc-x)+(yc-y)*(yc-y)
 126 ( 6870)          <= (rc+3.1)*(rc+3.1) then reflect;
 127 ( 6914)     3: if (xc-x)*(xc-x)+(yc-y)*(yc-y)
 128 ( 6970)          >= (rc-3.5)*(rc-3.5) then reflect
 129 ( 7007)     end {case};
 130 ( 7016) 
 131 ( 7016)   xi:=trunc(x);
 132 ( 7022)   yi:=trunc(y);
 133 ( 7033)   plotmap(xl-1,yl-1,erase);
 134 ( 7060)   plotmap(xi-1,yi-1,ball);
 135 ( 7083)   xl:=xi;
 136 ( 7083)   yl:=yi;
 137 ( 7091) end;
 138 ( 7099) 
 139 ( 7100) func exkey(ch:char):boolean;
 140 ( 7100) begin
 141 ( 7100)   exkey:=false; lastmode:=mode;
 142 ( 7111)   case ch of
 143 ( 7119)     cup:     yspeed:=yspeed*keyfactor;
 144 ( 7142)     cdown:   yspeed:=yspeed/keyfactor;
 145 ( 7171)     cleft:   xspeed:=xspeed/keyfactor;
 146 ( 7200)     cright:  xspeed:=xspeed*keyfactor;
 147 ( 7229)     ' ':     mode:=mode+1;
 148 ( 7252)     'F':     fullview;
 149 ( 7271)     'S':     splitview;
 150 ( 7285)     escape:  exkey:=true
 151 ( 7295)   end {case};
 152 ( 7303)   if mode>3 then mode:=1;
 153 ( 7315) end;
 154 ( 7319) 

----------------------------------------------------------------------

R65 COMPILE 4.3: program BOUNCE           13/2/24 page 4

 155 ( 7320) {$I IANIMATE:P}
IANIMATE:P      .0C  SP 0000-0400 000E 12/02/24
{I}    1 ( 7320) { ianimate - run animation in loop
{I}    2 ( 7320)   proc expaint;
{I}    3 ( 7320)     Called to paint one picture and apply motion.
{I}    4 ( 7320)   func exkey(ch:char):boolean;
{I}    5 ( 7320)     Called to check for key and stop loop if true  }
{I}    6 ( 7320) 
{I}    7 ( 7320) proc animate(arepeat:boolean);
{I}    8 ( 7320) { arepeat: auto repeat cursor keys without delay }
{I}    9 ( 7320) const toggle=chr($0c);
{I}   10 ( 7323)       cleft=chr($03); cright=chr($16);
{I}   11 ( 7323)       cup=chr($1a); cdown=chr($18); esc=chr(0);
{I}   12 ( 7323) mem   sflag=$1781:integer&;
{I}   13 ( 7323)       emuflags=$1707:integer&;
{I}   14 ( 7323) var   ch:char;
{I}   15 ( 7323)       dummy:integer;
{I}   16 ( 7323)       stop:boolean;
{I}   17 ( 7323) begin
{I}   18 ( 7323)   repeat
{I}   19 ( 7323)     repeat
{I}   20 ( 7325)       stop:=expaint;
{I}   21 ( 7331)       dummy:=syncscreen; { sleep for up to 30 msec }
{I}   22 ( 7345)       ch:=keypressed; { sleep for 10 msec }
{I}   23 ( 7353)       { sflag bit 8 is escape flag. Pass it through }
{I}   24 ( 7353)     until (ord(ch)<>0) or ((sflag and $80)<>0)
{I}   25 ( 7369)       or stop;
{I}   26 ( 7371)     if not(((ch=cup) or (ch=cdown) or (ch=cleft) or
{I}   27 ( 7401)        (ch=cright)) and
{I}   28 ( 7410)        ((emuflags and 1)<>0) and arepeat) then
{I}   29 ( 7426)        { cursor keys auto repeat without delay }
{I}   30 ( 7427)        keypressed := chr(0);
{I}   31 ( 7432)     sflag:=sflag and $7f; { clear escape flag }
{I}   32 ( 7450)     if ch=toggle then write(toggle);
{I}   33 ( 7463)   until exkey(ch) or stop;
{I}   34 ( 7475) end;
 156 ( 7484) 
 157 ( 7484) begin
 158 ( 7484)   grinit; cleargr; fullview;
 159 ( 7498)   mode:=1; lastmode:=0;
 160 ( 7506)   animate(autorepeat);
 161 ( 7518)   splitview;
 162 ( 7522) end.
 163 ( 7522) 

End compile

Code lenght:          7521
Compiler stack size:  103
Ident stack size:     145
Pascal errors:        0

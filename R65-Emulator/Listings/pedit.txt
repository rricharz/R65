
R65 Pascal program PEDIT           10/11/23     page 1


                   1 (    4) program pedit;
                   2 (    4) 
                   3 (    4) { Pascal editor, original 1980 RR
                   4 (    4)   rewritten 2023 RR for R65 system }
                   5 (    4) 
                   6 (    4) uses syslib, arglib, strlib,disklib;
                   7 ( 2655) 
                   8 ( 2655) const
                   9 ( 2655)     maxlines= 360;      xmax   = 56;
                  10 ( 2658)     scrlins = 16;       mlenght= 19;
                  11 ( 2658)     inpx    = 37;
                  12 ( 2658)     eol     = chr($00); esc    = chr($00);
                  13 ( 2658)     rdown   = chr($02); rup    = chr($08);
                  14 ( 2658)     pgdown  = chr($1a); pgup   = chr($18);
                  15 ( 2658)     pgend   = chr($10); clrscr = chr($11);
                  16 ( 2658)     clrlin  = chr($17); cdown  = chr($18);
                  17 ( 2658)     cup     = chr($1a); cleft  = chr($03);
                  18 ( 2658)     inschr  = chr($15); delchr = chr($19);
                  19 ( 2658)     rubout  = chr($5f); cright = chr($16);
                  20 ( 2658) 
                  21 ( 2658) mem curlin  = $ed: integer&;
                  22 ( 2658)     curpos  = $ee: integer&;
                  23 ( 2658)     filcyc  = $311: integer&;
                  24 ( 2658)     video   = $400: array[900] of char&;
                  25 ( 2658)     topi    = $400: array[xmax] of integer&;
                  26 ( 2658)     topc    = $400: array[xmax] of char&;
                  27 ( 2658) 
                  28 ( 2658) 
                  29 ( 2658) var line,nlines,topline,i,dummy,debug: integer;
                  30 ( 2658)     name: array[15] of char;
                  31 ( 2658)     fno: file;
                  32 ( 2658)     chi : char;
                  33 ( 2658)     cyclus,drive,mark,nmark,savecx: integer;
                  34 ( 2658)     default, iseof, exit: boolean;
                  35 ( 2658)     fs: cpnt;
                  36 ( 2658)     linepnt: array[maxlines] of cpnt;
                  37 ( 2658)     relpnt:  integer;
                  38 ( 2658)     stemp,stemp2: cpnt;
                  39 ( 2658) 
                  40 ( 2658) func printable(ch:char):boolean;
                  41 ( 2658) begin
                  42 ( 2658)   printable:=((ord(ch)>=$20) and (ord(ch)<=$7e))
                  43 ( 2677)     and (ch<>rubout);
                  44 ( 2685) end;
                  45 ( 2690) 
                  46 ( 2691) proc putontop(s:cpnt;pos:integer;inv:boolean);
                  47 ( 2691) var i:integer;
                  48 ( 2694) begin
                  49 ( 2694)   i:=0; { faster version: if not in loop }
                  50 ( 2702)   if inv then while s[i]<>endmark do begin
                  51 ( 2725)     topi[i+pos]:=ord(s[i]) or 128; i:=i+1;
                  52 ( 2760)   end else while s[i]<>endmark do begin
                  53 ( 2787)     topc[i+pos]:=s[i]; i:=i+1;
                  54 ( 2819)   end;
                  55 ( 2824) end;
                  56 ( 2827) 
                  57 ( 2828) proc release(p:cpnt);
                  58 ( 2828) begin
                  59 ( 2828)   linepnt[relpnt]:=p; relpnt:=relpnt-1;

----------------------------------------------------------------------

R65 Pascal program PEDIT           10/11/23     page 2

                  60 ( 2851) end;
                  61 ( 2856) 
                  62 ( 2857) proc setnumlin(l,c:integer);
                  63 ( 2857) mem numlin=$1789: integer&;
                  64 ( 2860)     numchr=$178a: integer&;
                  65 ( 2860) begin
                  66 ( 2860)   numlin:=l; numchr:=c;
                  67 ( 2871) end;
                  68 ( 2880) 
                  69 ( 2881) func column:integer;
                  70 ( 2881) begin
                  71 ( 2881)   column:=line-topline+1;
                  72 ( 2897) end;
                  73 ( 2902) 
                  74 ( 2903) proc goto(xpos, ypos: integer);
                  75 ( 2903) begin
                  76 ( 2903)   curlin:=ypos; { top on line 2 }
                  77 ( 2916)   if curlin>15 then curlin:=15;
                  78 ( 2927)   curpos:=xpos-1;
                  79 ( 2937) end;
                  80 ( 2942) 
                  81 ( 2943) proc clrmessage;
                  82 ( 2943) var i:integer;
                  83 ( 2946) begin
                  84 ( 2946)   for i:=inpx-1 to xmax-1 do topi[i]:=128;
                  85 ( 2977) end;
                  86 ( 2998) 
                  87 ( 2999) proc showerror(s:cpnt);
                  88 ( 2999) var i: integer;
                  89 ( 3002)     ch: char;
                  90 ( 3002) begin
                  91 ( 3002)   clrmessage;
                  92 ( 3008)   putontop(s,36,true);
                  93 ( 3022)   read(@key,ch);
                  94 ( 3030)   clrmessage;
                  95 ( 3035) end;
                  96 ( 3035) 
                  97 ( 3036) func new:cpnt;
                  98 ( 3036) var i:integer;
                  99 ( 3039)     s:cpnt;
                 100 ( 3039) begin
                 101 ( 3039)   if relpnt<maxlines-1 then begin
                 102 ( 3052)     relpnt:=relpnt+1; new:=linepnt[relpnt];
                 103 ( 3070)   end else begin
                 104 ( 3081)     if nlines<maxlines-1 then begin
                 105 ( 3092)       s:=strnew;
                 106 ( 3101)       for i:=0 to xmax-1 do s[i]:=' ';
                 107 ( 3131)       s[xmax]:=endmark;
                 108 ( 3153)       new:=s;
                 109 ( 3157)     end else new:=nil;
                 110 ( 3170)     if nlines>maxlines-5 then
                 111 ( 3183)       showerror('Warning: Low memory');
                 112 ( 3216)   end;
                 113 ( 3216) end;
                 114 ( 3216) 
                 115 ( 3217) proc newline;
                 116 ( 3217) begin
                 117 ( 3217)   linepnt[nlines]:=new;
                 118 ( 3232)   nlines:=nlines+1;
                 119 ( 3242) end;

----------------------------------------------------------------------

R65 Pascal program PEDIT           10/11/23     page 3

                 120 ( 3247) 
                 121 ( 3248) proc getinput(var n:integer; s:cpnt);
                 122 ( 3248) var i,j,stop:integer; ch: char;
                 123 ( 3251) begin
                 124 ( 3251)   goto(inpx,0); write(chr(ord(':') or 128));
                 125 ( 3270)   read(@key,ch); i:=0;
                 126 ( 3281)   while (ch<>chr(13)) and (ch<>esc) do begin
                 127 ( 3304)     if (ch=rubout) then begin
                 128 ( 3311)       if i>0 then i:=i-1; goto(i+inpx+1,0);
                 129 ( 3353)       write(chr(ord(' ') or 128),cleft);
                 130 ( 3363)     end else if (ch>=' ') and (ch<=chr($7d)) and
                 131 ( 3381)       (inpx+i<xmax-1) then begin
                 132 ( 3396)       goto(i+inpx+1,0);
                 133 ( 3417)       write(chr(ord(ch) or 128)); i:=i+1;
                 134 ( 3432)     end;
                 135 ( 3437)     read(@key,ch);
                 136 ( 3445)   end;
                 137 ( 3446)   stop:=i+inpx;
                 138 ( 3455)   i:=inpx; n:=0;
                 139 ( 3468)   while ((topi[i] and 127)>=ord('0')) and
                 140 ( 3487)     ((topi[i] and 127)<=ord('9')) and
                 141 ( 3502)     (i<stop) do begin
                 142 ( 3516)     n:=10*n+(topi[i] and 127)-ord('0');
                 143 ( 3538)     i:=i+1;
                 144 ( 3549)   end;
                 145 ( 3554)   j:=0;
                 146 ( 3559)   while i<stop do begin
                 147 ( 3575)     s[j]:=chr(topi[i] and 127); i:=i+1; j:=j+1;
                 148 ( 3613)   end;
                 149 ( 3618)   s[j]:=endmark;
                 150 ( 3627) end;
                 151 ( 3631) 
                 152 ( 3632) func readline(input: file; pnt: cpnt): boolean;
                 153 ( 3632) const alteof=chr(127);
                 154 ( 3635) var ch1: char;
                 155 ( 3635)     pos: integer;
                 156 ( 3635) begin
                 157 ( 3635)   pos := 0; read(@fno,ch1);
                 158 ( 3653)   while (ch1>=' ') and (ch1<>alteof) and
                 159 ( 3668)       (pos<xmax-1) do begin
                 160 ( 3683)     pnt[pos]:=ch1; pos:=pos+1; read(@fno,ch1);
                 161 ( 3716)     end;
                 162 ( 3717)   while pos<xmax do begin
                 163 ( 3730)     pnt[pos]:=' '; pos:=pos+1;
                 164 ( 3746)   end;
                 165 ( 3751)   readline:=(ch1=eof) or (ch1=alteof);
                 166 ( 3768) end;
                 167 ( 3773) 
                 168 ( 3774) proc showline(pnt:cpnt; y: integer);
                 169 ( 3774) var lstart,pos: integer;
                 170 ( 3777) begin
                 171 ( 3777)   lstart:=y*xmax;
                 172 ( 3785)   if (pnt=nil) then
                 173 ( 3797)    for pos:=0 to xmax-1 do
                 174 ( 3810)     video[lstart+pos]:=' '
                 175 ( 3829)   else begin
                 176 ( 3855)     pos:=0;
                 177 ( 3857)     while (pos<xmax) and (pnt[pos]<>endmark) do begin
                 178 ( 3885)       video[lstart+pos]:=pnt[pos]; pos:=pos+1
                 179 ( 3915)     end;

----------------------------------------------------------------------

R65 Pascal program PEDIT           10/11/23     page 4

                 180 ( 3922)     while pos<xmax do begin
                 181 ( 3935)       video[lstart+pos]:=' '; pos:=pos+1
                 182 ( 3957)     end
                 183 ( 3959)   end;
                 184 ( 3967) end;
                 185 ( 3967) 
                 186 ( 3968) proc showtop;
                 187 ( 3968) begin
                 188 ( 3968)   intstr(line,stemp,3); putontop(stemp,5,true);
                 189 ( 4003)   intstr(nlines-1,stemp,3); putontop(stemp,12,true);
                 190 ( 4036) end;
                 191 ( 4036) 
                 192 ( 4037) proc showall;
                 193 ( 4037) var lstart,y,i,l,lstart: integer;
                 194 ( 4040) begin
                 195 ( 4040)   showtop;
                 196 ( 4046)   for y:=1 to scrlins-1 do begin
                 197 ( 4066)     l:=topline-1+y; lstart:=y*xmax;
                 198 ( 4088)     if l<nlines then
                 199 ( 4097)       showline(linepnt[l],y)
                 200 ( 4113)     else
                 201 ( 4123)       for i:=0 to xmax-1 do
                 202 ( 4136)         video[lstart+i]:=' ';
                 203 ( 4157)   end;
                 204 ( 4178) end;
                 205 ( 4192) 
                 206 ( 4193) proc updline(pnt: cpnt; lstart:integer);
                 207 ( 4193) var pos: integer;
                 208 ( 4196) begin
                 209 ( 4196)   for pos:=0 to xmax-1 do
                 210 ( 4208)     pnt[pos]:=video[lstart+pos];
                 211 ( 4234) end;
                 212 ( 4254) 
                 213 ( 4255) func lastpos(l:integer):integer;
                 214 ( 4255) { returns -1 if line empty }
                 215 ( 4255) var endpos:integer;
                 216 ( 4258)     s:cpnt;
                 217 ( 4258) begin
                 218 ( 4258)   endpos:=xmax-1;
                 219 ( 4264)   s:=linepnt[l];
                 220 ( 4273)   while (chr(ord(s[endpos]) and $7f)=' ')
                 221 ( 4297)     and (endpos>0) do endpos:=endpos-1;
                 222 ( 4315)   if (endpos=0) and (chr(ord(s[endpos]) and $7f)=' ')
                 223 ( 4346)   then endpos:=-1;
                 224 ( 4353)   lastpos:=endpos;
                 225 ( 4358) end;
                 226 ( 4366) 
                 227 ( 4367) proc chkline;
                 228 ( 4367) begin
                 229 ( 4367)   if line<1 then line:=1
                 230 ( 4382)   else if line>nlines-1 then line:=nlines-1;
                 231 ( 4412) end;
                 232 ( 4417) 
                 233 ( 4418) proc chktop(show: boolean);
                 234 ( 4418) var savetop,bottom:integer;
                 235 ( 4421) begin
                 236 ( 4421)   savetop:=topline; bottom:=topline+scrlins-1;
                 237 ( 4440)   if line<topline then topline:=line;
                 238 ( 4457)   { keep cursor above bottom line, if possible }
                 239 ( 4465)   if line>=bottom-1 then

----------------------------------------------------------------------

R65 Pascal program PEDIT           10/11/23     page 5

                 240 ( 4475)     topline:=line-scrlins+3;
                 241 ( 4489)   if show and (savetop<>topline) then showall;
                 242 ( 4515) end;
                 243 ( 4515) 
                 244 ( 4516) proc delline;
                 245 ( 4516) var i:integer; savpnt:cpnt;
                 246 ( 4519) begin
                 247 ( 4519)   chkline; savpnt:=linepnt[line];
                 248 ( 4529)   if line<mark then mark:=mark-1
                 249 ( 4553)   else if line<mark+nmark then nmark:=nmark-1;
                 250 ( 4586)   for i:=line to nlines-2 do
                 251 ( 4605)     linepnt[i]:=linepnt[i+1];
                 252 ( 4626)   release(savpnt); nlines:=nlines-1;
                 253 ( 4664)   chkline; chktop(false);
                 254 ( 4681)   line:=line-1; savecx:=1;
                 255 ( 4694) end;
                 256 ( 4698) 
                 257 ( 4699) proc join;
                 258 ( 4699) var p,p1,p2,pm:integer;
                 259 ( 4702)     s1,s2:cpnt;
                 260 ( 4702) begin
                 261 ( 4702)   p1:=lastpos(line-1); p2:=lastpos(line);
                 262 ( 4735)   s1:=linepnt[line-1]; s2:=linepnt[line];
                 263 ( 4758)   for p:=p1+1 to xmax-1 do s1[p]:=s2[p-p1-1];
                 264 ( 4811)   if p1+p2<xmax then delline
                 265 ( 4843)   else begin
                 266 ( 4853)     pm:=xmax-p1;
                 267 ( 4855)     for p:=0 to xmax-pm do s2[+p]:=s2[p+pm-1];
                 268 ( 4906)     for p:=xmax-pm+1 to xmax-1 do s2[p]:=' ';
                 269 ( 4960)     line:=line-1;
                 270 ( 4984)   end;
                 271 ( 4989)   savecx:=p1+2; chkline; chktop(false); showall;
                 272 ( 5016) end;
                 273 ( 5016) 
                 274 ( 5017) func edlin(pnt: cpnt): char;
                 275 ( 5017) const key    = @1;
                 276 ( 5020) var   ch1,lstch1,lstch2: char;
                 277 ( 5020)       exit: boolean;
                 278 ( 5020)       lstart: integer;
                 279 ( 5020) begin
                 280 ( 5020)   goto(savecx,column);
                 281 ( 5038)   if savecx=1 then write(cright,cleft)
                 282 ( 5053)   else write(cleft,cright); {to update cursor}
                 283 ( 5063)   exit:=false; lstart:=column*xmax;
                 284 ( 5077)   repeat
                 285 ( 5082)     read(@key,ch1);
                 286 ( 5090)     lstch1:=' '; lstch2:=' ';
                 287 ( 5099)     case ch1 of
                 288 ( 5103)       delchr,rubout: if (curpos=0) and (line>1)
                 289 ( 5133)              then begin
                 290 ( 5135)                updline(pnt,lstart);join;exit:=true;
                 291 ( 5158)              end else write(cleft,delchr);
                 292 ( 5171)       cleft: if curpos>0 then write(cleft)
                 293 ( 5192)              else if line>1 then begin
                 294 ( 5203)                updline(pnt,lstart);
                 295 ( 5220)                line:=line-1; curpos:=lastpos(line)+1;
                 296 ( 5245)                exit:=true;
                 297 ( 5252)              end;
                 298 ( 5256)       cright:if curpos<xmax-1 then begin
                 299 ( 5275)                write(cright);

----------------------------------------------------------------------

R65 Pascal program PEDIT           10/11/23     page 6

                 300 ( 5281)              end else if line<nlines-1 then begin
                 301 ( 5296)                updline(pnt,lstart);
                 302 ( 5313)                line:=line+1; curpos:=0;
                 303 ( 5326)                exit:=true;
                 304 ( 5332)              end;
                 305 ( 5336)       cup,cdown,esc,cr,rup,rdown,
                 306 ( 5378)       pgup,pgdown,hom,pgend: exit:=true
                 307 ( 5409)       else begin
                 308 ( 5418)              if printable(ch1) then begin
                 309 ( 5430)                lstch1:=video[lstart+xmax-1];
                 310 ( 5446)                lstch1:=chr(ord(lstch1) and $7f);
                 311 ( 5459)                lstch2:=video[lstart+xmax-2];
                 312 ( 5477)                lstch2:=chr(ord(lstch2) and $7f);
                 313 ( 5490)                if curpos>=xmax-1 then begin
                 314 ( 5504)                  if line>=nlines-1 then newline;
                 315 ( 5526)                  video[lstart+xmax-1]:=ch1;
                 316 ( 5536)                  curpos:=0;
                 317 ( 5549)                  lstch1:=cdown;
                 318 ( 5555)                end else begin
                 319 ( 5562)                  write(inschr); write(ch1);
                 320 ( 5570)                end;
                 321 ( 5570)                if (lstch1<>' ') or (lstch2<>' ')
                 322 ( 5583)                  then exit:=true;
                 323 ( 5590)              end;
                 324 ( 5594)            end
                 325 ( 5594)     end {case};
                 326 ( 5596)     until exit;
                 327 ( 5596)   updline(pnt,lstart);
                 328 ( 5617)   if (lstch1<>' ') or (lstch2<>' ') then edlin:=lstch1
                 329 ( 5635)   else edlin:=ch1;
                 330 ( 5646)   if (ch1<>delchr) and (ch1<>rubout) then
                 331 ( 5668)     savecx:=curpos+1;
                 332 ( 5677) end;
                 333 ( 5682) 
                 334 ( 5683) proc readinput;
                 335 ( 5683) var i,pend:integer;
                 336 ( 5686) begin
                 337 ( 5686)   cyclus:=0; drive:=1;
                 338 ( 5696)   goto(1,1); write(clrscr);
                 339 ( 5713)   agetstring(name,default,cyclus,drive);
                 340 ( 5753)   asetfile(name,cyclus,drive,'P');
                 341 ( 5775)   openr(fno);
                 342 ( 5781)   nlines := 1; line:=1; topline:=1;
                 343 ( 5795)   pend:=15; while name[pend]=' ' do pend:=pend-1;
                 344 ( 5825)   for i:=0 to pend do stemp[i]:=name[i];
                 345 ( 5860)   stemp[pend+1]:=endmark;
                 346 ( 5891)   stradd(':P.',stemp);
                 347 ( 5911)   hexstr(filcyc,stemp2);
                 348 ( 5925)   stradd(stemp2,stemp);
                 349 ( 5939)   while strlen(stemp)<17 do stradd(' ',stemp);
                 350 ( 5971)   putontop(stemp,17,true);
                 351 ( 5988)   putontop('Reading',36,true);
                 352 ( 6008)   repeat
                 353 ( 6008)     linepnt[nlines] := new;
                 354 ( 6018)     iseof := readline(fno, linepnt[nlines]);
                 355 ( 6042)     nlines := nlines+1;
                 356 ( 6052)     showtop;
                 357 ( 6061)     until iseof or (nlines >= maxlines-9);
                 358 ( 6076)   if nlines >= maxlines-9 then
                 359 ( 6089)       showerror('Too many lines');

----------------------------------------------------------------------

R65 Pascal program PEDIT           10/11/23     page 7

                 360 ( 6117)   close(fno);
                 361 ( 6123)   clrmessage;
                 362 ( 6127)   showall;
                 363 ( 6131) end;
                 364 ( 6131) 
                 365 ( 6132) proc writeoutput;
                 366 ( 6132) var pos,endpos:integer;s,saveline:cpnt;
                 367 ( 6135) begin
                 368 ( 6135)   cyclus:=0; drive:=1;
                 369 ( 6145)   goto(1,1); write(clrscr);
                 370 ( 6162)   asetfile(name,cyclus,drive,'P');
                 371 ( 6184)   openw(fno);
                 372 ( 6190)   putontop('Writing',36,true);
                 373 ( 6210)   for line:=1 to nlines-1 do begin
                 374 ( 6232)     showtop;
                 375 ( 6236)     endpos:=lastpos(line);
                 376 ( 6248)     s:=linepnt[line];
                 377 ( 6256)     for pos:=0 to endpos do
                 378 ( 6270)       write(@fno,chr(ord(s[pos]) and $7f));
                 379 ( 6304)     if (line<nlines-1) then write(@fno,cr);
                 380 ( 6342)   end;
                 381 ( 6342)   close(fno); line:=nlines-1;
                 382 ( 6368)   showall;
                 383 ( 6377) end;
                 384 ( 6377) 
                 385 ( 6378) proc clrmarks;
                 386 ( 6378) var x,savel:integer; s:cpnt;
                 387 ( 6381) begin
                 388 ( 6381)   savel:=line;
                 389 ( 6383)   for line:=1 to nlines-1 do begin
                 390 ( 6413)     s:=linepnt[line];
                 391 ( 6417)     for x:=0 to xmax-1 do
                 392 ( 6435)       s[x]:=chr(ord(s[x]) and $7f);
                 393 ( 6462)     showtop;
                 394 ( 6485)     end;
                 395 ( 6485)   line:=savel; mark:=0; nmark:=0;
                 396 ( 6515) end;
                 397 ( 6519) 
                 398 ( 6520) proc find(again:boolean);
                 399 ( 6520) var pos,x,i:integer;
                 400 ( 6523)     ch:char;
                 401 ( 6523)     found:boolean;
                 402 ( 6523)     s2:cpnt;
                 403 ( 6523) 
                 404 ( 6523)   proc checkrest;
                 405 ( 6523)   var failed:boolean;
                 406 ( 6526)       x1:integer;
                 407 ( 6526)       s1:cpnt;
                 408 ( 6526)   begin
                 409 ( 6526)     failed:=false; pos:=3; x1:=x+1;
                 410 ( 6546)     while (fs[pos]<>endmark) and (x1<xmax) do begin
                 411 ( 6575)       s1:=linepnt[line];
                 412 ( 6579)       if s1[x1] <> fs[pos] then failed:=true;
                 413 ( 6613)       pos:=pos+1; x1:=x1+1;
                 414 ( 6634)       end;
                 415 ( 6639)      if (failed=false) and (fs[pos]=endmark)
                 416 ( 6661)       then found:=true;
                 417 ( 6668)   end;
                 418 ( 6672) 
                 419 ( 6673) begin

----------------------------------------------------------------------

R65 Pascal program PEDIT           10/11/23     page 8

                 420 ( 6673)   clrmessage;
                 421 ( 6679)   if not again then strcpy(stemp,fs);
                 422 ( 6701)   if fs[1]=endmark then begin
                 423 ( 6712)     {empty string -> delete all marks}
                 424 ( 6715)     putontop('Clearing marks',36,true);
                 425 ( 6742)     clrmarks; showall;
                 426 ( 6750)     end
                 427 ( 6750)   else begin
                 428 ( 6753)     putontop('Searching',36,true);
                 429 ( 6775)     found:=false;
                 430 ( 6777)     repeat
                 431 ( 6781)       x:=0;
                 432 ( 6783)       repeat
                 433 ( 6787)         pos:=2;
                 434 ( 6789)         s2:=linepnt[line];
                 435 ( 6797)         if s2[x]=fs[pos] then checkrest;
                 436 ( 6833)         x:=x+1;
                 437 ( 6839)         until found or (x>=xmax);
                 438 ( 6855)       showtop; line:=line+1;
                 439 ( 6869)       until found or (line>=nlines);
                 440 ( 6887)     if found then begin
                 441 ( 6895)       line:=line-1; x:=x-1; i:=2;
                 442 ( 6922)       s2:=linepnt[line];
                 443 ( 6930)       while fs[i]<>endmark do begin
                 444 ( 6954)         s2[x+i-2]:=chr(ord(s2[x+i-2]) or $80);
                 445 ( 6987)          i:=i+1;
                 446 ( 6998)         end
                 447 ( 7003)       end
                 448 ( 7003)     else begin
                 449 ( 7009)       line:=nlines-1;
                 450 ( 7015)     end;
                 451 ( 7020)   end
                 452 ( 7020) end;
                 453 ( 7020) 
                 454 ( 7021) proc insertline;
                 455 ( 7021) var i:integer;
                 456 ( 7024)     s1,s2:cpnt;
                 457 ( 7024) begin
                 458 ( 7024)   if nlines<maxlines-1 then begin
                 459 ( 7037)     if line<mark then mark:=mark+1
                 460 ( 7056)     else if line<mark+nmark then nmark:=nmark+1;
                 461 ( 7089)     if line<nlines-1 then begin
                 462 ( 7106)       for i:=nlines-1 downto line+1 do
                 463 ( 7126)         linepnt[i+1]:=linepnt[i];
                 464 ( 7147)       end;
                 465 ( 7169)     linepnt[line+1]:=new;
                 466 ( 7182)     s1:=linepnt[line+1]; s2:=linepnt[line];
                 467 ( 7205)     for i:=0 to xmax-1 do s1[i]:=' ';
                 468 ( 7239)     for i:=curpos to xmax-1 do begin
                 469 ( 7278)       s1[i-curpos]:=s2[i]; s2[i]:=' ';
                 470 ( 7306)       end;
                 471 ( 7310)     line:=line+1; nlines:=nlines+1;
                 472 ( 7341)     savecx:=1; chkline; chktop(false); showall;
                 473 ( 7368)   end;
                 474 ( 7368) end;
                 475 ( 7368) 
                 476 ( 7369) proc paste;
                 477 ( 7369) var l,i:integer; s1,s2:cpnt;
                 478 ( 7372) begin
                 479 ( 7372)   if nlines+nmark<nlines-5 then begin

----------------------------------------------------------------------

R65 Pascal program PEDIT           10/11/23     page 9

                 480 ( 7391)     for i:=nlines-1 downto line do
                 481 ( 7405)       linepnt[i+nmark]:=linepnt[i];
                 482 ( 7431)     nlines:=nlines+nmark;
                 483 ( 7457)     if mark>line then mark:=mark+nmark;
                 484 ( 7482)     for l:=mark to mark+nmark-1 do begin
                 485 ( 7520)       linepnt[line]:=new;
                 486 ( 7530)       s1:=linepnt[line]; s2:=linepnt[l];
                 487 ( 7550)       for i:=0 to xmax-1 do s1[i]:=s2[i];
                 488 ( 7590)       line:=line+1;
                 489 ( 7616)     end;
                 490 ( 7621)     showall;
                 491 ( 7639)   end else showerror('Error: Out of memory');
                 492 ( 7671) end;
                 493 ( 7671) 
                 494 ( 7672) proc move;
                 495 ( 7672) var i,j,saveline:integer; savepnt:cpnt;
                 496 ( 7675) begin
                 497 ( 7675)   saveline:=line; { insert above}
                 498 ( 7685)   if line>=mark+nmark then begin
                 499 ( 7699)     mark:=mark+nmark-1;
                 500 ( 7713)     for j:=0 to nmark-1 do begin
                 501 ( 7740)       savepnt:=linepnt[mark];
                 502 ( 7744)       for i:=mark to line-1 do
                 503 ( 7766)         linepnt[i]:=linepnt[i+1];
                 504 ( 7787)       mark:=mark-1; line:=line-1;
                 505 ( 7826)       linepnt[line]:=savepnt;
                 506 ( 7835)     end;
                 507 ( 7843)   end else if line<mark then begin
                 508 ( 7869)     for j:=0 to nmark-1 do begin
                 509 ( 7894)       savepnt:=linepnt[mark];
                 510 ( 7898)       for i:=mark downto line+1 do
                 511 ( 7920)         linepnt[i]:=linepnt[i-1];
                 512 ( 7941)       linepnt[line]:=savepnt;
                 513 ( 7967)       mark:=mark+1; line:=line+1;
                 514 ( 7992)     end;
                 515 ( 7997)   end else showerror('Move inside move');
                 516 ( 8039)  mark:=saveline; line:=saveline; showall;
                 517 ( 8059) end;
                 518 ( 8059) 
                 519 ( 8060) func doesc: boolean;
                 520 ( 8060) var ch:char;
                 521 ( 8063)     i,n:integer;
                 522 ( 8063)     s,savl:cpnt;
                 523 ( 8063) begin
                 524 ( 8063)   clrmessage;
                 525 ( 8069)   doesc:=false; savecx:=1;
                 526 ( 8077)   getinput(n,stemp); ch:=stemp[0];
                 527 ( 8105)   if (strlen(stemp)>1) and (stemp[1]<>' ') then
                 528 ( 8137)     showerror('Expected f: xxx')
                 529 ( 8159)   else begin
                 530 ( 8168)     case ch of
                 531 ( 8168)       't': begin {top}
                 532 ( 8179)              line:=1; chktop(true);
                 533 ( 8193)            end;
                 534 ( 8193)       'b': begin {bottom}
                 535 ( 8203)              line:=nlines-1; chktop(true);
                 536 ( 8222)            end;
                 537 ( 8222)       'l': begin {line number}
                 538 ( 8232)              line:=n; chkline; chktop(true);
                 539 ( 8252)            end;

----------------------------------------------------------------------

R65 Pascal program PEDIT           10/11/23     page 10

                 540 ( 8252)       'f','g': begin {find string}
                 541 ( 8269)              find(ch='g'); chkline; chktop(false);
                 542 ( 8294)              showall;
                 543 ( 8298)            end;
                 544 ( 8298)       'c': begin {mark lines for copy}
                 545 ( 8308)              if n<1 then n:=1;
                 546 ( 8320)              if line+n>= nlines-1 then
                 547 ( 8339)                showerror('Too many lines')
                 548 ( 8361)              else begin
                 549 ( 8370)                mark:=line; nmark:=n;
                 550 ( 8378)                for line:=mark to mark+nmark-1 do
                 551 ( 8405)                begin
                 552 ( 8415)                  s:=linepnt[line];
                 553 ( 8419)                  for i:=0 to xmax-1 do
                 554 ( 8437)                    s[i]:= chr(ord(s[i]) or $80);
                 555 ( 8464)                end;
                 556 ( 8483)                line:=mark;
                 557 ( 8497)              end;
                 558 ( 8505)              showall;
                 559 ( 8509)            end;
                 560 ( 8509)       'p': begin {paste marked lines}
                 561 ( 8519)              if mark=0 then
                 562 ( 8525)                showerror('Nothing marked')
                 563 ( 8546)              else begin
                 564 ( 8555)                if nlines+nmark>=maxlines then
                 565 ( 8567)                  showerror('Too many lines')
                 566 ( 8588)                else paste;
                 567 ( 8601)              end;
                 568 ( 8601)            end;
                 569 ( 8601)       'm': begin {move marked lines }
                 570 ( 8611)              if mark=0 then
                 571 ( 8617)                showerror('Nothing marked')
                 572 ( 8638)              else move;
                 573 ( 8651)            end;
                 574 ( 8651)       'd': begin {delete n lines}
                 575 ( 8661)              if n<1 then n:=1;
                 576 ( 8673)              if line+n=maxlines-3 then
                 577 ( 8691)                n:=maxlines-3-line;
                 578 ( 8702)              for i:=1 to n do begin
                 579 ( 8730)                delline; line:=line+1;
                 580 ( 8740)              end;
                 581 ( 8745)              chkline; chktop(false); showall;
                 582 ( 8775)            end;
                 583 ( 8775)       'w': writeoutput; {write output}
                 584 ( 8792)       'q': begin {write output and quit}
                 585 ( 8799)              writeoutput; doesc:=true;
                 586 ( 8805)            end;
                 587 ( 8809)       'k': doesc:=true; {kill program}
                 588 ( 8828)       '?','h': showerror('tb/l/fg/cpm/d/wqk/?h');
                 589 ( 8871)       endmark: begin end
                 590 ( 8881)       else showerror('tb/l/fg/cpm/d/wqk/?h')
                 591 ( 8907)     end {case};
                 592 ( 8915)   end;
                 593 ( 8915)   clrmessage;
                 594 ( 8919) end;
                 595 ( 8919) 
                 596 ( 8920) proc newline;
                 597 ( 8920) begin
                 598 ( 8920)   linepnt[nlines]:=new; nlines:=nlines+1;
                 599 ( 8945) end;

----------------------------------------------------------------------

R65 Pascal program PEDIT           10/11/23     page 11

                 600 ( 8950) 
                 601 ( 8951) proc insert(ch:char;l:integer);
                 602 ( 8951) { insert char at start of line (recursive) }
                 603 ( 8951) var i,y:integer;
                 604 ( 8954)     pnt:cpnt;
                 605 ( 8954)     lstch1,lstch2:char;
                 606 ( 8954) begin
                 607 ( 8954)   if l>=nlines then newline;
                 608 ( 8972)   pnt:=linepnt[l];
                 609 ( 8976)   lstch1:=chr(ord(pnt[xmax-1]) and $7f);
                 610 ( 8998)   lstch2:=chr(ord(pnt[xmax-2]) and $7f);
                 611 ( 9017)   if (lstch1<>' ') or (lstch2<>' ')
                 612 ( 9035)     then insert(lstch1,l+1);
                 613 ( 9057)   for i:=xmax-2 downto 0 do pnt[i+1]:=pnt[i];
                 614 ( 9092)   pnt[0]:=ch; y:=l-topline+1;
                 615 ( 9133)   if (y>0) and (y<scrlins) then showline(pnt,y);
                 616 ( 9170) end;
                 617 ( 9170) 
                 618 ( 9171) begin {main}
                 619 ( 9171)   for i:=0 to maxlines-1 do linepnt[i]:=nil;
                 620 ( 9201)   stemp:=strnew; stemp2:=strnew; fs:=strnew; debug:=0;
                 621 ( 9251)   setnumlin($0f,$37); write(hom,clrscr);
                 622 ( 9271)   putontop('Line xxx of xxx',0,true);
                 623 ( 9299)   relpnt:=maxlines-1; mark:=0; nmark:=0; savecx:=1;
                 624 ( 9323)   clrmessage; readinput; fs[0]:=endmark;
                 625 ( 9339)   putontop('R65 PEDIT V 2.10',36,true);
                 626 ( 9372)   topline:= 1; line:=1; showall; exit:=false;
                 627 ( 9390)   repeat
                 628 ( 9394)     showtop; chi := edlin(linepnt[line]);
                 629 ( 9414)     if printable(chi) then insert(chi,line+1)
                 630 ( 9443)     else case chi of
                 631 ( 9453)       cup,cdown: begin
                 632 ( 9471)              if chi=cup then line:=line-1
                 633 ( 9485)              else line:=line+1;
                 634 ( 9501)              chkline;
                 635 ( 9510)              if curpos>lastpos(line)+2 then
                 636 ( 9527)                savecx:=lastpos(line)+2;
                 637 ( 9546)              chktop(true);
                 638 ( 9559)            end;
                 639 ( 9559)       pgup: begin
                 640 ( 9569)              line:=line-15; chkline; chktop(true);
                 641 ( 9592)            end;
                 642 ( 9592)       pgdown: begin
                 643 ( 9602)              line:=line+15; chkline; chktop(true);
                 644 ( 9625)            end;
                 645 ( 9625)       rup: if (topline>1) then begin
                 646 ( 9642)              topline:=topline-1;chktop(false);showall;
                 647 ( 9668)            end;
                 648 ( 9668)       rdown: if (topline<nlines-15) then begin
                 649 ( 9690)              topline:=topline+1;chktop(false);showall;
                 650 ( 9716)            end;
                 651 ( 9716)       hom: begin
                 652 ( 9726)              line:=1; savecx:=1; chktop(true);
                 653 ( 9746)            end;
                 654 ( 9746)       pgend: begin
                 655 ( 9756)              line:=nlines-1; savecx:=1; chktop(true);
                 656 ( 9781)            end;
                 657 ( 9781)       cr:  insertline;
                 658 ( 9795)       esc: if doesc then exit:=true
                 659 ( 9814)     end {case};

----------------------------------------------------------------------

R65 Pascal program PEDIT           10/11/23     page 12

                 660 ( 9822)     until exit;
                 661 ( 9822)   setnumlin($29,$2f);
                 662 ( 9839)   writeln(hom, clrscr);
                 663 ( 9851)   dummy:=freedsk(fildrv,true);
                 664 ( 9864) end.
                 665 ( 9868) 

End compile

Code lenght:          9867
Compiler stack size:  121
Ident stack size:     184
Pascal errors:        0

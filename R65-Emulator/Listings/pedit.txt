
R65 Pascal program PEDIT           7/11/23     page 1


                   1 (    4) program pedit;
                   2 (    4) 
                   3 (    4) { Pascal editor, original 1980 RR
                   4 (    4)   rewritten 2023 RR for R65 system }
                   5 (    4) 
                   6 (    4) uses syslib, arglib, strlib, disklib;
                   7 ( 2655) 
                   8 ( 2655) const maxlines = 400; xmax=56;
                   9 ( 2658)     scrlins = 16;
                  10 ( 2658)     eol    = chr($00); esc    = chr($00);
                  11 ( 2658)     pgdown = chr($02); pgup   = chr($08);
                  12 ( 2658)     pgend  = chr($10); clrscr = chr($11);
                  13 ( 2658)     clrlin = chr($17); cdown  = chr($18);
                  14 ( 2658)     cup    = chr($1a); cleft  = chr($03);
                  15 ( 2658)     inschr = chr($15); delchr = chr($19);
                  16 ( 2658)     rubout = chr($5f); cright = chr($16);
                  17 ( 2658)     mlenght   = 19; inpx=37;
                  18 ( 2658) 
                  19 ( 2658) mem curlin  = $ed: integer&;
                  20 ( 2658)     curpos  = $ee: integer&;
                  21 ( 2658)     filcyc  = $311: integer&;
                  22 ( 2658)     video   = $400: array[900] of char&;
                  23 ( 2658)     top     = $400: array[xmax] of integer&;
                  24 ( 2658) 
                  25 ( 2658) var line,nlines,topline,i: integer;
                  26 ( 2658)     name: array[15] of char;
                  27 ( 2658)     fno: file;
                  28 ( 2658)     chi : char;
                  29 ( 2658)     cyclus,drive,mark,nmark,savecx: integer;
                  30 ( 2658)     default, iseof, exit: boolean;
                  31 ( 2658)     fs: cpnt;
                  32 ( 2658)     linepnt: array[maxlines] of cpnt;
                  33 ( 2658)     relpnt:  integer;
                  34 ( 2658)     stemp,stemp2: cpnt;
                  35 ( 2658) 
                  36 ( 2658) proc putontop(s:cpnt;pos:integer;inv:boolean);
                  37 ( 2658) var i:integer;
                  38 ( 2661) begin
                  39 ( 2661)   i:=0; { faster version: if not in loop }
                  40 ( 2669)   if inv then while s[i]<>chr(0) do begin
                  41 ( 2693)     top[i+pos]:=ord(s[i]) or 128; i:=i+1;
                  42 ( 2728)   end else while s[i]<>chr(0) do begin
                  43 ( 2756)     top[i+pos]:=ord(s[i]); i:=i+1;
                  44 ( 2788)   end;
                  45 ( 2793) end;
                  46 ( 2796) 
                  47 ( 2797) func new:cpnt;
                  48 ( 2797) begin
                  49 ( 2797)   if relpnt<maxlines-1 then begin
                  50 ( 2813)     relpnt:=relpnt+1; new:=linepnt[relpnt];
                  51 ( 2831)   end else  {assign new memory}
                  52 ( 2842)     new:=strnew;
                  53 ( 2848) end;
                  54 ( 2852) 
                  55 ( 2853) proc release(p:cpnt);
                  56 ( 2853) begin
                  57 ( 2853)   linepnt[relpnt]:=p; relpnt:=relpnt-1;
                  58 ( 2876) end;
                  59 ( 2881) 

----------------------------------------------------------------------

R65 Pascal program PEDIT           7/11/23     page 2

                  60 ( 2882) proc setnumlin(l,c:integer);
                  61 ( 2882) mem numlin=$1789: integer&;
                  62 ( 2885)     numchr=$178a: integer&;
                  63 ( 2885) begin
                  64 ( 2885)   numlin:=l; numchr:=c;
                  65 ( 2896) end;
                  66 ( 2905) 
                  67 ( 2906) func column:integer;
                  68 ( 2906) begin
                  69 ( 2906)   column:=line-topline+1;
                  70 ( 2922) end;
                  71 ( 2927) 
                  72 ( 2928) proc goto(xpos, ypos: integer);
                  73 ( 2928) begin
                  74 ( 2928)   curlin:=ypos; { top on line 2 }
                  75 ( 2941)   if curlin>15 then curlin:=15;
                  76 ( 2952)   curpos:=xpos-1;
                  77 ( 2962) end;
                  78 ( 2967) 
                  79 ( 2968) proc clrmessage;
                  80 ( 2968) var i:integer;
                  81 ( 2971) begin
                  82 ( 2971)   for i:=inpx-1 to xmax-1 do top[i]:=128;
                  83 ( 3002) end;
                  84 ( 3023) 
                  85 ( 3024) proc getinput(var n:integer; s:cpnt);
                  86 ( 3024) var i,j,stop:integer; ch: char;
                  87 ( 3027) begin
                  88 ( 3027)   goto(inpx,0); write(chr(ord(':') or 128));
                  89 ( 3046)   read(@key,ch); i:=0;
                  90 ( 3057)   while (ch<>chr(13)) do begin
                  91 ( 3072)     if (ch=rubout) then begin
                  92 ( 3079)       if i>0 then i:=i-1; goto(i+inpx+1,0);
                  93 ( 3121)       write(chr(ord(' ') or 128),cleft);
                  94 ( 3131)     end else if (ch>=' ') and (ch<=chr($7d)) and
                  95 ( 3149)       (inpx+i<xmax-1) then begin
                  96 ( 3164)       goto(i+inpx+1,0);
                  97 ( 3185)       write(chr(ord(ch) or 128)); i:=i+1;
                  98 ( 3200)     end;
                  99 ( 3205)     read(@key,ch);
                 100 ( 3213)   end;
                 101 ( 3214)   stop:=i+inpx;
                 102 ( 3223)   i:=inpx; n:=0;
                 103 ( 3236)   while ((top[i] and 127)>=ord('0')) and
                 104 ( 3255)     ((top[i] and 127)<=ord('9')) and
                 105 ( 3270)     (i<stop) do begin
                 106 ( 3284)     n:=10*n+(top[i] and 127)-ord('0');
                 107 ( 3306)     i:=i+1;
                 108 ( 3317)   end;
                 109 ( 3322)   j:=0;
                 110 ( 3327)   while i<stop do begin
                 111 ( 3343)     s[j]:=chr(top[i] and 127); i:=i+1; j:=j+1;
                 112 ( 3381)   end;
                 113 ( 3386)   s[j]:=chr(0);
                 114 ( 3395) end;
                 115 ( 3400) 
                 116 ( 3401) func readline(input: file; pnt: cpnt): boolean;
                 117 ( 3401) const alteof=chr(127);
                 118 ( 3404) var ch1: char;
                 119 ( 3404)     pos: integer;

----------------------------------------------------------------------

R65 Pascal program PEDIT           7/11/23     page 3

                 120 ( 3404) begin
                 121 ( 3404)   pos := 0; read(@fno,ch1);
                 122 ( 3422)   while (ch1>=' ') and (ch1<>alteof) and
                 123 ( 3437)       (pos<xmax-1) do begin
                 124 ( 3452)     pnt[pos]:=ch1; pos:=pos+1; read(@fno,ch1);
                 125 ( 3485)     end;
                 126 ( 3486)   while pos<xmax do begin
                 127 ( 3499)     pnt[pos]:=' '; pos:=pos+1;
                 128 ( 3515)   end;
                 129 ( 3520)   readline:=(ch1=eof) or (ch1=alteof);
                 130 ( 3537) end;
                 131 ( 3542) 
                 132 ( 3543) proc showline(pnt:cpnt; y: integer);
                 133 ( 3543) var lstart,pos: integer;
                 134 ( 3546) begin
                 135 ( 3546)   lstart:=y*xmax;
                 136 ( 3554)   for pos:=0 to xmax-1 do
                 137 ( 3569)     video[lstart+pos]:=pnt[pos];
                 138 ( 3596) end;
                 139 ( 3619) 
                 140 ( 3620) proc showtop;
                 141 ( 3620) begin
                 142 ( 3620)   intstr(line,stemp,3); putontop(stemp,5,true);
                 143 ( 3655)   intstr(nlines-1,stemp,3); putontop(stemp,12,true);
                 144 ( 3688) end;
                 145 ( 3688) 
                 146 ( 3689) proc showerror(s:cpnt);
                 147 ( 3689) var i: integer;
                 148 ( 3692)     ch: char;
                 149 ( 3692) begin
                 150 ( 3692)   clrmessage;
                 151 ( 3698)   putontop(s,36,true);
                 152 ( 3712)   read(@key,ch);
                 153 ( 3720)   clrmessage;
                 154 ( 3725) end;
                 155 ( 3725) 
                 156 ( 3726) proc showall;
                 157 ( 3726) var lstart,y,i,l,lstart: integer;
                 158 ( 3729) begin
                 159 ( 3729)   showtop;
                 160 ( 3735)   for y:=1 to scrlins-1 do begin
                 161 ( 3755)     l:=topline-1+y; lstart:=y*xmax;
                 162 ( 3777)     if l<nlines then
                 163 ( 3786)       showline(linepnt[l],y)
                 164 ( 3802)     else
                 165 ( 3812)       for i:=0 to xmax-1 do
                 166 ( 3825)         video[lstart+i]:=' ';
                 167 ( 3846)   end;
                 168 ( 3867) end;
                 169 ( 3881) 
                 170 ( 3882) proc updline(pnt: cpnt; lstart:integer);
                 171 ( 3882) var pos: integer;
                 172 ( 3885) begin
                 173 ( 3885)   for pos:=0 to xmax-1 do
                 174 ( 3897)     pnt[pos]:=video[lstart+pos];
                 175 ( 3923) end;
                 176 ( 3943) 
                 177 ( 3944) func lastpos(l:integer):integer;
                 178 ( 3944) { returns -1 if line empty }
                 179 ( 3944) var endpos:integer;

----------------------------------------------------------------------

R65 Pascal program PEDIT           7/11/23     page 4

                 180 ( 3947)     s:cpnt;
                 181 ( 3947) begin
                 182 ( 3947)   endpos:=xmax-1;
                 183 ( 3953)   s:=linepnt[l]
                 184 ( 3958)   while (s[endpos]=chr(ord(' ') and $7f))
                 185 ( 3985)     and (endpos>=0) do endpos:=endpos-1;
                 186 ( 4004)   lastpos:=endpos;
                 187 ( 4012) end;
                 188 ( 4020) 
                 189 ( 4021) proc chkline;
                 190 ( 4021) begin
                 191 ( 4021)   if line<1 then line:=1
                 192 ( 4036)   else if line>nlines-1 then line:=nlines-1;
                 193 ( 4066) end;
                 194 ( 4071) 
                 195 ( 4072) proc chktop(show: boolean);
                 196 ( 4072) var savetop,bottom:integer;
                 197 ( 4075) begin
                 198 ( 4075)   savetop:=topline; bottom:=topline+scrlins-1;
                 199 ( 4094)   if line<topline then topline:=line;
                 200 ( 4111)   if line>=bottom then
                 201 ( 4123)     topline:=line-scrlins+2;
                 202 ( 4140)   if show and (savetop<>topline) then showall;
                 203 ( 4166) end;
                 204 ( 4166) 
                 205 ( 4167) proc delline;
                 206 ( 4167) var i:integer; savpnt:cpnt;
                 207 ( 4170) begin
                 208 ( 4170)   chkline; savpnt:=linepnt[line];
                 209 ( 4180)   if line<mark then mark:=mark-1
                 210 ( 4204)   else if line<mark+nmark then nmark:=nmark-1;
                 211 ( 4237)   for i:=line to nlines-2 do
                 212 ( 4256)     linepnt[i]:=linepnt[i+1];
                 213 ( 4277)   release(savpnt); nlines:=nlines-1;
                 214 ( 4315)   chkline; chktop(false);
                 215 ( 4332)   line:=line-1; savecx:=1;
                 216 ( 4345) end;
                 217 ( 4349) 
                 218 ( 4350) proc join;
                 219 ( 4350) var p,p1,p2,pm:integer;
                 220 ( 4353)     s1,s2:cpnt;
                 221 ( 4353) begin
                 222 ( 4353)   p1:=lastpos(line-1); p2:=lastpos(line);
                 223 ( 4386)   s1:=linepnt[line-1]; s2:=linepnt[line];
                 224 ( 4409)   for p:=p1+1 to xmax-1 do s1[p]:=s2[p-p1-1];
                 225 ( 4462)   if p1+p2<xmax then delline
                 226 ( 4494)   else begin
                 227 ( 4504)     pm:=xmax-p1;
                 228 ( 4506)     for p:=0 to xmax-pm do s2[+p]:=s2[p+pm-1];
                 229 ( 4557)     for p:=xmax-pm+1 to xmax-1 do s2[p]:=' ';
                 230 ( 4611)     line:=line-1;
                 231 ( 4635)   end;
                 232 ( 4640)   savecx:=p1+2; chkline; chktop(false); showall;
                 233 ( 4667) end;
                 234 ( 4667) 
                 235 ( 4668) func edlin(pnt: cpnt): char;
                 236 ( 4668) const key    = @1;
                 237 ( 4671) var   ch1: char;
                 238 ( 4671)       exit: boolean;
                 239 ( 4671)       lstart: integer;

----------------------------------------------------------------------

R65 Pascal program PEDIT           7/11/23     page 5

                 240 ( 4671) begin
                 241 ( 4671)   goto(savecx,column);
                 242 ( 4689)   if savecx=1 then write(cright,cleft)
                 243 ( 4704)   else write(cleft,cright); {to update cursor}
                 244 ( 4714)   exit:=false; lstart:=column*xmax;
                 245 ( 4728)   repeat
                 246 ( 4733)     read(@key,ch1);
                 247 ( 4741)     case ch1 of
                 248 ( 4742)       delchr,rubout: if (curpos=0) and (line>1)
                 249 ( 4772)              then begin
                 250 ( 4774)                updline(pnt,lstart) ;join; exit:=true;
                 251 ( 4797)                end
                 252 ( 4801)              else write(cleft,delchr);
                 253 ( 4810)       cleft: if curpos>0 then write(cleft)
                 254 ( 4831)              else if line>1 then begin
                 255 ( 4842)                updline(pnt,lstart);
                 256 ( 4859)                line:=line-1; curpos:=lastpos(line)+1;
                 257 ( 4884)                exit:=true;
                 258 ( 4891)              end;
                 259 ( 4895)       cright:if (curpos<lastpos(line)+1) and
                 260 ( 4924)                (curpos<xmax-1) then begin
                 261 ( 4934)                write(cright);
                 262 ( 4940)              end else if line<nlines-1 then begin
                 263 ( 4955)                updline(pnt,lstart);
                 264 ( 4972)                line:=line+1; curpos:=0;
                 265 ( 4985)                exit:=true;
                 266 ( 4991)              end;
                 267 ( 4995)       cup,cdown,esc,cr,
                 268 ( 5023)       pgup,pgdown,hom,pgend: exit:=true
                 269 ( 5054)       else begin
                 270 ( 5063)              if (ch1>=' ') and (ch1<chr($7f))
                 271 ( 5076)              then begin
                 272 ( 5079)                write(inschr); write(ch1);
                 273 ( 5090)                if curpos<1 then begin
                 274 ( 5096)                  updline(pnt,lstart);
                 275 ( 5113)                  line:=line+1;
                 276 ( 5119)                  if line>=nlines then begin
                 277 ( 5133)                    linepnt[line]:=strnew;
                 278 ( 5146)                    nlines:=nlines+1;
                 279 ( 5156)                  end;
                 280 ( 5161)                  curpos:=0; exit:=true;
                 281 ( 5169)                end;
                 282 ( 5173)              end;
                 283 ( 5173)            end
                 284 ( 5173)     end {case};
                 285 ( 5175)     until exit;
                 286 ( 5175)   updline(pnt,lstart);
                 287 ( 5196)   edlin := ch1;
                 288 ( 5196)   if (ch1<>delchr) and (ch1<>rubout) then
                 289 ( 5218)     savecx:=curpos+1;
                 290 ( 5227) end;
                 291 ( 5232) 
                 292 ( 5233) proc readinput;
                 293 ( 5233) var i,pend:integer;
                 294 ( 5236) begin
                 295 ( 5236)   cyclus:=0; drive:=1;
                 296 ( 5246)   goto(1,1); write(clrscr);
                 297 ( 5263)   agetstring(name,default,cyclus,drive);
                 298 ( 5303)   asetfile(name,cyclus,drive,'P');
                 299 ( 5325)   openr(fno);

----------------------------------------------------------------------

R65 Pascal program PEDIT           7/11/23     page 6

                 300 ( 5331)   nlines := 1; line:=1; topline:=1;
                 301 ( 5345)   pend:=15; while name[pend]=' ' do pend:=pend-1;
                 302 ( 5375)   for i:=0 to pend do stemp[i]:=name[i];
                 303 ( 5410)   stemp[pend+1]:=chr(0);
                 304 ( 5441)   stradd(':P.',stemp);
                 305 ( 5462)   hexstr(filcyc,stemp2);
                 306 ( 5476)   stradd(stemp2,stemp);
                 307 ( 5490)   while strlen(stemp)<17 do stradd(' ',stemp);
                 308 ( 5522)   putontop(stemp,17,true);
                 309 ( 5539)   putontop('Reading',36,true);
                 310 ( 5559)   repeat
                 311 ( 5559)     linepnt[nlines] := strnew;
                 312 ( 5569)     iseof := readline(fno, linepnt[nlines]);
                 313 ( 5593)     nlines := nlines+1;
                 314 ( 5603)     showtop;
                 315 ( 5612)     until iseof or (nlines >= maxlines-1);
                 316 ( 5627)   if nlines >= maxlines-1 then
                 317 ( 5640)       showerror('Too many lines');
                 318 ( 5668)   close(fno);
                 319 ( 5674)   clrmessage;
                 320 ( 5678)   showall;
                 321 ( 5682) end;
                 322 ( 5682) 
                 323 ( 5683) proc writeoutput;
                 324 ( 5683) var pos,endpos:integer;s,saveline:cpnt;
                 325 ( 5686) begin
                 326 ( 5686)   cyclus:=0; drive:=1;
                 327 ( 5696)   goto(1,1); write(clrscr);
                 328 ( 5713)   asetfile(name,cyclus,drive,'P');
                 329 ( 5735)   openw(fno);
                 330 ( 5741)   putontop('Writing',36,true);
                 331 ( 5761)   for line:=1 to nlines-1 do begin
                 332 ( 5783)     showtop;
                 333 ( 5787)     endpos:=lastpos(line);
                 334 ( 5799)     s:=linepnt[line];
                 335 ( 5807)     for pos:=0 to endpos do
                 336 ( 5821)       write(@fno,chr(ord(s[pos]) and $7f));
                 337 ( 5855)     if (line<nlines-1) or (endpos<0) then
                 338 ( 5888)       write(@fno,cr);
                 339 ( 5901)   end;
                 340 ( 5901)   close(fno); line:=nlines-1;
                 341 ( 5927)   showall;
                 342 ( 5936) end;
                 343 ( 5936) 
                 344 ( 5937) proc clrmarks;
                 345 ( 5937) var x,savel:integer; s:cpnt;
                 346 ( 5940) begin
                 347 ( 5940)   savel:=line;
                 348 ( 5942)   for line:=1 to nlines-1 do begin
                 349 ( 5972)     s:=linepnt[line];
                 350 ( 5976)     for x:=0 to xmax-1 do
                 351 ( 5994)       s[x]:=chr(ord(s[x]) and $7f);
                 352 ( 6021)     showtop;
                 353 ( 6044)     end;
                 354 ( 6044)   line:=savel; mark:=0; nmark:=0;
                 355 ( 6074) end;
                 356 ( 6078) 
                 357 ( 6079) proc find(again:boolean);
                 358 ( 6079) var pos,x,i:integer;
                 359 ( 6082)     ch:char;

----------------------------------------------------------------------

R65 Pascal program PEDIT           7/11/23     page 7

                 360 ( 6082)     found:boolean;
                 361 ( 6082)     s2:cpnt;
                 362 ( 6082) 
                 363 ( 6082)   proc checkrest;
                 364 ( 6082)   var failed:boolean;
                 365 ( 6085)       x1:integer;
                 366 ( 6085)       s1:cpnt;
                 367 ( 6085)   begin
                 368 ( 6085)     failed:=false; pos:=3; x1:=x+1;
                 369 ( 6105)     while (fs[pos]<>chr(0)) and (x1<xmax) do begin
                 370 ( 6135)       s1:=linepnt[line];
                 371 ( 6139)       if s1[x1] <> fs[pos] then failed:=true;
                 372 ( 6173)       pos:=pos+1; x1:=x1+1;
                 373 ( 6194)       end;
                 374 ( 6199)      if (failed=false) and (fs[pos]=chr(0))
                 375 ( 6221)       then found:=true;
                 376 ( 6229)   end;
                 377 ( 6233) 
                 378 ( 6234) begin
                 379 ( 6234)   if not again then strcpy(stemp,fs);
                 380 ( 6258)   if fs[1]=chr(0) then begin
                 381 ( 6270)     {empty string -> delete all marks}
                 382 ( 6273)     putontop('Clearing marks',36,true);
                 383 ( 6300)     clrmarks; showall;
                 384 ( 6308)     end
                 385 ( 6308)   else begin
                 386 ( 6311)     putontop('Searching',36,true);
                 387 ( 6333)     found:=false;
                 388 ( 6335)     repeat
                 389 ( 6339)       x:=0;
                 390 ( 6341)       repeat
                 391 ( 6345)         pos:=2;
                 392 ( 6347)         s2:=linepnt[line];
                 393 ( 6355)         if s2[x]=fs[pos] then checkrest;
                 394 ( 6391)         x:=x+1;
                 395 ( 6397)         until found or (x>=xmax);
                 396 ( 6413)       showtop; line:=line+1;
                 397 ( 6427)       until found or (line>=nlines);
                 398 ( 6445)     if found then begin
                 399 ( 6453)       line:=line-1; x:=x-1; i:=2;
                 400 ( 6480)       s2:=linepnt[line];
                 401 ( 6488)       while fs[i]<>chr(0) do begin
                 402 ( 6513)         s2[x+i-2]:=chr(ord(s2[x+i-2]) or $80);
                 403 ( 6546)          i:=i+1;
                 404 ( 6557)         end
                 405 ( 6562)       end
                 406 ( 6562)     else begin
                 407 ( 6568)       line:=nlines-1;
                 408 ( 6574)     end;
                 409 ( 6579)   end
                 410 ( 6579) end;
                 411 ( 6579) 
                 412 ( 6580) proc insertline;
                 413 ( 6580) var i:integer;
                 414 ( 6583)     s1,s2:cpnt;
                 415 ( 6583) begin
                 416 ( 6583)   if nlines<maxlines-1 then begin
                 417 ( 6596)     if line<mark then mark:=mark+1
                 418 ( 6615)     else if line<mark+nmark then nmark:=nmark+1;
                 419 ( 6648)     if line<nlines-1 then begin

----------------------------------------------------------------------

R65 Pascal program PEDIT           7/11/23     page 8

                 420 ( 6665)       for i:=nlines-1 downto line+1 do
                 421 ( 6685)         linepnt[i+1]:=linepnt[i];
                 422 ( 6706)       end;
                 423 ( 6728)     linepnt[line+1]:=strnew;
                 424 ( 6741)     s1:=linepnt[line+1]; s2:=linepnt[line];
                 425 ( 6764)     for i:=0 to xmax-1 do s1[i]:=' ';
                 426 ( 6798)     for i:=curpos to xmax-1 do begin
                 427 ( 6837)       s1[i-curpos]:=s2[i]; s2[i]:=' ';
                 428 ( 6865)       end;
                 429 ( 6869)     line:=line+1; nlines:=nlines+1;
                 430 ( 6900)     savecx:=1; chkline; chktop(false); showall;
                 431 ( 6927)   end;
                 432 ( 6927) end;
                 433 ( 6927) 
                 434 ( 6928) proc paste;
                 435 ( 6928) var l,i:integer; s1,s2:cpnt;
                 436 ( 6931) begin
                 437 ( 6931)   for i:=nlines-1 downto line do
                 438 ( 6944)     linepnt[i+nmark]:=linepnt[i];
                 439 ( 6970)   nlines:=nlines+nmark;
                 440 ( 6996)   if mark>line then mark:=mark+nmark;
                 441 ( 7021)   for l:=mark to mark+nmark-1 do begin
                 442 ( 7059)     linepnt[line]:=strnew;
                 443 ( 7069)     s1:=linepnt[line]; s2:=linepnt[l];
                 444 ( 7089)     for i:=0 to xmax-1 do s1[i]:=s2[i];
                 445 ( 7129)     line:=line+1;
                 446 ( 7155)   end;
                 447 ( 7160)   showall;
                 448 ( 7178) end;
                 449 ( 7178) 
                 450 ( 7179) proc move;
                 451 ( 7179) var i,j,saveline:integer; savepnt:cpnt;
                 452 ( 7182) begin
                 453 ( 7182)   saveline:=line; { insert above}
                 454 ( 7192)   if line>=mark+nmark then begin
                 455 ( 7206)     mark:=mark+nmark-1;
                 456 ( 7220)     for j:=0 to nmark-1 do begin
                 457 ( 7247)       savepnt:=linepnt[mark];
                 458 ( 7251)       for i:=mark to line-1 do
                 459 ( 7273)         linepnt[i]:=linepnt[i+1];
                 460 ( 7294)       mark:=mark-1; line:=line-1;
                 461 ( 7333)       linepnt[line]:=savepnt;
                 462 ( 7342)     end;
                 463 ( 7350)   end else if line<mark then begin
                 464 ( 7376)     for j:=0 to nmark-1 do begin
                 465 ( 7401)       savepnt:=linepnt[mark];
                 466 ( 7405)       for i:=mark downto line+1 do
                 467 ( 7427)         linepnt[i]:=linepnt[i-1];
                 468 ( 7448)       linepnt[line]:=savepnt;
                 469 ( 7474)       mark:=mark+1; line:=line+1;
                 470 ( 7499)     end;
                 471 ( 7504)   end else showerror('Move inside move');
                 472 ( 7546)  mark:=saveline; line:=saveline; showall;
                 473 ( 7566) end;
                 474 ( 7566) 
                 475 ( 7567) func doesc: boolean;
                 476 ( 7567) var ch:char;
                 477 ( 7570)     i,n:integer;
                 478 ( 7570)     s,savl:cpnt;
                 479 ( 7570) begin

----------------------------------------------------------------------

R65 Pascal program PEDIT           7/11/23     page 9

                 480 ( 7570)   doesc:=false; savecx:=1;
                 481 ( 7580)   getinput(n,stemp); ch:=stemp[0];
                 482 ( 7608)   if (strlen(stemp)>1) and (stemp[1]<>' ') then
                 483 ( 7640)     showerror('Expected f: xxx')
                 484 ( 7662)   else begin
                 485 ( 7671)     case ch of
                 486 ( 7671)       't': begin {top}
                 487 ( 7682)              line:=1; chktop(true);
                 488 ( 7696)            end;
                 489 ( 7696)       'b': begin {bottom}
                 490 ( 7706)              line:=nlines-1; chktop(true);
                 491 ( 7725)            end;
                 492 ( 7725)       'l': begin {line number}
                 493 ( 7735)              line:=n; chkline; chktop(true);
                 494 ( 7755)            end;
                 495 ( 7755)       'f','g': begin {find string}
                 496 ( 7772)              find(ch='g'); chkline; chktop(false);
                 497 ( 7797)              showall;
                 498 ( 7801)            end;
                 499 ( 7801)       'c': begin {mark lines for copy}
                 500 ( 7811)              if n<1 then n:=1;
                 501 ( 7823)              if line+n>= nlines-1 then
                 502 ( 7842)                showerror('Too many lines')
                 503 ( 7864)              else begin
                 504 ( 7873)                mark:=line; nmark:=n;
                 505 ( 7881)                for line:=mark to mark+nmark-1 do
                 506 ( 7908)                begin
                 507 ( 7918)                  s:=linepnt[line];
                 508 ( 7922)                  for i:=0 to xmax-1 do
                 509 ( 7940)                    s[i]:= chr(ord(s[i]) or $80);
                 510 ( 7967)                end;
                 511 ( 7986)                line:=mark;
                 512 ( 8000)              end;
                 513 ( 8008)              showall;
                 514 ( 8012)            end;
                 515 ( 8012)       'p': begin {paste marked lines}
                 516 ( 8022)              if mark=0 then
                 517 ( 8028)                showerror('Nothing marked')
                 518 ( 8049)              else begin
                 519 ( 8058)                if nlines+nmark>=maxlines then
                 520 ( 8070)                  showerror('Too many lines')
                 521 ( 8091)                else paste;
                 522 ( 8104)              end;
                 523 ( 8104)            end;
                 524 ( 8104)       'm': begin {move marked lines }
                 525 ( 8114)              if mark=0 then
                 526 ( 8120)                showerror('Nothing marked')
                 527 ( 8141)              else move;
                 528 ( 8154)            end;
                 529 ( 8154)       'd': begin {delete n lines}
                 530 ( 8164)              if n<1 then n:=1;
                 531 ( 8176)              if line+n=maxlines-3 then
                 532 ( 8194)                n:=maxlines-3-line;
                 533 ( 8205)              for i:=1 to n do begin
                 534 ( 8233)                delline; line:=line+1;
                 535 ( 8243)              end;
                 536 ( 8248)              chkline; chktop(false); showall;
                 537 ( 8278)            end;
                 538 ( 8278)       'w': writeoutput; {write output}
                 539 ( 8295)       'q': begin {write output and quit}

----------------------------------------------------------------------

R65 Pascal program PEDIT           7/11/23     page 10

                 540 ( 8302)              writeoutput; doesc:=true;
                 541 ( 8308)            end;
                 542 ( 8312)       'k': doesc:=true; {kill program}
                 543 ( 8331)       '?','h': showerror('tb/l/fg/cpm/d/wqk/?h')
                 544 ( 8368)       else showerror('Unknown escape')
                 545 ( 8394)     end {case};
                 546 ( 8402)   end;
                 547 ( 8402)   clrmessage;
                 548 ( 8406) end;
                 549 ( 8406) 
                 550 ( 8407) begin {main}
                 551 ( 8407)   stemp:=strnew; stemp2:=strnew; fs:=strnew;
                 552 ( 8436)   setnumlin($0f,$37);
                 553 ( 8450)   write(hom,clrscr);
                 554 ( 8456)   putontop('Line xxx of xxx',0,true);
                 555 ( 8484)   relpnt:=maxlines-1;
                 556 ( 8489)   mark:=0; nmark:=0; savecx:=1;
                 557 ( 8508)   clrmessage;
                 558 ( 8516)   readinput; fs[0]:=chr(0);
                 559 ( 8524)   topline:= 1; line:=1; showall; exit:=false;
                 560 ( 8547)   repeat
                 561 ( 8551)     showtop; chi := edlin(linepnt[line]);
                 562 ( 8571)     case chi of
                 563 ( 8575)       cup,cdown: begin
                 564 ( 8593)              if chi=cup then line:=line-1
                 565 ( 8607)              else line:=line+1;
                 566 ( 8623)              chkline;
                 567 ( 8632)              if curpos>lastpos(line)+2 then
                 568 ( 8649)                savecx:=lastpos(line)+2;
                 569 ( 8668)              chktop(true);
                 570 ( 8681)            end;
                 571 ( 8681)       pgup: begin
                 572 ( 8691)              line:=line-15; chkline; chktop(true);
                 573 ( 8714)            end;
                 574 ( 8714)       pgdown: begin
                 575 ( 8724)              line:=line+15; chkline; chktop(true);
                 576 ( 8747)            end;
                 577 ( 8747)       hom: begin
                 578 ( 8757)              line:=1; savecx:=1; chktop(true);
                 579 ( 8777)            end;
                 580 ( 8777)       pgend: begin
                 581 ( 8787)              line:=nlines-1; savecx:=1; chktop(true);
                 582 ( 8812)            end;
                 583 ( 8812)       cr:  insertline;
                 584 ( 8826)       esc: if doesc then exit:=true
                 585 ( 8845)     end {case};
                 586 ( 8853)     until exit;
                 587 ( 8853)   setnumlin($29,$2f);
                 588 ( 8870)   write(hom,clrscr);
                 589 ( 8876)   i:=freedsk(fildrv,true);
                 590 ( 8889) end.
                 591 ( 8893) 

End compile

Code lenght:          8892
Compiler stack size:  118
Ident stack size:     173
Pascal errors:        0

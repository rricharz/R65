
R65 Pascal program PEDIT           6/11/23     page 1


                   1 (    4) program pedit;
                   2 (    4) 
                   3 (    4) { Pascal editor, original 1980 RR
                   4 (    4)   rewritten 2023 RR for R65 system }
                   5 (    4) 
                   6 (    4) uses syslib, arglib, strlib;
                   7 ( 2183) 
                   8 ( 2183) const maxlines = 420; xmax=56;
                   9 ( 2186)     scrlins = 16;
                  10 ( 2186)     eol    = chr($00); esc    = chr($00);
                  11 ( 2186)     pgdown = chr($02); pgup   = chr($08);
                  12 ( 2186)     pgend  = chr($10); clrscr = chr($11);
                  13 ( 2186)     clrlin = chr($17); cdown  = chr($18);
                  14 ( 2186)     cup    = chr($1a); cleft  = chr($03);
                  15 ( 2186)     inschr = chr($15); delchr = chr($19);
                  16 ( 2186)     rubout = chr($5f); cright = chr($16);
                  17 ( 2186)     mlenght   = 19; inpx=37;
                  18 ( 2186) 
                  19 ( 2186) mem curlin  = $ed: integer&;
                  20 ( 2186)     curpos  = $ee: integer&;
                  21 ( 2186)     filcyc  = $311: integer&;
                  22 ( 2186)     video   = $400: array[900] of char&;
                  23 ( 2186)     top     = $400: array[xmax] of integer&;
                  24 ( 2186) 
                  25 ( 2186) var line,nlines,topline,i: integer;
                  26 ( 2186)     name: array[15] of char;
                  27 ( 2186)     fno: file;
                  28 ( 2186)     chi : char;
                  29 ( 2186)     cyclus,drive,mark,nmark,savecx: integer;
                  30 ( 2186)     default, iseof, exit: boolean;
                  31 ( 2186)     fs: cpnt;
                  32 ( 2186)     linepnt: array[maxlines] of cpnt;
                  33 ( 2186)     relpnt:  integer;
                  34 ( 2186)     stemp,stemp2: cpnt;
                  35 ( 2186) 
                  36 ( 2186) proc putontop(s:cpnt;pos:integer;inv:boolean);
                  37 ( 2186) var i:integer;
                  38 ( 2189) begin
                  39 ( 2189)   i:=0; { faster version: if not in loop }
                  40 ( 2197)   if inv then while s[i]<>chr(0) do begin
                  41 ( 2221)     top[i+pos]:=ord(s[i]) or 128; i:=i+1;
                  42 ( 2256)   end else while s[i]<>chr(0) do begin
                  43 ( 2284)     top[i+pos]:=ord(s[i]); i:=i+1;
                  44 ( 2316)   end;
                  45 ( 2321) end;
                  46 ( 2324) 
                  47 ( 2325) func new:cpnt;
                  48 ( 2325) begin
                  49 ( 2325)   if relpnt<maxlines-1 then begin
                  50 ( 2341)     relpnt:=relpnt+1; new:=linepnt[relpnt];
                  51 ( 2359)   end else  {assign new memory}
                  52 ( 2370)     new:=strnew;
                  53 ( 2376) end;
                  54 ( 2380) 
                  55 ( 2381) proc release(p:cpnt);
                  56 ( 2381) begin
                  57 ( 2381)   linepnt[relpnt]:=p; relpnt:=relpnt-1;
                  58 ( 2404) end;
                  59 ( 2409) 

----------------------------------------------------------------------

R65 Pascal program PEDIT           6/11/23     page 2

                  60 ( 2410) proc setnumlin(l,c:integer);
                  61 ( 2410) mem numlin=$1789: integer&;
                  62 ( 2413)     numchr=$178a: integer&;
                  63 ( 2413) begin
                  64 ( 2413)   numlin:=l; numchr:=c;
                  65 ( 2424) end;
                  66 ( 2433) 
                  67 ( 2434) func column:integer;
                  68 ( 2434) begin
                  69 ( 2434)   column:=line-topline+1;
                  70 ( 2450) end;
                  71 ( 2455) 
                  72 ( 2456) proc goto(xpos, ypos: integer);
                  73 ( 2456) begin
                  74 ( 2456)   curlin:=ypos; { top on line 2 }
                  75 ( 2469)   if curlin>15 then curlin:=15;
                  76 ( 2480)   curpos:=xpos-1;
                  77 ( 2490) end;
                  78 ( 2495) 
                  79 ( 2496) proc clrmessage;
                  80 ( 2496) var i:integer;
                  81 ( 2499) begin
                  82 ( 2499)   for i:=inpx-1 to xmax-1 do top[i]:=128;
                  83 ( 2530) end;
                  84 ( 2551) 
                  85 ( 2552) proc getinput(var n:integer; s:cpnt);
                  86 ( 2552) var i,j,stop:integer; ch: char;
                  87 ( 2555) begin
                  88 ( 2555)   goto(inpx,0); write(chr(ord(':') or 128));
                  89 ( 2574)   read(@key,ch); i:=0;
                  90 ( 2585)   while (ch<>chr(13)) do begin
                  91 ( 2600)     if (ch=rubout) then begin
                  92 ( 2607)       if i>0 then i:=i-1; goto(i+inpx+1,0);
                  93 ( 2649)       write(chr(ord(' ') or 128),cleft);
                  94 ( 2659)     end else if (ch>=' ') and (ch<=chr($7d)) and
                  95 ( 2677)       (inpx+i<xmax-1) then begin
                  96 ( 2692)       goto(i+inpx+1,0);
                  97 ( 2713)       write(chr(ord(ch) or 128)); i:=i+1;
                  98 ( 2728)     end;
                  99 ( 2733)     read(@key,ch);
                 100 ( 2741)   end;
                 101 ( 2742)   stop:=i+inpx;
                 102 ( 2751)   i:=inpx; n:=0;
                 103 ( 2764)   while ((top[i] and 127)>=ord('0')) and
                 104 ( 2783)     ((top[i] and 127)<=ord('9')) and
                 105 ( 2798)     (i<stop) do begin
                 106 ( 2812)     n:=10*n+(top[i] and 127)-ord('0');
                 107 ( 2834)     i:=i+1;
                 108 ( 2845)   end;
                 109 ( 2850)   j:=0;
                 110 ( 2855)   while i<stop do begin
                 111 ( 2871)     s[j]:=chr(top[i] and 127); i:=i+1; j:=j+1;
                 112 ( 2909)   end;
                 113 ( 2914)   s[j]:=chr(0);
                 114 ( 2923) end;
                 115 ( 2928) 
                 116 ( 2929) func readline(input: file; pnt: cpnt): boolean;
                 117 ( 2929) const alteof=chr(127);
                 118 ( 2932) var ch1: char;
                 119 ( 2932)     pos: integer;

----------------------------------------------------------------------

R65 Pascal program PEDIT           6/11/23     page 3

                 120 ( 2932) begin
                 121 ( 2932)   pos := 0; read(@fno,ch1);
                 122 ( 2950)   while (ch1>=' ') and (ch1<>alteof) and
                 123 ( 2965)       (pos<xmax-1) do begin
                 124 ( 2980)     pnt[pos]:=ch1; pos:=pos+1; read(@fno,ch1);
                 125 ( 3013)     end;
                 126 ( 3014)   while pos<xmax do begin
                 127 ( 3027)     pnt[pos]:=' '; pos:=pos+1;
                 128 ( 3043)   end;
                 129 ( 3048)   readline:=(ch1=eof) or (ch1=alteof);
                 130 ( 3065) end;
                 131 ( 3070) 
                 132 ( 3071) proc showline(pnt:cpnt; y: integer);
                 133 ( 3071) var lstart,pos: integer;
                 134 ( 3074) begin
                 135 ( 3074)   lstart:=y*xmax;
                 136 ( 3082)   for pos:=0 to xmax-1 do
                 137 ( 3097)     video[lstart+pos]:=pnt[pos];
                 138 ( 3124) end;
                 139 ( 3147) 
                 140 ( 3148) proc showtop;
                 141 ( 3148) begin
                 142 ( 3148)   intstr(line,stemp,3); putontop(stemp,5,true);
                 143 ( 3183)   intstr(nlines-1,stemp,3); putontop(stemp,12,true);
                 144 ( 3216) end;
                 145 ( 3216) 
                 146 ( 3217) proc showerror(s:cpnt);
                 147 ( 3217) var i: integer;
                 148 ( 3220)     ch: char;
                 149 ( 3220) begin
                 150 ( 3220)   clrmessage;
                 151 ( 3226)   putontop(s,36,true);
                 152 ( 3240)   read(@key,ch);
                 153 ( 3248)   clrmessage;
                 154 ( 3253) end;
                 155 ( 3253) 
                 156 ( 3254) proc showall;
                 157 ( 3254) var lstart,y,i,l,lstart: integer;
                 158 ( 3257) begin
                 159 ( 3257)   showtop;
                 160 ( 3263)   for y:=1 to scrlins-1 do begin
                 161 ( 3283)     l:=topline-1+y; lstart:=y*xmax;
                 162 ( 3305)     if l<nlines then
                 163 ( 3314)       showline(linepnt[l],y)
                 164 ( 3330)     else
                 165 ( 3340)       for i:=0 to xmax-1 do
                 166 ( 3353)         video[lstart+i]:=' ';
                 167 ( 3374)   end;
                 168 ( 3395) end;
                 169 ( 3409) 
                 170 ( 3410) proc updline(pnt: cpnt; lstart:integer);
                 171 ( 3410) var pos: integer;
                 172 ( 3413) begin
                 173 ( 3413)   for pos:=0 to xmax-1 do
                 174 ( 3425)     pnt[pos]:=video[lstart+pos];
                 175 ( 3451) end;
                 176 ( 3471) 
                 177 ( 3472) func lastpos(l:integer):integer;
                 178 ( 3472) var endpos:integer;
                 179 ( 3475)     s:cpnt;

----------------------------------------------------------------------

R65 Pascal program PEDIT           6/11/23     page 4

                 180 ( 3475) begin
                 181 ( 3475)   endpos:=xmax-1;
                 182 ( 3481)   s:=linepnt[l]
                 183 ( 3486)   while (s[endpos]=chr(ord(' ') and $7f))
                 184 ( 3513)     and (endpos>0) do endpos:=endpos-1;
                 185 ( 3532)   lastpos:=endpos;
                 186 ( 3540) end;
                 187 ( 3548) 
                 188 ( 3549) proc chkline;
                 189 ( 3549) begin
                 190 ( 3549)   if line<1 then line:=1
                 191 ( 3564)   else if line>nlines-1 then line:=nlines-1;
                 192 ( 3594) end;
                 193 ( 3599) 
                 194 ( 3600) proc chktop(show: boolean);
                 195 ( 3600) var savetop,bottom:integer;
                 196 ( 3603) begin
                 197 ( 3603)   savetop:=topline; bottom:=topline+scrlins-1;
                 198 ( 3622)   if line<topline then topline:=line;
                 199 ( 3639)   if line>=bottom then
                 200 ( 3651)     topline:=line-scrlins+2;
                 201 ( 3668)   if show and (savetop<>topline) then showall;
                 202 ( 3694) end;
                 203 ( 3694) 
                 204 ( 3695) proc delline;
                 205 ( 3695) var i:integer; savpnt:cpnt;
                 206 ( 3698) begin
                 207 ( 3698)   chkline; savpnt:=linepnt[line];
                 208 ( 3708)   if line<mark then mark:=mark-1
                 209 ( 3732)   else if line<mark+nmark then nmark:=nmark-1;
                 210 ( 3765)   for i:=line to nlines-2 do
                 211 ( 3784)     linepnt[i]:=linepnt[i+1];
                 212 ( 3805)   release(savpnt); nlines:=nlines-1;
                 213 ( 3843)   chkline; chktop(false);
                 214 ( 3860)   line:=line-1; savecx:=1;
                 215 ( 3873) end;
                 216 ( 3877) 
                 217 ( 3878) proc join;
                 218 ( 3878) var p,p1,p2,pm:integer;
                 219 ( 3881)     s1,s2:cpnt;
                 220 ( 3881) begin
                 221 ( 3881)   p1:=lastpos(line-1); p2:=lastpos(line);
                 222 ( 3914)   s1:=linepnt[line-1]; s2:=linepnt[line];
                 223 ( 3937)   for p:=p1+1 to xmax-1 do s1[p]:=s2[p-p1-1];
                 224 ( 3990)   if p1+p2<xmax then delline
                 225 ( 4022)   else begin
                 226 ( 4032)     pm:=xmax-p1;
                 227 ( 4034)     for p:=0 to xmax-pm do s2[+p]:=s2[p+pm-1];
                 228 ( 4085)     for p:=xmax-pm+1 to xmax-1 do s2[p]:=' ';
                 229 ( 4139)     line:=line-1;
                 230 ( 4163)   end;
                 231 ( 4168)   savecx:=p1+2; chkline; chktop(false); showall;
                 232 ( 4195) end;
                 233 ( 4195) 
                 234 ( 4196) func edlin(pnt: cpnt): char;
                 235 ( 4196) const key    = @1;
                 236 ( 4199) var   ch1: char;
                 237 ( 4199)       exit: boolean;
                 238 ( 4199)       lstart: integer;
                 239 ( 4199) begin

----------------------------------------------------------------------

R65 Pascal program PEDIT           6/11/23     page 5

                 240 ( 4199)   goto(savecx,column);
                 241 ( 4217)   if savecx=1 then write(cright,cleft)
                 242 ( 4232)   else write(cleft,cright); {to update cursor}
                 243 ( 4242)   exit:=false; lstart:=column*xmax;
                 244 ( 4256)   repeat
                 245 ( 4261)     read(@key,ch1);
                 246 ( 4269)     case ch1 of
                 247 ( 4270)       delchr,rubout: if (curpos=0) and (line>1)
                 248 ( 4300)              then begin
                 249 ( 4302)                updline(pnt,lstart) ;join; exit:=true;
                 250 ( 4325)                end
                 251 ( 4329)              else write(cleft,delchr);
                 252 ( 4338)       cleft: if curpos>0 then write(cleft);
                 253 ( 4360)       cright:if curpos<xmax-1 then write(cright);
                 254 ( 4385)       cup,cdown,esc,cr,
                 255 ( 4413)       pgup,pgdown,hom,pgend: exit:=true
                 256 ( 4444)       else begin
                 257 ( 4453)              if (ch1>=' ') and (ch1<chr($7f))
                 258 ( 4466)              and (curpos<xmax-1) and
                 259 ( 4478)              (video[lstart+xmax-1]=' ') and
                 260 ( 4497)              (video[lstart+xmax-2]=' ') then begin
                 261 ( 4517)                write(inschr); write(ch1);
                 262 ( 4528)              end;
                 263 ( 4528)            end
                 264 ( 4528)     end {case};
                 265 ( 4530)     until exit;
                 266 ( 4530)   updline(pnt,lstart);
                 267 ( 4551)   edlin := ch1;
                 268 ( 4551)   if (ch1<>delchr) and (ch1<>rubout) then
                 269 ( 4573)     savecx:=curpos+1;
                 270 ( 4582) end;
                 271 ( 4587) 
                 272 ( 4588) proc readinput;
                 273 ( 4588) var i,pend:integer;
                 274 ( 4591) begin
                 275 ( 4591)   cyclus:=0; drive:=1;
                 276 ( 4601)   goto(1,1); write(clrscr);
                 277 ( 4618)   agetstring(name,default,cyclus,drive);
                 278 ( 4658)   asetfile(name,cyclus,drive,'P');
                 279 ( 4680)   openr(fno);
                 280 ( 4686)   nlines := 1; line:=1; topline:=1;
                 281 ( 4700)   pend:=15; while name[pend]=' ' do pend:=pend-1;
                 282 ( 4730)   for i:=0 to pend do stemp[i]:=name[i];
                 283 ( 4765)   stemp[pend+1]:=chr(0);
                 284 ( 4796)   stradd(':P.',stemp);
                 285 ( 4817)   hexstr(filcyc,stemp2);
                 286 ( 4831)   stradd(stemp2,stemp);
                 287 ( 4845)   while strlen(stemp)<17 do stradd(' ',stemp);
                 288 ( 4877)   putontop(stemp,17,true);
                 289 ( 4894)   putontop('Reading',36,true);
                 290 ( 4914)   repeat
                 291 ( 4914)     linepnt[nlines] := strnew;
                 292 ( 4924)     iseof := readline(fno, linepnt[nlines]);
                 293 ( 4948)     nlines := nlines+1;
                 294 ( 4958)     showtop;
                 295 ( 4967)     until iseof or (nlines >= maxlines-1);
                 296 ( 4982)   if nlines >= maxlines-1 then
                 297 ( 4995)       showerror('Too many lines');
                 298 ( 5023)   close(fno);
                 299 ( 5029)   clrmessage;

----------------------------------------------------------------------

R65 Pascal program PEDIT           6/11/23     page 6

                 300 ( 5033)   showall;
                 301 ( 5037) end;
                 302 ( 5037) 
                 303 ( 5038) proc writeoutput;
                 304 ( 5038) var pos,endpos:integer;s,saveline:cpnt;
                 305 ( 5041) begin
                 306 ( 5041)   cyclus:=0; drive:=1;
                 307 ( 5051)   goto(1,1); write(clrscr);
                 308 ( 5068)   asetfile(name,cyclus,drive,'P');
                 309 ( 5090)   openw(fno);
                 310 ( 5096)   putontop('Writing',36,true);
                 311 ( 5116)   for line:=1 to nlines-1 do begin
                 312 ( 5138)     showtop;
                 313 ( 5142)     endpos:=lastpos(line);
                 314 ( 5154)     s:=linepnt[line];
                 315 ( 5162)     for pos:=0 to endpos do
                 316 ( 5176)       write(@fno,chr(ord(s[pos]) and $7f));
                 317 ( 5210)     if (line<nlines-1) or (endpos<>0) then
                 318 ( 5243)       write(@fno,cr);
                 319 ( 5256)   end;
                 320 ( 5256)   close(fno); line:=nlines-1;
                 321 ( 5282)   showall;
                 322 ( 5291) end;
                 323 ( 5291) 
                 324 ( 5292) proc clrmarks;
                 325 ( 5292) var x,savel:integer; s:cpnt;
                 326 ( 5295) begin
                 327 ( 5295)   savel:=line;
                 328 ( 5297)   for line:=1 to nlines-1 do begin
                 329 ( 5327)     s:=linepnt[line];
                 330 ( 5331)     for x:=0 to xmax-1 do
                 331 ( 5349)       s[x]:=chr(ord(s[x]) and $7f);
                 332 ( 5376)     showtop;
                 333 ( 5399)     end;
                 334 ( 5399)   line:=savel; mark:=0; nmark:=0;
                 335 ( 5429) end;
                 336 ( 5433) 
                 337 ( 5434) proc find(again:boolean);
                 338 ( 5434) var pos,x,i:integer;
                 339 ( 5437)     ch:char;
                 340 ( 5437)     found:boolean;
                 341 ( 5437)     s2:cpnt;
                 342 ( 5437) 
                 343 ( 5437)   proc checkrest;
                 344 ( 5437)   var failed:boolean;
                 345 ( 5440)       x1:integer;
                 346 ( 5440)       s1:cpnt;
                 347 ( 5440)   begin
                 348 ( 5440)     failed:=false; pos:=3; x1:=x+1;
                 349 ( 5460)     while (fs[pos]<>chr(0)) and (x1<xmax) do begin
                 350 ( 5490)       s1:=linepnt[line];
                 351 ( 5494)       if s1[x1] <> fs[pos] then failed:=true;
                 352 ( 5528)       pos:=pos+1; x1:=x1+1;
                 353 ( 5549)       end;
                 354 ( 5554)      if (failed=false) and (fs[pos]=chr(0))
                 355 ( 5576)       then found:=true;
                 356 ( 5584)   end;
                 357 ( 5588) 
                 358 ( 5589) begin
                 359 ( 5589)   if not again then strcpy(stemp,fs);

----------------------------------------------------------------------

R65 Pascal program PEDIT           6/11/23     page 7

                 360 ( 5613)   if fs[1]=chr(0) then begin
                 361 ( 5625)     {empty string -> delete all marks}
                 362 ( 5628)     putontop('Clearing marks',36,true);
                 363 ( 5655)     clrmarks; showall;
                 364 ( 5663)     end
                 365 ( 5663)   else begin
                 366 ( 5666)     putontop('Searching',36,true);
                 367 ( 5688)     found:=false;
                 368 ( 5690)     repeat
                 369 ( 5694)       x:=0;
                 370 ( 5696)       repeat
                 371 ( 5700)         pos:=2;
                 372 ( 5702)         s2:=linepnt[line];
                 373 ( 5710)         if s2[x]=fs[pos] then checkrest;
                 374 ( 5746)         x:=x+1;
                 375 ( 5752)         until found or (x>=xmax);
                 376 ( 5768)       showtop; line:=line+1;
                 377 ( 5782)       until found or (line>=nlines);
                 378 ( 5800)     if found then begin
                 379 ( 5808)       line:=line-1; x:=x-1; i:=2;
                 380 ( 5835)       s2:=linepnt[line];
                 381 ( 5843)       while fs[i]<>chr(0) do begin
                 382 ( 5868)         s2[x+i-2]:=chr(ord(s2[x+i-2]) or $80);
                 383 ( 5901)          i:=i+1;
                 384 ( 5912)         end
                 385 ( 5917)       end
                 386 ( 5917)     else begin
                 387 ( 5923)       line:=nlines-1;
                 388 ( 5929)     end;
                 389 ( 5934)   end
                 390 ( 5934) end;
                 391 ( 5934) 
                 392 ( 5935) proc insertline;
                 393 ( 5935) var i:integer;
                 394 ( 5938)     s1,s2:cpnt;
                 395 ( 5938) begin
                 396 ( 5938)   if nlines<maxlines-1 then begin
                 397 ( 5951)     if line<mark then mark:=mark+1
                 398 ( 5970)     else if line<mark+nmark then nmark:=nmark+1;
                 399 ( 6003)     if line<nlines-1 then begin
                 400 ( 6020)       for i:=nlines-1 downto line+1 do
                 401 ( 6040)         linepnt[i+1]:=linepnt[i];
                 402 ( 6061)       end;
                 403 ( 6083)     linepnt[line+1]:=strnew;
                 404 ( 6096)     s1:=linepnt[line+1]; s2:=linepnt[line];
                 405 ( 6119)     for i:=0 to xmax-1 do s1[i]:=' ';
                 406 ( 6153)     for i:=curpos to xmax-1 do begin
                 407 ( 6192)       s1[i-curpos]:=s2[i]; s2[i]:=' ';
                 408 ( 6220)       end;
                 409 ( 6224)     line:=line+1; nlines:=nlines+1;
                 410 ( 6255)     savecx:=1; chkline; chktop(false); showall;
                 411 ( 6282)   end;
                 412 ( 6282) end;
                 413 ( 6282) 
                 414 ( 6283) proc paste;
                 415 ( 6283) var l,i:integer; s1,s2:cpnt;
                 416 ( 6286) begin
                 417 ( 6286)   for i:=nlines-1 downto line do
                 418 ( 6299)     linepnt[i+nmark]:=linepnt[i];
                 419 ( 6325)   nlines:=nlines+nmark;

----------------------------------------------------------------------

R65 Pascal program PEDIT           6/11/23     page 8

                 420 ( 6351)   if mark>line then mark:=mark+nmark;
                 421 ( 6376)   for l:=mark to mark+nmark-1 do begin
                 422 ( 6414)     linepnt[line]:=strnew;
                 423 ( 6424)     s1:=linepnt[line]; s2:=linepnt[l];
                 424 ( 6444)     for i:=0 to xmax-1 do s1[i]:=s2[i];
                 425 ( 6484)     line:=line+1;
                 426 ( 6510)   end;
                 427 ( 6515)   showall;
                 428 ( 6533) end;
                 429 ( 6533) 
                 430 ( 6534) proc move;
                 431 ( 6534) var i,j,saveline:integer; savepnt:cpnt;
                 432 ( 6537) begin
                 433 ( 6537)   saveline:=line; { insert above}
                 434 ( 6547)   if line>=mark+nmark then begin
                 435 ( 6561)     mark:=mark+nmark-1;
                 436 ( 6575)     for j:=0 to nmark-1 do begin
                 437 ( 6602)       savepnt:=linepnt[mark];
                 438 ( 6606)       for i:=mark to line-1 do
                 439 ( 6628)         linepnt[i]:=linepnt[i+1];
                 440 ( 6649)       mark:=mark-1; line:=line-1;
                 441 ( 6688)       linepnt[line]:=savepnt;
                 442 ( 6697)     end;
                 443 ( 6705)   end else if line<mark then begin
                 444 ( 6731)     for j:=0 to nmark-1 do begin
                 445 ( 6756)       savepnt:=linepnt[mark];
                 446 ( 6760)       for i:=mark downto line+1 do
                 447 ( 6782)         linepnt[i]:=linepnt[i-1];
                 448 ( 6803)       linepnt[line]:=savepnt;
                 449 ( 6829)       mark:=mark+1; line:=line+1;
                 450 ( 6854)     end;
                 451 ( 6859)   end else showerror('Move inside move');
                 452 ( 6901)  mark:=saveline; line:=saveline; showall;
                 453 ( 6921) end;
                 454 ( 6921) 
                 455 ( 6922) func doesc: boolean;
                 456 ( 6922) var ch:char;
                 457 ( 6925)     i,n:integer;
                 458 ( 6925)     s,savl:cpnt;
                 459 ( 6925) begin
                 460 ( 6925)   doesc:=false; savecx:=1;
                 461 ( 6935)   getinput(n,stemp); ch:=stemp[0];
                 462 ( 6963)   if (strlen(stemp)>1) and (stemp[1]<>' ') then
                 463 ( 6995)     showerror('Expected f: xxx')
                 464 ( 7017)   else begin
                 465 ( 7026)     case ch of
                 466 ( 7026)       't': begin {top}
                 467 ( 7037)              line:=1; chktop(true);
                 468 ( 7051)            end;
                 469 ( 7051)       'b': begin {bottom}
                 470 ( 7061)              line:=nlines-1; chktop(true);
                 471 ( 7080)            end;
                 472 ( 7080)       'l': begin {line number}
                 473 ( 7090)              line:=n; chkline; chktop(true);
                 474 ( 7110)            end;
                 475 ( 7110)       'f','g': begin {find string}
                 476 ( 7127)              find(ch='g'); chkline; chktop(false);
                 477 ( 7152)              showall;
                 478 ( 7156)            end;
                 479 ( 7156)       'c': begin {mark lines for copy}

----------------------------------------------------------------------

R65 Pascal program PEDIT           6/11/23     page 9

                 480 ( 7166)              if n<1 then n:=1;
                 481 ( 7178)              if line+n>= nlines-1 then
                 482 ( 7197)                showerror('Too many lines')
                 483 ( 7219)              else begin
                 484 ( 7228)                mark:=line; nmark:=n;
                 485 ( 7236)                for line:=mark to mark+nmark-1 do
                 486 ( 7263)                begin
                 487 ( 7273)                  s:=linepnt[line];
                 488 ( 7277)                  for i:=0 to xmax-1 do
                 489 ( 7295)                    s[i]:= chr(ord(s[i]) or $80);
                 490 ( 7322)                end;
                 491 ( 7341)                line:=mark;
                 492 ( 7355)              end;
                 493 ( 7363)              showall;
                 494 ( 7367)            end;
                 495 ( 7367)       'p': begin {paste marked lines}
                 496 ( 7377)              if mark=0 then
                 497 ( 7383)                showerror('Nothing marked')
                 498 ( 7404)              else begin
                 499 ( 7413)                if nlines+nmark>=maxlines then
                 500 ( 7425)                  showerror('Too many lines')
                 501 ( 7446)                else paste;
                 502 ( 7459)              end;
                 503 ( 7459)            end;
                 504 ( 7459)       'm': begin {move marked lines }
                 505 ( 7469)              if mark=0 then
                 506 ( 7475)                showerror('Nothing marked')
                 507 ( 7496)              else move;
                 508 ( 7509)            end;
                 509 ( 7509)       'd': begin {delete n lines}
                 510 ( 7519)              if n<1 then n:=1;
                 511 ( 7531)              if line+n=maxlines-3 then
                 512 ( 7549)                n:=maxlines-3-line;
                 513 ( 7560)              for i:=1 to n do begin
                 514 ( 7588)                delline; line:=line+1;
                 515 ( 7598)              end;
                 516 ( 7603)              chkline; chktop(false); showall;
                 517 ( 7633)            end;
                 518 ( 7633)       'w': writeoutput; {write output}
                 519 ( 7650)       'q': begin {write output and quit}
                 520 ( 7657)              writeoutput; doesc:=true;
                 521 ( 7663)            end;
                 522 ( 7667)       'k': doesc:=true; {kill program}
                 523 ( 7686)       '?','h': showerror('tb/l/fg/cpm/d/wqk/?h')
                 524 ( 7723)       else showerror('Unknown escape')
                 525 ( 7749)     end {case};
                 526 ( 7757)   end;
                 527 ( 7757)   clrmessage;
                 528 ( 7761) end;
                 529 ( 7761) 
                 530 ( 7762) begin {main}
                 531 ( 7762)   stemp:=strnew; stemp2:=strnew; fs:=strnew;
                 532 ( 7791)   setnumlin($0f,$37);
                 533 ( 7805)   write(hom,clrscr);
                 534 ( 7811)   putontop('Line xxx of xxx',0,true);
                 535 ( 7839)   relpnt:=maxlines-1;
                 536 ( 7844)   mark:=0; nmark:=0; savecx:=1;
                 537 ( 7863)   clrmessage;
                 538 ( 7871)   readinput; fs[0]:=chr(0);
                 539 ( 7879)   topline:= 1; line:=1; showall; exit:=false;

----------------------------------------------------------------------

R65 Pascal program PEDIT           6/11/23     page 10

                 540 ( 7902)   repeat
                 541 ( 7906)     showtop; chi := edlin(linepnt[line]);
                 542 ( 7926)     case chi of
                 543 ( 7930)       cup: begin
                 544 ( 7941)              line:=line-1; chkline; chktop(true);
                 545 ( 7964)            end;
                 546 ( 7964)       cdown: begin
                 547 ( 7974)              line:=line+1; chkline; chktop(true);
                 548 ( 7997)            end;
                 549 ( 7997)       pgup: begin
                 550 ( 8007)              line:=line-15; chkline; chktop(true);
                 551 ( 8030)            end;
                 552 ( 8030)       pgdown: begin
                 553 ( 8040)              line:=line+15; chkline; chktop(true);
                 554 ( 8063)            end;
                 555 ( 8063)       hom: begin
                 556 ( 8073)              line:=1; savecx:=1; chktop(true);
                 557 ( 8093)            end;
                 558 ( 8093)       pgend: begin
                 559 ( 8103)              line:=nlines-1; savecx:=1; chktop(true);
                 560 ( 8128)            end;
                 561 ( 8128)       cr:  insertline;
                 562 ( 8142)       esc: if doesc then exit:=true
                 563 ( 8161)     end {case};
                 564 ( 8169)     until exit;
                 565 ( 8169)   setnumlin($29,$2f);
                 566 ( 8186)   writeln(hom, clrscr, 'closing...');
                 567 ( 8209) end.
                 568 ( 8209) 

End compile

Code lenght:          8208
Compiler stack size:  111
Ident stack size:     169
Pascal errors:        0

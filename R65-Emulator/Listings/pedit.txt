
R65 COMPILE 4.2: program PEDIT            7/12/23 page 1


   1 (    4) program pedit;
   2 (    4) 
   3 (    4) { Pascal editor, original 1980 RR
   4 (    4)   rewritten 2023 RR for R65 system }
   5 (    4) 
   6 (    4) uses syslib, arglib, strlib, disklib;
   7 ( 2446) 
   8 ( 2446) const title='R65 PEDIT 2.1'; {max 20 chars}
   9 ( 2463) 
  10 ( 2463)     maxlines= 360;      xmax   = 56;
  11 ( 2463)     scrlins = 16;       mlenght= 19;
  12 ( 2463)     inpx    = 37;       marked = 58;
  13 ( 2463)     eol     = chr($00); esc    = chr($00);
  14 ( 2463)     rdown   = chr($02); rup    = chr($08);
  15 ( 2463)     pgdown  = chr($14); pgup   = chr($12);
  16 ( 2463)     cdown   = chr($18); cup    = chr($1a);
  17 ( 2463)     pgend   = chr($10); clrscr = chr($11);
  18 ( 2463)     clrlin  = chr($17); cleft  = chr($03);
  19 ( 2463)     inschr  = chr($15); delchr = chr($19);
  20 ( 2463)     rubout  = chr($5f); cright = chr($16);
  21 ( 2463) 
  22 ( 2463) mem curlin  = $ed: integer&;
  23 ( 2463)     curpos  = $ee: integer&;
  24 ( 2463)     filcyc  = $311: integer&;
  25 ( 2463)     video   = $400: array[900] of char&;
  26 ( 2463)     topi    = $400: array[xmax] of integer&;
  27 ( 2463)     topc    = $400: array[xmax] of char&;
  28 ( 2463) 
  29 ( 2463) 
  30 ( 2463) var line,nlines,topline,i,dummy,debug: integer;
  31 ( 2463)     name: array[15] of char;
  32 ( 2463)     fno: file;
  33 ( 2463)     chi : char;
  34 ( 2463)     cyclus,drive,mark,nmarks,savecx: integer;
  35 ( 2463)     default, iseof, stop: boolean;
  36 ( 2463)     fs: cpnt;
  37 ( 2463)     linepnt: array[maxlines] of cpnt;
  38 ( 2463)     relpnt:  integer;
  39 ( 2463)     stemp,stemp2: cpnt;
  40 ( 2463) 
  41 ( 2463) func printable(ch:char):boolean;
  42 ( 2463) begin
  43 ( 2463)   printable:=((ord(ch)>=$20) and (ord(ch)<=$7e))
  44 ( 2482)     and (ch<>rubout);
  45 ( 2490) end;
  46 ( 2495) 
  47 ( 2496) proc putontop(s:cpnt;pos:integer;inv:boolean);
  48 ( 2496) var i:integer;
  49 ( 2499) begin
  50 ( 2499)   i:=0; { faster version: if not in loop }
  51 ( 2507)   if inv then while s[i]<>endmark do begin
  52 ( 2530)     topi[i+pos]:=ord(s[i]) or 128; i:=i+1;
  53 ( 2565)   end else while s[i]<>endmark do begin
  54 ( 2592)     topc[i+pos]:=s[i]; i:=i+1;
  55 ( 2624)   end;
  56 ( 2629) end;
  57 ( 2632) 
  58 ( 2633) proc release(p:cpnt);
  59 ( 2633) begin

----------------------------------------------------------------------

R65 COMPILE 4.2: program PEDIT            7/12/23 page 2

  60 ( 2633)   linepnt[relpnt]:=p; relpnt:=relpnt-1;
  61 ( 2656) end;
  62 ( 2661) 
  63 ( 2662) proc setnumlin(l,c:integer);
  64 ( 2662) mem numlin=$1789: integer&;
  65 ( 2665)     numchr=$178a: integer&;
  66 ( 2665) begin
  67 ( 2665)   numlin:=l; numchr:=c;
  68 ( 2676) end;
  69 ( 2685) 
  70 ( 2686) func column:integer;
  71 ( 2686) begin
  72 ( 2686)   column:=line-topline+1;
  73 ( 2702) end;
  74 ( 2707) 
  75 ( 2708) proc goto(xpos, ypos: integer);
  76 ( 2708) begin
  77 ( 2708)   curlin:=ypos; { top on line 2 }
  78 ( 2721)   if curlin>15 then curlin:=15;
  79 ( 2732)   curpos:=xpos-1;
  80 ( 2742) end;
  81 ( 2747) 
  82 ( 2748) proc clrmessage;
  83 ( 2748) var i:integer;
  84 ( 2751) begin
  85 ( 2751)   for i:=inpx-1 to xmax-1 do topi[i]:=128;
  86 ( 2782) end;
  87 ( 2803) 
  88 ( 2804) proc showerror(s:cpnt);
  89 ( 2804) var i: integer;
  90 ( 2807)     ch: char;
  91 ( 2807) begin
  92 ( 2807)   clrmessage;
  93 ( 2813)   putontop(s,36,true);
  94 ( 2827)   read(@key,ch);
  95 ( 2835)   clrmessage;
  96 ( 2840) end;
  97 ( 2840) 
  98 ( 2841) func rnew:cpnt;
  99 ( 2841) var i:integer;
 100 ( 2844)     s:cpnt;
 101 ( 2844) begin
 102 ( 2844)   if relpnt<maxlines-1 then begin
 103 ( 2857)     relpnt:=relpnt+1; s:=linepnt[relpnt];
 104 ( 2875)   end else if nlines<maxlines-1 then s:=new
 105 ( 2900)   else s:=nil;
 106 ( 2915)   rnew:=s;
 107 ( 2919)   if s<>nil then begin
 108 ( 2934)     for i:=0 to xmax-1 do s[i]:=' ';
 109 ( 2963)     s[xmax]:=endmark;
 110 ( 2985)     s[marked]:=chr(0);
 111 ( 2993)   end;
 112 ( 2998)   if nlines>maxlines-5 then
 113 ( 3007)     showerror('Warning: Low memory');
 114 ( 3040) end;
 115 ( 3040) 
 116 ( 3041) proc newline;
 117 ( 3041) begin
 118 ( 3041)   linepnt[nlines]:=rnew;
 119 ( 3056)   nlines:=nlines+1;

----------------------------------------------------------------------

R65 COMPILE 4.2: program PEDIT            7/12/23 page 3

 120 ( 3066) end;
 121 ( 3071) 
 122 ( 3072) 
 123 ( 3072) func isnumber(ci:integer):boolean;
 124 ( 3072) begin
 125 ( 3072)   isnumber:=(ci>=ord('0')) and (ci<=ord('9'))
 126 ( 3090) end;
 127 ( 3096) 
 128 ( 3097) proc getinput(var c:char;var n:integer; s:cpnt);
 129 ( 3097) { get input line on top and analyze it }
 130 ( 3097) var i,j,stop:integer; ch: char;
 131 ( 3100) begin
 132 ( 3100)   goto(inpx,0); write(chr(ord(':') or 128));
 133 ( 3119)   {read input}
 134 ( 3119)   read(@key,ch); i:=0;
 135 ( 3130)   while (ch<>chr(13)) and (ch<>esc) do begin
 136 ( 3153)     if (ch=rubout) then begin
 137 ( 3160)       if i>0 then i:=i-1; goto(i+inpx+1,0);
 138 ( 3202)       write(chr(ord(' ') or 128),cleft);
 139 ( 3212)     end else if (ch>=' ') and (ch<=chr($7d)) and
 140 ( 3230)       (inpx+i<xmax-1) then begin
 141 ( 3245)       goto(i+inpx+1,0);
 142 ( 3266)       write(chr(ord(ch) or 128)); i:=i+1;
 143 ( 3281)     end;
 144 ( 3286)     read(@key,ch);
 145 ( 3294)   end;
 146 ( 3295)   stop:=i+inpx; n:=0; s[0]:=endmark; c:=endmark;
 147 ( 3325)   {set c}
 148 ( 3329)   if stop<=inpx then exit;
 149 ( 3340)   c:=chr(topi[inpx] and 127);
 150 ( 3350)   {set n}
 151 ( 3355)   if stop<inpx+1 then exit;
 152 ( 3369)   i:=inpx+1;
 153 ( 3373)   while isnumber(topi[i] and 127) and
 154 ( 3398)       (i<stop) do begin
 155 ( 3411)     n:=10*n+(topi[i] and 127)-ord('0');
 156 ( 3433)     i:=i+1;
 157 ( 3444)   end;
 158 ( 3449)   j:=0;
 159 ( 3454)   while i<=stop do begin
 160 ( 3470)     s[j]:=chr(topi[i] and 127); i:=i+1; j:=j+1;
 161 ( 3508)   end;
 162 ( 3513)   s[j]:=endmark;
 163 ( 3522) end;
 164 ( 3526) 
 165 ( 3527) func readline(input: file; pnt: cpnt): boolean;
 166 ( 3527) const alteof=chr(127);
 167 ( 3530) var ch1: char;
 168 ( 3530)     pos: integer;
 169 ( 3530) begin
 170 ( 3530)   pos := 0; read(@fno,ch1);
 171 ( 3548)   while (ch1>=' ') and (ch1<>alteof) and
 172 ( 3563)       (pos<xmax-1) do begin
 173 ( 3578)     pnt[pos]:=ch1; pos:=pos+1; read(@fno,ch1);
 174 ( 3611)     end;
 175 ( 3612)   { not  required, done by new }
 176 ( 3615)   { while pos<xmax do begin
 177 ( 3615)     pnt[pos]:=' '; pos:=pos+1;
 178 ( 3615)   end; }
 179 ( 3615)   readline:=(ch1=eof) or (ch1=alteof);

----------------------------------------------------------------------

R65 COMPILE 4.2: program PEDIT            7/12/23 page 4

 180 ( 3629) end;
 181 ( 3634) 
 182 ( 3635) proc showline(pnt:cpnt; y: integer);
 183 ( 3635) var lstart,pos: integer;
 184 ( 3638) begin
 185 ( 3638)   lstart:=y*xmax;
 186 ( 3646)   if (pnt=nil) then
 187 ( 3658)    for pos:=0 to xmax-1 do
 188 ( 3671)     video[lstart+pos]:=' '
 189 ( 3690)   else begin
 190 ( 3716)     pos:=0;
 191 ( 3718)     while (pos<xmax) and (pnt[pos]<>endmark) do begin
 192 ( 3746)       video[lstart+pos]:=pnt[pos]; pos:=pos+1
 193 ( 3776)     end;
 194 ( 3783)     while pos<xmax do begin
 195 ( 3796)       video[lstart+pos]:=' '; pos:=pos+1
 196 ( 3818)     end
 197 ( 3820)   end;
 198 ( 3828) end;
 199 ( 3828) 
 200 ( 3829) proc showtop;
 201 ( 3829) begin
 202 ( 3829)   intstr(line,stemp,3); putontop(stemp,5,true);
 203 ( 3864)   intstr(nlines-1,stemp,3); putontop(stemp,12,true);
 204 ( 3897) end;
 205 ( 3897) 
 206 ( 3898) proc showall;
 207 ( 3898) var lstart,y,i,l,lstart: integer;
 208 ( 3901) begin
 209 ( 3901)   showtop;
 210 ( 3907)   for y:=1 to scrlins-1 do begin
 211 ( 3927)     l:=topline-1+y; lstart:=y*xmax;
 212 ( 3949)     if l<nlines then
 213 ( 3958)       showline(linepnt[l],y)
 214 ( 3974)     else
 215 ( 3984)       for i:=0 to xmax-1 do
 216 ( 3997)         video[lstart+i]:=' ';
 217 ( 4018)   end;
 218 ( 4039) end;
 219 ( 4053) 
 220 ( 4054) proc updline(pnt: cpnt; lstart:integer);
 221 ( 4054) var pos: integer;
 222 ( 4057) begin
 223 ( 4057)   for pos:=0 to xmax-1 do
 224 ( 4069)     pnt[pos]:=video[lstart+pos];
 225 ( 4095) end;
 226 ( 4115) 
 227 ( 4116) func lastpos(l:integer):integer;
 228 ( 4116) { returns -1 if line empty }
 229 ( 4116) var endpos:integer;
 230 ( 4119)     s:cpnt;
 231 ( 4119) begin
 232 ( 4119)   endpos:=xmax-1;
 233 ( 4125)   s:=linepnt[l];
 234 ( 4134)   while (chr(ord(s[endpos]) and $7f)=' ')
 235 ( 4158)     and (endpos>0) do endpos:=endpos-1;
 236 ( 4176)   if (endpos=0) and (chr(ord(s[endpos]) and $7f)=' ')
 237 ( 4207)   then endpos:=-1;
 238 ( 4214)   lastpos:=endpos;
 239 ( 4219) end;

----------------------------------------------------------------------

R65 COMPILE 4.2: program PEDIT            7/12/23 page 5

 240 ( 4227) 
 241 ( 4228) proc chkline;
 242 ( 4228) begin
 243 ( 4228)   if line<1 then line:=1
 244 ( 4243)   else if line>nlines-1 then line:=nlines-1;
 245 ( 4273) end;
 246 ( 4278) 
 247 ( 4279) proc chktop(show: boolean);
 248 ( 4279) var savetop,bottom:integer;
 249 ( 4282) begin
 250 ( 4282)   savetop:=topline; bottom:=topline+scrlins-1;
 251 ( 4301)   if line<topline then topline:=line;
 252 ( 4318)   { keep cursor above bottom line, if possible }
 253 ( 4326)   if line>=bottom-1 then
 254 ( 4336)     topline:=line-scrlins+3;
 255 ( 4350)   if show and (savetop<>topline) then showall;
 256 ( 4376) end;
 257 ( 4376) 
 258 ( 4377) proc delline;
 259 ( 4377) var i:integer; savpnt:cpnt;
 260 ( 4380) begin
 261 ( 4380)   chkline; savpnt:=linepnt[line];
 262 ( 4390)   if line<mark then mark:=mark-1;
 263 ( 4416)   for i:=line to nlines-2 do
 264 ( 4435)     linepnt[i]:=linepnt[i+1];
 265 ( 4456)   release(savpnt); nlines:=nlines-1;
 266 ( 4494)   chkline; chktop(false);
 267 ( 4511)   line:=line-1; savecx:=1;
 268 ( 4524) end;
 269 ( 4528) 
 270 ( 4529) proc join;
 271 ( 4529) var p,p1,p2,pm:integer;
 272 ( 4532)     s1,s2:cpnt;
 273 ( 4532) begin
 274 ( 4532)   p1:=lastpos(line-1); p2:=lastpos(line);
 275 ( 4565)   s1:=linepnt[line-1]; s2:=linepnt[line];
 276 ( 4588)   for p:=p1+1 to xmax-1 do s1[p]:=s2[p-p1-1];
 277 ( 4641)   if p1+p2<xmax then delline
 278 ( 4673)   else begin
 279 ( 4683)     pm:=xmax-p1;
 280 ( 4685)     for p:=0 to xmax-pm do s2[+p]:=s2[p+pm-1];
 281 ( 4736)     for p:=xmax-pm+1 to xmax-1 do s2[p]:=' ';
 282 ( 4790)     line:=line-1;
 283 ( 4814)   end;
 284 ( 4819)   savecx:=p1+2; chkline; chktop(false); showall;
 285 ( 4846) end;
 286 ( 4846) 
 287 ( 4847) func edlin(pnt: cpnt): char;
 288 ( 4847) const key    = @1;
 289 ( 4850) var   ch1,lstch1,lstch2: char;
 290 ( 4850)       stop: boolean;
 291 ( 4850)       lstart: integer;
 292 ( 4850) begin
 293 ( 4850)   goto(savecx,column);
 294 ( 4868)   if savecx=1 then write(cright,cleft)
 295 ( 4883)   else write(cleft,cright); {to update cursor}
 296 ( 4893)   stop:=false; lstart:=column*xmax;
 297 ( 4907)   repeat
 298 ( 4912)     read(@key,ch1);
 299 ( 4920)     lstch1:=' '; lstch2:=' ';

----------------------------------------------------------------------

R65 COMPILE 4.2: program PEDIT            7/12/23 page 6

 300 ( 4929)     case ch1 of
 301 ( 4933)       delchr,rubout: if (curpos=0) and (line>1)
 302 ( 4963)              then begin
 303 ( 4965)                updline(pnt,lstart);join;stop:=true;
 304 ( 4988)              end else write(cleft,delchr);
 305 ( 5001)       cleft: if curpos>0 then write(cleft)
 306 ( 5022)              else if line>1 then begin
 307 ( 5033)                updline(pnt,lstart);
 308 ( 5050)                line:=line-1; curpos:=lastpos(line)+1;
 309 ( 5075)                stop:=true;
 310 ( 5082)              end;
 311 ( 5086)       cright:if curpos<xmax-1 then begin
 312 ( 5105)                write(cright);
 313 ( 5111)              end else if line<nlines-1 then begin
 314 ( 5126)                updline(pnt,lstart);
 315 ( 5143)                line:=line+1; curpos:=0;
 316 ( 5156)                stop:=true;
 317 ( 5162)              end;
 318 ( 5166)       cup,cdown,esc,cr,rup,rdown,
 319 ( 5208)       pgup,pgdown,hom,pgend: stop:=true
 320 ( 5239)       else begin
 321 ( 5248)              if printable(ch1) then begin
 322 ( 5260)                lstch1:=video[lstart+xmax-1];
 323 ( 5276)                lstch1:=chr(ord(lstch1) and $7f);
 324 ( 5289)                lstch2:=video[lstart+xmax-2];
 325 ( 5307)                lstch2:=chr(ord(lstch2) and $7f);
 326 ( 5320)                if curpos>=xmax-1 then begin
 327 ( 5334)                  if line>=nlines-1 then newline;
 328 ( 5356)                  video[lstart+xmax-1]:=ch1;
 329 ( 5366)                  curpos:=0;
 330 ( 5379)                  lstch1:=cdown;
 331 ( 5385)                end else begin
 332 ( 5392)                  write(inschr); write(ch1);
 333 ( 5400)                end;
 334 ( 5400)                if (lstch1<>' ') or (lstch2<>' ')
 335 ( 5413)                  then stop:=true;
 336 ( 5420)              end;
 337 ( 5424)            end
 338 ( 5424)     end {case};
 339 ( 5426)     until stop;
 340 ( 5426)   updline(pnt,lstart);
 341 ( 5447)   if (lstch1<>' ') or (lstch2<>' ') then edlin:=lstch1
 342 ( 5465)   else edlin:=ch1;
 343 ( 5476)   if (ch1<>delchr) and (ch1<>rubout) then
 344 ( 5498)     savecx:=curpos+1;
 345 ( 5507) end;
 346 ( 5512) 
 347 ( 5513) proc readinput;
 348 ( 5513) var i,pend,maxl1:integer;
 349 ( 5516) begin
 350 ( 5516)   cyclus:=0; drive:=1;
 351 ( 5526)   goto(1,1); write(clrscr); goto(1,0);
 352 ( 5553)   agetstring(name,default,cyclus,drive);
 353 ( 5593)   asetfile(name,cyclus,drive,'P');
 354 ( 5615)   openr(fno);
 355 ( 5621)   nlines := 1; line:=1; topline:=1;
 356 ( 5635)   pend:=15; while name[pend]=' ' do pend:=pend-1;
 357 ( 5665)   for i:=0 to pend do stemp[i]:=name[i];
 358 ( 5700)   stemp[pend+1]:=endmark;
 359 ( 5731)   stradd(':P.',stemp);

----------------------------------------------------------------------

R65 COMPILE 4.2: program PEDIT            7/12/23 page 7

 360 ( 5751)   hexstr(filcyc,stemp2);
 361 ( 5765)   stradd(stemp2,stemp);
 362 ( 5779)   while strlen(stemp)<17 do stradd(' ',stemp);
 363 ( 5811)   putontop(stemp,17,true);
 364 ( 5828)   putontop('Reading',36,true);
 365 ( 5848)   maxl1:=maxlines-9;
 366 ( 5853)   showtop;
 367 ( 5862)   repeat
 368 ( 5862)     linepnt[nlines] := rnew;
 369 ( 5872)     iseof := readline(fno, linepnt[nlines]);
 370 ( 5896)     nlines := nlines+1;
 371 ( 5906)     if (nlines and $1f)=0 then showtop;
 372 ( 5928)     until iseof or (nlines >= maxl1);
 373 ( 5941)   showtop;
 374 ( 5949)   if nlines >= maxlines-9 then
 375 ( 5958)       showerror('Too many lines');
 376 ( 5986)   close(fno);
 377 ( 5992)   clrmessage;
 378 ( 5996)   showall;
 379 ( 6000) end;
 380 ( 6000) 
 381 ( 6001) proc writeoutput;
 382 ( 6001) var pos,endpos,nlm1:integer;s,saveline:cpnt;
 383 ( 6004) begin
 384 ( 6004)   cyclus:=0; drive:=1;
 385 ( 6014)   goto(1,1); write(clrscr); goto(1,0);
 386 ( 6041)   asetfile(name,cyclus,drive,'P');
 387 ( 6063)   openw(fno);
 388 ( 6069)   putontop('Writing',36,true);
 389 ( 6089)   nlm1:=nlines-1;
 390 ( 6095)   for line:=1 to nlm1 do begin
 391 ( 6119)     if (line and $1f)=0 then showtop;
 392 ( 6136)     endpos:=lastpos(line);
 393 ( 6148)     s:=linepnt[line];
 394 ( 6156)     for pos:=0 to endpos do
 395 ( 6170)       write(@fno,chr(ord(s[pos]) and $7f));
 396 ( 6204)     if (line<nlm1) then write(@fno,cr);
 397 ( 6239)   end;
 398 ( 6239)   showtop;
 399 ( 6257)   close(fno); line:=nlines-1;
 400 ( 6269)   showall;
 401 ( 6278) end;
 402 ( 6278) 
 403 ( 6279) proc clrmarks;
 404 ( 6279) var x,savel,xm1:integer; s:cpnt;
 405 ( 6282) begin
 406 ( 6282)   putontop('Clearing marks',36,true);
 407 ( 6311)   savel:=line;
 408 ( 6311)   for line:=1 to nlines-1 do begin
 409 ( 6341)     s:=linepnt[line];
 410 ( 6345)     if s[marked]<>chr(0) then begin
 411 ( 6365)       xm1:=xmax-1;
 412 ( 6372)       for x:=0 to xm1 do
 413 ( 6383)         s[x]:=chr(ord(s[x]) and $7f);
 414 ( 6413)       s[marked]:=chr(0);
 415 ( 6436)       end;
 416 ( 6441)     end;
 417 ( 6441)   line:=savel; mark:=0;
 418 ( 6465) end;
 419 ( 6469) 

----------------------------------------------------------------------

R65 COMPILE 4.2: program PEDIT            7/12/23 page 8

 420 ( 6470) proc find(again:boolean);
 421 ( 6470) var pos,x,i:integer;
 422 ( 6473)     ch:char;
 423 ( 6473)     found:boolean;
 424 ( 6473)     s2:cpnt;
 425 ( 6473) 
 426 ( 6473)   proc checkrest;
 427 ( 6473)   var failed:boolean;
 428 ( 6476)       x1:integer;
 429 ( 6476)       s1:cpnt;
 430 ( 6476)   begin
 431 ( 6476)     failed:=false; pos:=2; x1:=x+1;
 432 ( 6496)     while (fs[pos]<>endmark) and (x1<xmax) do begin
 433 ( 6525)       s1:=linepnt[line];
 434 ( 6529)       if s1[x1] <> fs[pos] then failed:=true;
 435 ( 6563)       pos:=pos+1; x1:=x1+1;
 436 ( 6584)       end;
 437 ( 6589)      if (failed=false) and (fs[pos]=endmark)
 438 ( 6611)       then found:=true;
 439 ( 6618)   end;
 440 ( 6622) 
 441 ( 6623) begin
 442 ( 6623)   clrmessage;
 443 ( 6629)   if not again then strcpy(stemp,fs);
 444 ( 6651)   if fs[0]=endmark then begin
 445 ( 6662)     {empty string -> delete all marks}
 446 ( 6665)     clrmarks;
 447 ( 6669)     end
 448 ( 6669)   else begin
 449 ( 6672)     putontop('Searching',36,true);
 450 ( 6694)     found:=false;
 451 ( 6696)     repeat
 452 ( 6700)       x:=0;
 453 ( 6702)       repeat
 454 ( 6706)         pos:=1;
 455 ( 6708)         s2:=linepnt[line];
 456 ( 6716)         if s2[x]=fs[pos] then checkrest;
 457 ( 6752)         x:=x+1;
 458 ( 6758)         until found or (x>=xmax);
 459 ( 6774)       if (line and $0f)=0 then showtop;
 460 ( 6795)       line:=line+1;
 461 ( 6801)       until found or (line>=nlines);
 462 ( 6819)     if found then begin
 463 ( 6827)       line:=line-1; x:=x-1; i:=1;
 464 ( 6854)       s2:=linepnt[line];
 465 ( 6862)       savecx:=x+i;
 466 ( 6874)       s2[marked]:=chr(1);
 467 ( 6887)       while fs[i]<>endmark do begin
 468 ( 6908)         s2[x+i-1]:=chr(ord(s2[x+i-1]) or $80);
 469 ( 6941)          i:=i+1;
 470 ( 6952)         end
 471 ( 6957)       end
 472 ( 6957)     else begin
 473 ( 6963)       line:=nlines-1;
 474 ( 6969)     end;
 475 ( 6974)     showtop;
 476 ( 6978)   end
 477 ( 6978) end;
 478 ( 6978) 
 479 ( 6979) proc insertline;

----------------------------------------------------------------------

R65 COMPILE 4.2: program PEDIT            7/12/23 page 9

 480 ( 6979) var i:integer;
 481 ( 6982)     s1,s2:cpnt;
 482 ( 6982) begin
 483 ( 6982)   if nlines<maxlines-1 then begin
 484 ( 6995)     if line<mark then mark:=mark+1;
 485 ( 7016)     if line<nlines-1 then begin
 486 ( 7033)       for i:=nlines-1 downto line+1 do
 487 ( 7053)         linepnt[i+1]:=linepnt[i];
 488 ( 7074)       end;
 489 ( 7096)     linepnt[line+1]:=rnew;
 490 ( 7109)     s1:=linepnt[line+1]; s2:=linepnt[line];
 491 ( 7132)     for i:=0 to xmax-1 do s1[i]:=' ';
 492 ( 7166)     for i:=curpos to xmax-1 do begin
 493 ( 7205)       s1[i-curpos]:=s2[i]; s2[i]:=' ';
 494 ( 7233)       end;
 495 ( 7237)     line:=line+1; nlines:=nlines+1;
 496 ( 7268)     savecx:=1; chkline; chktop(false); showall;
 497 ( 7295)   end;
 498 ( 7295) end;
 499 ( 7295) 
 500 ( 7296) proc paste;
 501 ( 7296) var l,i,saveline:integer; s1,s2:cpnt;
 502 ( 7299) begin
 503 ( 7299)   saveline:=line;
 504 ( 7301)   if nlines+nmarks<maxlines then begin
 505 ( 7322)     if (line>=mark+nmarks) or
 506 ( 7339)           (line<mark) then begin
 507 ( 7349)       putontop('Pasting',36,true);
 508 ( 7372)       for l:=0 to nmarks-1 do begin
 509 ( 7394)         for i:=nlines-1 downto line do
 510 ( 7405)           linepnt[i+1]:=linepnt[i];
 511 ( 7429)         nlines:=nlines+1;
 512 ( 7457)         if mark>line then mark:=mark+1;
 513 ( 7480)         linepnt[line]:=rnew;
 514 ( 7495)         s1:=linepnt[line];
 515 ( 7503)         s2:=linepnt[mark+l];
 516 ( 7520)         for i:=0 to xmax do s1[i]:=s2[i];
 517 ( 7557)         s1[marked]:=chr($80);
 518 ( 7581)         line:=line+1;
 519 ( 7592)       end;
 520 ( 7597)       showall;
 521 ( 7615)     end else showerror('Cannot paste here');
 522 ( 7644)   end else showerror('Error: Out of memory');
 523 ( 7676)   line:=saveline; chktop(false);
 524 ( 7692) end;
 525 ( 7692) 
 526 ( 7693) proc move;
 527 ( 7693) var l,i,saveline:integer; s1,s2,savpnt:cpnt;
 528 ( 7696) begin
 529 ( 7696)   saveline:=line;
 530 ( 7698)   if (line>=mark+nmarks) or
 531 ( 7720)         (line<mark) then begin
 532 ( 7730)     putontop('Moving',36,true);
 533 ( 7752)     for l:=0 to nmarks-1 do begin
 534 ( 7774)       savpnt:=linepnt[mark];
 535 ( 7778)       if mark>line then begin
 536 ( 7795)         for i:=mark-1 downto line do
 537 ( 7809)           linepnt[i+1]:=linepnt[i];
 538 ( 7833)         linepnt[line]:=savpnt;
 539 ( 7859)         line:=line+1; mark:=mark+1;

----------------------------------------------------------------------

R65 COMPILE 4.2: program PEDIT            7/12/23 page 10

 540 ( 7884)       end else begin
 541 ( 7892)         for i:=mark+1 to line-1 do
 542 ( 7909)           linepnt[i-1]:=linepnt[i];
 543 ( 7930)         linepnt[line-1]:=savpnt;
 544 ( 7959)         saveline:=saveline-1;
 545 ( 7973)       end;
 546 ( 7978)     end;
 547 ( 7978)     showall;
 548 ( 7996)   end else showerror('Cannot move here');
 549 ( 8024)   line:=saveline; mark:=saveline;
 550 ( 8032)   chktop(false);
 551 ( 8048) end;
 552 ( 8048) 
 553 ( 8049) func doesc: boolean;
 554 ( 8049) var ch:char;
 555 ( 8052)     i,j,n:integer;
 556 ( 8052)     s,savl:cpnt;
 557 ( 8052) begin
 558 ( 8052)   clrmessage;
 559 ( 8058)   doesc:=false; savecx:=1;
 560 ( 8066)   getinput(ch,n,stemp);
 561 ( 8096)   if (ch='f') and (stemp[0]<>' ') and
 562 ( 8114)     (strlen(stemp)<>0) then
 563 ( 8130)     showerror('Expected f xxx')
 564 ( 8151)   else if (ch<>'l') and (ch<>'d') and
 565 ( 8174)     (ch<>'c') and (n>0) then
 566 ( 8190)     showerror('n>1 not allowed')
 567 ( 8212)   else begin
 568 ( 8221)     case ch of
 569 ( 8221)       't': begin {top}
 570 ( 8232)              line:=1; chktop(true);
 571 ( 8246)            end;
 572 ( 8246)       'b': begin {bottom}
 573 ( 8256)              line:=nlines-1; chktop(true);
 574 ( 8275)            end;
 575 ( 8275)       'l': begin {goto line}
 576 ( 8285)              line:=n; chkline; chktop(true);
 577 ( 8305)            end;
 578 ( 8305)       'f','a': begin {find string (again)}
 579 ( 8322)              find(ch='a'); chkline; chktop(false);
 580 ( 8347)              showall;
 581 ( 8351)            end;
 582 ( 8351)       'z': begin {clear marks}
 583 ( 8361)              clrmarks; showall;
 584 ( 8369)            end;
 585 ( 8369)       'c': begin {mark lines for copy}
 586 ( 8379)              clrmarks;
 587 ( 8383)              if n<1 then n:=1;
 588 ( 8395)              if n>nlines-line then n:=nlines-line;
 589 ( 8420)              mark:=line;
 590 ( 8429)              nmarks:=n;
 591 ( 8437)              for i:=0 to n-1 do begin
 592 ( 8467)                s:=linepnt[line+i];
 593 ( 8476)                for j:=0 to xmax-1 do
 594 ( 8494)                  s[j]:= chr(ord(s[j]) or $80);
 595 ( 8521)                s[marked]:=chr(1);
 596 ( 8544)              end;
 597 ( 8549)              showall;
 598 ( 8567)            end;
 599 ( 8567)       'p': begin {paste copied lines}

----------------------------------------------------------------------

R65 COMPILE 4.2: program PEDIT            7/12/23 page 11

 600 ( 8577)              if mark=0 then
 601 ( 8583)                showerror('Error: Nothing copied')
 602 ( 8611)              else paste;
 603 ( 8624)            end;
 604 ( 8624)       'm': begin {move copied lines}
 605 ( 8634)              if mark=0 then
 606 ( 8640)                showerror('Error: Nothing copied')
 607 ( 8668)              else move;
 608 ( 8681)            end;
 609 ( 8681)       'd': begin {delete n lines}
 610 ( 8691)              if n<1 then n:=1;
 611 ( 8703)              if line+n=maxlines-3 then
 612 ( 8721)                n:=maxlines-3-line;
 613 ( 8732)              for i:=1 to n do begin
 614 ( 8760)                delline; line:=line+1;
 615 ( 8770)              end;
 616 ( 8775)              chkline; chktop(false); showall;
 617 ( 8805)            end;
 618 ( 8805)       'w': writeoutput; {write output}
 619 ( 8822)       'q': begin {write output and quit}
 620 ( 8829)              writeoutput; doesc:=true;
 621 ( 8835)            end;
 622 ( 8839)       'k': doesc:=true; {kill program}
 623 ( 8858)       '?','h': showerror('tb/l/fg/cpm/d/wqk/?h');
 624 ( 8901)       endmark: begin end
 625 ( 8911)       else showerror('tb/l/faz/cpm/d/wqk/?')
 626 ( 8937)     end {case};
 627 ( 8945)   end;
 628 ( 8945)   clrmessage;
 629 ( 8949) end;
 630 ( 8949) 
 631 ( 8950) proc newline;
 632 ( 8950) begin
 633 ( 8950)   linepnt[nlines]:=rnew; nlines:=nlines+1;
 634 ( 8975) end;
 635 ( 8980) 
 636 ( 8981) proc insert(ch:char;l:integer);
 637 ( 8981) { insert char at start of line (recursive) }
 638 ( 8981) var i,y:integer;
 639 ( 8984)     pnt:cpnt;
 640 ( 8984)     lstch1,lstch2:char;
 641 ( 8984) begin
 642 ( 8984)   if l>=nlines then newline;
 643 ( 9002)   pnt:=linepnt[l];
 644 ( 9006)   lstch1:=chr(ord(pnt[xmax-1]) and $7f);
 645 ( 9028)   lstch2:=chr(ord(pnt[xmax-2]) and $7f);
 646 ( 9047)   if (lstch1<>' ') or (lstch2<>' ')
 647 ( 9065)     then insert(lstch1,l+1);
 648 ( 9087)   for i:=xmax-2 downto 0 do pnt[i+1]:=pnt[i];
 649 ( 9122)   pnt[0]:=ch; y:=l-topline+1;
 650 ( 9163)   if (y>0) and (y<scrlins) then showline(pnt,y);
 651 ( 9200) end;
 652 ( 9200) 
 653 ( 9201) begin {main}
 654 ( 9201)   for i:=0 to maxlines-1 do linepnt[i]:=nil;
 655 ( 9231)   stemp:=new; stemp2:=new; fs:=new; debug:=0;
 656 ( 9281)   setnumlin($0f,$37); write(hom,clrscr);
 657 ( 9301)   putontop('Line xxx of xxx',0,true);
 658 ( 9329)   relpnt:=maxlines-1; mark:=0; savecx:=1;
 659 ( 9347)   clrmessage; readinput; fs[0]:=endmark;

----------------------------------------------------------------------

R65 COMPILE 4.2: program PEDIT            7/12/23 page 12

 660 ( 9363)   putontop(title,36,true);
 661 ( 9381)   topline:= 1; line:=1; showall; stop:=false;
 662 ( 9399)   repeat
 663 ( 9403)     showtop; chi := edlin(linepnt[line]);
 664 ( 9423)     if printable(chi) then insert(chi,line+1)
 665 ( 9452)     else case chi of
 666 ( 9462)       cup,cdown: begin
 667 ( 9480)              if chi=cup then line:=line-1
 668 ( 9494)              else line:=line+1;
 669 ( 9510)              chkline;
 670 ( 9519)              if curpos>lastpos(line)+2 then
 671 ( 9536)                savecx:=lastpos(line)+2;
 672 ( 9555)              chktop(true);
 673 ( 9568)            end;
 674 ( 9568)       pgup: begin
 675 ( 9578)              line:=line-15; chkline; chktop(true);
 676 ( 9601)            end;
 677 ( 9601)       pgdown: begin
 678 ( 9611)              line:=line+15; chkline; chktop(true);
 679 ( 9634)            end;
 680 ( 9634)       rup: if (topline>1) then begin
 681 ( 9651)              topline:=topline-1;chktop(false);showall;
 682 ( 9677)            end;
 683 ( 9677)       rdown: if (topline<nlines-15) then begin
 684 ( 9699)              topline:=topline+1;chktop(false);showall;
 685 ( 9725)            end;
 686 ( 9725)       hom: begin
 687 ( 9735)              line:=1; savecx:=1; chktop(true);
 688 ( 9755)            end;
 689 ( 9755)       pgend: begin
 690 ( 9765)              line:=nlines-1; savecx:=1; chktop(true);
 691 ( 9790)            end;
 692 ( 9790)       cr:  insertline;
 693 ( 9804)       esc: if doesc then stop:=true
 694 ( 9823)     end {case};
 695 ( 9831)     until stop;
 696 ( 9831)   setnumlin($29,$2f);
 697 ( 9848)   writeln(hom, clrscr);
 698 ( 9860)   dummy:=freedsk(fildrv,true);
 699 ( 9873) end.
 700 ( 9877) 

End compile

Code lenght:          9876
Compiler stack size:  132
Ident stack size:     191
Pascal errors:        0

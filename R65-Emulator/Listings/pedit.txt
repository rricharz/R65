
R65 Pascal program PEDIT           4/11/23     page 1


                   1 (    4) program pedit;
                   2 (    4) 
                   3 (    4) { Pascal editor, original 1980 RR
                   4 (    4)   rewritten 2023 RR for R65 system }
                   5 (    4) 
                   6 (    4) uses syslib, arglib, strlib;
                   7 ( 2087) 
                   8 ( 2087) const maxlines = 420; xmax=56;
                   9 ( 2090)     scrlins = 16; maxfs = 20; line1x = 20;
                  10 ( 2090)     eol    = chr($00); esc    = chr($00);
                  11 ( 2090)     pgdown = chr($02); pgup   = chr($08);
                  12 ( 2090)     pgend  = chr($10); clrscr = chr($11);
                  13 ( 2090)     clrlin = chr($17); cdown  = chr($18);
                  14 ( 2090)     cup    = chr($1a); cleft  = chr($03);
                  15 ( 2090)     inschr = chr($15); delchr = chr($19);
                  16 ( 2090)     rubout = chr($5f); cright = chr($16);
                  17 ( 2090) 
                  18 ( 2090) mem curlin = $ed: integer&;
                  19 ( 2090)     curpos = $ee: integer&;
                  20 ( 2090)     video  = $400: array[900] of char&;
                  21 ( 2090) 
                  22 ( 2090) var line, nlines, topline: integer;
                  23 ( 2090)     name: array[15] of char;
                  24 ( 2090)     fno: file;
                  25 ( 2090)     chi : char;
                  26 ( 2090)     cyclus,drive,mark,nmark,savecx: integer;
                  27 ( 2090)     default, iseof, exit: boolean;
                  28 ( 2090)     fs: array[maxfs] of char;
                  29 ( 2090)     linepnt: array[maxlines] of cpnt;
                  30 ( 2090)     relpnt:  integer;
                  31 ( 2090)     stemp: cpnt;
                  32 ( 2090) 
                  33 ( 2090) proc putontop(s:cpnt;pos:integer;inv:boolean);
                  34 ( 2090) var i:integer;
                  35 ( 2093) begin
                  36 ( 2093)   i:=0; { faster version: if not in loop }
                  37 ( 2101)   if inv then while s[i]<>chr(0) do begin
                  38 ( 2125)     video[i+pos]:=chr(ord(s[i]) or 128); i:=i+1;
                  39 ( 2161)   end else while s[i]<>chr(0) do begin
                  40 ( 2189)     video[i+pos]:=s[i]; i:=i+1;
                  41 ( 2221)   end;
                  42 ( 2226) end;
                  43 ( 2229) 
                  44 ( 2230) func new:cpnt;
                  45 ( 2230) begin
                  46 ( 2230)   if relpnt<maxlines-1 then begin
                  47 ( 2246)     relpnt:=relpnt+1; new:=linepnt[relpnt];
                  48 ( 2264)   end else  {assign new memory}
                  49 ( 2275)     new:=strnew;
                  50 ( 2281) end;
                  51 ( 2285) 
                  52 ( 2286) proc release(p:cpnt);
                  53 ( 2286) begin
                  54 ( 2286)   linepnt[relpnt]:=p; relpnt:=relpnt-1;
                  55 ( 2309) end;
                  56 ( 2314) 
                  57 ( 2315) proc setnumlin(l,c:integer);
                  58 ( 2315) mem numlin=$1789: integer&;
                  59 ( 2318)     numchr=$178a: integer&;

----------------------------------------------------------------------

R65 Pascal program PEDIT           4/11/23     page 2

                  60 ( 2318) begin
                  61 ( 2318)   numlin:=l; numchr:=c;
                  62 ( 2329) end;
                  63 ( 2338) 
                  64 ( 2339) func column:integer;
                  65 ( 2339) begin
                  66 ( 2339)   column:=line-topline+1;
                  67 ( 2355) end;
                  68 ( 2360) 
                  69 ( 2361) func readline(fin: file; pnt: cpnt): boolean;
                  70 ( 2361) const alteof=chr(127);
                  71 ( 2364) var ch1: char;
                  72 ( 2364)     pos: integer;
                  73 ( 2364) begin
                  74 ( 2364)   pos := 0; read(@fno,ch1);
                  75 ( 2382)   while (ch1>=' ') and (ch1<>alteof) and
                  76 ( 2397)       (pos<xmax-1) do begin
                  77 ( 2412)     pnt[pos]:=ch1; pos:=pos+1; read(@fno,ch1);
                  78 ( 2445)     end;
                  79 ( 2446)   while pos<xmax do begin
                  80 ( 2459)     pnt[pos]:=' '; pos:=pos+1;
                  81 ( 2475)   end;
                  82 ( 2480)   readline:=(ch1=eof) or (ch1=alteof);
                  83 ( 2497) end;
                  84 ( 2502) 
                  85 ( 2503) proc goto(xpos, ypos: integer);
                  86 ( 2503) begin
                  87 ( 2503)   curlin:=ypos; { top on line 2 }
                  88 ( 2516)   if curlin>15 then curlin:=15;
                  89 ( 2527)   curpos:=xpos-1;
                  90 ( 2537) end;
                  91 ( 2542) 
                  92 ( 2543) proc showline(pnt:cpnt; y: integer);
                  93 ( 2543) var lstart,pos: integer;
                  94 ( 2546) begin
                  95 ( 2546)   lstart:=y*xmax;
                  96 ( 2554)   for pos:=0 to xmax-1 do
                  97 ( 2569)     video[lstart+pos]:=pnt[pos];
                  98 ( 2596) end;
                  99 ( 2619) 
                 100 ( 2620) proc showtop;
                 101 ( 2620) begin
                 102 ( 2620)   intstr(line,stemp,3); putontop(stemp,5,true);
                 103 ( 2655)   intstr(nlines-1,stemp,3); putontop(stemp,12,true);
                 104 ( 2688) end;
                 105 ( 2688) 
                 106 ( 2689) proc showerror(s:array[15] of char);
                 107 ( 2689) var i: integer;
                 108 ( 2692)     ch: char;
                 109 ( 2692) begin
                 110 ( 2692)   goto(line1x,0); write(invvid,clrlin);
                 111 ( 2710)   for i:=0 to 15 do write(s[i]);
                 112 ( 2736)   read(@input,ch);
                 113 ( 2758)   goto(line1x,0); write(norvid,clrlin);
                 114 ( 2775) end;
                 115 ( 2775) 
                 116 ( 2776) proc showall;
                 117 ( 2776) var lstart,y,i,l,lstart: integer;
                 118 ( 2779) begin
                 119 ( 2779)   showtop;

----------------------------------------------------------------------

R65 Pascal program PEDIT           4/11/23     page 3

                 120 ( 2785)   for y:=1 to scrlins-1 do begin
                 121 ( 2805)     l:=topline-1+y; lstart:=y*xmax;
                 122 ( 2827)     if l<nlines then
                 123 ( 2836)       showline(linepnt[l],y)
                 124 ( 2852)     else
                 125 ( 2862)       for i:=0 to xmax-1 do
                 126 ( 2875)         video[lstart+i]:=' ';
                 127 ( 2896)   end;
                 128 ( 2917) end;
                 129 ( 2931) 
                 130 ( 2932) proc updline(pnt: cpnt; lstart:integer);
                 131 ( 2932) var pos: integer;
                 132 ( 2935) begin
                 133 ( 2935)   for pos:=0 to xmax-1 do
                 134 ( 2947)     pnt[pos]:=video[lstart+pos];
                 135 ( 2973) end;
                 136 ( 2993) 
                 137 ( 2994) func lastpos(l:integer):integer;
                 138 ( 2994) var endpos:integer;
                 139 ( 2997)     s:cpnt;
                 140 ( 2997) begin
                 141 ( 2997)   endpos:=xmax-1;
                 142 ( 3003)   s:=linepnt[l]
                 143 ( 3008)   while (s[endpos]=chr(ord(' ') and $7f))
                 144 ( 3035)     and (endpos>0) do endpos:=endpos-1;
                 145 ( 3054)   lastpos:=endpos;
                 146 ( 3062) end;
                 147 ( 3070) 
                 148 ( 3071) proc chkline;
                 149 ( 3071) begin
                 150 ( 3071)   if line<1 then line:=1
                 151 ( 3086)   else if line>nlines-1 then line:=nlines-1;
                 152 ( 3116) end;
                 153 ( 3121) 
                 154 ( 3122) proc chktop(show: boolean);
                 155 ( 3122) var savetop,bottom:integer;
                 156 ( 3125) begin
                 157 ( 3125)   savetop:=topline; bottom:=topline+scrlins-1;
                 158 ( 3144)   if line<topline then topline:=line;
                 159 ( 3161)   if line>=bottom then
                 160 ( 3173)     topline:=line-scrlins+2;
                 161 ( 3190)   if show and (savetop<>topline) then showall;
                 162 ( 3216) end;
                 163 ( 3216) 
                 164 ( 3217) proc delline;
                 165 ( 3217) var i:integer; savpnt:cpnt;
                 166 ( 3220) begin
                 167 ( 3220)   chkline; savpnt:=linepnt[line];
                 168 ( 3230)   if line<mark then mark:=mark-1
                 169 ( 3254)   else if line<mark+nmark then nmark:=nmark-1;
                 170 ( 3287)   for i:=line to nlines-2 do
                 171 ( 3306)     linepnt[i]:=linepnt[i+1];
                 172 ( 3327)   release(savpnt); nlines:=nlines-1;
                 173 ( 3365)   chkline; chktop(false);
                 174 ( 3382)   line:=line-1; savecx:=1;
                 175 ( 3395) end;
                 176 ( 3399) 
                 177 ( 3400) proc join;
                 178 ( 3400) var p,p1,p2,pm:integer;
                 179 ( 3403)     s1,s2:cpnt;

----------------------------------------------------------------------

R65 Pascal program PEDIT           4/11/23     page 4

                 180 ( 3403) begin
                 181 ( 3403)   p1:=lastpos(line-1); p2:=lastpos(line);
                 182 ( 3436)   s1:=linepnt[line-1]; s2:=linepnt[line];
                 183 ( 3459)   for p:=p1+1 to xmax-1 do s1[p]:=s2[p-p1-1];
                 184 ( 3512)   if p1+p2<xmax then delline
                 185 ( 3544)   else begin
                 186 ( 3554)     pm:=xmax-p1;
                 187 ( 3556)     for p:=0 to xmax-pm do s2[+p]:=s2[p+pm-1];
                 188 ( 3607)     for p:=xmax-pm+1 to xmax-1 do s2[p]:=' ';
                 189 ( 3661)     line:=line-1;
                 190 ( 3685)   end;
                 191 ( 3690)   savecx:=p1+2; chkline; chktop(false); showall;
                 192 ( 3717) end;
                 193 ( 3717) 
                 194 ( 3718) func edlin(pnt: cpnt): char;
                 195 ( 3718) const key    = @1;
                 196 ( 3721) var   ch1: char;
                 197 ( 3721)       exit: boolean;
                 198 ( 3721)       lstart: integer;
                 199 ( 3721) begin
                 200 ( 3721)   goto(savecx,column);
                 201 ( 3739)   if savecx=1 then write(cright,cleft)
                 202 ( 3754)   else write(cleft,cright); {to update cursor}
                 203 ( 3764)   exit:=false; lstart:=column*xmax;
                 204 ( 3778)   repeat
                 205 ( 3783)     read(@key,ch1);
                 206 ( 3791)     case ch1 of
                 207 ( 3792)       inschr: if video[lstart+xmax-1]
                 208 ( 3815)                         =' ' then write(ch1);
                 209 ( 3829)       delchr,rubout: if (curpos=0) and (line>1)
                 210 ( 3858)              then begin
                 211 ( 3860)                updline(pnt,lstart) ;join; exit:=true;
                 212 ( 3883)                end
                 213 ( 3887)              else write(cleft,delchr);
                 214 ( 3896)       cup,cdown,esc,cr,
                 215 ( 3924)       pgup,pgdown,hom,pgend: exit:=true
                 216 ( 3955)       else begin
                 217 ( 3964)              if (ch1>=' ') and (ch1<chr($7f))
                 218 ( 3977)                then write(inschr);
                 219 ( 3986)              write(ch1);
                 220 ( 3991)              if curpos>=xmax-1 then
                 221 ( 3998)                write(cleft);
                 222 ( 4006)            end
                 223 ( 4006)     end {case};
                 224 ( 4008)     until exit;
                 225 ( 4008)   updline(pnt,lstart);
                 226 ( 4029)   edlin := ch1;
                 227 ( 4029)   if (ch1<>delchr) and (ch1<>rubout) then
                 228 ( 4051)     savecx:=curpos+1;
                 229 ( 4060) end;
                 230 ( 4065) 
                 231 ( 4066) proc readinput;
                 232 ( 4066) var i,pend:integer;
                 233 ( 4069) begin
                 234 ( 4069)   cyclus:=0; drive:=1;
                 235 ( 4079)   goto(1,1); write(clrscr); goto(1,1);
                 236 ( 4106)   agetstring(name,default,cyclus,drive);
                 237 ( 4146)   asetfile(name,cyclus,drive,'P');
                 238 ( 4168)   openr(fno); setnumlin($0f,$37);
                 239 ( 4184)   nlines := 1; line:=1; topline:=1;

----------------------------------------------------------------------

R65 Pascal program PEDIT           4/11/23     page 5

                 240 ( 4198)   pend:=15; while name[pend]=' ' do pend:=pend-1;
                 241 ( 4228)   for i:=0 to pend do stemp[i]:=name[i];
                 242 ( 4263)   stemp[pend+1]:=chr(0);
                 243 ( 4294)   stradd(':P.',stemp);
                 244 ( 4315)   putontop(stemp,26,true);
                 245 ( 4329)   repeat
                 246 ( 4329)     linepnt[nlines] := strnew;
                 247 ( 4339)     iseof := readline(fno, linepnt[nlines]);
                 248 ( 4363)     nlines := nlines+1;
                 249 ( 4373)     showtop; putontop('Reading',16,true);
                 250 ( 4402)     until iseof or (nlines >= maxlines-1);
                 251 ( 4417)   if nlines >= maxlines-1 then
                 252 ( 4430)       showerror('too many lines  ');
                 253 ( 4459)   close(fno);
                 254 ( 4465)   putontop('       ',16,false);
                 255 ( 4485)   showall;
                 256 ( 4489) end;
                 257 ( 4489) 
                 258 ( 4490) proc writeoutput;
                 259 ( 4490) var pos,endpos:integer;s,saveline:cpnt;
                 260 ( 4493) begin
                 261 ( 4493)   cyclus:=0; drive:=1;
                 262 ( 4503)   goto(1,1); write(clrscr);
                 263 ( 4520)   asetfile(name,cyclus,drive,'P');
                 264 ( 4542)   openw(fno);
                 265 ( 4548)   for line:=1 to nlines-1 do begin
                 266 ( 4570)     showtop; putontop('Writing',16,true);
                 267 ( 4594)     endpos:=lastpos(line);
                 268 ( 4606)     s:=linepnt[line];
                 269 ( 4614)     for pos:=0 to endpos do
                 270 ( 4628)       write(@fno,chr(ord(s[pos]) and $7f));
                 271 ( 4662)     if (line<nlines-1) or (endpos<>0) then
                 272 ( 4695)       write(@fno,cr);
                 273 ( 4708)   end;
                 274 ( 4708)   close(fno); line:=nlines-1;
                 275 ( 4734)   putontop('       ',16,false);
                 276 ( 4759)   showall;
                 277 ( 4763) end;
                 278 ( 4763) 
                 279 ( 4764) proc clrmarks;
                 280 ( 4764) var x,savel:integer; s:cpnt;
                 281 ( 4767) begin
                 282 ( 4767)   savel:=line;
                 283 ( 4769)   for line:=1 to nlines-1 do begin
                 284 ( 4799)     s:=linepnt[line];
                 285 ( 4803)     for x:=0 to xmax-1 do
                 286 ( 4821)       s[x]:=chr(ord(s[x]) and $7f);
                 287 ( 4848)     showtop;
                 288 ( 4871)     end;
                 289 ( 4871)   line:=savel; mark:=0; nmark:=0;
                 290 ( 4901) end;
                 291 ( 4905) 
                 292 ( 4906) proc find(again:boolean);
                 293 ( 4906) var pos,x,i:integer;
                 294 ( 4909)     ch:char;
                 295 ( 4909)     found:boolean;
                 296 ( 4909)     s2:cpnt;
                 297 ( 4909) 
                 298 ( 4909)   proc checkrest;
                 299 ( 4909)   var failed:boolean;

----------------------------------------------------------------------

R65 Pascal program PEDIT           4/11/23     page 6

                 300 ( 4912)       x1:integer;
                 301 ( 4912)       s1:cpnt;
                 302 ( 4912)   begin
                 303 ( 4912)     failed:=false; pos:=1; x1:=x+1;
                 304 ( 4932)     while (fs[pos]<>cr) and (pos<maxfs)
                 305 ( 4954)       and (x1<xmax) do begin
                 306 ( 4967)       s1:=linepnt[line];
                 307 ( 4971)       if s1[x1] <> fs[pos] then failed:=true;
                 308 ( 5003)       pos:=pos+1; x1:=x1+1;
                 309 ( 5024)       end;
                 310 ( 5029)      if (failed=false) and (fs[pos]=cr)
                 311 ( 5049)       then found:=true;
                 312 ( 5056)   end;
                 313 ( 5060) 
                 314 ( 5061) begin
                 315 ( 5061)   pos:=0;
                 316 ( 5065)   if not again then begin
                 317 ( 5074)     goto(line1x,0);
                 318 ( 5087)     write(invvid,'find?',clrlin);
                 319 ( 5099)     repeat
                 320 ( 5099)       read(@input,ch); fs[pos]:=ch; pos:=pos+1;
                 321 ( 5126)       until (ch=cr) or (pos>=maxfs);
                 322 ( 5145)     write(norvid);
                 323 ( 5152)     end;
                 324 ( 5152)   if fs[0]=cr then begin
                 325 ( 5161)     {empty string -> delete all marks}
                 326 ( 5164)     putontop('Clearing marks',16,true);
                 327 ( 5191)     clrmarks; showall;
                 328 ( 5199)     putontop('              ',16,false);
                 329 ( 5226)     end
                 330 ( 5226)   else begin
                 331 ( 5229)     putontop('Searching',16,true);
                 332 ( 5251)     found:=false;
                 333 ( 5253)     repeat
                 334 ( 5257)       x:=0;
                 335 ( 5259)       repeat
                 336 ( 5263)         pos:=0;
                 337 ( 5265)         s2:=linepnt[line];
                 338 ( 5273)         if s2[x]=fs[pos] then checkrest;
                 339 ( 5307)         x:=x+1;
                 340 ( 5313)         until found or (x>=xmax);
                 341 ( 5329)       showtop; line:=line+1;
                 342 ( 5343)       until found or (line>=nlines);
                 343 ( 5361)     if found then begin
                 344 ( 5369)       line:=line-1; x:=x-1; i:=0;
                 345 ( 5396)       s2:=linepnt[line];
                 346 ( 5404)       while fs[i]<>cr do begin {*4*}
                 347 ( 5426)         s2[x+i]:=chr(ord(s2[x+i]) or $80);
                 348 ( 5453)          i:=i+1;
                 349 ( 5464)         end
                 350 ( 5469)       end
                 351 ( 5469)     else begin
                 352 ( 5475)       line:=nlines-1;
                 353 ( 5481)     end;
                 354 ( 5486)     putontop('         ',16,false);
                 355 ( 5508)   end
                 356 ( 5508) end;
                 357 ( 5508) 
                 358 ( 5509) proc insertline;
                 359 ( 5509) var i:integer;

----------------------------------------------------------------------

R65 Pascal program PEDIT           4/11/23     page 7

                 360 ( 5512)     s1,s2:cpnt;
                 361 ( 5512) begin
                 362 ( 5512)   if nlines<maxlines-1 then begin
                 363 ( 5525)     if line<mark then mark:=mark+1
                 364 ( 5544)     else if line<mark+nmark then nmark:=nmark+1;
                 365 ( 5577)     if line<nlines-1 then begin
                 366 ( 5594)       for i:=nlines-1 downto line+1 do
                 367 ( 5614)         linepnt[i+1]:=linepnt[i];
                 368 ( 5635)       end;
                 369 ( 5657)     linepnt[line+1]:=strnew;
                 370 ( 5670)     s1:=linepnt[line+1]; s2:=linepnt[line];
                 371 ( 5693)     for i:=0 to xmax-1 do s1[i]:=' ';
                 372 ( 5727)     for i:=curpos to xmax-1 do begin
                 373 ( 5766)       s1[i-curpos]:=s2[i]; s2[i]:=' ';
                 374 ( 5794)       end;
                 375 ( 5798)     line:=line+1; nlines:=nlines+1;
                 376 ( 5829)     savecx:=1; chkline; chktop(false); showall;
                 377 ( 5856)   end;
                 378 ( 5856) end;
                 379 ( 5856) 
                 380 ( 5857) proc paste;
                 381 ( 5857) var l,i:integer; s1,s2:cpnt;
                 382 ( 5860) begin
                 383 ( 5860)   for i:=nlines-1 downto line do
                 384 ( 5873)     linepnt[i+nmark]:=linepnt[i];
                 385 ( 5899)   nlines:=nlines+nmark;
                 386 ( 5925)   if mark>line then mark:=mark+nmark;
                 387 ( 5950)   for l:=mark to mark+nmark-1 do begin
                 388 ( 5988)     linepnt[line]:=strnew;
                 389 ( 5998)     s1:=linepnt[line]; s2:=linepnt[l];
                 390 ( 6018)     for i:=0 to xmax-1 do s1[i]:=s2[i];
                 391 ( 6058)     line:=line+1;
                 392 ( 6084)   end;
                 393 ( 6089)   showall;
                 394 ( 6107) end;
                 395 ( 6107) 
                 396 ( 6108) proc move;
                 397 ( 6108) var i,j,saveline:integer; savepnt:cpnt;
                 398 ( 6111) begin
                 399 ( 6111)   saveline:=line; { insert above}
                 400 ( 6121)   if line>=mark+nmark then begin
                 401 ( 6135)     mark:=mark+nmark-1;
                 402 ( 6149)     for j:=0 to nmark-1 do begin
                 403 ( 6176)       savepnt:=linepnt[mark];
                 404 ( 6180)       for i:=mark to line-1 do
                 405 ( 6202)         linepnt[i]:=linepnt[i+1];
                 406 ( 6223)       mark:=mark-1; line:=line-1;
                 407 ( 6262)       linepnt[line]:=savepnt;
                 408 ( 6271)     end;
                 409 ( 6279)   end else if line<mark then begin
                 410 ( 6305)     for j:=0 to nmark-1 do begin
                 411 ( 6330)       savepnt:=linepnt[mark];
                 412 ( 6334)       for i:=mark downto line+1 do
                 413 ( 6356)         linepnt[i]:=linepnt[i-1];
                 414 ( 6377)       linepnt[line]:=savepnt;
                 415 ( 6403)       mark:=mark+1; line:=line+1;
                 416 ( 6428)     end;
                 417 ( 6433)   end else showerror('move inside move');
                 418 ( 6474)  mark:=saveline; line:=saveline; showall;
                 419 ( 6494) end;

----------------------------------------------------------------------

R65 Pascal program PEDIT           4/11/23     page 8

                 420 ( 6494) 
                 421 ( 6495) func doesc: boolean;
                 422 ( 6495) var ch:char;
                 423 ( 6498)     i,n:integer;
                 424 ( 6498)     s,savl:cpnt;
                 425 ( 6498) begin
                 426 ( 6498)   doesc:=false; goto(line1x,0); savecx:=1;
                 427 ( 6518)   write(invvid,'t,b,ln,f,g,cn,p,m,dn,w,q,k?');
                 428 ( 6553)   read(@input,ch); if ch<>cr then read(@input,n);
                 429 ( 6580)   case ch of
                 430 ( 6581)     't': begin {top}
                 431 ( 6592)            line:=1; chktop(true);
                 432 ( 6606)          end;
                 433 ( 6606)     'b': begin {bottom}
                 434 ( 6616)            line:=nlines-1; chktop(true);
                 435 ( 6635)          end;
                 436 ( 6635)     'l': begin {line number}
                 437 ( 6645)            line:=n; chkline; chktop(true);
                 438 ( 6665)          end;
                 439 ( 6665)     'f','g': begin {find string}
                 440 ( 6682)            find(ch='g'); chkline; chktop(false);
                 441 ( 6707)            showall;
                 442 ( 6711)          end;
                 443 ( 6711)     'c': begin {mark lines for copy}
                 444 ( 6721)            if n<1 then n:=1;
                 445 ( 6733)            if line+n>= nlines-1 then
                 446 ( 6752)              showerror('too many lines  ')
                 447 ( 6775)            else begin
                 448 ( 6784)              mark:=line; nmark:=n;
                 449 ( 6792)              for line:=mark to mark+nmark-1 do begin
                 450 ( 6829)                s:=linepnt[line];
                 451 ( 6833)                for i:=0 to xmax-1 do
                 452 ( 6851)                  s[i]:= chr(ord(s[i]) or $80);
                 453 ( 6878)              end;
                 454 ( 6897)              line:=mark;
                 455 ( 6911)            end;
                 456 ( 6919)            showall;
                 457 ( 6923)          end;
                 458 ( 6923)     'p': begin {paste marked lines}
                 459 ( 6933)            if mark=0 then showerror('nothing marked  ')
                 460 ( 6961) 
                 461 ( 6967)            else begin
                 462 ( 6970) 
                 463 ( 6970)              if nlines+nmark>=maxlines then
                 464 ( 6982)                showerror('too many lines  ')
                 465 ( 7004)              else paste;
                 466 ( 7017)            end;
                 467 ( 7017)          end;
                 468 ( 7017)     'm': begin {move marked lines }
                 469 ( 7027)            if mark=0 then showerror('nothing marked  ')
                 470 ( 7055) 
                 471 ( 7061)            else move;
                 472 ( 7068) 
                 473 ( 7068)          end;
                 474 ( 7068)     'd': begin {delete n lines}
                 475 ( 7078)            if n<1 then n:=1;
                 476 ( 7090)            if line+n=maxlines-3 then
                 477 ( 7108)              n:=maxlines-3-line;
                 478 ( 7119)            for i:=1 to n do begin
                 479 ( 7147)              delline; line:=line+1;

----------------------------------------------------------------------

R65 Pascal program PEDIT           4/11/23     page 9

                 480 ( 7157)            end;
                 481 ( 7162)            chkline; chktop(false); showall;
                 482 ( 7192)          end;
                 483 ( 7192)     'w': writeoutput; {write output}
                 484 ( 7209)     'q': begin {write output and quit}
                 485 ( 7216)            writeoutput; doesc:=true;
                 486 ( 7222)          end;
                 487 ( 7226)     'k': doesc:=true {kill program}
                 488 ( 7238)     else showerror('unknown escape  ')
                 489 ( 7263)   end {case};
                 490 ( 7271)   goto(line1x,0); write(norvid,clrlin);
                 491 ( 7287) end;
                 492 ( 7287) 
                 493 ( 7288) begin {main}
                 494 ( 7288)   stemp:=strnew;
                 495 ( 7297)   write(hom,clrscr);
                 496 ( 7307)   putontop('Line xxx of xxx ',0,true);
                 497 ( 7336)   relpnt:=maxlines-1;
                 498 ( 7341)   mark:=0; nmark:=0; savecx:=1;
                 499 ( 7360)   readinput; fs[0]:=chr(0);
                 500 ( 7372)   topline:= 1; line:=1; showall; exit:=false;
                 501 ( 7395)   repeat
                 502 ( 7399)     showtop; chi := edlin(linepnt[line]);
                 503 ( 7419)     case chi of
                 504 ( 7423)       cup: begin
                 505 ( 7434)              line:=line-1; chkline; chktop(true);
                 506 ( 7457)            end;
                 507 ( 7457)       cdown: begin
                 508 ( 7467)              line:=line+1; chkline; chktop(true);
                 509 ( 7490)            end;
                 510 ( 7490)       pgup: begin
                 511 ( 7500)              line:=line-15; chkline; chktop(true);
                 512 ( 7523)            end;
                 513 ( 7523)       pgdown: begin
                 514 ( 7533)              line:=line+15; chkline; chktop(true);
                 515 ( 7556)            end;
                 516 ( 7556)       hom: begin
                 517 ( 7566)              line:=1; savecx:=1; chktop(true);
                 518 ( 7586)            end;
                 519 ( 7586)       pgend: begin
                 520 ( 7596)              line:=nlines-1; savecx:=1; chktop(true);
                 521 ( 7621)            end;
                 522 ( 7621)       cr:  insertline;
                 523 ( 7635)       esc: if doesc then exit:=true
                 524 ( 7654)     end {case};
                 525 ( 7662)     until exit;
                 526 ( 7662)   setnumlin($29,$2f);
                 527 ( 7679)   writeln(hom, clrscr, 'closing...');
                 528 ( 7702) end.
                 529 ( 7702) 

End compile

Code lenght:          7701
Compiler stack size:  106
Ident stack size:     162
Pascal errors:        0

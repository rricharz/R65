
R65 Pascal program PEDIT           5/11/23     page 1


                   1 (    4) program pedit;
                   2 (    4) 
                   3 (    4) { Pascal editor, original 1980 RR
                   4 (    4)   rewritten 2023 RR for R65 system }
                   5 (    4) 
                   6 (    4) uses syslib, arglib, strlib;
                   7 ( 2183) 
                   8 ( 2183) const maxlines = 420; xmax=56;
                   9 ( 2186)     scrlins = 16;
                  10 ( 2186)     eol    = chr($00); esc    = chr($00);
                  11 ( 2186)     pgdown = chr($02); pgup   = chr($08);
                  12 ( 2186)     pgend  = chr($10); clrscr = chr($11);
                  13 ( 2186)     clrlin = chr($17); cdown  = chr($18);
                  14 ( 2186)     cup    = chr($1a); cleft  = chr($03);
                  15 ( 2186)     inschr = chr($15); delchr = chr($19);
                  16 ( 2186)     rubout = chr($5f); cright = chr($16);
                  17 ( 2186)     mlenght   = 19; inpx=37;
                  18 ( 2186) 
                  19 ( 2186) mem curlin  = $ed: integer&;
                  20 ( 2186)     curpos  = $ee: integer&;
                  21 ( 2186)     filcyc  = $311: integer&;
                  22 ( 2186)     video   = $400: array[900] of char&;
                  23 ( 2186)     top     = $400: array[xmax] of integer&;
                  24 ( 2186) 
                  25 ( 2186) var line,nlines,topline,i: integer;
                  26 ( 2186)     name: array[15] of char;
                  27 ( 2186)     fno: file;
                  28 ( 2186)     chi : char;
                  29 ( 2186)     cyclus,drive,mark,nmark,savecx: integer;
                  30 ( 2186)     default, iseof, exit: boolean;
                  31 ( 2186)     fs: cpnt;
                  32 ( 2186)     linepnt: array[maxlines] of cpnt;
                  33 ( 2186)     relpnt:  integer;
                  34 ( 2186)     stemp,stemp2: cpnt;
                  35 ( 2186) 
                  36 ( 2186) proc putontop(s:cpnt;pos:integer;inv:boolean);
                  37 ( 2186) var i:integer;
                  38 ( 2189) begin
                  39 ( 2189)   i:=0; { faster version: if not in loop }
                  40 ( 2197)   if inv then while s[i]<>chr(0) do begin
                  41 ( 2221)     top[i+pos]:=ord(s[i]) or 128; i:=i+1;
                  42 ( 2256)   end else while s[i]<>chr(0) do begin
                  43 ( 2284)     top[i+pos]:=ord(s[i]); i:=i+1;
                  44 ( 2316)   end;
                  45 ( 2321) end;
                  46 ( 2324) 
                  47 ( 2325) func new:cpnt;
                  48 ( 2325) begin
                  49 ( 2325)   if relpnt<maxlines-1 then begin
                  50 ( 2341)     relpnt:=relpnt+1; new:=linepnt[relpnt];
                  51 ( 2359)   end else  {assign new memory}
                  52 ( 2370)     new:=strnew;
                  53 ( 2376) end;
                  54 ( 2380) 
                  55 ( 2381) proc release(p:cpnt);
                  56 ( 2381) begin
                  57 ( 2381)   linepnt[relpnt]:=p; relpnt:=relpnt-1;
                  58 ( 2404) end;
                  59 ( 2409) 

----------------------------------------------------------------------

R65 Pascal program PEDIT           5/11/23     page 2

                  60 ( 2410) proc setnumlin(l,c:integer);
                  61 ( 2410) mem numlin=$1789: integer&;
                  62 ( 2413)     numchr=$178a: integer&;
                  63 ( 2413) begin
                  64 ( 2413)   numlin:=l; numchr:=c;
                  65 ( 2424) end;
                  66 ( 2433) 
                  67 ( 2434) func column:integer;
                  68 ( 2434) begin
                  69 ( 2434)   column:=line-topline+1;
                  70 ( 2450) end;
                  71 ( 2455) 
                  72 ( 2456) proc goto(xpos, ypos: integer);
                  73 ( 2456) begin
                  74 ( 2456)   curlin:=ypos; { top on line 2 }
                  75 ( 2469)   if curlin>15 then curlin:=15;
                  76 ( 2480)   curpos:=xpos-1;
                  77 ( 2490) end;
                  78 ( 2495) 
                  79 ( 2496) proc getinput(var n:integer; s:cpnt);
                  80 ( 2496) var i,j,stop:integer; ch: char;
                  81 ( 2499) begin
                  82 ( 2499)   goto(inpx,0); write(chr(ord(':') or 128));
                  83 ( 2518)   read(@key,ch); i:=0;
                  84 ( 2529)   while (ch<>chr(13)) do begin
                  85 ( 2544)     if (ch=rubout) then begin
                  86 ( 2551)       if i>0 then i:=i-1; goto(i+inpx+1,0);
                  87 ( 2593)       write(chr(ord(' ') or 128),cleft);
                  88 ( 2603)     end else if (ch>=' ') and (ch<=chr($7d)) and
                  89 ( 2621)       (inpx+i<xmax-1) then begin
                  90 ( 2636)       goto(i+inpx+1,0);
                  91 ( 2657)       write(chr(ord(ch) or 128)); i:=i+1;
                  92 ( 2672)     end;
                  93 ( 2677)     read(@key,ch);
                  94 ( 2685)   end;
                  95 ( 2686)   stop:=i+inpx;
                  96 ( 2695)   i:=inpx; n:=0;
                  97 ( 2708)   while ((top[i] and 127)>=ord('0')) and
                  98 ( 2727)     ((top[i] and 127)<=ord('9')) and
                  99 ( 2742)     (i<stop) do begin
                 100 ( 2756)     n:=10*n+(top[i] and 127)-ord('0');
                 101 ( 2778)     i:=i+1;
                 102 ( 2789)   end;
                 103 ( 2794)   j:=0;
                 104 ( 2799)   while i<stop do begin
                 105 ( 2815)     s[j]:=chr(top[i] and 127); i:=i+1; j:=j+1;
                 106 ( 2853)   end;
                 107 ( 2858)   s[j]:=chr(0);
                 108 ( 2867) end;
                 109 ( 2872) 
                 110 ( 2873) func readline(input: file; pnt: cpnt): boolean;
                 111 ( 2873) const alteof=chr(127);
                 112 ( 2876) var ch1: char;
                 113 ( 2876)     pos: integer;
                 114 ( 2876) begin
                 115 ( 2876)   pos := 0; read(@fno,ch1);
                 116 ( 2894)   while (ch1>=' ') and (ch1<>alteof) and
                 117 ( 2909)       (pos<xmax-1) do begin
                 118 ( 2924)     pnt[pos]:=ch1; pos:=pos+1; read(@fno,ch1);
                 119 ( 2957)     end;

----------------------------------------------------------------------

R65 Pascal program PEDIT           5/11/23     page 3

                 120 ( 2958)   while pos<xmax do begin
                 121 ( 2971)     pnt[pos]:=' '; pos:=pos+1;
                 122 ( 2987)   end;
                 123 ( 2992)   readline:=(ch1=eof) or (ch1=alteof);
                 124 ( 3009) end;
                 125 ( 3014) 
                 126 ( 3015) proc showline(pnt:cpnt; y: integer);
                 127 ( 3015) var lstart,pos: integer;
                 128 ( 3018) begin
                 129 ( 3018)   lstart:=y*xmax;
                 130 ( 3026)   for pos:=0 to xmax-1 do
                 131 ( 3041)     video[lstart+pos]:=pnt[pos];
                 132 ( 3068) end;
                 133 ( 3091) 
                 134 ( 3092) proc showtop;
                 135 ( 3092) begin
                 136 ( 3092)   intstr(line,stemp,3); putontop(stemp,5,true);
                 137 ( 3127)   intstr(nlines-1,stemp,3); putontop(stemp,12,true);
                 138 ( 3160) end;
                 139 ( 3160) 
                 140 ( 3161) proc showerror(s:cpnt);
                 141 ( 3161) var i: integer;
                 142 ( 3164)     ch: char;
                 143 ( 3164) begin
                 144 ( 3164)   putontop(s,36,true);
                 145 ( 3180)   read(@input,ch);
                 146 ( 3188)   putontop('                ',36,false);
                 147 ( 3218) end;
                 148 ( 3218) 
                 149 ( 3219) proc showall;
                 150 ( 3219) var lstart,y,i,l,lstart: integer;
                 151 ( 3222) begin
                 152 ( 3222)   showtop;
                 153 ( 3228)   for y:=1 to scrlins-1 do begin
                 154 ( 3248)     l:=topline-1+y; lstart:=y*xmax;
                 155 ( 3270)     if l<nlines then
                 156 ( 3279)       showline(linepnt[l],y)
                 157 ( 3295)     else
                 158 ( 3305)       for i:=0 to xmax-1 do
                 159 ( 3318)         video[lstart+i]:=' ';
                 160 ( 3339)   end;
                 161 ( 3360) end;
                 162 ( 3374) 
                 163 ( 3375) proc updline(pnt: cpnt; lstart:integer);
                 164 ( 3375) var pos: integer;
                 165 ( 3378) begin
                 166 ( 3378)   for pos:=0 to xmax-1 do
                 167 ( 3390)     pnt[pos]:=video[lstart+pos];
                 168 ( 3416) end;
                 169 ( 3436) 
                 170 ( 3437) func lastpos(l:integer):integer;
                 171 ( 3437) var endpos:integer;
                 172 ( 3440)     s:cpnt;
                 173 ( 3440) begin
                 174 ( 3440)   endpos:=xmax-1;
                 175 ( 3446)   s:=linepnt[l]
                 176 ( 3451)   while (s[endpos]=chr(ord(' ') and $7f))
                 177 ( 3478)     and (endpos>0) do endpos:=endpos-1;
                 178 ( 3497)   lastpos:=endpos;
                 179 ( 3505) end;

----------------------------------------------------------------------

R65 Pascal program PEDIT           5/11/23     page 4

                 180 ( 3513) 
                 181 ( 3514) proc chkline;
                 182 ( 3514) begin
                 183 ( 3514)   if line<1 then line:=1
                 184 ( 3529)   else if line>nlines-1 then line:=nlines-1;
                 185 ( 3559) end;
                 186 ( 3564) 
                 187 ( 3565) proc chktop(show: boolean);
                 188 ( 3565) var savetop,bottom:integer;
                 189 ( 3568) begin
                 190 ( 3568)   savetop:=topline; bottom:=topline+scrlins-1;
                 191 ( 3587)   if line<topline then topline:=line;
                 192 ( 3604)   if line>=bottom then
                 193 ( 3616)     topline:=line-scrlins+2;
                 194 ( 3633)   if show and (savetop<>topline) then showall;
                 195 ( 3659) end;
                 196 ( 3659) 
                 197 ( 3660) proc delline;
                 198 ( 3660) var i:integer; savpnt:cpnt;
                 199 ( 3663) begin
                 200 ( 3663)   chkline; savpnt:=linepnt[line];
                 201 ( 3673)   if line<mark then mark:=mark-1
                 202 ( 3697)   else if line<mark+nmark then nmark:=nmark-1;
                 203 ( 3730)   for i:=line to nlines-2 do
                 204 ( 3749)     linepnt[i]:=linepnt[i+1];
                 205 ( 3770)   release(savpnt); nlines:=nlines-1;
                 206 ( 3808)   chkline; chktop(false);
                 207 ( 3825)   line:=line-1; savecx:=1;
                 208 ( 3838) end;
                 209 ( 3842) 
                 210 ( 3843) proc join;
                 211 ( 3843) var p,p1,p2,pm:integer;
                 212 ( 3846)     s1,s2:cpnt;
                 213 ( 3846) begin
                 214 ( 3846)   p1:=lastpos(line-1); p2:=lastpos(line);
                 215 ( 3879)   s1:=linepnt[line-1]; s2:=linepnt[line];
                 216 ( 3902)   for p:=p1+1 to xmax-1 do s1[p]:=s2[p-p1-1];
                 217 ( 3955)   if p1+p2<xmax then delline
                 218 ( 3987)   else begin
                 219 ( 3997)     pm:=xmax-p1;
                 220 ( 3999)     for p:=0 to xmax-pm do s2[+p]:=s2[p+pm-1];
                 221 ( 4050)     for p:=xmax-pm+1 to xmax-1 do s2[p]:=' ';
                 222 ( 4104)     line:=line-1;
                 223 ( 4128)   end;
                 224 ( 4133)   savecx:=p1+2; chkline; chktop(false); showall;
                 225 ( 4160) end;
                 226 ( 4160) 
                 227 ( 4161) func edlin(pnt: cpnt): char;
                 228 ( 4161) const key    = @1;
                 229 ( 4164) var   ch1: char;
                 230 ( 4164)       exit: boolean;
                 231 ( 4164)       lstart: integer;
                 232 ( 4164) begin
                 233 ( 4164)   goto(savecx,column);
                 234 ( 4182)   if savecx=1 then write(cright,cleft)
                 235 ( 4197)   else write(cleft,cright); {to update cursor}
                 236 ( 4207)   exit:=false; lstart:=column*xmax;
                 237 ( 4221)   repeat
                 238 ( 4226)     read(@key,ch1);
                 239 ( 4234)     case ch1 of

----------------------------------------------------------------------

R65 Pascal program PEDIT           5/11/23     page 5

                 240 ( 4235)       inschr: if video[lstart+xmax-1]
                 241 ( 4258)                         =' ' then write(ch1);
                 242 ( 4272)       delchr,rubout: if (curpos=0) and (line>1)
                 243 ( 4301)              then begin
                 244 ( 4303)                updline(pnt,lstart) ;join; exit:=true;
                 245 ( 4326)                end
                 246 ( 4330)              else write(cleft,delchr);
                 247 ( 4339)       cup,cdown,esc,cr,
                 248 ( 4367)       pgup,pgdown,hom,pgend: exit:=true
                 249 ( 4398)       else begin
                 250 ( 4407)              if (ch1>=' ') and (ch1<chr($7f))
                 251 ( 4420)                then write(inschr);
                 252 ( 4429)              write(ch1);
                 253 ( 4434)              if curpos>=xmax-1 then
                 254 ( 4441)                write(cleft);
                 255 ( 4449)            end
                 256 ( 4449)     end {case};
                 257 ( 4451)     until exit;
                 258 ( 4451)   updline(pnt,lstart);
                 259 ( 4472)   edlin := ch1;
                 260 ( 4472)   if (ch1<>delchr) and (ch1<>rubout) then
                 261 ( 4494)     savecx:=curpos+1;
                 262 ( 4503) end;
                 263 ( 4508) 
                 264 ( 4509) proc readinput;
                 265 ( 4509) var i,pend:integer;
                 266 ( 4512) begin
                 267 ( 4512)   cyclus:=0; drive:=1;
                 268 ( 4522)   goto(1,1); write(clrscr);
                 269 ( 4539)   agetstring(name,default,cyclus,drive);
                 270 ( 4579)   asetfile(name,cyclus,drive,'P');
                 271 ( 4601)   openr(fno);
                 272 ( 4607)   nlines := 1; line:=1; topline:=1;
                 273 ( 4621)   pend:=15; while name[pend]=' ' do pend:=pend-1;
                 274 ( 4651)   for i:=0 to pend do stemp[i]:=name[i];
                 275 ( 4686)   stemp[pend+1]:=chr(0);
                 276 ( 4717)   stradd(':P.',stemp);
                 277 ( 4738)   hexstr(filcyc,stemp2);
                 278 ( 4752)   stradd(stemp2,stemp);
                 279 ( 4766)   putontop(stemp,17,true);
                 280 ( 4780)   putontop('Reading',36,true);
                 281 ( 4800)   repeat
                 282 ( 4800)     linepnt[nlines] := strnew;
                 283 ( 4810)     iseof := readline(fno, linepnt[nlines]);
                 284 ( 4834)     nlines := nlines+1;
                 285 ( 4844)     showtop;
                 286 ( 4853)     until iseof or (nlines >= maxlines-1);
                 287 ( 4868)   if nlines >= maxlines-1 then
                 288 ( 4881)       showerror('Too many lines  ');
                 289 ( 4911)   close(fno);
                 290 ( 4917)     for i:=inpx-1 to xmax-1 do top[i]:=128;
                 291 ( 4946)   showall;
                 292 ( 4971) end;
                 293 ( 4971) 
                 294 ( 4972) proc writeoutput;
                 295 ( 4972) var pos,endpos:integer;s,saveline:cpnt;
                 296 ( 4975) begin
                 297 ( 4975)   cyclus:=0; drive:=1;
                 298 ( 4985)   goto(1,1); write(clrscr);
                 299 ( 5002)   asetfile(name,cyclus,drive,'P');

----------------------------------------------------------------------

R65 Pascal program PEDIT           5/11/23     page 6

                 300 ( 5024)   openw(fno);
                 301 ( 5030)   putontop('Writing',36,true);
                 302 ( 5050)   for line:=1 to nlines-1 do begin
                 303 ( 5072)     showtop;
                 304 ( 5076)     endpos:=lastpos(line);
                 305 ( 5088)     s:=linepnt[line];
                 306 ( 5096)     for pos:=0 to endpos do
                 307 ( 5110)       write(@fno,chr(ord(s[pos]) and $7f));
                 308 ( 5144)     if (line<nlines-1) or (endpos<>0) then
                 309 ( 5177)       write(@fno,cr);
                 310 ( 5190)   end;
                 311 ( 5190)   close(fno); line:=nlines-1;
                 312 ( 5216)   showall;
                 313 ( 5225) end;
                 314 ( 5225) 
                 315 ( 5226) proc clrmarks;
                 316 ( 5226) var x,savel:integer; s:cpnt;
                 317 ( 5229) begin
                 318 ( 5229)   savel:=line;
                 319 ( 5231)   for line:=1 to nlines-1 do begin
                 320 ( 5261)     s:=linepnt[line];
                 321 ( 5265)     for x:=0 to xmax-1 do
                 322 ( 5283)       s[x]:=chr(ord(s[x]) and $7f);
                 323 ( 5310)     showtop;
                 324 ( 5333)     end;
                 325 ( 5333)   line:=savel; mark:=0; nmark:=0;
                 326 ( 5363) end;
                 327 ( 5367) 
                 328 ( 5368) proc find(again:boolean);
                 329 ( 5368) var pos,x,i:integer;
                 330 ( 5371)     ch:char;
                 331 ( 5371)     found:boolean;
                 332 ( 5371)     s2:cpnt;
                 333 ( 5371) 
                 334 ( 5371)   proc checkrest;
                 335 ( 5371)   var failed:boolean;
                 336 ( 5374)       x1:integer;
                 337 ( 5374)       s1:cpnt;
                 338 ( 5374)   begin
                 339 ( 5374)     failed:=false; pos:=2; x1:=x+1;
                 340 ( 5394)     while (fs[pos]<>chr(0)) and (x1<xmax) do begin
                 341 ( 5424)       s1:=linepnt[line];
                 342 ( 5428)       if s1[x1] <> fs[pos] then failed:=true;
                 343 ( 5462)       pos:=pos+1; x1:=x1+1;
                 344 ( 5483)       end;
                 345 ( 5488)      if (failed=false) and (fs[pos]=chr(0))
                 346 ( 5510)       then found:=true;
                 347 ( 5518)   end;
                 348 ( 5522) 
                 349 ( 5523) begin
                 350 ( 5523)   if not again then strcpy(stemp,fs);
                 351 ( 5547)   if fs[1]=chr(0) then begin
                 352 ( 5559)     {empty string -> delete all marks}
                 353 ( 5562)     putontop('Clearing marks',36,true);
                 354 ( 5589)     clrmarks; showall;
                 355 ( 5597)     end
                 356 ( 5597)   else begin
                 357 ( 5600)     putontop('Searching',36,true);
                 358 ( 5622)     found:=false;
                 359 ( 5624)     repeat

----------------------------------------------------------------------

R65 Pascal program PEDIT           5/11/23     page 7

                 360 ( 5628)       x:=0;
                 361 ( 5630)       repeat
                 362 ( 5634)         pos:=1;
                 363 ( 5636)         s2:=linepnt[line];
                 364 ( 5644)         if s2[x]=fs[pos] then checkrest;
                 365 ( 5680)         x:=x+1;
                 366 ( 5686)         until found or (x>=xmax);
                 367 ( 5702)       showtop; line:=line+1;
                 368 ( 5716)       until found or (line>=nlines);
                 369 ( 5734)     if found then begin
                 370 ( 5742)       line:=line-1; x:=x-1; i:=1;
                 371 ( 5769)       s2:=linepnt[line];
                 372 ( 5777)       while fs[i]<>chr(0) do begin
                 373 ( 5802)         s2[x+i-1]:=chr(ord(s2[x+i-1]) or $80);
                 374 ( 5835)          i:=i+1;
                 375 ( 5846)         end
                 376 ( 5851)       end
                 377 ( 5851)     else begin
                 378 ( 5857)       line:=nlines-1;
                 379 ( 5863)     end;
                 380 ( 5868)   end
                 381 ( 5868) end;
                 382 ( 5868) 
                 383 ( 5869) proc insertline;
                 384 ( 5869) var i:integer;
                 385 ( 5872)     s1,s2:cpnt;
                 386 ( 5872) begin
                 387 ( 5872)   if nlines<maxlines-1 then begin
                 388 ( 5885)     if line<mark then mark:=mark+1
                 389 ( 5904)     else if line<mark+nmark then nmark:=nmark+1;
                 390 ( 5937)     if line<nlines-1 then begin
                 391 ( 5954)       for i:=nlines-1 downto line+1 do
                 392 ( 5974)         linepnt[i+1]:=linepnt[i];
                 393 ( 5995)       end;
                 394 ( 6017)     linepnt[line+1]:=strnew;
                 395 ( 6030)     s1:=linepnt[line+1]; s2:=linepnt[line];
                 396 ( 6053)     for i:=0 to xmax-1 do s1[i]:=' ';
                 397 ( 6087)     for i:=curpos to xmax-1 do begin
                 398 ( 6126)       s1[i-curpos]:=s2[i]; s2[i]:=' ';
                 399 ( 6154)       end;
                 400 ( 6158)     line:=line+1; nlines:=nlines+1;
                 401 ( 6189)     savecx:=1; chkline; chktop(false); showall;
                 402 ( 6216)   end;
                 403 ( 6216) end;
                 404 ( 6216) 
                 405 ( 6217) proc paste;
                 406 ( 6217) var l,i:integer; s1,s2:cpnt;
                 407 ( 6220) begin
                 408 ( 6220)   for i:=nlines-1 downto line do
                 409 ( 6233)     linepnt[i+nmark]:=linepnt[i];
                 410 ( 6259)   nlines:=nlines+nmark;
                 411 ( 6285)   if mark>line then mark:=mark+nmark;
                 412 ( 6310)   for l:=mark to mark+nmark-1 do begin
                 413 ( 6348)     linepnt[line]:=strnew;
                 414 ( 6358)     s1:=linepnt[line]; s2:=linepnt[l];
                 415 ( 6378)     for i:=0 to xmax-1 do s1[i]:=s2[i];
                 416 ( 6418)     line:=line+1;
                 417 ( 6444)   end;
                 418 ( 6449)   showall;
                 419 ( 6467) end;

----------------------------------------------------------------------

R65 Pascal program PEDIT           5/11/23     page 8

                 420 ( 6467) 
                 421 ( 6468) proc move;
                 422 ( 6468) var i,j,saveline:integer; savepnt:cpnt;
                 423 ( 6471) begin
                 424 ( 6471)   saveline:=line; { insert above}
                 425 ( 6481)   if line>=mark+nmark then begin
                 426 ( 6495)     mark:=mark+nmark-1;
                 427 ( 6509)     for j:=0 to nmark-1 do begin
                 428 ( 6536)       savepnt:=linepnt[mark];
                 429 ( 6540)       for i:=mark to line-1 do
                 430 ( 6562)         linepnt[i]:=linepnt[i+1];
                 431 ( 6583)       mark:=mark-1; line:=line-1;
                 432 ( 6622)       linepnt[line]:=savepnt;
                 433 ( 6631)     end;
                 434 ( 6639)   end else if line<mark then begin
                 435 ( 6665)     for j:=0 to nmark-1 do begin
                 436 ( 6690)       savepnt:=linepnt[mark];
                 437 ( 6694)       for i:=mark downto line+1 do
                 438 ( 6716)         linepnt[i]:=linepnt[i-1];
                 439 ( 6737)       linepnt[line]:=savepnt;
                 440 ( 6763)       mark:=mark+1; line:=line+1;
                 441 ( 6788)     end;
                 442 ( 6793)   end else showerror('Move inside move');
                 443 ( 6835)  mark:=saveline; line:=saveline; showall;
                 444 ( 6855) end;
                 445 ( 6855) 
                 446 ( 6856) func doesc: boolean;
                 447 ( 6856) var ch:char;
                 448 ( 6859)     i,n:integer;
                 449 ( 6859)     s,savl:cpnt;
                 450 ( 6859) begin
                 451 ( 6859)   doesc:=false; savecx:=1;
                 452 ( 6869)   getinput(n,stemp); ch:=stemp[0];
                 453 ( 6897)   case ch of
                 454 ( 6903)     't': begin {top}
                 455 ( 6914)            line:=1; chktop(true);
                 456 ( 6928)          end;
                 457 ( 6928)     'b': begin {bottom}
                 458 ( 6938)            line:=nlines-1; chktop(true);
                 459 ( 6957)          end;
                 460 ( 6957)     'l': begin {line number}
                 461 ( 6967)            line:=n; chkline; chktop(true);
                 462 ( 6987)          end;
                 463 ( 6987)     'f','g': begin {find string}
                 464 ( 7004)            find(ch='g'); chkline; chktop(false);
                 465 ( 7029)            showall;
                 466 ( 7033)          end;
                 467 ( 7033)     'c': begin {mark lines for copy}
                 468 ( 7043)            if n<1 then n:=1;
                 469 ( 7055)            if line+n>= nlines-1 then
                 470 ( 7074)              showerror('Too many lines  ')
                 471 ( 7098)            else begin
                 472 ( 7107)              mark:=line; nmark:=n;
                 473 ( 7115)              for line:=mark to mark+nmark-1 do begin
                 474 ( 7152)                s:=linepnt[line];
                 475 ( 7156)                for i:=0 to xmax-1 do
                 476 ( 7174)                  s[i]:= chr(ord(s[i]) or $80);
                 477 ( 7201)              end;
                 478 ( 7220)              line:=mark;
                 479 ( 7234)            end;

----------------------------------------------------------------------

R65 Pascal program PEDIT           5/11/23     page 9

                 480 ( 7242)            showall;
                 481 ( 7246)          end;
                 482 ( 7246)     'p': begin {paste marked lines}
                 483 ( 7256)            if mark=0 then showerror('Nothing marked  ')
                 484 ( 7285) 
                 485 ( 7291)            else begin
                 486 ( 7294) 
                 487 ( 7294)              if nlines+nmark>=maxlines then
                 488 ( 7306)                showerror('Too many lines  ')
                 489 ( 7329)              else paste;
                 490 ( 7342)            end;
                 491 ( 7342)          end;
                 492 ( 7342)     'm': begin {move marked lines }
                 493 ( 7352)            if mark=0 then showerror('Nothing marked  ')
                 494 ( 7381) 
                 495 ( 7387)            else move;
                 496 ( 7394) 
                 497 ( 7394)          end;
                 498 ( 7394)     'd': begin {delete n lines}
                 499 ( 7404)            if n<1 then n:=1;
                 500 ( 7416)            if line+n=maxlines-3 then
                 501 ( 7434)              n:=maxlines-3-line;
                 502 ( 7445)            for i:=1 to n do begin
                 503 ( 7473)              delline; line:=line+1;
                 504 ( 7483)            end;
                 505 ( 7488)            chkline; chktop(false); showall;
                 506 ( 7518)          end;
                 507 ( 7518)     'w': writeoutput; {write output}
                 508 ( 7535)     'q': begin {write output and quit}
                 509 ( 7542)            writeoutput; doesc:=true;
                 510 ( 7548)          end;
                 511 ( 7552)     'k': doesc:=true {kill program}
                 512 ( 7564)     else showerror('Unknown escape  ')
                 513 ( 7590)   end {case};
                 514 ( 7598)   for i:=inpx-1 to xmax-1 do top[i]:=128;
                 515 ( 7627) end;
                 516 ( 7648) 
                 517 ( 7649) begin {main}
                 518 ( 7649)   stemp:=strnew; stemp2:=strnew; fs:=strnew;
                 519 ( 7678)   setnumlin($0f,$37);
                 520 ( 7692)   write(hom,clrscr);
                 521 ( 7698)   putontop('Line xxx of xxx',0,true);
                 522 ( 7726)   relpnt:=maxlines-1;
                 523 ( 7731)   mark:=0; nmark:=0; savecx:=1;
                 524 ( 7750)   for i:=inpx-1 to xmax-1 do top[i]:=128;
                 525 ( 7783)   readinput; fs[0]:=chr(0);
                 526 ( 7812)   topline:= 1; line:=1; showall; exit:=false;
                 527 ( 7835)   repeat
                 528 ( 7839)     showtop; chi := edlin(linepnt[line]);
                 529 ( 7859)     case chi of
                 530 ( 7863)       cup: begin
                 531 ( 7874)              line:=line-1; chkline; chktop(true);
                 532 ( 7897)            end;
                 533 ( 7897)       cdown: begin
                 534 ( 7907)              line:=line+1; chkline; chktop(true);
                 535 ( 7930)            end;
                 536 ( 7930)       pgup: begin
                 537 ( 7940)              line:=line-15; chkline; chktop(true);
                 538 ( 7963)            end;
                 539 ( 7963)       pgdown: begin

----------------------------------------------------------------------

R65 Pascal program PEDIT           5/11/23     page 10

                 540 ( 7973)              line:=line+15; chkline; chktop(true);
                 541 ( 7996)            end;
                 542 ( 7996)       hom: begin
                 543 ( 8006)              line:=1; savecx:=1; chktop(true);
                 544 ( 8026)            end;
                 545 ( 8026)       pgend: begin
                 546 ( 8036)              line:=nlines-1; savecx:=1; chktop(true);
                 547 ( 8061)            end;
                 548 ( 8061)       cr:  insertline;
                 549 ( 8075)       esc: if doesc then exit:=true
                 550 ( 8094)     end {case};
                 551 ( 8102)     until exit;
                 552 ( 8102)   setnumlin($29,$2f);
                 553 ( 8119)   writeln(hom, clrscr, 'closing...');
                 554 ( 8142) end.
                 555 ( 8142) 

End compile

Code lenght:          8141
Compiler stack size:  110
Ident stack size:     168
Pascal errors:        0

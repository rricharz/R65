
R65 COMPILE 4.2: program PEDIT            13/11/23 page 1


   1 (    4) program pedit;
   2 (    4) 
   3 (    4) { Pascal editor, original 1980 RR
   4 (    4)   rewritten 2023 RR for R65 system }
   5 (    4) 
   6 (    4) uses syslib, arglib, strlib, disklib;
   7 ( 2655) 
   8 ( 2655) const title='R65 PEDIT 2.1'; {max 20 chars}
   9 ( 2672) 
  10 ( 2672)     maxlines= 360;      xmax   = 56;
  11 ( 2672)     scrlins = 16;       mlenght= 19;
  12 ( 2672)     inpx    = 37;
  13 ( 2672)     eol     = chr($00); esc    = chr($00);
  14 ( 2672)     rdown   = chr($02); rup    = chr($08);
  15 ( 2672)     pgdown  = chr($14); pgup   = chr($12);
  16 ( 2672)     cdown   = chr($18); cup    = chr($1a);
  17 ( 2672)     pgend   = chr($10); clrscr = chr($11);
  18 ( 2672)     clrlin  = chr($17); cleft  = chr($03);
  19 ( 2672)     inschr  = chr($15); delchr = chr($19);
  20 ( 2672)     rubout  = chr($5f); cright = chr($16);
  21 ( 2672) 
  22 ( 2672) mem curlin  = $ed: integer&;
  23 ( 2672)     curpos  = $ee: integer&;
  24 ( 2672)     filcyc  = $311: integer&;
  25 ( 2672)     video   = $400: array[900] of char&;
  26 ( 2672)     topi    = $400: array[xmax] of integer&;
  27 ( 2672)     topc    = $400: array[xmax] of char&;
  28 ( 2672) 
  29 ( 2672) 
  30 ( 2672) var line,nlines,topline,i,dummy,debug: integer;
  31 ( 2672)     name: array[15] of char;
  32 ( 2672)     fno: file;
  33 ( 2672)     chi : char;
  34 ( 2672)     cyclus,drive,mark,savecx: integer;
  35 ( 2672)     default, iseof, stop: boolean;
  36 ( 2672)     fs: cpnt;
  37 ( 2672)     linepnt: array[maxlines] of cpnt;
  38 ( 2672)     relpnt:  integer;
  39 ( 2672)     stemp,stemp2: cpnt;
  40 ( 2672) 
  41 ( 2672) func printable(ch:char):boolean;
  42 ( 2672) begin
  43 ( 2672)   printable:=((ord(ch)>=$20) and (ord(ch)<=$7e))
  44 ( 2691)     and (ch<>rubout);
  45 ( 2699) end;
  46 ( 2704) 
  47 ( 2705) proc putontop(s:cpnt;pos:integer;inv:boolean);
  48 ( 2705) var i:integer;
  49 ( 2708) begin
  50 ( 2708)   i:=0; { faster version: if not in loop }
  51 ( 2716)   if inv then while s[i]<>endmark do begin
  52 ( 2739)     topi[i+pos]:=ord(s[i]) or 128; i:=i+1;
  53 ( 2774)   end else while s[i]<>endmark do begin
  54 ( 2801)     topc[i+pos]:=s[i]; i:=i+1;
  55 ( 2833)   end;
  56 ( 2838) end;
  57 ( 2841) 
  58 ( 2842) proc release(p:cpnt);
  59 ( 2842) begin

----------------------------------------------------------------------

R65 COMPILE 4.2: program PEDIT            13/11/23 page 2

  60 ( 2842)   linepnt[relpnt]:=p; relpnt:=relpnt-1;
  61 ( 2865) end;
  62 ( 2870) 
  63 ( 2871) proc setnumlin(l,c:integer);
  64 ( 2871) mem numlin=$1789: integer&;
  65 ( 2874)     numchr=$178a: integer&;
  66 ( 2874) begin
  67 ( 2874)   numlin:=l; numchr:=c;
  68 ( 2885) end;
  69 ( 2894) 
  70 ( 2895) func column:integer;
  71 ( 2895) begin
  72 ( 2895)   column:=line-topline+1;
  73 ( 2911) end;
  74 ( 2916) 
  75 ( 2917) proc goto(xpos, ypos: integer);
  76 ( 2917) begin
  77 ( 2917)   curlin:=ypos; { top on line 2 }
  78 ( 2930)   if curlin>15 then curlin:=15;
  79 ( 2941)   curpos:=xpos-1;
  80 ( 2951) end;
  81 ( 2956) 
  82 ( 2957) proc clrmessage;
  83 ( 2957) var i:integer;
  84 ( 2960) begin
  85 ( 2960)   for i:=inpx-1 to xmax-1 do topi[i]:=128;
  86 ( 2991) end;
  87 ( 3012) 
  88 ( 3013) proc showerror(s:cpnt);
  89 ( 3013) var i: integer;
  90 ( 3016)     ch: char;
  91 ( 3016) begin
  92 ( 3016)   clrmessage;
  93 ( 3022)   putontop(s,36,true);
  94 ( 3036)   read(@key,ch);
  95 ( 3044)   clrmessage;
  96 ( 3049) end;
  97 ( 3049) 
  98 ( 3050) func new:cpnt;
  99 ( 3050) var i:integer;
 100 ( 3053)     s:cpnt;
 101 ( 3053) begin
 102 ( 3053)   if relpnt<maxlines-1 then begin
 103 ( 3066)     relpnt:=relpnt+1; s:=linepnt[relpnt];
 104 ( 3084)   end else if nlines<maxlines-1 then s:=strnew
 105 ( 3109)   else s:=nil;
 106 ( 3124)   new:=s;
 107 ( 3128)   if s<>nil then begin
 108 ( 3143)     for i:=0 to xmax-1 do s[i]:=' ';
 109 ( 3172)     s[xmax]:=endmark;
 110 ( 3194)   end;
 111 ( 3198)   if nlines>maxlines-5 then
 112 ( 3207)     showerror('Warning: Low memory');
 113 ( 3240) end;
 114 ( 3240) 
 115 ( 3241) proc newline;
 116 ( 3241) begin
 117 ( 3241)   linepnt[nlines]:=new;
 118 ( 3256)   nlines:=nlines+1;
 119 ( 3266) end;

----------------------------------------------------------------------

R65 COMPILE 4.2: program PEDIT            13/11/23 page 3

 120 ( 3271) 
 121 ( 3272) 
 122 ( 3272) func isnumber(ci:integer):boolean;
 123 ( 3272) begin
 124 ( 3272)   isnumber:=(ci>=ord('0')) and (ci<=ord('9'))
 125 ( 3290) end;
 126 ( 3296) 
 127 ( 3297) proc getinput(var c:char;var n:integer; s:cpnt);
 128 ( 3297) { get input line on top and analyze it }
 129 ( 3297) var i,j,stop:integer; ch: char;
 130 ( 3300) begin
 131 ( 3300)   goto(inpx,0); write(chr(ord(':') or 128));
 132 ( 3319)   {read input}
 133 ( 3319)   read(@key,ch); i:=0;
 134 ( 3330)   while (ch<>chr(13)) and (ch<>esc) do begin
 135 ( 3353)     if (ch=rubout) then begin
 136 ( 3360)       if i>0 then i:=i-1; goto(i+inpx+1,0);
 137 ( 3402)       write(chr(ord(' ') or 128),cleft);
 138 ( 3412)     end else if (ch>=' ') and (ch<=chr($7d)) and
 139 ( 3430)       (inpx+i<xmax-1) then begin
 140 ( 3445)       goto(i+inpx+1,0);
 141 ( 3466)       write(chr(ord(ch) or 128)); i:=i+1;
 142 ( 3481)     end;
 143 ( 3486)     read(@key,ch);
 144 ( 3494)   end;
 145 ( 3495)   stop:=i+inpx; n:=0; s[0]:=endmark; c:=endmark;
 146 ( 3525)   {set c}
 147 ( 3529)   if stop<=inpx then exit;
 148 ( 3540)   c:=chr(topi[inpx] and 127);
 149 ( 3550)   {set n}
 150 ( 3555)   if stop<inpx+1 then exit;
 151 ( 3569)   i:=inpx+1;
 152 ( 3573)   while isnumber(topi[i] and 127) and
 153 ( 3598)       (i<stop) do begin
 154 ( 3611)     n:=10*n+(topi[i] and 127)-ord('0');
 155 ( 3633)     i:=i+1;
 156 ( 3644)   end;
 157 ( 3649)   j:=0;
 158 ( 3654)   while i<=stop do begin
 159 ( 3670)     s[j]:=chr(topi[i] and 127); i:=i+1; j:=j+1;
 160 ( 3708)   end;
 161 ( 3713)   s[j]:=endmark;
 162 ( 3722) end;
 163 ( 3726) 
 164 ( 3727) func readline(input: file; pnt: cpnt): boolean;
 165 ( 3727) const alteof=chr(127);
 166 ( 3730) var ch1: char;
 167 ( 3730)     pos: integer;
 168 ( 3730) begin
 169 ( 3730)   pos := 0; read(@fno,ch1);
 170 ( 3748)   while (ch1>=' ') and (ch1<>alteof) and
 171 ( 3763)       (pos<xmax-1) do begin
 172 ( 3778)     pnt[pos]:=ch1; pos:=pos+1; read(@fno,ch1);
 173 ( 3811)     end;
 174 ( 3812)   while pos<xmax do begin
 175 ( 3825)     pnt[pos]:=' '; pos:=pos+1;
 176 ( 3841)   end;
 177 ( 3846)   readline:=(ch1=eof) or (ch1=alteof);
 178 ( 3863) end;
 179 ( 3868) 

----------------------------------------------------------------------

R65 COMPILE 4.2: program PEDIT            13/11/23 page 4

 180 ( 3869) proc showline(pnt:cpnt; y: integer);
 181 ( 3869) var lstart,pos: integer;
 182 ( 3872) begin
 183 ( 3872)   lstart:=y*xmax;
 184 ( 3880)   if (pnt=nil) then
 185 ( 3892)    for pos:=0 to xmax-1 do
 186 ( 3905)     video[lstart+pos]:=' '
 187 ( 3924)   else begin
 188 ( 3950)     pos:=0;
 189 ( 3952)     while (pos<xmax) and (pnt[pos]<>endmark) do begin
 190 ( 3980)       video[lstart+pos]:=pnt[pos]; pos:=pos+1
 191 ( 4010)     end;
 192 ( 4017)     while pos<xmax do begin
 193 ( 4030)       video[lstart+pos]:=' '; pos:=pos+1
 194 ( 4052)     end
 195 ( 4054)   end;
 196 ( 4062) end;
 197 ( 4062) 
 198 ( 4063) proc showtop;
 199 ( 4063) begin
 200 ( 4063)   intstr(line,stemp,3); putontop(stemp,5,true);
 201 ( 4098)   intstr(nlines-1,stemp,3); putontop(stemp,12,true);
 202 ( 4131) end;
 203 ( 4131) 
 204 ( 4132) proc showall;
 205 ( 4132) var lstart,y,i,l,lstart: integer;
 206 ( 4135) begin
 207 ( 4135)   showtop;
 208 ( 4141)   for y:=1 to scrlins-1 do begin
 209 ( 4161)     l:=topline-1+y; lstart:=y*xmax;
 210 ( 4183)     if l<nlines then
 211 ( 4192)       showline(linepnt[l],y)
 212 ( 4208)     else
 213 ( 4218)       for i:=0 to xmax-1 do
 214 ( 4231)         video[lstart+i]:=' ';
 215 ( 4252)   end;
 216 ( 4273) end;
 217 ( 4287) 
 218 ( 4288) proc updline(pnt: cpnt; lstart:integer);
 219 ( 4288) var pos: integer;
 220 ( 4291) begin
 221 ( 4291)   for pos:=0 to xmax-1 do
 222 ( 4303)     pnt[pos]:=video[lstart+pos];
 223 ( 4329) end;
 224 ( 4349) 
 225 ( 4350) func lastpos(l:integer):integer;
 226 ( 4350) { returns -1 if line empty }
 227 ( 4350) var endpos:integer;
 228 ( 4353)     s:cpnt;
 229 ( 4353) begin
 230 ( 4353)   endpos:=xmax-1;
 231 ( 4359)   s:=linepnt[l];
 232 ( 4368)   while (chr(ord(s[endpos]) and $7f)=' ')
 233 ( 4392)     and (endpos>0) do endpos:=endpos-1;
 234 ( 4410)   if (endpos=0) and (chr(ord(s[endpos]) and $7f)=' ')
 235 ( 4441)   then endpos:=-1;
 236 ( 4448)   lastpos:=endpos;
 237 ( 4453) end;
 238 ( 4461) 
 239 ( 4462) proc chkline;

----------------------------------------------------------------------

R65 COMPILE 4.2: program PEDIT            13/11/23 page 5

 240 ( 4462) begin
 241 ( 4462)   if line<1 then line:=1
 242 ( 4477)   else if line>nlines-1 then line:=nlines-1;
 243 ( 4507) end;
 244 ( 4512) 
 245 ( 4513) proc chktop(show: boolean);
 246 ( 4513) var savetop,bottom:integer;
 247 ( 4516) begin
 248 ( 4516)   savetop:=topline; bottom:=topline+scrlins-1;
 249 ( 4535)   if line<topline then topline:=line;
 250 ( 4552)   { keep cursor above bottom line, if possible }
 251 ( 4560)   if line>=bottom-1 then
 252 ( 4570)     topline:=line-scrlins+3;
 253 ( 4584)   if show and (savetop<>topline) then showall;
 254 ( 4610) end;
 255 ( 4610) 
 256 ( 4611) proc delline;
 257 ( 4611) var i:integer; savpnt:cpnt;
 258 ( 4614) begin
 259 ( 4614)   chkline; savpnt:=linepnt[line];
 260 ( 4624)   if line<mark then mark:=mark-1;
 261 ( 4650)   for i:=line to nlines-2 do
 262 ( 4669)     linepnt[i]:=linepnt[i+1];
 263 ( 4690)   release(savpnt); nlines:=nlines-1;
 264 ( 4728)   chkline; chktop(false);
 265 ( 4745)   line:=line-1; savecx:=1;
 266 ( 4758) end;
 267 ( 4762) 
 268 ( 4763) proc join;
 269 ( 4763) var p,p1,p2,pm:integer;
 270 ( 4766)     s1,s2:cpnt;
 271 ( 4766) begin
 272 ( 4766)   p1:=lastpos(line-1); p2:=lastpos(line);
 273 ( 4799)   s1:=linepnt[line-1]; s2:=linepnt[line];
 274 ( 4822)   for p:=p1+1 to xmax-1 do s1[p]:=s2[p-p1-1];
 275 ( 4875)   if p1+p2<xmax then delline
 276 ( 4907)   else begin
 277 ( 4917)     pm:=xmax-p1;
 278 ( 4919)     for p:=0 to xmax-pm do s2[+p]:=s2[p+pm-1];
 279 ( 4970)     for p:=xmax-pm+1 to xmax-1 do s2[p]:=' ';
 280 ( 5024)     line:=line-1;
 281 ( 5048)   end;
 282 ( 5053)   savecx:=p1+2; chkline; chktop(false); showall;
 283 ( 5080) end;
 284 ( 5080) 
 285 ( 5081) func edlin(pnt: cpnt): char;
 286 ( 5081) const key    = @1;
 287 ( 5084) var   ch1,lstch1,lstch2: char;
 288 ( 5084)       stop: boolean;
 289 ( 5084)       lstart: integer;
 290 ( 5084) begin
 291 ( 5084)   goto(savecx,column);
 292 ( 5102)   if savecx=1 then write(cright,cleft)
 293 ( 5117)   else write(cleft,cright); {to update cursor}
 294 ( 5127)   stop:=false; lstart:=column*xmax;
 295 ( 5141)   repeat
 296 ( 5146)     read(@key,ch1);
 297 ( 5154)     lstch1:=' '; lstch2:=' ';
 298 ( 5163)     case ch1 of
 299 ( 5167)       delchr,rubout: if (curpos=0) and (line>1)

----------------------------------------------------------------------

R65 COMPILE 4.2: program PEDIT            13/11/23 page 6

 300 ( 5197)              then begin
 301 ( 5199)                updline(pnt,lstart);join;stop:=true;
 302 ( 5222)              end else write(cleft,delchr);
 303 ( 5235)       cleft: if curpos>0 then write(cleft)
 304 ( 5256)              else if line>1 then begin
 305 ( 5267)                updline(pnt,lstart);
 306 ( 5284)                line:=line-1; curpos:=lastpos(line)+1;
 307 ( 5309)                stop:=true;
 308 ( 5316)              end;
 309 ( 5320)       cright:if curpos<xmax-1 then begin
 310 ( 5339)                write(cright);
 311 ( 5345)              end else if line<nlines-1 then begin
 312 ( 5360)                updline(pnt,lstart);
 313 ( 5377)                line:=line+1; curpos:=0;
 314 ( 5390)                stop:=true;
 315 ( 5396)              end;
 316 ( 5400)       cup,cdown,esc,cr,rup,rdown,
 317 ( 5442)       pgup,pgdown,hom,pgend: stop:=true
 318 ( 5473)       else begin
 319 ( 5482)              if printable(ch1) then begin
 320 ( 5494)                lstch1:=video[lstart+xmax-1];
 321 ( 5510)                lstch1:=chr(ord(lstch1) and $7f);
 322 ( 5523)                lstch2:=video[lstart+xmax-2];
 323 ( 5541)                lstch2:=chr(ord(lstch2) and $7f);
 324 ( 5554)                if curpos>=xmax-1 then begin
 325 ( 5568)                  if line>=nlines-1 then newline;
 326 ( 5590)                  video[lstart+xmax-1]:=ch1;
 327 ( 5600)                  curpos:=0;
 328 ( 5613)                  lstch1:=cdown;
 329 ( 5619)                end else begin
 330 ( 5626)                  write(inschr); write(ch1);
 331 ( 5634)                end;
 332 ( 5634)                if (lstch1<>' ') or (lstch2<>' ')
 333 ( 5647)                  then stop:=true;
 334 ( 5654)              end;
 335 ( 5658)            end
 336 ( 5658)     end {case};
 337 ( 5660)     until stop;
 338 ( 5660)   updline(pnt,lstart);
 339 ( 5681)   if (lstch1<>' ') or (lstch2<>' ') then edlin:=lstch1
 340 ( 5699)   else edlin:=ch1;
 341 ( 5710)   if (ch1<>delchr) and (ch1<>rubout) then
 342 ( 5732)     savecx:=curpos+1;
 343 ( 5741) end;
 344 ( 5746) 
 345 ( 5747) proc readinput;
 346 ( 5747) var i,pend:integer;
 347 ( 5750) begin
 348 ( 5750)   cyclus:=0; drive:=1;
 349 ( 5760)   goto(1,1); write(clrscr);
 350 ( 5777)   agetstring(name,default,cyclus,drive);
 351 ( 5817)   asetfile(name,cyclus,drive,'P');
 352 ( 5839)   openr(fno);
 353 ( 5845)   nlines := 1; line:=1; topline:=1;
 354 ( 5859)   pend:=15; while name[pend]=' ' do pend:=pend-1;
 355 ( 5889)   for i:=0 to pend do stemp[i]:=name[i];
 356 ( 5924)   stemp[pend+1]:=endmark;
 357 ( 5955)   stradd(':P.',stemp);
 358 ( 5975)   hexstr(filcyc,stemp2);
 359 ( 5989)   stradd(stemp2,stemp);

----------------------------------------------------------------------

R65 COMPILE 4.2: program PEDIT            13/11/23 page 7

 360 ( 6003)   while strlen(stemp)<17 do stradd(' ',stemp);
 361 ( 6035)   putontop(stemp,17,true);
 362 ( 6052)   putontop('Reading',36,true);
 363 ( 6072)   repeat
 364 ( 6072)     linepnt[nlines] := new;
 365 ( 6082)     iseof := readline(fno, linepnt[nlines]);
 366 ( 6106)     nlines := nlines+1;
 367 ( 6116)     showtop;
 368 ( 6125)     until iseof or (nlines >= maxlines-9);
 369 ( 6140)   if nlines >= maxlines-9 then
 370 ( 6153)       showerror('Too many lines');
 371 ( 6181)   close(fno);
 372 ( 6187)   clrmessage;
 373 ( 6191)   showall;
 374 ( 6195) end;
 375 ( 6195) 
 376 ( 6196) proc writeoutput;
 377 ( 6196) var pos,endpos:integer;s,saveline:cpnt;
 378 ( 6199) begin
 379 ( 6199)   cyclus:=0; drive:=1;
 380 ( 6209)   goto(1,1); write(clrscr);
 381 ( 6226)   asetfile(name,cyclus,drive,'P');
 382 ( 6248)   openw(fno);
 383 ( 6254)   putontop('Writing',36,true);
 384 ( 6274)   for line:=1 to nlines-1 do begin
 385 ( 6296)     showtop;
 386 ( 6300)     endpos:=lastpos(line);
 387 ( 6312)     s:=linepnt[line];
 388 ( 6320)     for pos:=0 to endpos do
 389 ( 6334)       write(@fno,chr(ord(s[pos]) and $7f));
 390 ( 6368)     if (line<nlines-1) then write(@fno,cr);
 391 ( 6406)   end;
 392 ( 6406)   close(fno); line:=nlines-1;
 393 ( 6432)   showall;
 394 ( 6441) end;
 395 ( 6441) 
 396 ( 6442) proc clrmarks;
 397 ( 6442) var x,savel:integer; s:cpnt;
 398 ( 6445) begin
 399 ( 6445)   savel:=line;
 400 ( 6447)   for line:=1 to nlines-1 do begin
 401 ( 6477)     s:=linepnt[line];
 402 ( 6481)     for x:=0 to xmax-1 do
 403 ( 6499)       s[x]:=chr(ord(s[x]) and $7f);
 404 ( 6526)     showtop;
 405 ( 6549)     end;
 406 ( 6549)   line:=savel; mark:=0;
 407 ( 6573) end;
 408 ( 6577) 
 409 ( 6578) proc find(again:boolean);
 410 ( 6578) var pos,x,i:integer;
 411 ( 6581)     ch:char;
 412 ( 6581)     found:boolean;
 413 ( 6581)     s2:cpnt;
 414 ( 6581) 
 415 ( 6581)   proc checkrest;
 416 ( 6581)   var failed:boolean;
 417 ( 6584)       x1:integer;
 418 ( 6584)       s1:cpnt;
 419 ( 6584)   begin

----------------------------------------------------------------------

R65 COMPILE 4.2: program PEDIT            13/11/23 page 8

 420 ( 6584)     failed:=false; pos:=2; x1:=x+1;
 421 ( 6604)     while (fs[pos]<>endmark) and (x1<xmax) do begin
 422 ( 6633)       s1:=linepnt[line];
 423 ( 6637)       if s1[x1] <> fs[pos] then failed:=true;
 424 ( 6671)       pos:=pos+1; x1:=x1+1;
 425 ( 6692)       end;
 426 ( 6697)      if (failed=false) and (fs[pos]=endmark)
 427 ( 6719)       then found:=true;
 428 ( 6726)   end;
 429 ( 6730) 
 430 ( 6731) begin
 431 ( 6731)   clrmessage;
 432 ( 6737)   if not again then strcpy(stemp,fs);
 433 ( 6759)   if fs[0]=endmark then begin
 434 ( 6770)     {empty string -> delete all marks}
 435 ( 6773)     putontop('Clearing marks',36,true);
 436 ( 6800)     clrmarks; showall;
 437 ( 6808)     end
 438 ( 6808)   else begin
 439 ( 6811)     putontop('Searching',36,true);
 440 ( 6833)     found:=false;
 441 ( 6835)     repeat
 442 ( 6839)       x:=0;
 443 ( 6841)       repeat
 444 ( 6845)         pos:=1;
 445 ( 6847)         s2:=linepnt[line];
 446 ( 6855)         if s2[x]=fs[pos] then checkrest;
 447 ( 6891)         x:=x+1;
 448 ( 6897)         until found or (x>=xmax);
 449 ( 6913)       showtop; line:=line+1;
 450 ( 6927)       until found or (line>=nlines);
 451 ( 6945)     if found then begin
 452 ( 6953)       line:=line-1; x:=x-1; i:=1;
 453 ( 6980)       s2:=linepnt[line];
 454 ( 6988)       savecx:=x+i;
 455 ( 7000)       while fs[i]<>endmark do begin
 456 ( 7025)         s2[x+i-1]:=chr(ord(s2[x+i-1]) or $80);
 457 ( 7058)          i:=i+1;
 458 ( 7069)         end
 459 ( 7074)       end
 460 ( 7074)     else begin
 461 ( 7080)       line:=nlines-1;
 462 ( 7086)     end;
 463 ( 7091)   end
 464 ( 7091) end;
 465 ( 7091) 
 466 ( 7092) proc insertline;
 467 ( 7092) var i:integer;
 468 ( 7095)     s1,s2:cpnt;
 469 ( 7095) begin
 470 ( 7095)   if nlines<maxlines-1 then begin
 471 ( 7108)     if line<mark then mark:=mark+1;
 472 ( 7129)     if line<nlines-1 then begin
 473 ( 7146)       for i:=nlines-1 downto line+1 do
 474 ( 7166)         linepnt[i+1]:=linepnt[i];
 475 ( 7187)       end;
 476 ( 7209)     linepnt[line+1]:=new;
 477 ( 7222)     s1:=linepnt[line+1]; s2:=linepnt[line];
 478 ( 7245)     for i:=0 to xmax-1 do s1[i]:=' ';
 479 ( 7279)     for i:=curpos to xmax-1 do begin

----------------------------------------------------------------------

R65 COMPILE 4.2: program PEDIT            13/11/23 page 9

 480 ( 7318)       s1[i-curpos]:=s2[i]; s2[i]:=' ';
 481 ( 7346)       end;
 482 ( 7350)     line:=line+1; nlines:=nlines+1;
 483 ( 7381)     savecx:=1; chkline; chktop(false); showall;
 484 ( 7408)   end;
 485 ( 7408) end;
 486 ( 7408) 
 487 ( 7409) proc paste;
 488 ( 7409) var l,i:integer; s1,s2:cpnt;
 489 ( 7412) begin
 490 ( 7412)   if nlines<maxlines-1 then begin
 491 ( 7425) 
 492 ( 7428)     for i:=nlines-1 downto line do
 493 ( 7439)       linepnt[i+1]:=linepnt[i];
 494 ( 7463)     nlines:=nlines+1;
 495 ( 7491)     if mark>line then mark:=mark+1;
 496 ( 7514)     linepnt[line]:=new;
 497 ( 7529)     s1:=linepnt[line];
 498 ( 7537)     s2:=linepnt[mark];
 499 ( 7549)     for i:=0 to xmax do s1[i]:=s2[i];
 500 ( 7586)     line:=line+1;
 501 ( 7612)     showall;
 502 ( 7621)   end else showerror('Error: Out of memory');
 503 ( 7653) end;
 504 ( 7653) 
 505 ( 7654) func doesc: boolean;
 506 ( 7654) var ch:char;
 507 ( 7657)     i,n:integer;
 508 ( 7657)     s,savl:cpnt;
 509 ( 7657) begin
 510 ( 7657)   clrmessage;
 511 ( 7663)   doesc:=false; savecx:=1;
 512 ( 7671)   getinput(ch,n,stemp);
 513 ( 7701)   if (ch='f') and (stemp[0]<>' ') and
 514 ( 7719)     (strlen(stemp)<>0) then
 515 ( 7735)     showerror('Expected f xxx')
 516 ( 7756)   else if (ch<>'l') and (ch<>'d') and (n>0) then
 517 ( 7787)     showerror('n>1 not allowed')
 518 ( 7809)   else begin
 519 ( 7818)     case ch of
 520 ( 7818)       't': begin {top}
 521 ( 7829)              line:=1; chktop(true);
 522 ( 7843)            end;
 523 ( 7843)       'b': begin {bottom}
 524 ( 7853)              line:=nlines-1; chktop(true);
 525 ( 7872)            end;
 526 ( 7872)       'l': begin {goto line}
 527 ( 7882)              line:=n; chkline; chktop(true);
 528 ( 7902)            end;
 529 ( 7902)       'f','g': begin {find string}
 530 ( 7919)              find(ch='g'); chkline; chktop(false);
 531 ( 7944)              showall;
 532 ( 7948)            end;
 533 ( 7948)       'c': begin {mark line for copy}
 534 ( 7958)              mark:=line;
 535 ( 7958)              s:=linepnt[line];
 536 ( 7970)              for i:=0 to xmax-1 do
 537 ( 7988)                s[i]:= chr(ord(s[i]) or $80);
 538 ( 8015)              line:=mark;
 539 ( 8034)              showall;

----------------------------------------------------------------------

R65 COMPILE 4.2: program PEDIT            13/11/23 page 10

 540 ( 8046)            end;
 541 ( 8046)       'p': begin {paste copied line}
 542 ( 8056)              if mark=0 then
 543 ( 8062)                showerror('Error: Nothing marked')
 544 ( 8090)              else paste;
 545 ( 8103)            end;
 546 ( 8103)       'd': begin {delete n lines}
 547 ( 8113)              if n<1 then n:=1;
 548 ( 8125)              if line+n=maxlines-3 then
 549 ( 8143)                n:=maxlines-3-line;
 550 ( 8154)              for i:=1 to n do begin
 551 ( 8182)                delline; line:=line+1;
 552 ( 8192)              end;
 553 ( 8197)              chkline; chktop(false); showall;
 554 ( 8227)            end;
 555 ( 8227)       'w': writeoutput; {write output}
 556 ( 8244)       'q': begin {write output and quit}
 557 ( 8251)              writeoutput; doesc:=true;
 558 ( 8257)            end;
 559 ( 8261)       'k': doesc:=true; {kill program}
 560 ( 8280)       '?','h': showerror('tb/l/fg/cpm/d/wqk/?h');
 561 ( 8323)       endmark: begin end
 562 ( 8333)       else showerror('tb/l/fg/cp/d/wqk/?h')
 563 ( 8358)     end {case};
 564 ( 8366)   end;
 565 ( 8366)   clrmessage;
 566 ( 8370) end;
 567 ( 8370) 
 568 ( 8371) proc newline;
 569 ( 8371) begin
 570 ( 8371)   linepnt[nlines]:=new; nlines:=nlines+1;
 571 ( 8396) end;
 572 ( 8401) 
 573 ( 8402) proc insert(ch:char;l:integer);
 574 ( 8402) { insert char at start of line (recursive) }
 575 ( 8402) var i,y:integer;
 576 ( 8405)     pnt:cpnt;
 577 ( 8405)     lstch1,lstch2:char;
 578 ( 8405) begin
 579 ( 8405)   if l>=nlines then newline;
 580 ( 8423)   pnt:=linepnt[l];
 581 ( 8427)   lstch1:=chr(ord(pnt[xmax-1]) and $7f);
 582 ( 8449)   lstch2:=chr(ord(pnt[xmax-2]) and $7f);
 583 ( 8468)   if (lstch1<>' ') or (lstch2<>' ')
 584 ( 8486)     then insert(lstch1,l+1);
 585 ( 8508)   for i:=xmax-2 downto 0 do pnt[i+1]:=pnt[i];
 586 ( 8543)   pnt[0]:=ch; y:=l-topline+1;
 587 ( 8584)   if (y>0) and (y<scrlins) then showline(pnt,y);
 588 ( 8621) end;
 589 ( 8621) 
 590 ( 8622) begin {main}
 591 ( 8622)   for i:=0 to maxlines-1 do linepnt[i]:=nil;
 592 ( 8652)   stemp:=strnew; stemp2:=strnew; fs:=strnew; debug:=0;
 593 ( 8702)   setnumlin($0f,$37); write(hom,clrscr);
 594 ( 8722)   putontop('Line xxx of xxx',0,true);
 595 ( 8750)   relpnt:=maxlines-1; mark:=0; savecx:=1;
 596 ( 8768)   clrmessage; readinput; fs[0]:=endmark;
 597 ( 8784)   putontop(title,36,true);
 598 ( 8802)   topline:= 1; line:=1; showall; stop:=false;
 599 ( 8820)   repeat

----------------------------------------------------------------------

R65 COMPILE 4.2: program PEDIT            13/11/23 page 11

 600 ( 8824)     showtop; chi := edlin(linepnt[line]);
 601 ( 8844)     if printable(chi) then insert(chi,line+1)
 602 ( 8873)     else case chi of
 603 ( 8883)       cup,cdown: begin
 604 ( 8901)              if chi=cup then line:=line-1
 605 ( 8915)              else line:=line+1;
 606 ( 8931)              chkline;
 607 ( 8940)              if curpos>lastpos(line)+2 then
 608 ( 8957)                savecx:=lastpos(line)+2;
 609 ( 8976)              chktop(true);
 610 ( 8989)            end;
 611 ( 8989)       pgup: begin
 612 ( 8999)              line:=line-15; chkline; chktop(true);
 613 ( 9022)            end;
 614 ( 9022)       pgdown: begin
 615 ( 9032)              line:=line+15; chkline; chktop(true);
 616 ( 9055)            end;
 617 ( 9055)       rup: if (topline>1) then begin
 618 ( 9072)              topline:=topline-1;chktop(false);showall;
 619 ( 9098)            end;
 620 ( 9098)       rdown: if (topline<nlines-15) then begin
 621 ( 9120)              topline:=topline+1;chktop(false);showall;
 622 ( 9146)            end;
 623 ( 9146)       hom: begin
 624 ( 9156)              line:=1; savecx:=1; chktop(true);
 625 ( 9176)            end;
 626 ( 9176)       pgend: begin
 627 ( 9186)              line:=nlines-1; savecx:=1; chktop(true);
 628 ( 9211)            end;
 629 ( 9211)       cr:  insertline;
 630 ( 9225)       esc: if doesc then stop:=true
 631 ( 9244)     end {case};
 632 ( 9252)     until stop;
 633 ( 9252)   setnumlin($29,$2f);
 634 ( 9269)   writeln(hom, clrscr);
 635 ( 9281)   dummy:=freedsk(fildrv,true);
 636 ( 9294) end.
 637 ( 9298) 

End compile

Code lenght:          9297
Compiler stack size:  123
Ident stack size:     185
Pascal errors:        0

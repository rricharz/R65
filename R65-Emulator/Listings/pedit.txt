
R65 Pascal program PEDIT           8/11/23     page 1


                   1 (    4) program pedit;
                   2 (    4) 
                   3 (    4) { Pascal editor, original 1980 RR
                   4 (    4)   rewritten 2023 RR for R65 system }
                   5 (    4) 
                   6 (    4) uses syslib, arglib, strlib,disklib;
                   7 ( 2655) 
                   8 ( 2655) const
                   9 ( 2655)     maxlines= 360;      xmax   = 56;
                  10 ( 2658)     scrlins = 16;       mlenght= 19;
                  11 ( 2658)     inpx    = 37;
                  12 ( 2658)     eol     = chr($00); esc    = chr($00);
                  13 ( 2658)     rdown   = chr($02); rup    = chr($08);
                  14 ( 2658)     pgdown  = chr($26); pgup   = chr($24);
                  15 ( 2658)     pgend   = chr($10); clrscr = chr($11);
                  16 ( 2658)     clrlin  = chr($17); cdown  = chr($18);
                  17 ( 2658)     cup     = chr($1a); cleft  = chr($03);
                  18 ( 2658)     inschr  = chr($15); delchr = chr($19);
                  19 ( 2658)     rubout  = chr($5f); cright = chr($16);
                  20 ( 2658) 
                  21 ( 2658) mem curlin  = $ed: integer&;
                  22 ( 2658)     curpos  = $ee: integer&;
                  23 ( 2658)     filcyc  = $311: integer&;
                  24 ( 2658)     video   = $400: array[900] of char&;
                  25 ( 2658)     topi    = $400: array[xmax] of integer&;
                  26 ( 2658)     topc    = $400: array[xmax] of char&;
                  27 ( 2658) 
                  28 ( 2658) 
                  29 ( 2658) var line,nlines,topline,i,dummy,debug: integer;
                  30 ( 2658)     name: array[15] of char;
                  31 ( 2658)     fno: file;
                  32 ( 2658)     chi : char;
                  33 ( 2658)     cyclus,drive,mark,nmark,savecx: integer;
                  34 ( 2658)     default, iseof, exit: boolean;
                  35 ( 2658)     fs: cpnt;
                  36 ( 2658)     linepnt: array[maxlines] of cpnt;
                  37 ( 2658)     relpnt:  integer;
                  38 ( 2658)     stemp,stemp2: cpnt;
                  39 ( 2658) 
                  40 ( 2658) proc putontop(s:cpnt;pos:integer;inv:boolean);
                  41 ( 2658) var i:integer;
                  42 ( 2661) begin
                  43 ( 2661)   i:=0; { faster version: if not in loop }
                  44 ( 2669)   if inv then while s[i]<>chr(0) do begin
                  45 ( 2698)     topi[i+pos]:=ord(s[i]) or 128; i:=i+1;
                  46 ( 2743)   end else while s[i]<>chr(0) do begin
                  47 ( 2776)     topc[i+pos]:=s[i]; i:=i+1;
                  48 ( 2818)   end;
                  49 ( 2823) end;
                  50 ( 2826) 
                  51 ( 2827) proc release(p:cpnt);
                  52 ( 2827) begin
                  53 ( 2827)   linepnt[relpnt]:=p; relpnt:=relpnt-1;
                  54 ( 2855) end;
                  55 ( 2860) 
                  56 ( 2861) proc setnumlin(l,c:integer);
                  57 ( 2861) mem numlin=$1789: integer&;
                  58 ( 2864)     numchr=$178a: integer&;
                  59 ( 2864) begin

----------------------------------------------------------------------

R65 Pascal program PEDIT           8/11/23     page 2

                  60 ( 2864)   numlin:=l; numchr:=c;
                  61 ( 2875) end;
                  62 ( 2884) 
                  63 ( 2885) func column:integer;
                  64 ( 2885) begin
                  65 ( 2885)   column:=line-topline+1;
                  66 ( 2901) end;
                  67 ( 2906) 
                  68 ( 2907) proc goto(xpos, ypos: integer);
                  69 ( 2907) begin
                  70 ( 2907)   curlin:=ypos; { top on line 2 }
                  71 ( 2920)   if curlin>15 then curlin:=15;
                  72 ( 2931)   curpos:=xpos-1;
                  73 ( 2941) end;
                  74 ( 2946) 
                  75 ( 2947) proc clrmessage;
                  76 ( 2947) var i:integer;
                  77 ( 2950) begin
                  78 ( 2950)   for i:=inpx-1 to xmax-1 do topi[i]:=128;
                  79 ( 2986) end;
                  80 ( 3007) 
                  81 ( 3008) proc showerror(s:cpnt);
                  82 ( 3008) var i: integer;
                  83 ( 3011)     ch: char;
                  84 ( 3011) begin
                  85 ( 3011)   clrmessage;
                  86 ( 3017)   putontop(s,36,true);
                  87 ( 3031)   read(@key,ch);
                  88 ( 3039)   clrmessage;
                  89 ( 3044) end;
                  90 ( 3044) 
                  91 ( 3045) func new:cpnt;
                  92 ( 3045) var i:integer;
                  93 ( 3048) begin
                  94 ( 3048)   if relpnt<maxlines-1 then begin
                  95 ( 3061)     relpnt:=relpnt+1; new:=linepnt[relpnt];
                  96 ( 3084)   end else begin
                  97 ( 3095)     if nlines<maxlines-1 then new:=strnew
                  98 ( 3109)     else new:=nil;
                  99 ( 3124)     if nlines>maxlines-5 then
                 100 ( 3137)       showerror('Warning: Low memory');
                 101 ( 3170)   end;
                 102 ( 3170) end;
                 103 ( 3170) 
                 104 ( 3171) proc newline;
                 105 ( 3171) begin
                 106 ( 3171)   linepnt[nlines]:=new;
                 107 ( 3191)   nlines:=nlines+1;
                 108 ( 3201) end;
                 109 ( 3206) 
                 110 ( 3207) proc getinput(var n:integer; s:cpnt);
                 111 ( 3207) var i,j,stop:integer; ch: char;
                 112 ( 3210) begin
                 113 ( 3210)   goto(inpx,0); write(chr(ord(':') or 128));
                 114 ( 3229)   read(@key,ch); i:=0;
                 115 ( 3240)   while (ch<>chr(13)) and (ch<>esc) do begin
                 116 ( 3263)     if (ch=rubout) then begin
                 117 ( 3270)       if i>0 then i:=i-1; goto(i+inpx+1,0);
                 118 ( 3312)       write(chr(ord(' ') or 128),cleft);
                 119 ( 3322)     end else if (ch>=' ') and (ch<=chr($7d)) and

----------------------------------------------------------------------

R65 Pascal program PEDIT           8/11/23     page 3

                 120 ( 3340)       (inpx+i<xmax-1) then begin
                 121 ( 3355)       goto(i+inpx+1,0);
                 122 ( 3376)       write(chr(ord(ch) or 128)); i:=i+1;
                 123 ( 3391)     end;
                 124 ( 3396)     read(@key,ch);
                 125 ( 3404)   end;
                 126 ( 3405)   stop:=i+inpx;
                 127 ( 3414)   i:=inpx; n:=0;
                 128 ( 3427)   while ((topi[i] and 127)>=ord('0')) and
                 129 ( 3451)     ((topi[i] and 127)<=ord('9')) and
                 130 ( 3471)     (i<stop) do begin
                 131 ( 3485)     n:=10*n+(topi[i] and 127)-ord('0');
                 132 ( 3512)     i:=i+1;
                 133 ( 3523)   end;
                 134 ( 3528)   j:=0;
                 135 ( 3533)   while i<stop do begin
                 136 ( 3549)     s[j]:=chr(topi[i] and 127); i:=i+1; j:=j+1;
                 137 ( 3597)   end;
                 138 ( 3602)   s[j]:=chr(0);
                 139 ( 3616) end;
                 140 ( 3621) 
                 141 ( 3622) func readline(input: file; pnt: cpnt): boolean;
                 142 ( 3622) const alteof=chr(127);
                 143 ( 3625) var ch1: char;
                 144 ( 3625)     pos: integer;
                 145 ( 3625) begin
                 146 ( 3625)   pos := 0; read(@fno,ch1);
                 147 ( 3643)   while (ch1>=' ') and (ch1<>alteof) and
                 148 ( 3658)       (pos<xmax-1) do begin
                 149 ( 3673)     pnt[pos]:=ch1; pos:=pos+1; read(@fno,ch1);
                 150 ( 3711)     end;
                 151 ( 3712)   while pos<xmax do begin
                 152 ( 3725)     pnt[pos]:=' '; pos:=pos+1;
                 153 ( 3746)   end;
                 154 ( 3751)   readline:=(ch1=eof) or (ch1=alteof);
                 155 ( 3768) end;
                 156 ( 3773) 
                 157 ( 3774) proc showline(pnt:cpnt; y: integer);
                 158 ( 3774) var lstart,pos: integer;
                 159 ( 3777) begin
                 160 ( 3777)   lstart:=y*xmax;
                 161 ( 3785)   if (pnt=nil) then
                 162 ( 3797)    for pos:=0 to xmax-1 do
                 163 ( 3810)     video[lstart+pos]:='_'
                 164 ( 3834)   else begin
                 165 ( 3860)     pos:=0;
                 166 ( 3862)     while (pos<xmax) and (pnt[pos]<>chr(0)) do begin
                 167 ( 3896)       video[lstart+pos]:=pnt[pos]; pos:=pos+1
                 168 ( 3936)     end;
                 169 ( 3943)     while pos<xmax do begin
                 170 ( 3956)       video[lstart+pos]:=' '; pos:=pos+1
                 171 ( 3983)     end
                 172 ( 3985)   end;
                 173 ( 3993) end;
                 174 ( 3993) 
                 175 ( 3994) proc showtop;
                 176 ( 3994) begin
                 177 ( 3994)   intstr(line,stemp,3); putontop(stemp,5,true);
                 178 ( 4029)   intstr(nlines-1,stemp,3); putontop(stemp,12,true);
                 179 ( 4062) end;

----------------------------------------------------------------------

R65 Pascal program PEDIT           8/11/23     page 4

                 180 ( 4062) 
                 181 ( 4063) proc showall;
                 182 ( 4063) var lstart,y,i,l,lstart: integer;
                 183 ( 4066) begin
                 184 ( 4066)   showtop;
                 185 ( 4072)   for y:=1 to scrlins-1 do begin
                 186 ( 4092)     l:=topline-1+y; lstart:=y*xmax;
                 187 ( 4114)     if l<nlines then
                 188 ( 4123)       showline(linepnt[l],y)
                 189 ( 4144)     else
                 190 ( 4154)       for i:=0 to xmax-1 do
                 191 ( 4167)         video[lstart+i]:=' ';
                 192 ( 4193)   end;
                 193 ( 4214) end;
                 194 ( 4228) 
                 195 ( 4229) proc updline(pnt: cpnt; lstart:integer);
                 196 ( 4229) var pos: integer;
                 197 ( 4232) begin
                 198 ( 4232)   for pos:=0 to xmax-1 do
                 199 ( 4244)     pnt[pos]:=video[lstart+pos];
                 200 ( 4280) end;
                 201 ( 4300) 
                 202 ( 4301) func lastpos(l:integer):integer;
                 203 ( 4301) { returns -1 if line empty }
                 204 ( 4301) var endpos:integer;
                 205 ( 4304)     s:cpnt;
                 206 ( 4304) begin
                 207 ( 4304)   endpos:=xmax-1;
                 208 ( 4310)   s:=linepnt[l];
                 209 ( 4324)   while (chr(ord(s[endpos]) and $7f)=' ')
                 210 ( 4353)     and (endpos>0) do endpos:=endpos-1;
                 211 ( 4371)   if (endpos=0) and (chr(ord(s[endpos]) and $7f)=' ')
                 212 ( 4407)   then endpos:=-1;
                 213 ( 4414)   lastpos:=endpos;
                 214 ( 4419) end;
                 215 ( 4427) 
                 216 ( 4428) proc chkline;
                 217 ( 4428) begin
                 218 ( 4428)   if line<1 then line:=1
                 219 ( 4443)   else if line>nlines-1 then line:=nlines-1;
                 220 ( 4473) end;
                 221 ( 4478) 
                 222 ( 4479) proc chktop(show: boolean);
                 223 ( 4479) var savetop,bottom:integer;
                 224 ( 4482) begin
                 225 ( 4482)   savetop:=topline; bottom:=topline+scrlins-1;
                 226 ( 4501)   if line<topline then topline:=line;
                 227 ( 4518)   { keep cursor above bottom line, if possible }
                 228 ( 4526)   if line>=bottom-1 then
                 229 ( 4536)     topline:=line-scrlins+3;
                 230 ( 4550)   if show and (savetop<>topline) then showall;
                 231 ( 4576) end;
                 232 ( 4576) 
                 233 ( 4577) proc delline;
                 234 ( 4577) var i:integer; savpnt:cpnt;
                 235 ( 4580) begin
                 236 ( 4580)   chkline; savpnt:=linepnt[line];
                 237 ( 4595)   if line<mark then mark:=mark-1
                 238 ( 4619)   else if line<mark+nmark then nmark:=nmark-1;
                 239 ( 4652)   for i:=line to nlines-2 do

----------------------------------------------------------------------

R65 Pascal program PEDIT           8/11/23     page 5

                 240 ( 4671)     linepnt[i]:=linepnt[i+1];
                 241 ( 4702)   release(savpnt); nlines:=nlines-1;
                 242 ( 4740)   chkline; chktop(false);
                 243 ( 4757)   line:=line-1; savecx:=1;
                 244 ( 4770) end;
                 245 ( 4774) 
                 246 ( 4775) proc join;
                 247 ( 4775) var p,p1,p2,pm:integer;
                 248 ( 4778)     s1,s2:cpnt;
                 249 ( 4778) begin
                 250 ( 4778)   p1:=lastpos(line-1); p2:=lastpos(line);
                 251 ( 4811)   s1:=linepnt[line-1]; s2:=linepnt[line];
                 252 ( 4844)   for p:=p1+1 to xmax-1 do s1[p]:=s2[p-p1-1];
                 253 ( 4907)   if p1+p2<xmax then delline
                 254 ( 4939)   else begin
                 255 ( 4949)     pm:=xmax-p1;
                 256 ( 4951)     for p:=0 to xmax-pm do s2[+p]:=s2[p+pm-1];
                 257 ( 5012)     for p:=xmax-pm+1 to xmax-1 do s2[p]:=' ';
                 258 ( 5071)     line:=line-1;
                 259 ( 5095)   end;
                 260 ( 5100)   savecx:=p1+2; chkline; chktop(false); showall;
                 261 ( 5127) end;
                 262 ( 5127) 
                 263 ( 5128) func edlin(pnt: cpnt): char;
                 264 ( 5128) const key    = @1;
                 265 ( 5131) var   ch1,lastch: char;
                 266 ( 5131)       exit: boolean;
                 267 ( 5131)       lstart: integer;
                 268 ( 5131) begin
                 269 ( 5131)    goto(savecx,column);
                 270 ( 5149)   if savecx=1 then write(cright,cleft)
                 271 ( 5164)   else write(cleft,cright); {to update cursor}
                 272 ( 5174)   exit:=false; lstart:=column*xmax;
                 273 ( 5188)   repeat
                 274 ( 5193)     read(@key,ch1);
                 275 ( 5201)     lastch:=' ');
                 276 ( 5208)     case ch1 of
                 277 ( 5208)       delchr,rubout: if (curpos=0) and (line>1)
                 278 ( 5238)              then begin
                 279 ( 5240)                updline(pnt,lstart) ;join; exit:=true;
                 280 ( 5263)                end
                 281 ( 5267)              else write(cleft,delchr);
                 282 ( 5276)       cleft: if curpos>0 then write(cleft)
                 283 ( 5297)              else if line>1 then begin
                 284 ( 5308)                updline(pnt,lstart);
                 285 ( 5325)                line:=line-1; curpos:=lastpos(line)+1;
                 286 ( 5350)                exit:=true;
                 287 ( 5357)              end;
                 288 ( 5361)       cright:if curpos<xmax-1 then begin
                 289 ( 5380)                write(cright);
                 290 ( 5386)              end else if line<nlines-1 then begin
                 291 ( 5401)                updline(pnt,lstart);
                 292 ( 5418)                line:=line+1; curpos:=0;
                 293 ( 5431)                exit:=true;
                 294 ( 5437)              end;
                 295 ( 5441)       cup,cdown,esc,cr,rup,rdown,
                 296 ( 5483)       pgup,pgdown,hom,pgend: exit:=true
                 297 ( 5514)       else begin
                 298 ( 5523)              if (ch1>=' ') and (ch1<chr($7f))
                 299 ( 5536)              then begin

----------------------------------------------------------------------

R65 Pascal program PEDIT           8/11/23     page 6

                 300 ( 5539)                lastch:=video[lstart+xmax-1];
                 301 ( 5560)                lastch:=chr(ord(lastch) and $7f);
                 302 ( 5573)                if (lastch<>' ') and
                 303 ( 5585)                  (line>=nlines-1) then newline;
                 304 ( 5605)                if curpos>=xmax-1 then begin
                 305 ( 5614)                  if line>=nlines-1 then newline;
                 306 ( 5636)                  video[lstart+xmax-1]:=ch1;
                 307 ( 5651)                  curpos:=0;
                 308 ( 5664)                  lastch:=cdown;
                 309 ( 5670)                end else begin
                 310 ( 5677)                  write(inschr); write(ch1);
                 311 ( 5685)                end;
                 312 ( 5685)                if lastch<>' ' then exit:=true;
                 313 ( 5697)              end;
                 314 ( 5701)            end
                 315 ( 5701)     end {case};
                 316 ( 5703)     until exit;
                 317 ( 5703)   updline(pnt,lstart);
                 318 ( 5724)   if lastch<>' ' then edlin:=lastch
                 319 ( 5734)   else edlin:=ch1;
                 320 ( 5745)   if (ch1<>delchr) and (ch1<>rubout) then
                 321 ( 5767)     savecx:=curpos+1;
                 322 ( 5776) end;
                 323 ( 5781) 
                 324 ( 5782) proc readinput;
                 325 ( 5782) var i,pend:integer;
                 326 ( 5785) begin
                 327 ( 5785)   cyclus:=0; drive:=1;
                 328 ( 5795)   goto(1,1); write(clrscr);
                 329 ( 5812)   agetstring(name,default,cyclus,drive);
                 330 ( 5852)   asetfile(name,cyclus,drive,'P');
                 331 ( 5874)   openr(fno);
                 332 ( 5880)   nlines := 1; line:=1; topline:=1;
                 333 ( 5894)   pend:=15; while name[pend]=' ' do pend:=pend-1;
                 334 ( 5929)   for i:=0 to pend do stemp[i]:=name[i];
                 335 ( 5974)   stemp[pend+1]:=chr(0);
                 336 ( 6010)   stradd(':P.',stemp);
                 337 ( 6031)   hexstr(filcyc,stemp2);
                 338 ( 6045)   stradd(stemp2,stemp);
                 339 ( 6059)   while strlen(stemp)<17 do stradd(' ',stemp);
                 340 ( 6091)   putontop(stemp,17,true);
                 341 ( 6108)   putontop('Reading',36,true);
                 342 ( 6128)   repeat
                 343 ( 6128)     linepnt[nlines] := new;
                 344 ( 6143)     iseof := readline(fno, linepnt[nlines]);
                 345 ( 6172)     nlines := nlines+1;
                 346 ( 6182)     showtop;
                 347 ( 6191)     until iseof or (nlines >= maxlines-9);
                 348 ( 6206)   if nlines >= maxlines-9 then
                 349 ( 6219)       showerror('Too many lines');
                 350 ( 6247)   close(fno);
                 351 ( 6253)   clrmessage;
                 352 ( 6257)   showall;
                 353 ( 6261) end;
                 354 ( 6261) 
                 355 ( 6262) proc writeoutput;
                 356 ( 6262) var pos,endpos:integer;s,saveline:cpnt;
                 357 ( 6265) begin
                 358 ( 6265)   cyclus:=0; drive:=1;
                 359 ( 6275)   goto(1,1); write(clrscr);

----------------------------------------------------------------------

R65 Pascal program PEDIT           8/11/23     page 7

                 360 ( 6292)   asetfile(name,cyclus,drive,'P');
                 361 ( 6314)   openw(fno);
                 362 ( 6320)   putontop('Writing',36,true);
                 363 ( 6340)   for line:=1 to nlines-1 do begin
                 364 ( 6362)     showtop;
                 365 ( 6366)     endpos:=lastpos(line);
                 366 ( 6378)     s:=linepnt[line];
                 367 ( 6391)     for pos:=0 to endpos do
                 368 ( 6405)       write(@fno,chr(ord(s[pos]) and $7f));
                 369 ( 6444)     if (line<nlines-1) then write(@fno,cr);
                 370 ( 6482)   end;
                 371 ( 6482)   close(fno); line:=nlines-1;
                 372 ( 6508)   showall;
                 373 ( 6517) end;
                 374 ( 6517) 
                 375 ( 6518) proc clrmarks;
                 376 ( 6518) var x,savel:integer; s:cpnt;
                 377 ( 6521) begin
                 378 ( 6521)   savel:=line;
                 379 ( 6523)   for line:=1 to nlines-1 do begin
                 380 ( 6553)     s:=linepnt[line];
                 381 ( 6562)     for x:=0 to xmax-1 do
                 382 ( 6580)       s[x]:=chr(ord(s[x]) and $7f);
                 383 ( 6617)     showtop;
                 384 ( 6640)     end;
                 385 ( 6640)   line:=savel; mark:=0; nmark:=0;
                 386 ( 6670) end;
                 387 ( 6674) 
                 388 ( 6675) proc find(again:boolean);
                 389 ( 6675) var pos,x,i:integer;
                 390 ( 6678)     ch:char;
                 391 ( 6678)     found:boolean;
                 392 ( 6678)     s2:cpnt;
                 393 ( 6678) 
                 394 ( 6678)   proc checkrest;
                 395 ( 6678)   var failed:boolean;
                 396 ( 6681)       x1:integer;
                 397 ( 6681)       s1:cpnt;
                 398 ( 6681)   begin
                 399 ( 6681)     failed:=false; pos:=3; x1:=x+1;
                 400 ( 6701)     while (fs[pos]<>chr(0)) and (x1<xmax) do begin
                 401 ( 6736)       s1:=linepnt[line];
                 402 ( 6745)       if s1[x1] <> fs[pos] then failed:=true;
                 403 ( 6789)       pos:=pos+1; x1:=x1+1;
                 404 ( 6810)       end;
                 405 ( 6815)      if (failed=false) and (fs[pos]=chr(0))
                 406 ( 6842)       then found:=true;
                 407 ( 6850)   end;
                 408 ( 6854) 
                 409 ( 6855) begin
                 410 ( 6855)   if not again then strcpy(stemp,fs);
                 411 ( 6879)   if fs[1]=chr(0) then begin
                 412 ( 6896)     {empty string -> delete all marks}
                 413 ( 6899)     putontop('Clearing marks',36,true);
                 414 ( 6926)     clrmarks; showall;
                 415 ( 6934)     end
                 416 ( 6934)   else begin
                 417 ( 6937)     putontop('Searching',36,true);
                 418 ( 6959)     found:=false;
                 419 ( 6961)     repeat

----------------------------------------------------------------------

R65 Pascal program PEDIT           8/11/23     page 8

                 420 ( 6965)       x:=0;
                 421 ( 6967)       repeat
                 422 ( 6971)         pos:=2;
                 423 ( 6973)         s2:=linepnt[line];
                 424 ( 6986)         if s2[x]=fs[pos] then checkrest;
                 425 ( 7032)         x:=x+1;
                 426 ( 7038)         until found or (x>=xmax);
                 427 ( 7054)       showtop; line:=line+1;
                 428 ( 7068)       until found or (line>=nlines);
                 429 ( 7086)     if found then begin
                 430 ( 7094)       line:=line-1; x:=x-1; i:=2;
                 431 ( 7121)       s2:=linepnt[line];
                 432 ( 7134)       while fs[i]<>chr(0) do begin
                 433 ( 7164)         s2[x+i-2]:=chr(ord(s2[x+i-2]) or $80);
                 434 ( 7207)          i:=i+1;
                 435 ( 7218)         end
                 436 ( 7223)       end
                 437 ( 7223)     else begin
                 438 ( 7229)       line:=nlines-1;
                 439 ( 7235)     end;
                 440 ( 7240)   end
                 441 ( 7240) end;
                 442 ( 7240) 
                 443 ( 7241) proc insertline;
                 444 ( 7241) var i:integer;
                 445 ( 7244)     s1,s2:cpnt;
                 446 ( 7244) begin
                 447 ( 7244)   if nlines<maxlines-1 then begin
                 448 ( 7257)     if line<mark then mark:=mark+1
                 449 ( 7276)     else if line<mark+nmark then nmark:=nmark+1;
                 450 ( 7309)     if line<nlines-1 then begin
                 451 ( 7326)       for i:=nlines-1 downto line+1 do
                 452 ( 7346)         linepnt[i+1]:=linepnt[i];
                 453 ( 7377)       end;
                 454 ( 7399)     linepnt[line+1]:=new;
                 455 ( 7417)     s1:=linepnt[line+1]; s2:=linepnt[line];
                 456 ( 7450)     for i:=0 to xmax-1 do s1[i]:=' ';
                 457 ( 7489)     for i:=curpos to xmax-1 do begin
                 458 ( 7528)       s1[i-curpos]:=s2[i]; s2[i]:=' ';
                 459 ( 7571)       end;
                 460 ( 7575)     line:=line+1; nlines:=nlines+1;
                 461 ( 7606)     savecx:=1; chkline; chktop(false); showall;
                 462 ( 7633)   end;
                 463 ( 7633) end;
                 464 ( 7633) 
                 465 ( 7634) proc paste;
                 466 ( 7634) var l,i:integer; s1,s2:cpnt;
                 467 ( 7637) begin
                 468 ( 7637)   if nlines+nmark<nlines-5 then begin
                 469 ( 7656)     for i:=nlines-1 downto line do
                 470 ( 7670)       linepnt[i+nmark]:=linepnt[i];
                 471 ( 7706)     nlines:=nlines+nmark;
                 472 ( 7732)     if mark>line then mark:=mark+nmark;
                 473 ( 7757)     for l:=mark to mark+nmark-1 do begin
                 474 ( 7795)       linepnt[line]:=new;
                 475 ( 7810)       s1:=linepnt[line]; s2:=linepnt[l];
                 476 ( 7840)       for i:=0 to xmax-1 do s1[i]:=s2[i];
                 477 ( 7890)       line:=line+1;
                 478 ( 7916)     end;
                 479 ( 7921)     showall;

----------------------------------------------------------------------

R65 Pascal program PEDIT           8/11/23     page 9

                 480 ( 7939)   end else showerror('Error: Out of memory');
                 481 ( 7971) end;
                 482 ( 7971) 
                 483 ( 7972) proc move;
                 484 ( 7972) var i,j,saveline:integer; savepnt:cpnt;
                 485 ( 7975) begin
                 486 ( 7975)   saveline:=line; { insert above}
                 487 ( 7985)   if line>=mark+nmark then begin
                 488 ( 7999)     mark:=mark+nmark-1;
                 489 ( 8013)     for j:=0 to nmark-1 do begin
                 490 ( 8040)       savepnt:=linepnt[mark];
                 491 ( 8049)       for i:=mark to line-1 do
                 492 ( 8071)         linepnt[i]:=linepnt[i+1];
                 493 ( 8102)       mark:=mark-1; line:=line-1;
                 494 ( 8141)       linepnt[line]:=savepnt;
                 495 ( 8155)     end;
                 496 ( 8163)   end else if line<mark then begin
                 497 ( 8189)     for j:=0 to nmark-1 do begin
                 498 ( 8214)       savepnt:=linepnt[mark];
                 499 ( 8223)       for i:=mark downto line+1 do
                 500 ( 8245)         linepnt[i]:=linepnt[i-1];
                 501 ( 8276)       linepnt[line]:=savepnt;
                 502 ( 8307)       mark:=mark+1; line:=line+1;
                 503 ( 8332)     end;
                 504 ( 8337)   end else showerror('Move inside move');
                 505 ( 8379)  mark:=saveline; line:=saveline; showall;
                 506 ( 8399) end;
                 507 ( 8399) 
                 508 ( 8400) func doesc: boolean;
                 509 ( 8400) var ch:char;
                 510 ( 8403)     i,n:integer;
                 511 ( 8403)     s,savl:cpnt;
                 512 ( 8403) begin
                 513 ( 8403)   doesc:=false; savecx:=1;
                 514 ( 8413)   getinput(n,stemp); ch:=stemp[0];
                 515 ( 8446)   if (strlen(stemp)>1) and (stemp[1]<>' ') then
                 516 ( 8483)     showerror('Expected f: xxx')
                 517 ( 8505)   else begin
                 518 ( 8514)     case ch of
                 519 ( 8514)       't': begin {top}
                 520 ( 8525)              line:=1; chktop(true);
                 521 ( 8539)            end;
                 522 ( 8539)       'b': begin {bottom}
                 523 ( 8549)              line:=nlines-1; chktop(true);
                 524 ( 8568)            end;
                 525 ( 8568)       'l': begin {line number}
                 526 ( 8578)              line:=n; chkline; chktop(true);
                 527 ( 8598)            end;
                 528 ( 8598)       'f','g': begin {find string}
                 529 ( 8615)              find(ch='g'); chkline; chktop(false);
                 530 ( 8640)              showall;
                 531 ( 8644)            end;
                 532 ( 8644)       'c': begin {mark lines for copy}
                 533 ( 8654)              if n<1 then n:=1;
                 534 ( 8666)              if line+n>= nlines-1 then
                 535 ( 8685)                showerror('Too many lines')
                 536 ( 8707)              else begin
                 537 ( 8716)                mark:=line; nmark:=n;
                 538 ( 8724)                for line:=mark to mark+nmark-1 do
                 539 ( 8751)                begin

----------------------------------------------------------------------

R65 Pascal program PEDIT           8/11/23     page 10

                 540 ( 8761)                  s:=linepnt[line];
                 541 ( 8770)                  for i:=0 to xmax-1 do
                 542 ( 8788)                    s[i]:= chr(ord(s[i]) or $80);
                 543 ( 8825)                end;
                 544 ( 8844)                line:=mark;
                 545 ( 8858)              end;
                 546 ( 8866)              showall;
                 547 ( 8870)            end;
                 548 ( 8870)       'p': begin {paste marked lines}
                 549 ( 8880)              if mark=0 then
                 550 ( 8886)                showerror('Nothing marked')
                 551 ( 8907)              else begin
                 552 ( 8916)                if nlines+nmark>=maxlines then
                 553 ( 8928)                  showerror('Too many lines')
                 554 ( 8949)                else paste;
                 555 ( 8962)              end;
                 556 ( 8962)            end;
                 557 ( 8962)       'm': begin {move marked lines }
                 558 ( 8972)              if mark=0 then
                 559 ( 8978)                showerror('Nothing marked')
                 560 ( 8999)              else move;
                 561 ( 9012)            end;
                 562 ( 9012)       'd': begin {delete n lines}
                 563 ( 9022)              if n<1 then n:=1;
                 564 ( 9034)              if line+n=maxlines-3 then
                 565 ( 9052)                n:=maxlines-3-line;
                 566 ( 9063)              for i:=1 to n do begin
                 567 ( 9091)                delline; line:=line+1;
                 568 ( 9101)              end;
                 569 ( 9106)              chkline; chktop(false); showall;
                 570 ( 9136)            end;
                 571 ( 9136)       'w': writeoutput; {write output}
                 572 ( 9153)       'q': begin {write output and quit}
                 573 ( 9160)              writeoutput; doesc:=true;
                 574 ( 9166)            end;
                 575 ( 9170)       'k': doesc:=true; {kill program}
                 576 ( 9189)       '?','h': showerror('tb/l/fg/cpm/d/wqk/?h');
                 577 ( 9232)       chr(0): begin end
                 578 ( 9242)       else showerror('tb/l/fg/cpm/d/wqk/?h')
                 579 ( 9268)     end {case};
                 580 ( 9276)   end;
                 581 ( 9276)   clrmessage;
                 582 ( 9280) end;
                 583 ( 9280) 
                 584 ( 9281) proc newline;
                 585 ( 9281) begin
                 586 ( 9281)   linepnt[nlines]:=new; nlines:=nlines+1;
                 587 ( 9311) end;
                 588 ( 9316) 
                 589 ( 9317) proc insert(ch:char;l:integer);
                 590 ( 9317) { insert char at start of line }
                 591 ( 9317) var i,y:integer;
                 592 ( 9320)     pnt:cpnt;
                 593 ( 9320) begin
                 594 ( 9320)   if l>=nlines then newline;
                 595 ( 9338)   pnt:=linepnt[l];
                 596 ( 9347)   for i:=xmax-2 downto 0 do pnt[i+1]:=pnt[i];
                 597 ( 9400)   pnt[0]:=ch; y:=l-topline+1;
                 598 ( 9446)   if (y>0) and (y<scrlins) then showline(pnt,y);
                 599 ( 9483) end;

----------------------------------------------------------------------

R65 Pascal program PEDIT           8/11/23     page 11

                 600 ( 9483) 
                 601 ( 9484) begin {main}
                 602 ( 9484)   stemp:=strnew; stemp2:=strnew; fs:=strnew; debug:=0;
                 603 ( 9519)   setnumlin($0f,$37); write(hom,clrscr);
                 604 ( 9539)   putontop('Line xxx of xxx',0,true);
                 605 ( 9567)   relpnt:=maxlines-1; mark:=0; nmark:=0; savecx:=1;
                 606 ( 9591)   clrmessage; readinput; fs[0]:=chr(0);
                 607 ( 9612)   topline:= 1; line:=1; showall; exit:=false;
                 608 ( 9635)   repeat
                 609 ( 9639)     showtop; chi := edlin(linepnt[line]);
                 610 ( 9664)     if (ord(chi)>=$20) and (ord(chi)<=$7e) then begin
                 611 ( 9683)       { printable character }
                 612 ( 9686)       insert(chi,line+1);
                 613 ( 9703)     end else case chi of
                 614 ( 9706)       cup,cdown: begin
                 615 ( 9724)              if chi=cup then line:=line-1
                 616 ( 9738)              else line:=line+1;
                 617 ( 9754)              chkline;
                 618 ( 9763)              if curpos>lastpos(line)+2 then
                 619 ( 9780)                savecx:=lastpos(line)+2;
                 620 ( 9799)              chktop(true);
                 621 ( 9812)            end;
                 622 ( 9812)       pgup: begin
                 623 ( 9822)              line:=line-15; chkline; chktop(true);
                 624 ( 9845)            end;
                 625 ( 9845)       pgdown: begin
                 626 ( 9855)              line:=line+15; chkline; chktop(true);
                 627 ( 9878)            end;
                 628 ( 9878)       rup: if (topline>1) then begin
                 629 ( 9895)              topline:=topline-1;chktop(false);showall;
                 630 ( 9921)            end;
                 631 ( 9921)       rdown: if (topline<nlines-15) then begin
                 632 ( 9943)              topline:=topline+1;chktop(false);showall;
                 633 ( 9969)            end;
                 634 ( 9969)       hom: begin
                 635 ( 9979)              line:=1; savecx:=1; chktop(true);
                 636 (9999)            end;
                 637 (9999)       pgend: begin
                 638 (10009)              line:=nlines-1; savecx:=1; chktop(true);
                 639 (10034)            end;
                 640 (10034)       cr:  insertline;
                 641 (10048)       esc: if doesc then exit:=true
                 642 (10067)     end {case};
                 643 (10075)     until exit;
                 644 (10075)   setnumlin($29,$2f);
                 645 (10092)   writeln(hom, clrscr);
                 646 (10104)   dummy:=freedsk(fildrv,true);
                 647 (10117) end.
                 648 (10121) 

End compile

Code lenght:          10120
Compiler stack size:  119
Ident stack size:     180
Pascal errors:        0

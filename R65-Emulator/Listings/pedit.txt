
R65 Pascal program PEDIT           9/11/23     page 1


                   1 (    4) program pedit;
                   2 (    4) 
                   3 (    4) { Pascal editor, original 1980 RR
                   4 (    4)   rewritten 2023 RR for R65 system }
                   5 (    4) 
                   6 (    4) uses syslib, arglib, strlib,disklib;
                   7 ( 2655) 
                   8 ( 2655) const
                   9 ( 2655)     maxlines= 360;      xmax   = 56;
                  10 ( 2658)     scrlins = 16;       mlenght= 19;
                  11 ( 2658)     inpx    = 37;
                  12 ( 2658)     eol     = chr($00); esc    = chr($00);
                  13 ( 2658)     rdown   = chr($02); rup    = chr($08);
                  14 ( 2658)     pgdown  = chr($26); pgup   = chr($24);
                  15 ( 2658)     pgend   = chr($10); clrscr = chr($11);
                  16 ( 2658)     clrlin  = chr($17); cdown  = chr($18);
                  17 ( 2658)     cup     = chr($1a); cleft  = chr($03);
                  18 ( 2658)     inschr  = chr($15); delchr = chr($19);
                  19 ( 2658)     rubout  = chr($5f); cright = chr($16);
                  20 ( 2658) 
                  21 ( 2658) mem curlin  = $ed: integer&;
                  22 ( 2658)     curpos  = $ee: integer&;
                  23 ( 2658)     filcyc  = $311: integer&;
                  24 ( 2658)     video   = $400: array[900] of char&;
                  25 ( 2658)     topi    = $400: array[xmax] of integer&;
                  26 ( 2658)     topc    = $400: array[xmax] of char&;
                  27 ( 2658) 
                  28 ( 2658) 
                  29 ( 2658) var line,nlines,topline,i,dummy,debug: integer;
                  30 ( 2658)     name: array[15] of char;
                  31 ( 2658)     fno: file;
                  32 ( 2658)     chi : char;
                  33 ( 2658)     cyclus,drive,mark,nmark,savecx: integer;
                  34 ( 2658)     default, iseof, exit: boolean;
                  35 ( 2658)     fs: cpnt;
                  36 ( 2658)     linepnt: array[maxlines] of cpnt;
                  37 ( 2658)     relpnt:  integer;
                  38 ( 2658)     stemp,stemp2: cpnt;
                  39 ( 2658) 
                  40 ( 2658) proc putontop(s:cpnt;pos:integer;inv:boolean);
                  41 ( 2658) var i:integer;
                  42 ( 2661) begin
                  43 ( 2661)   i:=0; { faster version: if not in loop }
                  44 ( 2669)   if inv then while s[i]<>endmark do begin
                  45 ( 2692)     topi[i+pos]:=ord(s[i]) or 128; i:=i+1;
                  46 ( 2727)   end else while s[i]<>endmark do begin
                  47 ( 2754)     topc[i+pos]:=s[i]; i:=i+1;
                  48 ( 2786)   end;
                  49 ( 2791) end;
                  50 ( 2794) 
                  51 ( 2795) proc release(p:cpnt);
                  52 ( 2795) begin
                  53 ( 2795)   linepnt[relpnt]:=p; relpnt:=relpnt-1;
                  54 ( 2818) end;
                  55 ( 2823) 
                  56 ( 2824) proc setnumlin(l,c:integer);
                  57 ( 2824) mem numlin=$1789: integer&;
                  58 ( 2827)     numchr=$178a: integer&;
                  59 ( 2827) begin

----------------------------------------------------------------------

R65 Pascal program PEDIT           9/11/23     page 2

                  60 ( 2827)   numlin:=l; numchr:=c;
                  61 ( 2838) end;
                  62 ( 2847) 
                  63 ( 2848) func column:integer;
                  64 ( 2848) begin
                  65 ( 2848)   column:=line-topline+1;
                  66 ( 2864) end;
                  67 ( 2869) 
                  68 ( 2870) proc goto(xpos, ypos: integer);
                  69 ( 2870) begin
                  70 ( 2870)   curlin:=ypos; { top on line 2 }
                  71 ( 2883)   if curlin>15 then curlin:=15;
                  72 ( 2894)   curpos:=xpos-1;
                  73 ( 2904) end;
                  74 ( 2909) 
                  75 ( 2910) proc clrmessage;
                  76 ( 2910) var i:integer;
                  77 ( 2913) begin
                  78 ( 2913)   for i:=inpx-1 to xmax-1 do topi[i]:=128;
                  79 ( 2944) end;
                  80 ( 2965) 
                  81 ( 2966) proc showerror(s:cpnt);
                  82 ( 2966) var i: integer;
                  83 ( 2969)     ch: char;
                  84 ( 2969) begin
                  85 ( 2969)   clrmessage;
                  86 ( 2975)   putontop(s,36,true);
                  87 ( 2989)   read(@key,ch);
                  88 ( 2997)   clrmessage;
                  89 ( 3002) end;
                  90 ( 3002) 
                  91 ( 3003) func new:cpnt;
                  92 ( 3003) var i:integer;
                  93 ( 3006)     s:cpnt;
                  94 ( 3006) begin
                  95 ( 3006)   if relpnt<maxlines-1 then begin
                  96 ( 3019)     relpnt:=relpnt+1; new:=linepnt[relpnt];
                  97 ( 3037)   end else begin
                  98 ( 3048)     if nlines<maxlines-1 then begin
                  99 ( 3059)       s:=strnew;
                 100 ( 3068)       for i:=0 to xmax-1 do s[i]:=' ';
                 101 ( 3098)       s[xmax]:=endmark;
                 102 ( 3120)       new:=s;
                 103 ( 3124)     end else new:=nil;
                 104 ( 3137)     if nlines>maxlines-5 then
                 105 ( 3150)       showerror('Warning: Low memory');
                 106 ( 3183)   end;
                 107 ( 3183) end;
                 108 ( 3183) 
                 109 ( 3184) proc newline;
                 110 ( 3184) begin
                 111 ( 3184)   linepnt[nlines]:=new;
                 112 ( 3199)   nlines:=nlines+1;
                 113 ( 3209) end;
                 114 ( 3214) 
                 115 ( 3215) proc getinput(var n:integer; s:cpnt);
                 116 ( 3215) var i,j,stop:integer; ch: char;
                 117 ( 3218) begin
                 118 ( 3218)   goto(inpx,0); write(chr(ord(':') or 128));
                 119 ( 3237)   read(@key,ch); i:=0;

----------------------------------------------------------------------

R65 Pascal program PEDIT           9/11/23     page 3

                 120 ( 3248)   while (ch<>chr(13)) and (ch<>esc) do begin
                 121 ( 3271)     if (ch=rubout) then begin
                 122 ( 3278)       if i>0 then i:=i-1; goto(i+inpx+1,0);
                 123 ( 3320)       write(chr(ord(' ') or 128),cleft);
                 124 ( 3330)     end else if (ch>=' ') and (ch<=chr($7d)) and
                 125 ( 3348)       (inpx+i<xmax-1) then begin
                 126 ( 3363)       goto(i+inpx+1,0);
                 127 ( 3384)       write(chr(ord(ch) or 128)); i:=i+1;
                 128 ( 3399)     end;
                 129 ( 3404)     read(@key,ch);
                 130 ( 3412)   end;
                 131 ( 3413)   stop:=i+inpx;
                 132 ( 3422)   i:=inpx; n:=0;
                 133 ( 3435)   while ((topi[i] and 127)>=ord('0')) and
                 134 ( 3454)     ((topi[i] and 127)<=ord('9')) and
                 135 ( 3469)     (i<stop) do begin
                 136 ( 3483)     n:=10*n+(topi[i] and 127)-ord('0');
                 137 ( 3505)     i:=i+1;
                 138 ( 3516)   end;
                 139 ( 3521)   j:=0;
                 140 ( 3526)   while i<stop do begin
                 141 ( 3542)     s[j]:=chr(topi[i] and 127); i:=i+1; j:=j+1;
                 142 ( 3580)   end;
                 143 ( 3585)   s[j]:=endmark;
                 144 ( 3594) end;
                 145 ( 3598) 
                 146 ( 3599) func readline(input: file; pnt: cpnt): boolean;
                 147 ( 3599) const alteof=chr(127);
                 148 ( 3602) var ch1: char;
                 149 ( 3602)     pos: integer;
                 150 ( 3602) begin
                 151 ( 3602)   pos := 0; read(@fno,ch1);
                 152 ( 3620)   while (ch1>=' ') and (ch1<>alteof) and
                 153 ( 3635)       (pos<xmax-1) do begin
                 154 ( 3650)     pnt[pos]:=ch1; pos:=pos+1; read(@fno,ch1);
                 155 ( 3683)     end;
                 156 ( 3684)   while pos<xmax do begin
                 157 ( 3697)     pnt[pos]:=' '; pos:=pos+1;
                 158 ( 3713)   end;
                 159 ( 3718)   readline:=(ch1=eof) or (ch1=alteof);
                 160 ( 3735) end;
                 161 ( 3740) 
                 162 ( 3741) proc showline(pnt:cpnt; y: integer);
                 163 ( 3741) var lstart,pos: integer;
                 164 ( 3744) begin
                 165 ( 3744)   lstart:=y*xmax;
                 166 ( 3752)   if (pnt=nil) then
                 167 ( 3764)    for pos:=0 to xmax-1 do
                 168 ( 3777)     video[lstart+pos]:='_'
                 169 ( 3796)   else begin
                 170 ( 3822)     pos:=0;
                 171 ( 3824)     while (pos<xmax) and (pnt[pos]<>endmark) do begin
                 172 ( 3852)       video[lstart+pos]:=pnt[pos]; pos:=pos+1
                 173 ( 3882)     end;
                 174 ( 3889)     while pos<xmax do begin
                 175 ( 3902)       video[lstart+pos]:=' '; pos:=pos+1
                 176 ( 3924)     end
                 177 ( 3926)   end;
                 178 ( 3934) end;
                 179 ( 3934) 

----------------------------------------------------------------------

R65 Pascal program PEDIT           9/11/23     page 4

                 180 ( 3935) proc showtop;
                 181 ( 3935) begin
                 182 ( 3935)   intstr(line,stemp,3); putontop(stemp,5,true);
                 183 ( 3970)   intstr(nlines-1,stemp,3); putontop(stemp,12,true);
                 184 ( 4003) end;
                 185 ( 4003) 
                 186 ( 4004) proc showall;
                 187 ( 4004) var lstart,y,i,l,lstart: integer;
                 188 ( 4007) begin
                 189 ( 4007)   showtop;
                 190 ( 4013)   for y:=1 to scrlins-1 do begin
                 191 ( 4033)     l:=topline-1+y; lstart:=y*xmax;
                 192 ( 4055)     if l<nlines then
                 193 ( 4064)       showline(linepnt[l],y)
                 194 ( 4080)     else
                 195 ( 4090)       for i:=0 to xmax-1 do
                 196 ( 4103)         video[lstart+i]:=' ';
                 197 ( 4124)   end;
                 198 ( 4145) end;
                 199 ( 4159) 
                 200 ( 4160) proc updline(pnt: cpnt; lstart:integer);
                 201 ( 4160) var pos: integer;
                 202 ( 4163) begin
                 203 ( 4163)   for pos:=0 to xmax-1 do
                 204 ( 4175)     pnt[pos]:=video[lstart+pos];
                 205 ( 4201) end;
                 206 ( 4221) 
                 207 ( 4222) func lastpos(l:integer):integer;
                 208 ( 4222) { returns -1 if line empty }
                 209 ( 4222) var endpos:integer;
                 210 ( 4225)     s:cpnt;
                 211 ( 4225) begin
                 212 ( 4225)   endpos:=xmax-1;
                 213 ( 4231)   s:=linepnt[l];
                 214 ( 4240)   while (chr(ord(s[endpos]) and $7f)=' ')
                 215 ( 4264)     and (endpos>0) do endpos:=endpos-1;
                 216 ( 4282)   if (endpos=0) and (chr(ord(s[endpos]) and $7f)=' ')
                 217 ( 4313)   then endpos:=-1;
                 218 ( 4320)   lastpos:=endpos;
                 219 ( 4325) end;
                 220 ( 4333) 
                 221 ( 4334) proc chkline;
                 222 ( 4334) begin
                 223 ( 4334)   if line<1 then line:=1
                 224 ( 4349)   else if line>nlines-1 then line:=nlines-1;
                 225 ( 4379) end;
                 226 ( 4384) 
                 227 ( 4385) proc chktop(show: boolean);
                 228 ( 4385) var savetop,bottom:integer;
                 229 ( 4388) begin
                 230 ( 4388)   savetop:=topline; bottom:=topline+scrlins-1;
                 231 ( 4407)   if line<topline then topline:=line;
                 232 ( 4424)   { keep cursor above bottom line, if possible }
                 233 ( 4432)   if line>=bottom-1 then
                 234 ( 4442)     topline:=line-scrlins+3;
                 235 ( 4456)   if show and (savetop<>topline) then showall;
                 236 ( 4482) end;
                 237 ( 4482) 
                 238 ( 4483) proc delline;
                 239 ( 4483) var i:integer; savpnt:cpnt;

----------------------------------------------------------------------

R65 Pascal program PEDIT           9/11/23     page 5

                 240 ( 4486) begin
                 241 ( 4486)   chkline; savpnt:=linepnt[line];
                 242 ( 4496)   if line<mark then mark:=mark-1
                 243 ( 4520)   else if line<mark+nmark then nmark:=nmark-1;
                 244 ( 4553)   for i:=line to nlines-2 do
                 245 ( 4572)     linepnt[i]:=linepnt[i+1];
                 246 ( 4593)   release(savpnt); nlines:=nlines-1;
                 247 ( 4631)   chkline; chktop(false);
                 248 ( 4648)   line:=line-1; savecx:=1;
                 249 ( 4661) end;
                 250 ( 4665) 
                 251 ( 4666) proc join;
                 252 ( 4666) var p,p1,p2,pm:integer;
                 253 ( 4669)     s1,s2:cpnt;
                 254 ( 4669) begin
                 255 ( 4669)   p1:=lastpos(line-1); p2:=lastpos(line);
                 256 ( 4702)   s1:=linepnt[line-1]; s2:=linepnt[line];
                 257 ( 4725)   for p:=p1+1 to xmax-1 do s1[p]:=s2[p-p1-1];
                 258 ( 4778)   if p1+p2<xmax then delline
                 259 ( 4810)   else begin
                 260 ( 4820)     pm:=xmax-p1;
                 261 ( 4822)     for p:=0 to xmax-pm do s2[+p]:=s2[p+pm-1];
                 262 ( 4873)     for p:=xmax-pm+1 to xmax-1 do s2[p]:=' ';
                 263 ( 4927)     line:=line-1;
                 264 ( 4951)   end;
                 265 ( 4956)   savecx:=p1+2; chkline; chktop(false); showall;
                 266 ( 4983) end;
                 267 ( 4983) 
                 268 ( 4984) func edlin(pnt: cpnt): char;
                 269 ( 4984) const key    = @1;
                 270 ( 4987) var   ch1,lastch: char;
                 271 ( 4987)       exit: boolean;
                 272 ( 4987)       lstart: integer;
                 273 ( 4987) begin
                 274 ( 4987)    goto(savecx,column);
                 275 ( 5005)   if savecx=1 then write(cright,cleft)
                 276 ( 5020)   else write(cleft,cright); {to update cursor}
                 277 ( 5030)   exit:=false; lstart:=column*xmax;
                 278 ( 5044)   repeat
                 279 ( 5049)     read(@key,ch1);
                 280 ( 5057)     lastch:=' ');
                 281 ( 5064)     case ch1 of
                 282 ( 5064)       delchr,rubout: if (curpos=0) and (line>1)
                 283 ( 5094)              then begin
                 284 ( 5096)                updline(pnt,lstart) ;join; exit:=true;
                 285 ( 5119)                end
                 286 ( 5123)              else write(cleft,delchr);
                 287 ( 5132)       cleft: if curpos>0 then write(cleft)
                 288 ( 5153)              else if line>1 then begin
                 289 ( 5164)                updline(pnt,lstart);
                 290 ( 5181)                line:=line-1; curpos:=lastpos(line)+1;
                 291 ( 5206)                exit:=true;
                 292 ( 5213)              end;
                 293 ( 5217)       cright:if curpos<xmax-1 then begin
                 294 ( 5236)                write(cright);
                 295 ( 5242)              end else if line<nlines-1 then begin
                 296 ( 5257)                updline(pnt,lstart);
                 297 ( 5274)                line:=line+1; curpos:=0;
                 298 ( 5287)                exit:=true;
                 299 ( 5293)              end;

----------------------------------------------------------------------

R65 Pascal program PEDIT           9/11/23     page 6

                 300 ( 5297)       cup,cdown,esc,cr,rup,rdown,
                 301 ( 5339)       pgup,pgdown,hom,pgend: exit:=true
                 302 ( 5370)       else begin
                 303 ( 5379)              if (ch1>=' ') and (ch1<chr($7f))
                 304 ( 5392)              then begin
                 305 ( 5395)                lastch:=video[lstart+xmax-1];
                 306 ( 5411)                lastch:=chr(ord(lastch) and $7f);
                 307 ( 5424)                if (lastch<>' ') and
                 308 ( 5436)                  (line>=nlines-1) then newline;
                 309 ( 5456)                if curpos>=xmax-1 then begin
                 310 ( 5465)                  if line>=nlines-1 then newline;
                 311 ( 5487)                  video[lstart+xmax-1]:=ch1;
                 312 ( 5497)                  curpos:=0;
                 313 ( 5510)                  lastch:=cdown;
                 314 ( 5516)                end else begin
                 315 ( 5523)                  write(inschr); write(ch1);
                 316 ( 5531)                end;
                 317 ( 5531)                if lastch<>' ' then exit:=true;
                 318 ( 5543)              end;
                 319 ( 5547)            end
                 320 ( 5547)     end {case};
                 321 ( 5549)     until exit;
                 322 ( 5549)   updline(pnt,lstart);
                 323 ( 5570)   if lastch<>' ' then edlin:=lastch
                 324 ( 5580)   else edlin:=ch1;
                 325 ( 5591)   if (ch1<>delchr) and (ch1<>rubout) then
                 326 ( 5613)     savecx:=curpos+1;
                 327 ( 5622) end;
                 328 ( 5627) 
                 329 ( 5628) proc readinput;
                 330 ( 5628) var i,pend:integer;
                 331 ( 5631) begin
                 332 ( 5631)   cyclus:=0; drive:=1;
                 333 ( 5641)   goto(1,1); write(clrscr);
                 334 ( 5658)   agetstring(name,default,cyclus,drive);
                 335 ( 5698)   asetfile(name,cyclus,drive,'P');
                 336 ( 5720)   openr(fno);
                 337 ( 5726)   nlines := 1; line:=1; topline:=1;
                 338 ( 5740)   pend:=15; while name[pend]=' ' do pend:=pend-1;
                 339 ( 5770)   for i:=0 to pend do stemp[i]:=name[i];
                 340 ( 5805)   stemp[pend+1]:=endmark;
                 341 ( 5836)   stradd(':P.',stemp);
                 342 ( 5856)   hexstr(filcyc,stemp2);
                 343 ( 5870)   stradd(stemp2,stemp);
                 344 ( 5884)   while strlen(stemp)<17 do stradd(' ',stemp);
                 345 ( 5916)   putontop(stemp,17,true);
                 346 ( 5933)   putontop('Reading',36,true);
                 347 ( 5953)   repeat
                 348 ( 5953)     linepnt[nlines] := new;
                 349 ( 5963)     iseof := readline(fno, linepnt[nlines]);
                 350 ( 5987)     nlines := nlines+1;
                 351 ( 5997)     showtop;
                 352 ( 6006)     until iseof or (nlines >= maxlines-9);
                 353 ( 6021)   if nlines >= maxlines-9 then
                 354 ( 6034)       showerror('Too many lines');
                 355 ( 6062)   close(fno);
                 356 ( 6068)   clrmessage;
                 357 ( 6072)   showall;
                 358 ( 6076) end;
                 359 ( 6076) 

----------------------------------------------------------------------

R65 Pascal program PEDIT           9/11/23     page 7

                 360 ( 6077) proc writeoutput;
                 361 ( 6077) var pos,endpos:integer;s,saveline:cpnt;
                 362 ( 6080) begin
                 363 ( 6080)   cyclus:=0; drive:=1;
                 364 ( 6090)   goto(1,1); write(clrscr);
                 365 ( 6107)   asetfile(name,cyclus,drive,'P');
                 366 ( 6129)   openw(fno);
                 367 ( 6135)   putontop('Writing',36,true);
                 368 ( 6155)   for line:=1 to nlines-1 do begin
                 369 ( 6177)     showtop;
                 370 ( 6181)     endpos:=lastpos(line);
                 371 ( 6193)     s:=linepnt[line];
                 372 ( 6201)     for pos:=0 to endpos do
                 373 ( 6215)       write(@fno,chr(ord(s[pos]) and $7f));
                 374 ( 6249)     if (line<nlines-1) then write(@fno,cr);
                 375 ( 6287)   end;
                 376 ( 6287)   close(fno); line:=nlines-1;
                 377 ( 6313)   showall;
                 378 ( 6322) end;
                 379 ( 6322) 
                 380 ( 6323) proc clrmarks;
                 381 ( 6323) var x,savel:integer; s:cpnt;
                 382 ( 6326) begin
                 383 ( 6326)   savel:=line;
                 384 ( 6328)   for line:=1 to nlines-1 do begin
                 385 ( 6358)     s:=linepnt[line];
                 386 ( 6362)     for x:=0 to xmax-1 do
                 387 ( 6380)       s[x]:=chr(ord(s[x]) and $7f);
                 388 ( 6407)     showtop;
                 389 ( 6430)     end;
                 390 ( 6430)   line:=savel; mark:=0; nmark:=0;
                 391 ( 6460) end;
                 392 ( 6464) 
                 393 ( 6465) proc find(again:boolean);
                 394 ( 6465) var pos,x,i:integer;
                 395 ( 6468)     ch:char;
                 396 ( 6468)     found:boolean;
                 397 ( 6468)     s2:cpnt;
                 398 ( 6468) 
                 399 ( 6468)   proc checkrest;
                 400 ( 6468)   var failed:boolean;
                 401 ( 6471)       x1:integer;
                 402 ( 6471)       s1:cpnt;
                 403 ( 6471)   begin
                 404 ( 6471)     failed:=false; pos:=3; x1:=x+1;
                 405 ( 6491)     while (fs[pos]<>endmark) and (x1<xmax) do begin
                 406 ( 6520)       s1:=linepnt[line];
                 407 ( 6524)       if s1[x1] <> fs[pos] then failed:=true;
                 408 ( 6558)       pos:=pos+1; x1:=x1+1;
                 409 ( 6579)       end;
                 410 ( 6584)      if (failed=false) and (fs[pos]=endmark)
                 411 ( 6606)       then found:=true;
                 412 ( 6613)   end;
                 413 ( 6617) 
                 414 ( 6618) begin
                 415 ( 6618)   if not again then strcpy(stemp,fs);
                 416 ( 6642)   if fs[1]=endmark then begin
                 417 ( 6653)     {empty string -> delete all marks}
                 418 ( 6656)     putontop('Clearing marks',36,true);
                 419 ( 6683)     clrmarks; showall;

----------------------------------------------------------------------

R65 Pascal program PEDIT           9/11/23     page 8

                 420 ( 6691)     end
                 421 ( 6691)   else begin
                 422 ( 6694)     putontop('Searching',36,true);
                 423 ( 6716)     found:=false;
                 424 ( 6718)     repeat
                 425 ( 6722)       x:=0;
                 426 ( 6724)       repeat
                 427 ( 6728)         pos:=2;
                 428 ( 6730)         s2:=linepnt[line];
                 429 ( 6738)         if s2[x]=fs[pos] then checkrest;
                 430 ( 6774)         x:=x+1;
                 431 ( 6780)         until found or (x>=xmax);
                 432 ( 6796)       showtop; line:=line+1;
                 433 ( 6810)       until found or (line>=nlines);
                 434 ( 6828)     if found then begin
                 435 ( 6836)       line:=line-1; x:=x-1; i:=2;
                 436 ( 6863)       s2:=linepnt[line];
                 437 ( 6871)       while fs[i]<>endmark do begin
                 438 ( 6895)         s2[x+i-2]:=chr(ord(s2[x+i-2]) or $80);
                 439 ( 6928)          i:=i+1;
                 440 ( 6939)         end
                 441 ( 6944)       end
                 442 ( 6944)     else begin
                 443 ( 6950)       line:=nlines-1;
                 444 ( 6956)     end;
                 445 ( 6961)   end
                 446 ( 6961) end;
                 447 ( 6961) 
                 448 ( 6962) proc insertline;
                 449 ( 6962) var i:integer;
                 450 ( 6965)     s1,s2:cpnt;
                 451 ( 6965) begin
                 452 ( 6965)   if nlines<maxlines-1 then begin
                 453 ( 6978)     if line<mark then mark:=mark+1
                 454 ( 6997)     else if line<mark+nmark then nmark:=nmark+1;
                 455 ( 7030)     if line<nlines-1 then begin
                 456 ( 7047)       for i:=nlines-1 downto line+1 do
                 457 ( 7067)         linepnt[i+1]:=linepnt[i];
                 458 ( 7088)       end;
                 459 ( 7110)     linepnt[line+1]:=new;
                 460 ( 7123)     s1:=linepnt[line+1]; s2:=linepnt[line];
                 461 ( 7146)     for i:=0 to xmax-1 do s1[i]:=' ';
                 462 ( 7180)     for i:=curpos to xmax-1 do begin
                 463 ( 7219)       s1[i-curpos]:=s2[i]; s2[i]:=' ';
                 464 ( 7247)       end;
                 465 ( 7251)     line:=line+1; nlines:=nlines+1;
                 466 ( 7282)     savecx:=1; chkline; chktop(false); showall;
                 467 ( 7309)   end;
                 468 ( 7309) end;
                 469 ( 7309) 
                 470 ( 7310) proc paste;
                 471 ( 7310) var l,i:integer; s1,s2:cpnt;
                 472 ( 7313) begin
                 473 ( 7313)   if nlines+nmark<nlines-5 then begin
                 474 ( 7332)     for i:=nlines-1 downto line do
                 475 ( 7346)       linepnt[i+nmark]:=linepnt[i];
                 476 ( 7372)     nlines:=nlines+nmark;
                 477 ( 7398)     if mark>line then mark:=mark+nmark;
                 478 ( 7423)     for l:=mark to mark+nmark-1 do begin
                 479 ( 7461)       linepnt[line]:=new;

----------------------------------------------------------------------

R65 Pascal program PEDIT           9/11/23     page 9

                 480 ( 7471)       s1:=linepnt[line]; s2:=linepnt[l];
                 481 ( 7491)       for i:=0 to xmax-1 do s1[i]:=s2[i];
                 482 ( 7531)       line:=line+1;
                 483 ( 7557)     end;
                 484 ( 7562)     showall;
                 485 ( 7580)   end else showerror('Error: Out of memory');
                 486 ( 7612) end;
                 487 ( 7612) 
                 488 ( 7613) proc move;
                 489 ( 7613) var i,j,saveline:integer; savepnt:cpnt;
                 490 ( 7616) begin
                 491 ( 7616)   saveline:=line; { insert above}
                 492 ( 7626)   if line>=mark+nmark then begin
                 493 ( 7640)     mark:=mark+nmark-1;
                 494 ( 7654)     for j:=0 to nmark-1 do begin
                 495 ( 7681)       savepnt:=linepnt[mark];
                 496 ( 7685)       for i:=mark to line-1 do
                 497 ( 7707)         linepnt[i]:=linepnt[i+1];
                 498 ( 7728)       mark:=mark-1; line:=line-1;
                 499 ( 7767)       linepnt[line]:=savepnt;
                 500 ( 7776)     end;
                 501 ( 7784)   end else if line<mark then begin
                 502 ( 7810)     for j:=0 to nmark-1 do begin
                 503 ( 7835)       savepnt:=linepnt[mark];
                 504 ( 7839)       for i:=mark downto line+1 do
                 505 ( 7861)         linepnt[i]:=linepnt[i-1];
                 506 ( 7882)       linepnt[line]:=savepnt;
                 507 ( 7908)       mark:=mark+1; line:=line+1;
                 508 ( 7933)     end;
                 509 ( 7938)   end else showerror('Move inside move');
                 510 ( 7980)  mark:=saveline; line:=saveline; showall;
                 511 ( 8000) end;
                 512 ( 8000) 
                 513 ( 8001) func doesc: boolean;
                 514 ( 8001) var ch:char;
                 515 ( 8004)     i,n:integer;
                 516 ( 8004)     s,savl:cpnt;
                 517 ( 8004) begin
                 518 ( 8004)   doesc:=false; savecx:=1;
                 519 ( 8014)   getinput(n,stemp); ch:=stemp[0];
                 520 ( 8042)   if (strlen(stemp)>1) and (stemp[1]<>' ') then
                 521 ( 8074)     showerror('Expected f: xxx')
                 522 ( 8096)   else begin
                 523 ( 8105)     case ch of
                 524 ( 8105)       't': begin {top}
                 525 ( 8116)              line:=1; chktop(true);
                 526 ( 8130)            end;
                 527 ( 8130)       'b': begin {bottom}
                 528 ( 8140)              line:=nlines-1; chktop(true);
                 529 ( 8159)            end;
                 530 ( 8159)       'l': begin {line number}
                 531 ( 8169)              line:=n; chkline; chktop(true);
                 532 ( 8189)            end;
                 533 ( 8189)       'f','g': begin {find string}
                 534 ( 8206)              find(ch='g'); chkline; chktop(false);
                 535 ( 8231)              showall;
                 536 ( 8235)            end;
                 537 ( 8235)       'c': begin {mark lines for copy}
                 538 ( 8245)              if n<1 then n:=1;
                 539 ( 8257)              if line+n>= nlines-1 then

----------------------------------------------------------------------

R65 Pascal program PEDIT           9/11/23     page 10

                 540 ( 8276)                showerror('Too many lines')
                 541 ( 8298)              else begin
                 542 ( 8307)                mark:=line; nmark:=n;
                 543 ( 8315)                for line:=mark to mark+nmark-1 do
                 544 ( 8342)                begin
                 545 ( 8352)                  s:=linepnt[line];
                 546 ( 8356)                  for i:=0 to xmax-1 do
                 547 ( 8374)                    s[i]:= chr(ord(s[i]) or $80);
                 548 ( 8401)                end;
                 549 ( 8420)                line:=mark;
                 550 ( 8434)              end;
                 551 ( 8442)              showall;
                 552 ( 8446)            end;
                 553 ( 8446)       'p': begin {paste marked lines}
                 554 ( 8456)              if mark=0 then
                 555 ( 8462)                showerror('Nothing marked')
                 556 ( 8483)              else begin
                 557 ( 8492)                if nlines+nmark>=maxlines then
                 558 ( 8504)                  showerror('Too many lines')
                 559 ( 8525)                else paste;
                 560 ( 8538)              end;
                 561 ( 8538)            end;
                 562 ( 8538)       'm': begin {move marked lines }
                 563 ( 8548)              if mark=0 then
                 564 ( 8554)                showerror('Nothing marked')
                 565 ( 8575)              else move;
                 566 ( 8588)            end;
                 567 ( 8588)       'd': begin {delete n lines}
                 568 ( 8598)              if n<1 then n:=1;
                 569 ( 8610)              if line+n=maxlines-3 then
                 570 ( 8628)                n:=maxlines-3-line;
                 571 ( 8639)              for i:=1 to n do begin
                 572 ( 8667)                delline; line:=line+1;
                 573 ( 8677)              end;
                 574 ( 8682)              chkline; chktop(false); showall;
                 575 ( 8712)            end;
                 576 ( 8712)       'w': writeoutput; {write output}
                 577 ( 8729)       'q': begin {write output and quit}
                 578 ( 8736)              writeoutput; doesc:=true;
                 579 ( 8742)            end;
                 580 ( 8746)       'k': doesc:=true; {kill program}
                 581 ( 8765)       '?','h': showerror('tb/l/fg/cpm/d/wqk/?h');
                 582 ( 8808)       endmark: begin end
                 583 ( 8818)       else showerror('tb/l/fg/cpm/d/wqk/?h')
                 584 ( 8844)     end {case};
                 585 ( 8852)   end;
                 586 ( 8852)   clrmessage;
                 587 ( 8856) end;
                 588 ( 8856) 
                 589 ( 8857) proc newline;
                 590 ( 8857) begin
                 591 ( 8857)   linepnt[nlines]:=new; nlines:=nlines+1;
                 592 ( 8882) end;
                 593 ( 8887) 
                 594 ( 8888) proc insert(ch:char;l:integer);
                 595 ( 8888) { insert char at start of line (recursive) }
                 596 ( 8888) var i,y:integer;
                 597 ( 8891)     pnt:cpnt;
                 598 ( 8891)     lstch:char;
                 599 ( 8891) begin

----------------------------------------------------------------------

R65 Pascal program PEDIT           9/11/23     page 11

                 600 ( 8891)   if l>=nlines then newline;
                 601 ( 8909)   pnt:=linepnt[l];
                 602 ( 8913)   lstch:=chr(ord(pnt[xmax-1]) and $7f);
                 603 ( 8935)   if lstch<>' ' then insert(lstch,l+1);
                 604 ( 8967)   for i:=xmax-2 downto 0 do pnt[i+1]:=pnt[i];
                 605 ( 9002)   pnt[0]:=ch; y:=l-topline+1;
                 606 ( 9043)   if (y>0) and (y<scrlins) then showline(pnt,y);
                 607 ( 9080) end;
                 608 ( 9080) 
                 609 ( 9081) begin {main}
                 610 ( 9081)   for i:=0 to maxlines-1 do linepnt[i]:=nil;
                 611 ( 9111)   stemp:=strnew; stemp2:=strnew; fs:=strnew; debug:=0;
                 612 ( 9161)   setnumlin($0f,$37); write(hom,clrscr);
                 613 ( 9181)   putontop('Line xxx of xxx',0,true);
                 614 ( 9209)   relpnt:=maxlines-1; mark:=0; nmark:=0; savecx:=1;
                 615 ( 9233)   clrmessage; readinput; fs[0]:=endmark;
                 616 ( 9249)   topline:= 1; line:=1; showall; exit:=false;
                 617 ( 9271)   repeat
                 618 ( 9275)     showtop; chi := edlin(linepnt[line]);
                 619 ( 9295)     if (ord(chi)>=$20) and (ord(chi)<=$7e) then begin
                 620 ( 9314)       { printable character }
                 621 ( 9317)       insert(chi,line+1);
                 622 ( 9334)     end else case chi of
                 623 ( 9337)       cup,cdown: begin
                 624 ( 9355)              if chi=cup then line:=line-1
                 625 ( 9369)              else line:=line+1;
                 626 ( 9385)              chkline;
                 627 ( 9394)              if curpos>lastpos(line)+2 then
                 628 ( 9411)                savecx:=lastpos(line)+2;
                 629 ( 9430)              chktop(true);
                 630 ( 9443)            end;
                 631 ( 9443)       pgup: begin
                 632 ( 9453)              line:=line-15; chkline; chktop(true);
                 633 ( 9476)            end;
                 634 ( 9476)       pgdown: begin
                 635 ( 9486)              line:=line+15; chkline; chktop(true);
                 636 ( 9509)            end;
                 637 ( 9509)       rup: if (topline>1) then begin
                 638 ( 9526)              topline:=topline-1;chktop(false);showall;
                 639 ( 9552)            end;
                 640 ( 9552)       rdown: if (topline<nlines-15) then begin
                 641 ( 9574)              topline:=topline+1;chktop(false);showall;
                 642 ( 9600)            end;
                 643 ( 9600)       hom: begin
                 644 ( 9610)              line:=1; savecx:=1; chktop(true);
                 645 ( 9630)            end;
                 646 ( 9630)       pgend: begin
                 647 ( 9640)              line:=nlines-1; savecx:=1; chktop(true);
                 648 ( 9665)            end;
                 649 ( 9665)       cr:  insertline;
                 650 ( 9679)       esc: if doesc then exit:=true
                 651 ( 9698)     end {case};
                 652 ( 9706)     until exit;
                 653 ( 9706)   setnumlin($29,$2f);
                 654 ( 9723)   writeln(hom, clrscr);
                 655 ( 9735)   dummy:=freedsk(fildrv,true);
                 656 ( 9748) end.
                 657 ( 9752) 

End compile

Code lenght:          9751
Compiler stack size:  119
Ident stack size:     181
Pascal errors:        0


R65 Pascal program PEDIT           7/11/23     page 1


                   1 (    4) program pedit;
                   2 (    4) 
                   3 (    4) { Pascal editor, original 1980 RR
                   4 (    4)   rewritten 2023 RR for R65 system }
                   5 (    4) 
                   6 (    4) uses syslib, arglib, strlib;
                   7 ( 2379) 
                   8 ( 2379) const maxlines = 420; xmax=56;
                   9 ( 2382)     scrlins = 16;
                  10 ( 2382)     eol    = chr($00); esc    = chr($00);
                  11 ( 2382)     pgdown = chr($02); pgup   = chr($08);
                  12 ( 2382)     pgend  = chr($10); clrscr = chr($11);
                  13 ( 2382)     clrlin = chr($17); cdown  = chr($18);
                  14 ( 2382)     cup    = chr($1a); cleft  = chr($03);
                  15 ( 2382)     inschr = chr($15); delchr = chr($19);
                  16 ( 2382)     rubout = chr($5f); cright = chr($16);
                  17 ( 2382)     mlenght   = 19; inpx=37;
                  18 ( 2382) 
                  19 ( 2382) mem curlin  = $ed: integer&;
                  20 ( 2382)     curpos  = $ee: integer&;
                  21 ( 2382)     filcyc  = $311: integer&;
                  22 ( 2382)     video   = $400: array[900] of char&;
                  23 ( 2382)     top     = $400: array[xmax] of integer&;
                  24 ( 2382) 
                  25 ( 2382) var line,nlines,topline,i: integer;
                  26 ( 2382)     name: array[15] of char;
                  27 ( 2382)     fno: file;
                  28 ( 2382)     chi : char;
                  29 ( 2382)     cyclus,drive,mark,nmark,savecx: integer;
                  30 ( 2382)     default, iseof, exit: boolean;
                  31 ( 2382)     fs: cpnt;
                  32 ( 2382)     linepnt: array[maxlines] of cpnt;
                  33 ( 2382)     relpnt:  integer;
                  34 ( 2382)     stemp,stemp2: cpnt;
                  35 ( 2382) 
                  36 ( 2382) proc putontop(s:cpnt;pos:integer;inv:boolean);
                  37 ( 2382) var i:integer;
                  38 ( 2385) begin
                  39 ( 2385)   i:=0; { faster version: if not in loop }
                  40 ( 2393)   if inv then while s[i]<>chr(0) do begin
                  41 ( 2417)     top[i+pos]:=ord(s[i]) or 128; i:=i+1;
                  42 ( 2452)   end else while s[i]<>chr(0) do begin
                  43 ( 2480)     top[i+pos]:=ord(s[i]); i:=i+1;
                  44 ( 2512)   end;
                  45 ( 2517) end;
                  46 ( 2520) 
                  47 ( 2521) func new:cpnt;
                  48 ( 2521) begin
                  49 ( 2521)   if relpnt<maxlines-1 then begin
                  50 ( 2537)     relpnt:=relpnt+1; new:=linepnt[relpnt];
                  51 ( 2555)   end else  {assign new memory}
                  52 ( 2566)     new:=strnew;
                  53 ( 2572) end;
                  54 ( 2576) 
                  55 ( 2577) proc release(p:cpnt);
                  56 ( 2577) begin
                  57 ( 2577)   linepnt[relpnt]:=p; relpnt:=relpnt-1;
                  58 ( 2600) end;
                  59 ( 2605) 

----------------------------------------------------------------------

R65 Pascal program PEDIT           7/11/23     page 2

                  60 ( 2606) proc setnumlin(l,c:integer);
                  61 ( 2606) mem numlin=$1789: integer&;
                  62 ( 2609)     numchr=$178a: integer&;
                  63 ( 2609) begin
                  64 ( 2609)   numlin:=l; numchr:=c;
                  65 ( 2620) end;
                  66 ( 2629) 
                  67 ( 2630) func column:integer;
                  68 ( 2630) begin
                  69 ( 2630)   column:=line-topline+1;
                  70 ( 2646) end;
                  71 ( 2651) 
                  72 ( 2652) proc goto(xpos, ypos: integer);
                  73 ( 2652) begin
                  74 ( 2652)   curlin:=ypos; { top on line 2 }
                  75 ( 2665)   if curlin>15 then curlin:=15;
                  76 ( 2676)   curpos:=xpos-1;
                  77 ( 2686) end;
                  78 ( 2691) 
                  79 ( 2692) proc clrmessage;
                  80 ( 2692) var i:integer;
                  81 ( 2695) begin
                  82 ( 2695)   for i:=inpx-1 to xmax-1 do top[i]:=128;
                  83 ( 2726) end;
                  84 ( 2747) 
                  85 ( 2748) proc getinput(var n:integer; s:cpnt);
                  86 ( 2748) var i,j,stop:integer; ch: char;
                  87 ( 2751) begin
                  88 ( 2751)   goto(inpx,0); write(chr(ord(':') or 128));
                  89 ( 2770)   read(@key,ch); i:=0;
                  90 ( 2781)   while (ch<>chr(13)) and (ch<>esc) do begin
                  91 ( 2804)     if (ch=rubout) then begin
                  92 ( 2811)       if i>0 then i:=i-1; goto(i+inpx+1,0);
                  93 ( 2853)       write(chr(ord(' ') or 128),cleft);
                  94 ( 2863)     end else if (ch>=' ') and (ch<=chr($7d)) and
                  95 ( 2881)       (inpx+i<xmax-1) then begin
                  96 ( 2896)       goto(i+inpx+1,0);
                  97 ( 2917)       write(chr(ord(ch) or 128)); i:=i+1;
                  98 ( 2932)     end;
                  99 ( 2937)     read(@key,ch);
                 100 ( 2945)   end;
                 101 ( 2946)   stop:=i+inpx;
                 102 ( 2955)   i:=inpx; n:=0;
                 103 ( 2968)   while ((top[i] and 127)>=ord('0')) and
                 104 ( 2987)     ((top[i] and 127)<=ord('9')) and
                 105 ( 3002)     (i<stop) do begin
                 106 ( 3016)     n:=10*n+(top[i] and 127)-ord('0');
                 107 ( 3038)     i:=i+1;
                 108 ( 3049)   end;
                 109 ( 3054)   j:=0;
                 110 ( 3059)   while i<stop do begin
                 111 ( 3075)     s[j]:=chr(top[i] and 127); i:=i+1; j:=j+1;
                 112 ( 3113)   end;
                 113 ( 3118)   s[j]:=chr(0);
                 114 ( 3127) end;
                 115 ( 3132) 
                 116 ( 3133) func readline(input: file; pnt: cpnt): boolean;
                 117 ( 3133) const alteof=chr(127);
                 118 ( 3136) var ch1: char;
                 119 ( 3136)     pos: integer;

----------------------------------------------------------------------

R65 Pascal program PEDIT           7/11/23     page 3

                 120 ( 3136) begin
                 121 ( 3136)   pos := 0; read(@fno,ch1);
                 122 ( 3154)   while (ch1>=' ') and (ch1<>alteof) and
                 123 ( 3169)       (pos<xmax-1) do begin
                 124 ( 3184)     pnt[pos]:=ch1; pos:=pos+1; read(@fno,ch1);
                 125 ( 3217)     end;
                 126 ( 3218)   while pos<xmax do begin
                 127 ( 3231)     pnt[pos]:=' '; pos:=pos+1;
                 128 ( 3247)   end;
                 129 ( 3252)   readline:=(ch1=eof) or (ch1=alteof);
                 130 ( 3269) end;
                 131 ( 3274) 
                 132 ( 3275) proc showline(pnt:cpnt; y: integer);
                 133 ( 3275) var lstart,pos: integer;
                 134 ( 3278) begin
                 135 ( 3278)   lstart:=y*xmax;
                 136 ( 3286)   for pos:=0 to xmax-1 do
                 137 ( 3301)     video[lstart+pos]:=pnt[pos];
                 138 ( 3328) end;
                 139 ( 3351) 
                 140 ( 3352) proc showtop;
                 141 ( 3352) begin
                 142 ( 3352)   intstr(line,stemp,3); putontop(stemp,5,true);
                 143 ( 3387)   intstr(nlines-1,stemp,3); putontop(stemp,12,true);
                 144 ( 3420) end;
                 145 ( 3420) 
                 146 ( 3421) proc showerror(s:cpnt);
                 147 ( 3421) var i: integer;
                 148 ( 3424)     ch: char;
                 149 ( 3424) begin
                 150 ( 3424)   clrmessage;
                 151 ( 3430)   putontop(s,36,true);
                 152 ( 3444)   read(@key,ch);
                 153 ( 3452)   clrmessage;
                 154 ( 3457) end;
                 155 ( 3457) 
                 156 ( 3458) proc showall;
                 157 ( 3458) var lstart,y,i,l,lstart: integer;
                 158 ( 3461) begin
                 159 ( 3461)   showtop;
                 160 ( 3467)   for y:=1 to scrlins-1 do begin
                 161 ( 3487)     l:=topline-1+y; lstart:=y*xmax;
                 162 ( 3509)     if l<nlines then
                 163 ( 3518)       showline(linepnt[l],y)
                 164 ( 3534)     else
                 165 ( 3544)       for i:=0 to xmax-1 do
                 166 ( 3557)         video[lstart+i]:=' ';
                 167 ( 3578)   end;
                 168 ( 3599) end;
                 169 ( 3613) 
                 170 ( 3614) proc updline(pnt: cpnt; lstart:integer);
                 171 ( 3614) var pos: integer;
                 172 ( 3617) begin
                 173 ( 3617)   for pos:=0 to xmax-1 do
                 174 ( 3629)     pnt[pos]:=video[lstart+pos];
                 175 ( 3655) end;
                 176 ( 3675) 
                 177 ( 3676) func lastpos(l:integer):integer;
                 178 ( 3676) { returns -1 if line empty }
                 179 ( 3676) var endpos:integer;

----------------------------------------------------------------------

R65 Pascal program PEDIT           7/11/23     page 4

                 180 ( 3679)     s:cpnt;
                 181 ( 3679) begin
                 182 ( 3679)   endpos:=xmax-1;
                 183 ( 3685)   s:=linepnt[l];
                 184 ( 3694)   while (s[endpos]=chr(ord(' ') and $7f))
                 185 ( 3717)     and (endpos>=0) do endpos:=endpos-1;
                 186 ( 3736)   lastpos:=endpos;
                 187 ( 3744) end;
                 188 ( 3752) 
                 189 ( 3753) proc chkline;
                 190 ( 3753) begin
                 191 ( 3753)   if line<1 then line:=1
                 192 ( 3768)   else if line>nlines-1 then line:=nlines-1;
                 193 ( 3798) end;
                 194 ( 3803) 
                 195 ( 3804) proc chktop(show: boolean);
                 196 ( 3804) var savetop,bottom:integer;
                 197 ( 3807) begin
                 198 ( 3807)   savetop:=topline; bottom:=topline+scrlins-1;
                 199 ( 3826)   if line<topline then topline:=line;
                 200 ( 3843)   if line>=bottom then
                 201 ( 3855)     topline:=line-scrlins+2;
                 202 ( 3872)   if show and (savetop<>topline) then showall;
                 203 ( 3898) end;
                 204 ( 3898) 
                 205 ( 3899) proc delline;
                 206 ( 3899) var i:integer; savpnt:cpnt;
                 207 ( 3902) begin
                 208 ( 3902)   chkline; savpnt:=linepnt[line];
                 209 ( 3912)   if line<mark then mark:=mark-1
                 210 ( 3936)   else if line<mark+nmark then nmark:=nmark-1;
                 211 ( 3969)   for i:=line to nlines-2 do
                 212 ( 3988)     linepnt[i]:=linepnt[i+1];
                 213 ( 4009)   release(savpnt); nlines:=nlines-1;
                 214 ( 4047)   chkline; chktop(false);
                 215 ( 4064)   line:=line-1; savecx:=1;
                 216 ( 4077) end;
                 217 ( 4081) 
                 218 ( 4082) proc join;
                 219 ( 4082) var p,p1,p2,pm:integer;
                 220 ( 4085)     s1,s2:cpnt;
                 221 ( 4085) begin
                 222 ( 4085)   p1:=lastpos(line-1); p2:=lastpos(line);
                 223 ( 4118)   s1:=linepnt[line-1]; s2:=linepnt[line];
                 224 ( 4141)   for p:=p1+1 to xmax-1 do s1[p]:=s2[p-p1-1];
                 225 ( 4194)   if p1+p2<xmax then delline
                 226 ( 4226)   else begin
                 227 ( 4236)     pm:=xmax-p1;
                 228 ( 4238)     for p:=0 to xmax-pm do s2[+p]:=s2[p+pm-1];
                 229 ( 4289)     for p:=xmax-pm+1 to xmax-1 do s2[p]:=' ';
                 230 ( 4343)     line:=line-1;
                 231 ( 4367)   end;
                 232 ( 4372)   savecx:=p1+2; chkline; chktop(false); showall;
                 233 ( 4399) end;
                 234 ( 4399) 
                 235 ( 4400) func edlin(pnt: cpnt): char;
                 236 ( 4400) const key    = @1;
                 237 ( 4403) var   ch1: char;
                 238 ( 4403)       exit: boolean;
                 239 ( 4403)       lstart: integer;

----------------------------------------------------------------------

R65 Pascal program PEDIT           7/11/23     page 5

                 240 ( 4403) begin
                 241 ( 4403)   goto(savecx,column);
                 242 ( 4421)   if savecx=1 then write(cright,cleft)
                 243 ( 4436)   else write(cleft,cright); {to update cursor}
                 244 ( 4446)   exit:=false; lstart:=column*xmax;
                 245 ( 4460)   repeat
                 246 ( 4465)     read(@key,ch1);
                 247 ( 4473)     case ch1 of
                 248 ( 4474)       delchr,rubout: if (curpos=0) and (line>1)
                 249 ( 4504)              then begin
                 250 ( 4506)                updline(pnt,lstart) ;join; exit:=true;
                 251 ( 4529)                end
                 252 ( 4533)              else write(cleft,delchr);
                 253 ( 4542)       cleft: if curpos>0 then write(cleft)
                 254 ( 4563)              else if line>1 then begin
                 255 ( 4574)                updline(pnt,lstart);
                 256 ( 4591)                line:=line-1; curpos:=lastpos(line)+1;
                 257 ( 4616)                exit:=true;
                 258 ( 4623)              end;
                 259 ( 4627)       cright:if (curpos<lastpos(line)+1) and
                 260 ( 4656)                (curpos<xmax-1) then begin
                 261 ( 4666)                write(cright);
                 262 ( 4672)              end else if line<nlines-1 then begin
                 263 ( 4687)                updline(pnt,lstart);
                 264 ( 4704)                line:=line+1; curpos:=0;
                 265 ( 4717)                exit:=true;
                 266 ( 4723)              end;
                 267 ( 4727)       cup,cdown,esc,cr,
                 268 ( 4755)       pgup,pgdown,hom,pgend: exit:=true
                 269 ( 4786)       else begin
                 270 ( 4795)              if (ch1>=' ') and (ch1<chr($7f))
                 271 ( 4808)              then begin
                 272 ( 4811)                if (ord(video[lstart+xmax-1])
                 273 ( 4827)                   and $7f)=ord(' ') then begin
                 274 ( 4835)                  write(inschr); write(ch1);
                 275 ( 4846)                end;
                 276 ( 4846)                if curpos<1 then begin
                 277 ( 4852)                  updline(pnt,lstart);
                 278 ( 4869)                  line:=line+1;
                 279 ( 4875)                  if line>=nlines then begin
                 280 ( 4889)                    linepnt[line]:=strnew;
                 281 ( 4902)                    nlines:=nlines+1;
                 282 ( 4912)                  end;
                 283 ( 4917)                  curpos:=0; exit:=true;
                 284 ( 4925)                end;
                 285 ( 4929)              end;
                 286 ( 4929)            end
                 287 ( 4929)     end {case};
                 288 ( 4931)     until exit;
                 289 ( 4931)   updline(pnt,lstart);
                 290 ( 4952)   edlin := ch1;
                 291 ( 4952)   if (ch1<>delchr) and (ch1<>rubout) then
                 292 ( 4974)     savecx:=curpos+1;
                 293 ( 4983) end;
                 294 ( 4988) 
                 295 ( 4989) proc readinput;
                 296 ( 4989) var i,pend:integer;
                 297 ( 4992) begin
                 298 ( 4992)   cyclus:=0; drive:=1;
                 299 ( 5002)   goto(1,1); write(clrscr);

----------------------------------------------------------------------

R65 Pascal program PEDIT           7/11/23     page 6

                 300 ( 5019)   agetstring(name,default,cyclus,drive);
                 301 ( 5059)   asetfile(name,cyclus,drive,'P');
                 302 ( 5081)   openr(fno);
                 303 ( 5087)   nlines := 1; line:=1; topline:=1;
                 304 ( 5101)   pend:=15; while name[pend]=' ' do pend:=pend-1;
                 305 ( 5131)   for i:=0 to pend do stemp[i]:=name[i];
                 306 ( 5166)   stemp[pend+1]:=chr(0);
                 307 ( 5197)   stradd(':P.',stemp);
                 308 ( 5218)   hexstr(filcyc,stemp2);
                 309 ( 5232)   stradd(stemp2,stemp);
                 310 ( 5246)   while strlen(stemp)<17 do stradd(' ',stemp);
                 311 ( 5278)   putontop(stemp,17,true);
                 312 ( 5295)   putontop('Reading',36,true);
                 313 ( 5315)   repeat
                 314 ( 5315)     linepnt[nlines] := strnew;
                 315 ( 5325)     iseof := readline(fno, linepnt[nlines]);
                 316 ( 5349)     nlines := nlines+1;
                 317 ( 5359)     showtop;
                 318 ( 5368)     until iseof or (nlines >= maxlines-1);
                 319 ( 5383)   if nlines >= maxlines-1 then
                 320 ( 5396)       showerror('Too many lines');
                 321 ( 5424)   close(fno);
                 322 ( 5430)   clrmessage;
                 323 ( 5434)   showall;
                 324 ( 5438) end;
                 325 ( 5438) 
                 326 ( 5439) proc writeoutput;
                 327 ( 5439) var pos,endpos:integer;s,saveline:cpnt;
                 328 ( 5442) begin
                 329 ( 5442)   cyclus:=0; drive:=1;
                 330 ( 5452)   goto(1,1); write(clrscr);
                 331 ( 5469)   asetfile(name,cyclus,drive,'P');
                 332 ( 5491)   openw(fno);
                 333 ( 5497)   putontop('Writing',36,true);
                 334 ( 5517)   for line:=1 to nlines-1 do begin
                 335 ( 5539)     showtop;
                 336 ( 5543)     endpos:=lastpos(line);
                 337 ( 5555)     s:=linepnt[line];
                 338 ( 5563)     for pos:=0 to endpos do
                 339 ( 5577)       write(@fno,chr(ord(s[pos]) and $7f));
                 340 ( 5611)     if (line<nlines-1) then write(@fno,cr);
                 341 ( 5649)   end;
                 342 ( 5649)   close(fno); line:=nlines-1;
                 343 ( 5675)   showall;
                 344 ( 5684) end;
                 345 ( 5684) 
                 346 ( 5685) proc clrmarks;
                 347 ( 5685) var x,savel:integer; s:cpnt;
                 348 ( 5688) begin
                 349 ( 5688)   savel:=line;
                 350 ( 5690)   for line:=1 to nlines-1 do begin
                 351 ( 5720)     s:=linepnt[line];
                 352 ( 5724)     for x:=0 to xmax-1 do
                 353 ( 5742)       s[x]:=chr(ord(s[x]) and $7f);
                 354 ( 5769)     showtop;
                 355 ( 5792)     end;
                 356 ( 5792)   line:=savel; mark:=0; nmark:=0;
                 357 ( 5822) end;
                 358 ( 5826) 
                 359 ( 5827) proc find(again:boolean);

----------------------------------------------------------------------

R65 Pascal program PEDIT           7/11/23     page 7

                 360 ( 5827) var pos,x,i:integer;
                 361 ( 5830)     ch:char;
                 362 ( 5830)     found:boolean;
                 363 ( 5830)     s2:cpnt;
                 364 ( 5830) 
                 365 ( 5830)   proc checkrest;
                 366 ( 5830)   var failed:boolean;
                 367 ( 5833)       x1:integer;
                 368 ( 5833)       s1:cpnt;
                 369 ( 5833)   begin
                 370 ( 5833)     failed:=false; pos:=3; x1:=x+1;
                 371 ( 5853)     while (fs[pos]<>chr(0)) and (x1<xmax) do begin
                 372 ( 5883)       s1:=linepnt[line];
                 373 ( 5887)       if s1[x1] <> fs[pos] then failed:=true;
                 374 ( 5921)       pos:=pos+1; x1:=x1+1;
                 375 ( 5942)       end;
                 376 ( 5947)      if (failed=false) and (fs[pos]=chr(0))
                 377 ( 5969)       then found:=true;
                 378 ( 5977)   end;
                 379 ( 5981) 
                 380 ( 5982) begin
                 381 ( 5982)   if not again then strcpy(stemp,fs);
                 382 ( 6006)   if fs[1]=chr(0) then begin
                 383 ( 6018)     {empty string -> delete all marks}
                 384 ( 6021)     putontop('Clearing marks',36,true);
                 385 ( 6048)     clrmarks; showall;
                 386 ( 6056)     end
                 387 ( 6056)   else begin
                 388 ( 6059)     putontop('Searching',36,true);
                 389 ( 6081)     found:=false;
                 390 ( 6083)     repeat
                 391 ( 6087)       x:=0;
                 392 ( 6089)       repeat
                 393 ( 6093)         pos:=2;
                 394 ( 6095)         s2:=linepnt[line];
                 395 ( 6103)         if s2[x]=fs[pos] then checkrest;
                 396 ( 6139)         x:=x+1;
                 397 ( 6145)         until found or (x>=xmax);
                 398 ( 6161)       showtop; line:=line+1;
                 399 ( 6175)       until found or (line>=nlines);
                 400 ( 6193)     if found then begin
                 401 ( 6201)       line:=line-1; x:=x-1; i:=2;
                 402 ( 6228)       s2:=linepnt[line];
                 403 ( 6236)       while fs[i]<>chr(0) do begin
                 404 ( 6261)         s2[x+i-2]:=chr(ord(s2[x+i-2]) or $80);
                 405 ( 6294)          i:=i+1;
                 406 ( 6305)         end
                 407 ( 6310)       end
                 408 ( 6310)     else begin
                 409 ( 6316)       line:=nlines-1;
                 410 ( 6322)     end;
                 411 ( 6327)   end
                 412 ( 6327) end;
                 413 ( 6327) 
                 414 ( 6328) proc insertline;
                 415 ( 6328) var i:integer;
                 416 ( 6331)     s1,s2:cpnt;
                 417 ( 6331) begin
                 418 ( 6331)   if nlines<maxlines-1 then begin
                 419 ( 6344)     if line<mark then mark:=mark+1

----------------------------------------------------------------------

R65 Pascal program PEDIT           7/11/23     page 8

                 420 ( 6363)     else if line<mark+nmark then nmark:=nmark+1;
                 421 ( 6396)     if line<nlines-1 then begin
                 422 ( 6413)       for i:=nlines-1 downto line+1 do
                 423 ( 6433)         linepnt[i+1]:=linepnt[i];
                 424 ( 6454)       end;
                 425 ( 6476)     linepnt[line+1]:=strnew;
                 426 ( 6489)     s1:=linepnt[line+1]; s2:=linepnt[line];
                 427 ( 6512)     for i:=0 to xmax-1 do s1[i]:=' ';
                 428 ( 6546)     for i:=curpos to xmax-1 do begin
                 429 ( 6585)       s1[i-curpos]:=s2[i]; s2[i]:=' ';
                 430 ( 6613)       end;
                 431 ( 6617)     line:=line+1; nlines:=nlines+1;
                 432 ( 6648)     savecx:=1; chkline; chktop(false); showall;
                 433 ( 6675)   end;
                 434 ( 6675) end;
                 435 ( 6675) 
                 436 ( 6676) proc paste;
                 437 ( 6676) var l,i:integer; s1,s2:cpnt;
                 438 ( 6679) begin
                 439 ( 6679)   for i:=nlines-1 downto line do
                 440 ( 6692)     linepnt[i+nmark]:=linepnt[i];
                 441 ( 6718)   nlines:=nlines+nmark;
                 442 ( 6744)   if mark>line then mark:=mark+nmark;
                 443 ( 6769)   for l:=mark to mark+nmark-1 do begin
                 444 ( 6807)     linepnt[line]:=strnew;
                 445 ( 6817)     s1:=linepnt[line]; s2:=linepnt[l];
                 446 ( 6837)     for i:=0 to xmax-1 do s1[i]:=s2[i];
                 447 ( 6877)     line:=line+1;
                 448 ( 6903)   end;
                 449 ( 6908)   showall;
                 450 ( 6926) end;
                 451 ( 6926) 
                 452 ( 6927) proc move;
                 453 ( 6927) var i,j,saveline:integer; savepnt:cpnt;
                 454 ( 6930) begin
                 455 ( 6930)   saveline:=line; { insert above}
                 456 ( 6940)   if line>=mark+nmark then begin
                 457 ( 6954)     mark:=mark+nmark-1;
                 458 ( 6968)     for j:=0 to nmark-1 do begin
                 459 ( 6995)       savepnt:=linepnt[mark];
                 460 ( 6999)       for i:=mark to line-1 do
                 461 ( 7021)         linepnt[i]:=linepnt[i+1];
                 462 ( 7042)       mark:=mark-1; line:=line-1;
                 463 ( 7081)       linepnt[line]:=savepnt;
                 464 ( 7090)     end;
                 465 ( 7098)   end else if line<mark then begin
                 466 ( 7124)     for j:=0 to nmark-1 do begin
                 467 ( 7149)       savepnt:=linepnt[mark];
                 468 ( 7153)       for i:=mark downto line+1 do
                 469 ( 7175)         linepnt[i]:=linepnt[i-1];
                 470 ( 7196)       linepnt[line]:=savepnt;
                 471 ( 7222)       mark:=mark+1; line:=line+1;
                 472 ( 7247)     end;
                 473 ( 7252)   end else showerror('Move inside move');
                 474 ( 7294)  mark:=saveline; line:=saveline; showall;
                 475 ( 7314) end;
                 476 ( 7314) 
                 477 ( 7315) func doesc: boolean;
                 478 ( 7315) var ch:char;
                 479 ( 7318)     i,n:integer;

----------------------------------------------------------------------

R65 Pascal program PEDIT           7/11/23     page 9

                 480 ( 7318)     s,savl:cpnt;
                 481 ( 7318) begin
                 482 ( 7318)   doesc:=false; savecx:=1;
                 483 ( 7328)   getinput(n,stemp); ch:=stemp[0];
                 484 ( 7356)   if (strlen(stemp)>1) and (stemp[1]<>' ') then
                 485 ( 7388)     showerror('Expected f: xxx')
                 486 ( 7410)   else begin
                 487 ( 7419)     case ch of
                 488 ( 7419)       't': begin {top}
                 489 ( 7430)              line:=1; chktop(true);
                 490 ( 7444)            end;
                 491 ( 7444)       'b': begin {bottom}
                 492 ( 7454)              line:=nlines-1; chktop(true);
                 493 ( 7473)            end;
                 494 ( 7473)       'l': begin {line number}
                 495 ( 7483)              line:=n; chkline; chktop(true);
                 496 ( 7503)            end;
                 497 ( 7503)       'f','g': begin {find string}
                 498 ( 7520)              find(ch='g'); chkline; chktop(false);
                 499 ( 7545)              showall;
                 500 ( 7549)            end;
                 501 ( 7549)       'c': begin {mark lines for copy}
                 502 ( 7559)              if n<1 then n:=1;
                 503 ( 7571)              if line+n>= nlines-1 then
                 504 ( 7590)                showerror('Too many lines')
                 505 ( 7612)              else begin
                 506 ( 7621)                mark:=line; nmark:=n;
                 507 ( 7629)                for line:=mark to mark+nmark-1 do
                 508 ( 7656)                begin
                 509 ( 7666)                  s:=linepnt[line];
                 510 ( 7670)                  for i:=0 to xmax-1 do
                 511 ( 7688)                    s[i]:= chr(ord(s[i]) or $80);
                 512 ( 7715)                end;
                 513 ( 7734)                line:=mark;
                 514 ( 7748)              end;
                 515 ( 7756)              showall;
                 516 ( 7760)            end;
                 517 ( 7760)       'p': begin {paste marked lines}
                 518 ( 7770)              if mark=0 then
                 519 ( 7776)                showerror('Nothing marked')
                 520 ( 7797)              else begin
                 521 ( 7806)                if nlines+nmark>=maxlines then
                 522 ( 7818)                  showerror('Too many lines')
                 523 ( 7839)                else paste;
                 524 ( 7852)              end;
                 525 ( 7852)            end;
                 526 ( 7852)       'm': begin {move marked lines }
                 527 ( 7862)              if mark=0 then
                 528 ( 7868)                showerror('Nothing marked')
                 529 ( 7889)              else move;
                 530 ( 7902)            end;
                 531 ( 7902)       'd': begin {delete n lines}
                 532 ( 7912)              if n<1 then n:=1;
                 533 ( 7924)              if line+n=maxlines-3 then
                 534 ( 7942)                n:=maxlines-3-line;
                 535 ( 7953)              for i:=1 to n do begin
                 536 ( 7981)                delline; line:=line+1;
                 537 ( 7991)              end;
                 538 ( 7996)              chkline; chktop(false); showall;
                 539 ( 8026)            end;

----------------------------------------------------------------------

R65 Pascal program PEDIT           7/11/23     page 10

                 540 ( 8026)       'w': writeoutput; {write output}
                 541 ( 8043)       'q': begin {write output and quit}
                 542 ( 8050)              writeoutput; doesc:=true;
                 543 ( 8056)            end;
                 544 ( 8060)       'k': doesc:=true; {kill program}
                 545 ( 8079)       '?','h': showerror('tb/l/fg/cpm/d/wqk/?h');
                 546 ( 8122)       chr(0): begin end
                 547 ( 8132)       else showerror('tb/l/fg/cpm/d/wqk/?h')
                 548 ( 8158)     end {case};
                 549 ( 8166)   end;
                 550 ( 8166)   clrmessage;
                 551 ( 8170) end;
                 552 ( 8170) 
                 553 ( 8171) begin {main}
                 554 ( 8171)   stemp:=strnew; stemp2:=strnew; fs:=strnew;
                 555 ( 8200)   setnumlin($0f,$37);
                 556 ( 8214)   write(hom,clrscr);
                 557 ( 8220)   putontop('Line xxx of xxx',0,true);
                 558 ( 8248)   relpnt:=maxlines-1;
                 559 ( 8253)   mark:=0; nmark:=0; savecx:=1;
                 560 ( 8272)   clrmessage;
                 561 ( 8280)   readinput; fs[0]:=chr(0);
                 562 ( 8288)   topline:= 1; line:=1; showall; exit:=false;
                 563 ( 8311)   repeat
                 564 ( 8315)     showtop; chi := edlin(linepnt[line]);
                 565 ( 8335)     case chi of
                 566 ( 8339)       cup,cdown: begin
                 567 ( 8357)              if chi=cup then line:=line-1
                 568 ( 8371)              else line:=line+1;
                 569 ( 8387)              chkline;
                 570 ( 8396)              if curpos>lastpos(line)+2 then
                 571 ( 8413)                savecx:=lastpos(line)+2;
                 572 ( 8432)              chktop(true);
                 573 ( 8445)            end;
                 574 ( 8445)       pgup: begin
                 575 ( 8455)              line:=line-15; chkline; chktop(true);
                 576 ( 8478)            end;
                 577 ( 8478)       pgdown: begin
                 578 ( 8488)              line:=line+15; chkline; chktop(true);
                 579 ( 8511)            end;
                 580 ( 8511)       hom: begin
                 581 ( 8521)              line:=1; savecx:=1; chktop(true);
                 582 ( 8541)            end;
                 583 ( 8541)       pgend: begin
                 584 ( 8551)              line:=nlines-1; savecx:=1; chktop(true);
                 585 ( 8576)            end;
                 586 ( 8576)       cr:  insertline;
                 587 ( 8590)       esc: if doesc then exit:=true
                 588 ( 8609)     end {case};
                 589 ( 8617)     until exit;
                 590 ( 8617)   setnumlin($29,$2f);
                 591 ( 8634)   writeln(hom, clrscr, 'closing...');
                 592 ( 8657) end.
                 593 ( 8657) 

End compile

Code lenght:          8656
Compiler stack size:  116
Ident stack size:     170
Pascal errors:        0

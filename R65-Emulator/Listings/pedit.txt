
R65 COMPILE 4.2: program PEDIT            6/12/23 page 1


   1 (    4) program pedit;
   2 (    4) 
   3 (    4) { Pascal editor, original 1980 RR
   4 (    4)   rewritten 2023 RR for R65 system }
   5 (    4) 
   6 (    4) uses syslib, arglib, strlib, disklib;
   7 ( 2382) 
   8 ( 2382) const title='R65 PEDIT 2.1'; {max 20 chars}
   9 ( 2399) 
  10 ( 2399)     maxlines= 360;      xmax   = 56;
  11 ( 2399)     scrlins = 16;       mlenght= 19;
  12 ( 2399)     inpx    = 37;       marked = 58;
  13 ( 2399)     eol     = chr($00); esc    = chr($00);
  14 ( 2399)     rdown   = chr($02); rup    = chr($08);
  15 ( 2399)     pgdown  = chr($14); pgup   = chr($12);
  16 ( 2399)     cdown   = chr($18); cup    = chr($1a);
  17 ( 2399)     pgend   = chr($10); clrscr = chr($11);
  18 ( 2399)     clrlin  = chr($17); cleft  = chr($03);
  19 ( 2399)     inschr  = chr($15); delchr = chr($19);
  20 ( 2399)     rubout  = chr($5f); cright = chr($16);
  21 ( 2399) 
  22 ( 2399) mem curlin  = $ed: integer&;
  23 ( 2399)     curpos  = $ee: integer&;
  24 ( 2399)     filcyc  = $311: integer&;
  25 ( 2399)     video   = $400: array[900] of char&;
  26 ( 2399)     topi    = $400: array[xmax] of integer&;
  27 ( 2399)     topc    = $400: array[xmax] of char&;
  28 ( 2399) 
  29 ( 2399) 
  30 ( 2399) var line,nlines,topline,i,dummy,debug: integer;
  31 ( 2399)     name: array[15] of char;
  32 ( 2399)     fno: file;
  33 ( 2399)     chi : char;
  34 ( 2399)     cyclus,drive,mark,nmarks,savecx: integer;
  35 ( 2399)     default, iseof, stop: boolean;
  36 ( 2399)     fs: cpnt;
  37 ( 2399)     linepnt: array[maxlines] of cpnt;
  38 ( 2399)     relpnt:  integer;
  39 ( 2399)     stemp,stemp2: cpnt;
  40 ( 2399) 
  41 ( 2399) func printable(ch:char):boolean;
  42 ( 2399) begin
  43 ( 2399)   printable:=((ord(ch)>=$20) and (ord(ch)<=$7e))
  44 ( 2418)     and (ch<>rubout);
  45 ( 2426) end;
  46 ( 2431) 
  47 ( 2432) proc putontop(s:cpnt;pos:integer;inv:boolean);
  48 ( 2432) var i:integer;
  49 ( 2435) begin
  50 ( 2435)   i:=0; { faster version: if not in loop }
  51 ( 2443)   if inv then while s[i]<>endmark do begin
  52 ( 2466)     topi[i+pos]:=ord(s[i]) or 128; i:=i+1;
  53 ( 2501)   end else while s[i]<>endmark do begin
  54 ( 2528)     topc[i+pos]:=s[i]; i:=i+1;
  55 ( 2560)   end;
  56 ( 2565) end;
  57 ( 2568) 
  58 ( 2569) proc release(p:cpnt);
  59 ( 2569) begin

----------------------------------------------------------------------

R65 COMPILE 4.2: program PEDIT            6/12/23 page 2

  60 ( 2569)   linepnt[relpnt]:=p; relpnt:=relpnt-1;
  61 ( 2592) end;
  62 ( 2597) 
  63 ( 2598) proc setnumlin(l,c:integer);
  64 ( 2598) mem numlin=$1789: integer&;
  65 ( 2601)     numchr=$178a: integer&;
  66 ( 2601) begin
  67 ( 2601)   numlin:=l; numchr:=c;
  68 ( 2612) end;
  69 ( 2621) 
  70 ( 2622) func column:integer;
  71 ( 2622) begin
  72 ( 2622)   column:=line-topline+1;
  73 ( 2638) end;
  74 ( 2643) 
  75 ( 2644) proc goto(xpos, ypos: integer);
  76 ( 2644) begin
  77 ( 2644)   curlin:=ypos; { top on line 2 }
  78 ( 2657)   if curlin>15 then curlin:=15;
  79 ( 2668)   curpos:=xpos-1;
  80 ( 2678) end;
  81 ( 2683) 
  82 ( 2684) proc clrmessage;
  83 ( 2684) var i:integer;
  84 ( 2687) begin
  85 ( 2687)   for i:=inpx-1 to xmax-1 do topi[i]:=128;
  86 ( 2718) end;
  87 ( 2739) 
  88 ( 2740) proc showerror(s:cpnt);
  89 ( 2740) var i: integer;
  90 ( 2743)     ch: char;
  91 ( 2743) begin
  92 ( 2743)   clrmessage;
  93 ( 2749)   putontop(s,36,true);
  94 ( 2763)   read(@key,ch);
  95 ( 2771)   clrmessage;
  96 ( 2776) end;
  97 ( 2776) 
  98 ( 2777) func new:cpnt;
  99 ( 2777) var i:integer;
 100 ( 2780)     s:cpnt;
 101 ( 2780) begin
 102 ( 2780)   if relpnt<maxlines-1 then begin
 103 ( 2793)     relpnt:=relpnt+1; s:=linepnt[relpnt];
 104 ( 2811)   end else if nlines<maxlines-1 then s:=strnew
 105 ( 2836)   else s:=nil;
 106 ( 2851)   new:=s;
 107 ( 2855)   if s<>nil then begin
 108 ( 2870)     for i:=0 to xmax-1 do s[i]:=' ';
 109 ( 2899)     s[xmax]:=endmark;
 110 ( 2921)     s[marked]:=chr(0);
 111 ( 2929)   end;
 112 ( 2934)   if nlines>maxlines-5 then
 113 ( 2943)     showerror('Warning: Low memory');
 114 ( 2976) end;
 115 ( 2976) 
 116 ( 2977) proc newline;
 117 ( 2977) begin
 118 ( 2977)   linepnt[nlines]:=new;
 119 ( 2992)   nlines:=nlines+1;

----------------------------------------------------------------------

R65 COMPILE 4.2: program PEDIT            6/12/23 page 3

 120 ( 3002) end;
 121 ( 3007) 
 122 ( 3008) 
 123 ( 3008) func isnumber(ci:integer):boolean;
 124 ( 3008) begin
 125 ( 3008)   isnumber:=(ci>=ord('0')) and (ci<=ord('9'))
 126 ( 3026) end;
 127 ( 3032) 
 128 ( 3033) proc getinput(var c:char;var n:integer; s:cpnt);
 129 ( 3033) { get input line on top and analyze it }
 130 ( 3033) var i,j,stop:integer; ch: char;
 131 ( 3036) begin
 132 ( 3036)   goto(inpx,0); write(chr(ord(':') or 128));
 133 ( 3055)   {read input}
 134 ( 3055)   read(@key,ch); i:=0;
 135 ( 3066)   while (ch<>chr(13)) and (ch<>esc) do begin
 136 ( 3089)     if (ch=rubout) then begin
 137 ( 3096)       if i>0 then i:=i-1; goto(i+inpx+1,0);
 138 ( 3138)       write(chr(ord(' ') or 128),cleft);
 139 ( 3148)     end else if (ch>=' ') and (ch<=chr($7d)) and
 140 ( 3166)       (inpx+i<xmax-1) then begin
 141 ( 3181)       goto(i+inpx+1,0);
 142 ( 3202)       write(chr(ord(ch) or 128)); i:=i+1;
 143 ( 3217)     end;
 144 ( 3222)     read(@key,ch);
 145 ( 3230)   end;
 146 ( 3231)   stop:=i+inpx; n:=0; s[0]:=endmark; c:=endmark;
 147 ( 3261)   {set c}
 148 ( 3265)   if stop<=inpx then exit;
 149 ( 3276)   c:=chr(topi[inpx] and 127);
 150 ( 3286)   {set n}
 151 ( 3291)   if stop<inpx+1 then exit;
 152 ( 3305)   i:=inpx+1;
 153 ( 3309)   while isnumber(topi[i] and 127) and
 154 ( 3334)       (i<stop) do begin
 155 ( 3347)     n:=10*n+(topi[i] and 127)-ord('0');
 156 ( 3369)     i:=i+1;
 157 ( 3380)   end;
 158 ( 3385)   j:=0;
 159 ( 3390)   while i<=stop do begin
 160 ( 3406)     s[j]:=chr(topi[i] and 127); i:=i+1; j:=j+1;
 161 ( 3444)   end;
 162 ( 3449)   s[j]:=endmark;
 163 ( 3458) end;
 164 ( 3462) 
 165 ( 3463) func readline(input: file; pnt: cpnt): boolean;
 166 ( 3463) const alteof=chr(127);
 167 ( 3466) var ch1: char;
 168 ( 3466)     pos: integer;
 169 ( 3466) begin
 170 ( 3466)   pos := 0; read(@fno,ch1);
 171 ( 3484)   while (ch1>=' ') and (ch1<>alteof) and
 172 ( 3499)       (pos<xmax-1) do begin
 173 ( 3514)     pnt[pos]:=ch1; pos:=pos+1; read(@fno,ch1);
 174 ( 3547)     end;
 175 ( 3548)   { not  required, done by new }
 176 ( 3551)   { while pos<xmax do begin
 177 ( 3551)     pnt[pos]:=' '; pos:=pos+1;
 178 ( 3551)   end; }
 179 ( 3551)   readline:=(ch1=eof) or (ch1=alteof);

----------------------------------------------------------------------

R65 COMPILE 4.2: program PEDIT            6/12/23 page 4

 180 ( 3565) end;
 181 ( 3570) 
 182 ( 3571) proc showline(pnt:cpnt; y: integer);
 183 ( 3571) var lstart,pos: integer;
 184 ( 3574) begin
 185 ( 3574)   lstart:=y*xmax;
 186 ( 3582)   if (pnt=nil) then
 187 ( 3594)    for pos:=0 to xmax-1 do
 188 ( 3607)     video[lstart+pos]:=' '
 189 ( 3626)   else begin
 190 ( 3652)     pos:=0;
 191 ( 3654)     while (pos<xmax) and (pnt[pos]<>endmark) do begin
 192 ( 3682)       video[lstart+pos]:=pnt[pos]; pos:=pos+1
 193 ( 3712)     end;
 194 ( 3719)     while pos<xmax do begin
 195 ( 3732)       video[lstart+pos]:=' '; pos:=pos+1
 196 ( 3754)     end
 197 ( 3756)   end;
 198 ( 3764) end;
 199 ( 3764) 
 200 ( 3765) proc showtop;
 201 ( 3765) begin
 202 ( 3765)   intstr(line,stemp,3); putontop(stemp,5,true);
 203 ( 3800)   intstr(nlines-1,stemp,3); putontop(stemp,12,true);
 204 ( 3833) end;
 205 ( 3833) 
 206 ( 3834) proc showall;
 207 ( 3834) var lstart,y,i,l,lstart: integer;
 208 ( 3837) begin
 209 ( 3837)   showtop;
 210 ( 3843)   for y:=1 to scrlins-1 do begin
 211 ( 3863)     l:=topline-1+y; lstart:=y*xmax;
 212 ( 3885)     if l<nlines then
 213 ( 3894)       showline(linepnt[l],y)
 214 ( 3910)     else
 215 ( 3920)       for i:=0 to xmax-1 do
 216 ( 3933)         video[lstart+i]:=' ';
 217 ( 3954)   end;
 218 ( 3975) end;
 219 ( 3989) 
 220 ( 3990) proc updline(pnt: cpnt; lstart:integer);
 221 ( 3990) var pos: integer;
 222 ( 3993) begin
 223 ( 3993)   for pos:=0 to xmax-1 do
 224 ( 4005)     pnt[pos]:=video[lstart+pos];
 225 ( 4031) end;
 226 ( 4051) 
 227 ( 4052) func lastpos(l:integer):integer;
 228 ( 4052) { returns -1 if line empty }
 229 ( 4052) var endpos:integer;
 230 ( 4055)     s:cpnt;
 231 ( 4055) begin
 232 ( 4055)   endpos:=xmax-1;
 233 ( 4061)   s:=linepnt[l];
 234 ( 4070)   while (chr(ord(s[endpos]) and $7f)=' ')
 235 ( 4094)     and (endpos>0) do endpos:=endpos-1;
 236 ( 4112)   if (endpos=0) and (chr(ord(s[endpos]) and $7f)=' ')
 237 ( 4143)   then endpos:=-1;
 238 ( 4150)   lastpos:=endpos;
 239 ( 4155) end;

----------------------------------------------------------------------

R65 COMPILE 4.2: program PEDIT            6/12/23 page 5

 240 ( 4163) 
 241 ( 4164) proc chkline;
 242 ( 4164) begin
 243 ( 4164)   if line<1 then line:=1
 244 ( 4179)   else if line>nlines-1 then line:=nlines-1;
 245 ( 4209) end;
 246 ( 4214) 
 247 ( 4215) proc chktop(show: boolean);
 248 ( 4215) var savetop,bottom:integer;
 249 ( 4218) begin
 250 ( 4218)   savetop:=topline; bottom:=topline+scrlins-1;
 251 ( 4237)   if line<topline then topline:=line;
 252 ( 4254)   { keep cursor above bottom line, if possible }
 253 ( 4262)   if line>=bottom-1 then
 254 ( 4272)     topline:=line-scrlins+3;
 255 ( 4286)   if show and (savetop<>topline) then showall;
 256 ( 4312) end;
 257 ( 4312) 
 258 ( 4313) proc delline;
 259 ( 4313) var i:integer; savpnt:cpnt;
 260 ( 4316) begin
 261 ( 4316)   chkline; savpnt:=linepnt[line];
 262 ( 4326)   if line<mark then mark:=mark-1;
 263 ( 4352)   for i:=line to nlines-2 do
 264 ( 4371)     linepnt[i]:=linepnt[i+1];
 265 ( 4392)   release(savpnt); nlines:=nlines-1;
 266 ( 4430)   chkline; chktop(false);
 267 ( 4447)   line:=line-1; savecx:=1;
 268 ( 4460) end;
 269 ( 4464) 
 270 ( 4465) proc join;
 271 ( 4465) var p,p1,p2,pm:integer;
 272 ( 4468)     s1,s2:cpnt;
 273 ( 4468) begin
 274 ( 4468)   p1:=lastpos(line-1); p2:=lastpos(line);
 275 ( 4501)   s1:=linepnt[line-1]; s2:=linepnt[line];
 276 ( 4524)   for p:=p1+1 to xmax-1 do s1[p]:=s2[p-p1-1];
 277 ( 4577)   if p1+p2<xmax then delline
 278 ( 4609)   else begin
 279 ( 4619)     pm:=xmax-p1;
 280 ( 4621)     for p:=0 to xmax-pm do s2[+p]:=s2[p+pm-1];
 281 ( 4672)     for p:=xmax-pm+1 to xmax-1 do s2[p]:=' ';
 282 ( 4726)     line:=line-1;
 283 ( 4750)   end;
 284 ( 4755)   savecx:=p1+2; chkline; chktop(false); showall;
 285 ( 4782) end;
 286 ( 4782) 
 287 ( 4783) func edlin(pnt: cpnt): char;
 288 ( 4783) const key    = @1;
 289 ( 4786) var   ch1,lstch1,lstch2: char;
 290 ( 4786)       stop: boolean;
 291 ( 4786)       lstart: integer;
 292 ( 4786) begin
 293 ( 4786)   goto(savecx,column);
 294 ( 4804)   if savecx=1 then write(cright,cleft)
 295 ( 4819)   else write(cleft,cright); {to update cursor}
 296 ( 4829)   stop:=false; lstart:=column*xmax;
 297 ( 4843)   repeat
 298 ( 4848)     read(@key,ch1);
 299 ( 4856)     lstch1:=' '; lstch2:=' ';

----------------------------------------------------------------------

R65 COMPILE 4.2: program PEDIT            6/12/23 page 6

 300 ( 4865)     case ch1 of
 301 ( 4869)       delchr,rubout: if (curpos=0) and (line>1)
 302 ( 4899)              then begin
 303 ( 4901)                updline(pnt,lstart);join;stop:=true;
 304 ( 4924)              end else write(cleft,delchr);
 305 ( 4937)       cleft: if curpos>0 then write(cleft)
 306 ( 4958)              else if line>1 then begin
 307 ( 4969)                updline(pnt,lstart);
 308 ( 4986)                line:=line-1; curpos:=lastpos(line)+1;
 309 ( 5011)                stop:=true;
 310 ( 5018)              end;
 311 ( 5022)       cright:if curpos<xmax-1 then begin
 312 ( 5041)                write(cright);
 313 ( 5047)              end else if line<nlines-1 then begin
 314 ( 5062)                updline(pnt,lstart);
 315 ( 5079)                line:=line+1; curpos:=0;
 316 ( 5092)                stop:=true;
 317 ( 5098)              end;
 318 ( 5102)       cup,cdown,esc,cr,rup,rdown,
 319 ( 5144)       pgup,pgdown,hom,pgend: stop:=true
 320 ( 5175)       else begin
 321 ( 5184)              if printable(ch1) then begin
 322 ( 5196)                lstch1:=video[lstart+xmax-1];
 323 ( 5212)                lstch1:=chr(ord(lstch1) and $7f);
 324 ( 5225)                lstch2:=video[lstart+xmax-2];
 325 ( 5243)                lstch2:=chr(ord(lstch2) and $7f);
 326 ( 5256)                if curpos>=xmax-1 then begin
 327 ( 5270)                  if line>=nlines-1 then newline;
 328 ( 5292)                  video[lstart+xmax-1]:=ch1;
 329 ( 5302)                  curpos:=0;
 330 ( 5315)                  lstch1:=cdown;
 331 ( 5321)                end else begin
 332 ( 5328)                  write(inschr); write(ch1);
 333 ( 5336)                end;
 334 ( 5336)                if (lstch1<>' ') or (lstch2<>' ')
 335 ( 5349)                  then stop:=true;
 336 ( 5356)              end;
 337 ( 5360)            end
 338 ( 5360)     end {case};
 339 ( 5362)     until stop;
 340 ( 5362)   updline(pnt,lstart);
 341 ( 5383)   if (lstch1<>' ') or (lstch2<>' ') then edlin:=lstch1
 342 ( 5401)   else edlin:=ch1;
 343 ( 5412)   if (ch1<>delchr) and (ch1<>rubout) then
 344 ( 5434)     savecx:=curpos+1;
 345 ( 5443) end;
 346 ( 5448) 
 347 ( 5449) proc readinput;
 348 ( 5449) var i,pend,maxl1:integer;
 349 ( 5452) begin
 350 ( 5452)   cyclus:=0; drive:=1;
 351 ( 5462)   goto(1,1); write(clrscr); goto(1,0);
 352 ( 5489)   agetstring(name,default,cyclus,drive);
 353 ( 5529)   asetfile(name,cyclus,drive,'P');
 354 ( 5551)   openr(fno);
 355 ( 5557)   nlines := 1; line:=1; topline:=1;
 356 ( 5571)   pend:=15; while name[pend]=' ' do pend:=pend-1;
 357 ( 5601)   for i:=0 to pend do stemp[i]:=name[i];
 358 ( 5636)   stemp[pend+1]:=endmark;
 359 ( 5667)   stradd(':P.',stemp);

----------------------------------------------------------------------

R65 COMPILE 4.2: program PEDIT            6/12/23 page 7

 360 ( 5687)   hexstr(filcyc,stemp2);
 361 ( 5701)   stradd(stemp2,stemp);
 362 ( 5715)   while strlen(stemp)<17 do stradd(' ',stemp);
 363 ( 5747)   putontop(stemp,17,true);
 364 ( 5764)   putontop('Reading',36,true);
 365 ( 5784)   maxl1:=maxlines-9;
 366 ( 5789)   showtop;
 367 ( 5798)   repeat
 368 ( 5798)     linepnt[nlines] := new;
 369 ( 5808)     iseof := readline(fno, linepnt[nlines]);
 370 ( 5832)     nlines := nlines+1;
 371 ( 5842)     if (nlines and $1f)=0 then showtop;
 372 ( 5864)     until iseof or (nlines >= maxl1);
 373 ( 5877)   showtop;
 374 ( 5885)   if nlines >= maxlines-9 then
 375 ( 5894)       showerror('Too many lines');
 376 ( 5922)   close(fno);
 377 ( 5928)   clrmessage;
 378 ( 5932)   showall;
 379 ( 5936) end;
 380 ( 5936) 
 381 ( 5937) proc writeoutput;
 382 ( 5937) var pos,endpos,nlm1:integer;s,saveline:cpnt;
 383 ( 5940) begin
 384 ( 5940)   cyclus:=0; drive:=1;
 385 ( 5950)   goto(1,1); write(clrscr); goto(1,0);
 386 ( 5977)   asetfile(name,cyclus,drive,'P');
 387 ( 5999)   openw(fno);
 388 ( 6005)   putontop('Writing',36,true);
 389 ( 6025)   nlm1:=nlines-1;
 390 ( 6031)   for line:=1 to nlm1 do begin
 391 ( 6055)     if (line and $1f)=0 then showtop;
 392 ( 6072)     endpos:=lastpos(line);
 393 ( 6084)     s:=linepnt[line];
 394 ( 6092)     for pos:=0 to endpos do
 395 ( 6106)       write(@fno,chr(ord(s[pos]) and $7f));
 396 ( 6140)     if (line<nlm1) then write(@fno,cr);
 397 ( 6175)   end;
 398 ( 6175)   showtop;
 399 ( 6193)   close(fno); line:=nlines-1;
 400 ( 6205)   showall;
 401 ( 6214) end;
 402 ( 6214) 
 403 ( 6215) proc clrmarks;
 404 ( 6215) var x,savel,xm1:integer; s:cpnt;
 405 ( 6218) begin
 406 ( 6218)   putontop('Clearing marks',36,true);
 407 ( 6247)   savel:=line;
 408 ( 6247)   for line:=1 to nlines-1 do begin
 409 ( 6277)     s:=linepnt[line];
 410 ( 6281)     if s[marked]<>chr(0) then begin
 411 ( 6301)       xm1:=xmax-1;
 412 ( 6308)       for x:=0 to xm1 do
 413 ( 6319)         s[x]:=chr(ord(s[x]) and $7f);
 414 ( 6349)       s[marked]:=chr(0);
 415 ( 6372)       end;
 416 ( 6377)     end;
 417 ( 6377)   line:=savel; mark:=0;
 418 ( 6401) end;
 419 ( 6405) 

----------------------------------------------------------------------

R65 COMPILE 4.2: program PEDIT            6/12/23 page 8

 420 ( 6406) proc find(again:boolean);
 421 ( 6406) var pos,x,i:integer;
 422 ( 6409)     ch:char;
 423 ( 6409)     found:boolean;
 424 ( 6409)     s2:cpnt;
 425 ( 6409) 
 426 ( 6409)   proc checkrest;
 427 ( 6409)   var failed:boolean;
 428 ( 6412)       x1:integer;
 429 ( 6412)       s1:cpnt;
 430 ( 6412)   begin
 431 ( 6412)     failed:=false; pos:=2; x1:=x+1;
 432 ( 6432)     while (fs[pos]<>endmark) and (x1<xmax) do begin
 433 ( 6461)       s1:=linepnt[line];
 434 ( 6465)       if s1[x1] <> fs[pos] then failed:=true;
 435 ( 6499)       pos:=pos+1; x1:=x1+1;
 436 ( 6520)       end;
 437 ( 6525)      if (failed=false) and (fs[pos]=endmark)
 438 ( 6547)       then found:=true;
 439 ( 6554)   end;
 440 ( 6558) 
 441 ( 6559) begin
 442 ( 6559)   clrmessage;
 443 ( 6565)   if not again then strcpy(stemp,fs);
 444 ( 6587)   if fs[0]=endmark then begin
 445 ( 6598)     {empty string -> delete all marks}
 446 ( 6601)     clrmarks;
 447 ( 6605)     end
 448 ( 6605)   else begin
 449 ( 6608)     putontop('Searching',36,true);
 450 ( 6630)     found:=false;
 451 ( 6632)     repeat
 452 ( 6636)       x:=0;
 453 ( 6638)       repeat
 454 ( 6642)         pos:=1;
 455 ( 6644)         s2:=linepnt[line];
 456 ( 6652)         if s2[x]=fs[pos] then checkrest;
 457 ( 6688)         x:=x+1;
 458 ( 6694)         until found or (x>=xmax);
 459 ( 6710)       if (line and $0f)=0 then showtop;
 460 ( 6731)       line:=line+1;
 461 ( 6737)       until found or (line>=nlines);
 462 ( 6755)     if found then begin
 463 ( 6763)       line:=line-1; x:=x-1; i:=1;
 464 ( 6790)       s2:=linepnt[line];
 465 ( 6798)       savecx:=x+i;
 466 ( 6810)       s2[marked]:=chr(1);
 467 ( 6823)       while fs[i]<>endmark do begin
 468 ( 6844)         s2[x+i-1]:=chr(ord(s2[x+i-1]) or $80);
 469 ( 6877)          i:=i+1;
 470 ( 6888)         end
 471 ( 6893)       end
 472 ( 6893)     else begin
 473 ( 6899)       line:=nlines-1;
 474 ( 6905)     end;
 475 ( 6910)     showtop;
 476 ( 6914)   end
 477 ( 6914) end;
 478 ( 6914) 
 479 ( 6915) proc insertline;

----------------------------------------------------------------------

R65 COMPILE 4.2: program PEDIT            6/12/23 page 9

 480 ( 6915) var i:integer;
 481 ( 6918)     s1,s2:cpnt;
 482 ( 6918) begin
 483 ( 6918)   if nlines<maxlines-1 then begin
 484 ( 6931)     if line<mark then mark:=mark+1;
 485 ( 6952)     if line<nlines-1 then begin
 486 ( 6969)       for i:=nlines-1 downto line+1 do
 487 ( 6989)         linepnt[i+1]:=linepnt[i];
 488 ( 7010)       end;
 489 ( 7032)     linepnt[line+1]:=new;
 490 ( 7045)     s1:=linepnt[line+1]; s2:=linepnt[line];
 491 ( 7068)     for i:=0 to xmax-1 do s1[i]:=' ';
 492 ( 7102)     for i:=curpos to xmax-1 do begin
 493 ( 7141)       s1[i-curpos]:=s2[i]; s2[i]:=' ';
 494 ( 7169)       end;
 495 ( 7173)     line:=line+1; nlines:=nlines+1;
 496 ( 7204)     savecx:=1; chkline; chktop(false); showall;
 497 ( 7231)   end;
 498 ( 7231) end;
 499 ( 7231) 
 500 ( 7232) proc paste;
 501 ( 7232) var l,i,saveline:integer; s1,s2:cpnt;
 502 ( 7235) begin
 503 ( 7235)   saveline:=line;
 504 ( 7237)   if nlines+nmarks<maxlines then begin
 505 ( 7258)     if (line>=mark+nmarks) or
 506 ( 7275)           (line<mark) then begin
 507 ( 7285)       putontop('Pasting',36,true);
 508 ( 7308)       for l:=0 to nmarks-1 do begin
 509 ( 7330)         for i:=nlines-1 downto line do
 510 ( 7341)           linepnt[i+1]:=linepnt[i];
 511 ( 7365)         nlines:=nlines+1;
 512 ( 7393)         if mark>line then mark:=mark+1;
 513 ( 7416)         linepnt[line]:=new;
 514 ( 7431)         s1:=linepnt[line];
 515 ( 7439)         s2:=linepnt[mark+l];
 516 ( 7456)         for i:=0 to xmax do s1[i]:=s2[i];
 517 ( 7493)         s1[marked]:=chr($80);
 518 ( 7517)         line:=line+1;
 519 ( 7528)       end;
 520 ( 7533)       showall;
 521 ( 7551)     end else showerror('Cannot paste here');
 522 ( 7580)   end else showerror('Error: Out of memory');
 523 ( 7612)   line:=saveline; chktop(false);
 524 ( 7628) end;
 525 ( 7628) 
 526 ( 7629) proc move;
 527 ( 7629) var l,i,saveline:integer; s1,s2,savpnt:cpnt;
 528 ( 7632) begin
 529 ( 7632)   saveline:=line;
 530 ( 7634)   if (line>=mark+nmarks) or
 531 ( 7656)         (line<mark) then begin
 532 ( 7666)     putontop('Moving',36,true);
 533 ( 7688)     for l:=0 to nmarks-1 do begin
 534 ( 7710)       savpnt:=linepnt[mark];
 535 ( 7714)       if mark>line then begin
 536 ( 7731)         for i:=mark-1 downto line do
 537 ( 7745)           linepnt[i+1]:=linepnt[i];
 538 ( 7769)         linepnt[line]:=savpnt;
 539 ( 7795)         line:=line+1; mark:=mark+1;

----------------------------------------------------------------------

R65 COMPILE 4.2: program PEDIT            6/12/23 page 10

 540 ( 7820)       end else begin
 541 ( 7828)         for i:=mark+1 to line-1 do
 542 ( 7845)           linepnt[i-1]:=linepnt[i];
 543 ( 7866)         linepnt[line-1]:=savpnt;
 544 ( 7895)         saveline:=saveline-1;
 545 ( 7909)       end;
 546 ( 7914)     end;
 547 ( 7914)     showall;
 548 ( 7932)   end else showerror('Cannot move here');
 549 ( 7960)   line:=saveline; mark:=saveline;
 550 ( 7968)   chktop(false);
 551 ( 7984) end;
 552 ( 7984) 
 553 ( 7985) func doesc: boolean;
 554 ( 7985) var ch:char;
 555 ( 7988)     i,j,n:integer;
 556 ( 7988)     s,savl:cpnt;
 557 ( 7988) begin
 558 ( 7988)   clrmessage;
 559 ( 7994)   doesc:=false; savecx:=1;
 560 ( 8002)   getinput(ch,n,stemp);
 561 ( 8032)   if (ch='f') and (stemp[0]<>' ') and
 562 ( 8050)     (strlen(stemp)<>0) then
 563 ( 8066)     showerror('Expected f xxx')
 564 ( 8087)   else if (ch<>'l') and (ch<>'d') and
 565 ( 8110)     (ch<>'c') and (n>0) then
 566 ( 8126)     showerror('n>1 not allowed')
 567 ( 8148)   else begin
 568 ( 8157)     case ch of
 569 ( 8157)       't': begin {top}
 570 ( 8168)              line:=1; chktop(true);
 571 ( 8182)            end;
 572 ( 8182)       'b': begin {bottom}
 573 ( 8192)              line:=nlines-1; chktop(true);
 574 ( 8211)            end;
 575 ( 8211)       'l': begin {goto line}
 576 ( 8221)              line:=n; chkline; chktop(true);
 577 ( 8241)            end;
 578 ( 8241)       'f','a': begin {find string (again)}
 579 ( 8258)              find(ch='a'); chkline; chktop(false);
 580 ( 8283)              showall;
 581 ( 8287)            end;
 582 ( 8287)       'z': begin {clear marks}
 583 ( 8297)              clrmarks; showall;
 584 ( 8305)            end;
 585 ( 8305)       'c': begin {mark lines for copy}
 586 ( 8315)              clrmarks;
 587 ( 8319)              if n<1 then n:=1;
 588 ( 8331)              if n>nlines-line then n:=nlines-line;
 589 ( 8356)              mark:=line;
 590 ( 8365)              nmarks:=n;
 591 ( 8373)              for i:=0 to n-1 do begin
 592 ( 8403)                s:=linepnt[line+i];
 593 ( 8412)                for j:=0 to xmax-1 do
 594 ( 8430)                  s[j]:= chr(ord(s[j]) or $80);
 595 ( 8457)                s[marked]:=chr(1);
 596 ( 8480)              end;
 597 ( 8485)              showall;
 598 ( 8503)            end;
 599 ( 8503)       'p': begin {paste copied lines}

----------------------------------------------------------------------

R65 COMPILE 4.2: program PEDIT            6/12/23 page 11

 600 ( 8513)              if mark=0 then
 601 ( 8519)                showerror('Error: Nothing copied')
 602 ( 8547)              else paste;
 603 ( 8560)            end;
 604 ( 8560)       'm': begin {move copied lines}
 605 ( 8570)              if mark=0 then
 606 ( 8576)                showerror('Error: Nothing copied')
 607 ( 8604)              else move;
 608 ( 8617)            end;
 609 ( 8617)       'd': begin {delete n lines}
 610 ( 8627)              if n<1 then n:=1;
 611 ( 8639)              if line+n=maxlines-3 then
 612 ( 8657)                n:=maxlines-3-line;
 613 ( 8668)              for i:=1 to n do begin
 614 ( 8696)                delline; line:=line+1;
 615 ( 8706)              end;
 616 ( 8711)              chkline; chktop(false); showall;
 617 ( 8741)            end;
 618 ( 8741)       'w': writeoutput; {write output}
 619 ( 8758)       'q': begin {write output and quit}
 620 ( 8765)              writeoutput; doesc:=true;
 621 ( 8771)            end;
 622 ( 8775)       'k': doesc:=true; {kill program}
 623 ( 8794)       '?','h': showerror('tb/l/fg/cpm/d/wqk/?h');
 624 ( 8837)       endmark: begin end
 625 ( 8847)       else showerror('tb/l/faz/cpm/d/wqk/?')
 626 ( 8873)     end {case};
 627 ( 8881)   end;
 628 ( 8881)   clrmessage;
 629 ( 8885) end;
 630 ( 8885) 
 631 ( 8886) proc newline;
 632 ( 8886) begin
 633 ( 8886)   linepnt[nlines]:=new; nlines:=nlines+1;
 634 ( 8911) end;
 635 ( 8916) 
 636 ( 8917) proc insert(ch:char;l:integer);
 637 ( 8917) { insert char at start of line (recursive) }
 638 ( 8917) var i,y:integer;
 639 ( 8920)     pnt:cpnt;
 640 ( 8920)     lstch1,lstch2:char;
 641 ( 8920) begin
 642 ( 8920)   if l>=nlines then newline;
 643 ( 8938)   pnt:=linepnt[l];
 644 ( 8942)   lstch1:=chr(ord(pnt[xmax-1]) and $7f);
 645 ( 8964)   lstch2:=chr(ord(pnt[xmax-2]) and $7f);
 646 ( 8983)   if (lstch1<>' ') or (lstch2<>' ')
 647 ( 9001)     then insert(lstch1,l+1);
 648 ( 9023)   for i:=xmax-2 downto 0 do pnt[i+1]:=pnt[i];
 649 ( 9058)   pnt[0]:=ch; y:=l-topline+1;
 650 ( 9099)   if (y>0) and (y<scrlins) then showline(pnt,y);
 651 ( 9136) end;
 652 ( 9136) 
 653 ( 9137) begin {main}
 654 ( 9137)   for i:=0 to maxlines-1 do linepnt[i]:=nil;
 655 ( 9167)   stemp:=strnew; stemp2:=strnew; fs:=strnew; debug:=0;
 656 ( 9217)   setnumlin($0f,$37); write(hom,clrscr);
 657 ( 9237)   putontop('Line xxx of xxx',0,true);
 658 ( 9265)   relpnt:=maxlines-1; mark:=0; savecx:=1;
 659 ( 9283)   clrmessage; readinput; fs[0]:=endmark;

----------------------------------------------------------------------

R65 COMPILE 4.2: program PEDIT            6/12/23 page 12

 660 ( 9299)   putontop(title,36,true);
 661 ( 9317)   topline:= 1; line:=1; showall; stop:=false;
 662 ( 9335)   repeat
 663 ( 9339)     showtop; chi := edlin(linepnt[line]);
 664 ( 9359)     if printable(chi) then insert(chi,line+1)
 665 ( 9388)     else case chi of
 666 ( 9398)       cup,cdown: begin
 667 ( 9416)              if chi=cup then line:=line-1
 668 ( 9430)              else line:=line+1;
 669 ( 9446)              chkline;
 670 ( 9455)              if curpos>lastpos(line)+2 then
 671 ( 9472)                savecx:=lastpos(line)+2;
 672 ( 9491)              chktop(true);
 673 ( 9504)            end;
 674 ( 9504)       pgup: begin
 675 ( 9514)              line:=line-15; chkline; chktop(true);
 676 ( 9537)            end;
 677 ( 9537)       pgdown: begin
 678 ( 9547)              line:=line+15; chkline; chktop(true);
 679 ( 9570)            end;
 680 ( 9570)       rup: if (topline>1) then begin
 681 ( 9587)              topline:=topline-1;chktop(false);showall;
 682 ( 9613)            end;
 683 ( 9613)       rdown: if (topline<nlines-15) then begin
 684 ( 9635)              topline:=topline+1;chktop(false);showall;
 685 ( 9661)            end;
 686 ( 9661)       hom: begin
 687 ( 9671)              line:=1; savecx:=1; chktop(true);
 688 ( 9691)            end;
 689 ( 9691)       pgend: begin
 690 ( 9701)              line:=nlines-1; savecx:=1; chktop(true);
 691 ( 9726)            end;
 692 ( 9726)       cr:  insertline;
 693 ( 9740)       esc: if doesc then stop:=true
 694 ( 9759)     end {case};
 695 ( 9767)     until stop;
 696 ( 9767)   setnumlin($29,$2f);
 697 ( 9784)   writeln(hom, clrscr);
 698 ( 9796)   dummy:=freedsk(fildrv,true);
 699 ( 9809) end.
 700 ( 9813) 

End compile

Code lenght:          9812
Compiler stack size:  128
Ident stack size:     189
Pascal errors:        0


R65 COMPILE 4.2: program PLOTLIB          7/2/24 page 1


   1 (    4) {
   2 (    4)         **************************
   3 (    4)         *                        *
   4 (    4)         *     R65 Tiny Pascal    *
   5 (    4)         *  Plot Library Plotlib  *
   6 (    4)         *                        *
   7 (    4)         **************************
   8 (    4) 
   9 (    4)        Version 16 06/02/80 rricharz
  10 (    4) 
  11 (    4) }
  12 (    4) 
  13 (    4) library plotlib;
  14 (    4) 
  15 (    4) const xsize=223;
  16 (    7)       ysize=117;
  17 (    7)       xwords=28;
  18 (    7)       white=0;
  19 (    7)       inverse=1;
  20 (    7)       black=2;
  21 (    7)       plotdev=@128;
  22 (    7) 
  23 (    7) mem keypressed=$1785: char&;
  24 (    7) 
  25 (    7) var xcursor, ycursor: integer;
  26 (    7) 
  27 (    7) { delay10msec: delay 10 msec }
  28 (    7) { process is suspended during delay }
  29 (    7) 
  30 (    7) proc delay10msec(time:integer);
  31 (    7) mem emucom=$1430: integer&;
  32 (   10) var i:integer;
  33 (   10) begin
  34 (   10)   for i:=1 to time do
  35 (   18)     emucom:=6;
  36 (   33) end;
  37 (   52) 
  38 (   53) func syncscreen;
  39 (   53) { synchronize screen and sleep
  40 (   53)   up to 30 msec since last sync.
  41 (   53)   returns sleep time in msec    }
  42 (   53) mem emucom=$1430: integer&;
  43 (   56)     emures=$1431: integer&;
  44 (   56) begin
  45 (   56)   emucom := 7;
  46 (   60)   syncscreen := emures;
  47 (   69) end;
  48 (   73) 
  49 (   74) { grinit: initialize memory for }
  50 (   74) { alpha/graphics display        }
  51 (   74) 
  52 (   74) proc grinit;
  53 (   74) const igraph=$e01e;
  54 (   77)       icrtgr=$e016;
  55 (   77) begin
  56 (   77)   call(igraph); call(icrtgr);
  57 (   87)   writeln('CTRT-L to toggle canvas size,',
  58 (  117)    'GREND to close it');
  59 (  141) end;

----------------------------------------------------------------------

R65 COMPILE 4.2: library PLOTLIB          7/2/24 page 2

  60 (  141) 
  61 (  142) { grend: end of graphics, initialize }
  62 (  142) { memory for alpha display           }
  63 (  142) 
  64 (  142) proc grend;
  65 (  142) const initcr=$e01b;
  66 (  145) mem sflag=$1781: integer&;
  67 (  145) begin
  68 (  145)   call(initcr);
  69 (  151)   sflag:=sflag or 1; {Pascal flag on}
  70 (  163) end;
  71 (  163) 
  72 (  164) { cleargr: clear graphics display }
  73 (  164) 
  74 (  164) proc cleargr;
  75 (  164) const clrgra=$e231; { not a vector! }
  76 (  167) begin
  77 (  167)   call(clrgra);
  78 (  173) end;
  79 (  173) 
  80 (  174) { fullview: go to full screen graphics display }
  81 (  174) 
  82 (  174) proc fullview;
  83 (  174) const icrtgr=$e016;
  84 (  177) begin
  85 (  177)   call(icrtgr);
  86 (  183) end;
  87 (  183) 
  88 (  184) { splitview: go to splitted graphics display }
  89 (  184) 
  90 (  184) proc splitview;
  91 (  184) const icrtal=$e015;
  92 (  187) begin
  93 (  187)   call(icrtal);
  94 (  193) end;
  95 (  193) 
  96 (  194) { plot(x,y,c)                }
  97 (  194) { plot a dot at x,y, using c }
  98 (  194) 
  99 (  194) proc plot(x,y,c:integer);
 100 (  194) const aplot=$c815;
 101 (  197) mem grx=$03ae: integer&;
 102 (  197)     gry=$03af: integer&;
 103 (  197)     grc=$03b0: integer&;
 104 (  197) begin
 105 (  197)   xcursor:=x;
 106 (  199)   ycursor:=y;
 107 (  207)   if x<0 then xcursor:=0;
 108 (  227)   if x>xsize then xcursor:=xsize;
 109 (  243)   if y<0 then ycursor:=0;
 110 (  259)   if y>ysize then ycursor:=ysize;
 111 (  275)   grx:=x;
 112 (  279)   gry:=y;
 113 (  288)   grc:=c;
 114 (  297)   call(aplot);
 115 (  310) end;
 116 (  310) 
 117 (  311) { move(x,y)            }
 118 (  311) { move graphics cursor }
 119 (  311) 

----------------------------------------------------------------------

R65 COMPILE 4.2: library PLOTLIB          7/2/24 page 3

 120 (  311) proc move(x,y:integer);
 121 (  311) mem grx=$03ae: integer&;
 122 (  314)     gry=$03af: integer&;
 123 (  314) begin
 124 (  314)   xcursor:=x;
 125 (  316)   ycursor:=y;
 126 (  324)   if x<0 then xcursor:=0;
 127 (  344)   if x>xsize then xcursor:=xsize;
 128 (  360)   if y<0 then ycursor:=0;
 129 (  376)   if y>ysize then ycursor:=ysize;
 130 (  392)   grx:=xcursor;
 131 (  396)   gry:=ycursor;
 132 (  405) end;
 133 (  414) 
 134 (  415) { draw(x,y,c)          }
 135 (  415) { draw a straight line }
 136 (  415) { end points are clipped to graphics area }
 137 (  415) 
 138 (  415) proc draw(x,y,c:integer);
 139 (  415) mem grxinc=$03b6: integer;
 140 (  418)     gryinc=$03ba: integer;
 141 (  418)     grx=$03ae: integer&;
 142 (  418)     gry=$03af: integer&;
 143 (  418)     grc=$03b0: integer&;
 144 (  418)     grn=$03b1: integer;
 145 (  418) var xnew,ynew,xstep,ystep,xl,yl,i,cnt:integer;
 146 (  418) 
 147 (  418)   proc drawx(x,y,c,n:integer);
 148 (  418)   const adrawx=$c81e;
 149 (  421)   begin
 150 (  421)     grx:=x;
 151 (  423)     gry:=y;
 152 (  432)     grc:=c;
 153 (  441)     grn:=n;
 154 (  450)     call(adrawx);
 155 (  462)   end;
 156 (  462) 
 157 (  463)   proc drawy(x,y,c,n:integer);
 158 (  463)   const adrawy=$c821;
 159 (  466)   begin
 160 (  466)     grx:=x;
 161 (  468)     gry:=y;
 162 (  477)     grc:=c;
 163 (  486)     grn:=n;
 164 (  495)     call(adrawy);
 165 (  507)   end;
 166 (  507) 
 167 (  508)   proc drawxy(x,y,c,n,xi,yi:integer);
 168 (  508)   const adrawxy=$c824;
 169 (  511)   begin
 170 (  511)     grx:=x;
 171 (  513)     gry:=y;
 172 (  522)     grc:=c;
 173 (  531)     grn:=n;
 174 (  540)     grxinc:=xi;
 175 (  548)     gryinc:=yi
 176 (  556)     call(adrawxy);
 177 (  568)   end;
 178 (  568) 
 179 (  569) begin

----------------------------------------------------------------------

R65 COMPILE 4.2: library PLOTLIB          7/2/24 page 4

 180 (  569)   xnew:=x;
 181 (  571)   ynew:=y;
 182 (  579)   if xnew<0 then xnew:=0;
 183 (  599)   if xnew>xsize then xnew:=xsize;
 184 (  615)   if ynew<0 then ynew:=0;
 185 (  631)   if ynew>ysize then ynew:=ysize;
 186 (  647)   { fast horizontal and vertical draw }
 187 (  651)   if ynew=ycursor then begin
 188 (  660)     if xnew > xcursor then
 189 (  667)       drawx(xcursor,ynew,c,xnew-xcursor+1)
 190 (  698)     else
 191 (  705)       drawx(xnew,ynew,c,xcursor-xnew+1)
 192 (  731)   end else if xnew=xcursor then begin
 193 (  750)     if ynew > ycursor then
 194 (  757)       drawy(xnew,ycursor,c,ynew-ycursor+1)
 195 (  788)     else
 196 (  795)       drawy(xnew,ynew,c,ycursor-ynew+1)
 197 (  821)   end else begin
 198 (  831)     {compute abs lenght of longer axis}
 199 (  831)     xl:=xnew-xcursor; if xl<0 then xl:=-xl;
 200 (  854)     yl:=ynew-ycursor; if yl<0 then yl:=-yl;
 201 (  886)     if xl>yl then cnt:=xl
 202 (  907)     else cnt:=yl;
 203 (  918)     if (cnt>0) then begin
 204 (  933)       xstep:=((xnew-xcursor)*128) div cnt;
 205 (  948)       ystep:=((ynew-ycursor)*128) div cnt;
 206 (  969)       drawxy(xcursor,ycursor,c,
 207 (  986)           cnt+1,xstep shl 1,ystep shl 1)
 208 ( 1010)     end
 209 ( 1017)   end;
 210 ( 1017)   xcursor:=xnew; ycursor:=ynew;
 211 ( 1025) end;
 212 ( 1033) 
 213 ( 1034) { plotmap(x,y,map)              }
 214 ( 1034) { plot 4x4 bitmap               }
 215 ( 1034) { the top left corner is bit 15 }
 216 ( 1034) 
 217 ( 1034) proc plotmap(x,y,m:integer);
 218 ( 1034) const abitmap=$c81b;
 219 ( 1037) mem grmap=$03b6: integer;
 220 ( 1037)     grx=$03ae: integer&;
 221 ( 1037)     gry=$03af: integer&;
 222 ( 1037) begin
 223 ( 1037)   grx:=x;
 224 ( 1039)   gry:=y;
 225 ( 1048)   if x<0 then grx:=0;
 226 ( 1069)   if x>(xsize-4) then grx:=xsize-4;
 227 ( 1091)   if y<0 then gry:=0;
 228 ( 1109)   if y>(ysize-4) then gry:=ysize-4;
 229 ( 1131)   grmap:=m;
 230 ( 1137)   call(abitmap);
 231 ( 1149) end;
 232 ( 1149) 
 233 ( 1150) { waitforkey                    }
 234 ( 1150) { wait for a key to be typed    }
 235 ( 1150) 
 236 ( 1150) proc waitforkey;
 237 ( 1150) const key=@1;
 238 ( 1153)       toggle=chr($0c);
 239 ( 1153) var ch:char;

----------------------------------------------------------------------

R65 COMPILE 4.2: library PLOTLIB          7/2/24 page 5

 240 ( 1153) begin
 241 ( 1153)   repeat
 242 ( 1153)     read(@key,ch);
 243 ( 1163)     if ch=toggle then write(ch);
 244 ( 1179)   until ch<>toggle;
 245 ( 1185) end;
 246 ( 1189) 
 247 ( 1190) begin {initialization}
 248 ( 1190) end.
 249 ( 1192) 

End compile

Code lenght:          1191
Compiler stack size:  30
Ident stack size:     48
Pascal errors:        0

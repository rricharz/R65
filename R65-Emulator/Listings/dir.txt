
R65 COMPILE 4.2: program DIR              7/12/23 page 1


   1 (    4) {
   2 (    4)          *******************
   3 (    4)          *                 *
   4 (    4)          *   dir <drive>   *
   5 (    4)          *                 *
   6 (    4)          *******************
   7 (    4) 
   8 (    4)     2018,2019 rricharz (r77@bluewin.ch)
   9 (    4)     2023 removed inverse video display
  10 (    4)     2023 default drive 1
  11 (    4) 
  12 (    4) Display the directory of a disk drive.
  13 (    4) Uses EPROM (disk.asm) calls to get info
  14 (    4) from disk directory.
  15 (    4) 
  16 (    4) Written 2018 to test the R65 emulator and
  17 (    4) to demonstrate the power of Tiny Pascal.
  18 (    4) 
  19 (    4) Makes a table to find out how long the
  20 (    4) longest name is. Then computes the number
  21 (    4) of columns which can be displayed and
  22 (    4) displays the directory.
  23 (    4) 
  24 (    4) option /s sorts the directory
  25 (    4) 
  26 (    4) Usage:  dir drive [/s]                   }
  27 (    4) 
  28 (    4) program dir;
  29 (    4) uses syslib,arglib,strlib;
  30 ( 2170) 
  31 ( 2170) {R65 disk eprom calls and params: }
  32 ( 2170) const aprepdo =$f4a7;
  33 ( 2173)       agetentx=$f63a;
  34 ( 2173)       aenddo  =$f625;
  35 ( 2173)       tsectors = 2560;
  36 ( 2173)       maxent  = 255;
  37 ( 2173) 
  38 ( 2173) mem   filtyp  =$0300: char&;
  39 ( 2173)       filcyc  =$0311: integer&;
  40 ( 2173)       filstp  =$0312: char&;
  41 ( 2173)       filloc  =$0313: integer;
  42 ( 2173)       filsiz  =$0315: integer;
  43 ( 2173)       fillnk  =$031e: integer;
  44 ( 2173)       scyfc   =$037c: integer&;
  45 ( 2173)       filerr  =$00db: integer&;
  46 ( 2173) 
  47 ( 2173) var default,sortit: boolean;
  48 ( 2173)     drive,index,i,ti,maxlen,nument,col,
  49 ( 2173)     ncol,row,nspaces,sfree,sdel,
  50 ( 2173)     lines        : integer;
  51 ( 2173)     ffree,fdel   : real;
  52 ( 2173)     filstptab    : array[80] of char;
  53 ( 2173)     s            : cpnt;
  54 ( 2173)     entry        : array[maxent] of cpnt;
  55 ( 2173) 
  56 ( 2173) func hex(d:integer):char;
  57 ( 2173) { convert hex digit to hex char }
  58 ( 2173) begin
  59 ( 2173)   if (d>=0) and (d<10) then

----------------------------------------------------------------------

R65 COMPILE 4.2: program DIR              7/12/23 page 2

  60 ( 2192)     hex:=chr(d+ord('0'))
  61 ( 2202)   else if (d>=10) and (d<16) then
  62 ( 2225)     hex:=chr(d+ord('A')-10)
  63 ( 2238)   else hex:='?';
  64 ( 2249) end;
  65 ( 2253) 
  66 ( 2254) proc checkfilerr;
  67 ( 2254) begin
  68 ( 2254)   if filerr<>0 then begin
  69 ( 2265)     writeln('Cannot read directory');
  70 ( 2296)     abort;
  71 ( 2300)   end;
  72 ( 2300) end;
  73 ( 2300) 
  74 ( 2301) func smaller(pnt1,pnt2:cpnt):boolean;
  75 ( 2301) var k:integer;
  76 ( 2304) begin
  77 ( 2304)   k:=0;
  78 ( 2308)   while (pnt2[k]=pnt1[k]) and (k<15) do
  79 ( 2340)     k:=k+1;
  80 ( 2350)   smaller:=(pnt2[k]<pnt1[k]);
  81 ( 2379) end;
  82 ( 2383) 
  83 ( 2384) proc sort;
  84 ( 2384) var i,j:integer;
  85 ( 2387)     savepnt:cpnt;
  86 ( 2387) begin
  87 ( 2387)   for i:=0 to nument-1 do
  88 ( 2401)      for j:=nument-1 downto i do
  89 ( 2422)        if smaller(entry[j],entry[j+1]) then begin
  90 ( 2462)           savepnt:=entry[j];
  91 ( 2469)           entry[j]:=entry[j+1];
  92 ( 2488)           entry[j+1]:=savepnt;
  93 ( 2503)        end;
  94 ( 2511) end;
  95 ( 2539) 
  96 ( 2540) proc getoptions;
  97 ( 2540) var dummy:integer;
  98 ( 2543)     options:array[15] of char;
  99 ( 2543) begin
 100 ( 2543)   agetstring(options,default,dummy,dummy);
 101 ( 2585)   sortit:=false;
 102 ( 2587)   if not default then begin
 103 ( 2596)     if options[0]<>'/' then argerror(103);
 104 ( 2619)     for i:=1 to 15 do
 105 ( 2627)       case options[i] of
 106 ( 2640)         'S': sortit:=true;
 107 ( 2653)         ' ': begin end
 108 ( 2667)         else argerror(104)
 109 ( 2672)       end; {case}
 110 ( 2694)   end;
 111 ( 2694) end;
 112 ( 2694) 
 113 ( 2695) begin {main}
 114 ( 2695)   drive:=1; {default drive}
 115 ( 2704)   filerr:=0;
 116 ( 2706)   if argtype[carg]='i' then agetval(drive,default);
 117 ( 2744)   if (drive<0) or (drive>1) then begin
 118 ( 2759)     writeln('Drive must be 0 or 1');
 119 ( 2789)     abort

----------------------------------------------------------------------

R65 COMPILE 4.2: program DIR              7/12/23 page 3

 120 ( 2789)   end;
 121 ( 2793)   getoptions;
 122 ( 2797)   fildrv:=drive;
 123 ( 2797)   call(aprepdo);
 124 ( 2809)   checkfilerr;
 125 ( 2813) 
 126 ( 2813)   scyfc:=255; { write disk name }
 127 ( 2820)   call(agetentx);
 128 ( 2824)   checkfilerr;
 129 ( 2828) 
 130 ( 2828)   write(invvid,'Directory drive ',drive,': ');
 131 ( 2856)   for i:=0 to 15 do
 132 ( 2864)     write(filnam[i]);
 133 ( 2883)   writeln(norvid);
 134 ( 2906) 
 135 ( 2906)   index:=0; ti:=0; maxlen:=0;
 136 ( 2920)   sdel:=0;
 137 ( 2926)   repeat
 138 ( 2930)     scyfc:=index;
 139 ( 2930)     call(agetentx);
 140 ( 2943)     checkfilerr;
 141 ( 2947)     { check for end mark }
 142 ( 2947)     if filtyp<>chr(0) then begin
 143 ( 2955)       { check for deleted flag }
 144 ( 2958)       if (fillnk and 255)<128 then begin
 145 ( 2968)         entry[ti]:=new;
 146 ( 2981)         s:=entry[ti];
 147 ( 2989)         for i:=0 to 15 do s[i]:=filnam[i];
 148 ( 3025)         for i:=16 to 20 do s[i]:=' ';
 149 ( 3068)         i:=20;
 150 ( 3088)         repeat
 151 ( 3092)           i:=i-1;
 152 ( 3098)         until (i=0) or
 153 ( 3110)           (s[i]<>' ');
 154 ( 3123)         s[i+1]:='.';
 155 ( 3136)         s[i+2]:=hex(filcyc shr 4);
 156 ( 3162)         s[i+3]:=hex(filcyc and 15);
 157 ( 3188)         if maxlen<i+3 then maxlen:=i+3;
 158 ( 3213)         filstptab[ti]:=filstp;
 159 ( 3226)         ti:=ti+1
 160 ( 3234)       end else {deleted}
 161 ( 3244)         sdel:=sdel+(filsiz shr 8);
 162 ( 3255)     end else {end mark}
 163 ( 3263)       sfree:=tsectors-filloc;
 164 ( 3270)     index:=index+1
 165 ( 3279)   until (index>=255) or (filtyp=chr(0));
 166 ( 3301)   call(aenddo);
 167 ( 3309) 
 168 ( 3309)   nument:=ti-1;
 169 ( 3315)   if sortit then sort;
 170 ( 3331)   ncol:=48 div (maxlen+2);
 171 ( 3340)   if nument<8 then ncol:=2
 172 ( 3355)   else if nument<8 then ncol:=1;
 173 ( 3376)   nspaces:=(48 div ncol)-maxlen-1;
 174 ( 3394)   lines:=nument div ncol;
 175 ( 3403) 
 176 ( 3412)   for col:=0 to lines do
 177 ( 3418)   begin
 178 ( 3431)     for row:=0 to ncol-1 do begin
 179 ( 3453)       ti:=col+(lines+1)*row;

----------------------------------------------------------------------

R65 COMPILE 4.2: program DIR              7/12/23 page 4

 180 ( 3464)       s:=entry[ti];
 181 ( 3478)       if (ti<=nument) then begin
 182 ( 3495)         for i:=0 to maxlen do
 183 ( 3504)           write(s[i]);
 184 ( 3528)         if row<(ncol-1) then
 185 ( 3553)           for i:=1 to nspaces do write(' ')
 186 ( 3578)       end
 187 ( 3578)     end;
 188 ( 3592)     writeln
 189 ( 3606)   end;
 190 ( 3612)   ffree:=conv(sfree)/conv(tsectors);
 191 ( 3634)   fdel:=conv(sdel)/conv(tsectors);
 192 ( 3650)   writeln('Free:',sfree,'(',
 193 ( 3671)     trunc(100.0*ffree+0.5),
 194 ( 3691)     '%),deleted:',sdel,'(',
 195 ( 3712)     trunc(100.0*fdel+0.5),'%),',
 196 ( 3738)     'files:',index-1);
 197 ( 3759) end.
 198 ( 3759) 

End compile

Code lenght:          3758
Compiler stack size:  85
Ident stack size:     131
Pascal errors:        0

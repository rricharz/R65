
R65 COMPILE 4.3: program PONG             12/2/24 page 1


   1 (    4) {
   2 (    4)                 ************* *
   3 (    4)                 *             *
   4 (    4)                 *   P O N G   *
   5 (    4)                 *             *
   6 (    4)                 ***************
   7 (    4) 
   8 (    4) This is the pong game for the R65 computer
   9 (    4) system. I wrote the original version 1978,
  10 (    4) first in Basic, and then in Tiny Pascal.
  11 (    4) Unfortunately the original code has been
  12 (    4) lost. This is a recreation written 2018 out
  13 (    4) of memory to demonstrate the capabilities
  14 (    4) of the R65 computer system.
  15 (    4) 
  16 (    4)           rricharz 2018,2019,2024        }
  17 (    4) 
  18 (    4) program pong;
  19 (    4) uses syslib,plotlib;
  20 ( 1566) 
  21 ( 1566) const paddlesize = 24;
  22 ( 1569)       xmin = 40;
  23 ( 1569)       erase = 0; ball = $6ff6;
  24 ( 1569)       cup= chr($1a); cdown = chr($18);
  25 ( 1569)       startspeed = 2.5;
  26 ( 1569)       autorepeat = true;
  27 ( 1569) 
  28 ( 1569) var i,ypaddle,lastypaddle:integer;
  29 ( 1569)     hit,miss: integer;
  30 ( 1569)     xspeed,yspeed,xball,yball:real;
  31 ( 1569)     lastxball,lastyball:real;
  32 ( 1569) 
  33 ( 1569) proc showball;
  34 ( 1569) begin
  35 ( 1569)   plotmap(trunc(lastxball),trunc(lastyball),erase);
  36 ( 1596)   plotmap(trunc(xball),trunc(yball),ball);
  37 ( 1619)   lastxball:=xball;
  38 ( 1619)   lastyball:=yball;
  39 ( 1631) end;
  40 ( 1643) 
  41 ( 1644) proc showpaddle;
  42 ( 1644) begin
  43 ( 1644)   if lastypaddle<>-1 then begin
  44 ( 1657)     move(xsize-3,lastypaddle);
  45 ( 1675)     draw(xsize-3, lastypaddle+paddlesize, black);
  46 ( 1695)   end;
  47 ( 1695)   move(xsize-3,ypaddle);
  48 ( 1710)   draw(xsize-3, ypaddle+paddlesize, white);
  49 ( 1730)   lastypadde:=ypaddle;
  50 ( 1730) end;
  51 ( 1738) 
  52 ( 1739) proc showcount(x,y,count:integer);
  53 ( 1739) var digit: integer;
  54 ( 1742) begin
  55 ( 1742)   digit:=count div 10;
  56 ( 1750)   move(x,y);
  57 ( 1769)   write(@plotdev,chr(ord('0')+digit),
  58 ( 1779)     chr(ord('0')+mod(count,10)));
  59 ( 1801) end;

----------------------------------------------------------------------

R65 COMPILE 4.3: program PONG             12/2/24 page 2

  60 ( 1801) 
  61 ( 1802) {$I IRANDOM:P}
IRANDOM:P       .02  SP 0000-0200 0006 12/02/24
{I}    1 ( 1802) { irandom: real and integer random functions with limit
{I}    2 ( 1802) }
{I}    3 ( 1802) 
{I}    4 ( 1802) func rrandom(min,max:real):real;
{I}    5 ( 1802) begin
{I}    6 ( 1802)   rrandom := min + (conv(random)/255.0) * (max - min);
{I}    7 ( 1840) end;
{I}    8 ( 1848) 
{I}    9 ( 1849) func irandom(min,max:integer):integer;
{I}   10 ( 1849) begin
{I}   11 ( 1849)   irandom := trunc(rrandom(conv(min),conv(max)));
{I}   12 ( 1872) end;
{I}   13 ( 1877) 
  62 ( 1878) 
  63 ( 1878) proc init;
  64 ( 1878) begin
  65 ( 1878)   grinit;
  66 ( 1887)   cleargr;
  67 ( 1891)   move(xmin,0);
  68 ( 1901)   draw(xsize,0,white);
  69 ( 1913)   draw(xsize,ysize,white);
  70 ( 1925)   draw(xmin,ysize,white);
  71 ( 1937)   draw(xmin,0,white);
  72 ( 1949)   xball:=1.0;
  73 ( 1955)   yball:=conv(ysize div 2 - 2);
  74 ( 1969)   lastxball:=xball;
  75 ( 1976)   lastyball:=yball;
  76 ( 1988)   xspeed:=rrandom(1.0, startspeed);
  77 ( 2020)   yspeed:=rrandom(1.0,startspeed);
  78 ( 2046)   ypaddle:=(ysize-paddlesize) div 2;
  79 ( 2059)   lastypaddle:=-1;
  80 ( 2066)   hit:=0;
  81 ( 2073)   miss:=0;
  82 ( 2079)   move(1,100);
  83 ( 2093)   write(@plotdev,'Hit ');
  84 ( 2102)   showcount(1,90,hit);
  85 ( 2116)   move(1,70);
  86 ( 2126)   write(@plotdev,'Miss');
  87 ( 2135)   showcount(1,60,miss);
  88 ( 2149) end;
  89 ( 2149) 
  90 ( 2150) func expaint: boolean;
  91 ( 2150) begin
  92 ( 2150)   expaint:=false;
  93 ( 2157)   showpaddle;
  94 ( 2165)   xball:=xball+xspeed;
  95 ( 2171)   yball:=yball+yspeed;
  96 ( 2190)   if xball<conv(xmin+2) then begin
  97 ( 2216)     xspeed:=-xspeed;
  98 ( 2219)     xball:=conv(xmin+2);
  99 ( 2237)   end;
 100 ( 2244) 
 101 ( 2244)   if (yball<=conv(ypaddle+paddlesize+2)) and
 102 ( 2262)     (yball>=conv(ypaddle)) then begin
 103 ( 2275)     if xball>=conv(xsize-7) then begin
 104 ( 2291)       hit:=hit+1;
 105 ( 2300)       showcount(1,90,hit);
 106 ( 2319)       xspeed:=-xspeed;

----------------------------------------------------------------------

R65 COMPILE 4.3: program PONG             12/2/24 page 3

 107 ( 2319)       xball:=conv(xsize-7);
 108 ( 2337)     end;
 109 ( 2344)   end else begin
 110 ( 2347)     if xball>=conv(xsize-4) then begin
 111 ( 2360)       miss:=miss+1;
 112 ( 2369)       showcount(1,60,miss);
 113 ( 2388)       xspeed:=-xspeed;
 114 ( 2388)       xball:=conv(xsize-4);
 115 ( 2406)     end;
 116 ( 2413)   end;
 117 ( 2413)   if yball<2.0 then begin
 118 ( 2426)     yspeed:=-yspeed;
 119 ( 2429)     yball:=2.0
 120 ( 2442)   end else if yball>=conv(ysize-4) then begin
 121 ( 2470)     yspeed:=-yspeed;
 122 ( 2473)     yball:=conv(ysize-4);
 123 ( 2491)   end;
 124 ( 2498)   showball;
 125 ( 2502) end;
 126 ( 2502) 
 127 ( 2503) func exkey(key:char):boolean;
 128 ( 2503) var ymax:integer;
 129 ( 2506) begin
 130 ( 2506)   ymax:=ysize-paddlesize-4;
 131 ( 2515)   if (key=cup) and (ypaddle<ymax)  then
 132 ( 2536)     ypaddle := ypaddle+2
 133 ( 2544)   else if (key=cdown) and (ypaddle>5) then
 134 ( 2568)     ypaddle := ypaddle-2
 135 ( 2576)   else if key=cr then init;
 136 ( 2600)   exkey := key=chr(0);
 137 ( 2606) end;
 138 ( 2612) 
 139 ( 2613) {$I IANIMATE:P}
IANIMATE:P      .0B  SP 0000-0400 0008 12/02/24
{I}    1 ( 2613) { ianimate - run animation in loop
{I}    2 ( 2613)   proc expaint;
{I}    3 ( 2613)     Called to paint one picture and apply motion.
{I}    4 ( 2613)   func exkey(ch:char):boolean;
{I}    5 ( 2613)     Called to check for key and stop loop if true  }
{I}    6 ( 2613) 
{I}    7 ( 2613) proc animate(arepeat:boolean);
{I}    8 ( 2613) { arepeat: auto repeat cursor keys without delay }
{I}    9 ( 2613) const toggle=chr($0c);
{I}   10 ( 2616)       cleft=chr($03); cright=chr($16);
{I}   11 ( 2616)       cup=chr($1a); cdown=chr($18); esc=chr(0);
{I}   12 ( 2616) mem   sflag=$1781:integer&;
{I}   13 ( 2616)       emuflags=$1707:integer&;
{I}   14 ( 2616) var   ch:char;
{I}   15 ( 2616)       dummy:integer;
{I}   16 ( 2616)       stop:boolean;
{I}   17 ( 2616) begin
{I}   18 ( 2616)   repeat
{I}   19 ( 2616)     repeat
{I}   20 ( 2618)       stop:=expaint;
{I}   21 ( 2624)       dummy:=syncscreen; { sleep for up to 30 msec }
{I}   22 ( 2638)       ch:=keypressed; { sleep for 10 msec }
{I}   23 ( 2646)       { sflag bit 8 is escape flag. Pass it through }
{I}   24 ( 2646)     until (ord(ch)<>0) or ((sflag and $80)<>0)
{I}   25 ( 2662)       or stop;
{I}   26 ( 2664)     if not(((ch=cup) or (ch=cdown) or (ch=cleft) or
{I}   27 ( 2694)        (ch=cright)) and

----------------------------------------------------------------------

R65 COMPILE 4.3: program PONG             12/2/24 page 4

{I}   28 ( 2703)        ((emuflags and 1)<>0) and arepeat) then
{I}   29 ( 2719)        { cursor keys auto repeat without delay }
{I}   30 ( 2720)        keypressed := chr(0);
{I}   31 ( 2725)     sflag:=sflag and $7f; { clear escape flag }
{I}   32 ( 2743)     if ch=toggle then write(toggle);
{I}   33 ( 2756)   until exkey(ch) or stop;
{I}   34 ( 2768) end;
 140 ( 2777) 
 141 ( 2777) begin
 142 ( 2777)   init;
 143 ( 2783)   writeln('Type RETURN to start new game.');
 144 ( 2820)   animate(autorepeat);
 145 ( 2828)   splitview;
 146 ( 2832) end.
 147 ( 2832) 

End compile

Code lenght:          2831
Compiler stack size:  54
Ident stack size:     118
Pascal errors:        0

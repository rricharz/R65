
R65 COMPILE 4.2: program PONG             5/2/24 page 1


   1 (    4) {
   2 (    4)                 ************* *
   3 (    4)                 *             *
   4 (    4)                 *   P O N G   *
   5 (    4)                 *             *
   6 (    4)                 ***************
   7 (    4) 
   8 (    4) This is the pong game for the R65 computer
   9 (    4) system. I wrote the original version 1978,
  10 (    4) first in Basic, and then in Tiny Pascal.
  11 (    4) Unfortunately the original code has been
  12 (    4) lost. This is a recreation written 2018 out
  13 (    4) of memory to demonstrate the capabilities
  14 (    4) of the R65 computer system.
  15 (    4) 
  16 (    4)           rricharz 2018,2019             }
  17 (    4) 
  18 (    4) program pong;
  19 (    4) uses syslib,plotlib;
  20 ( 1516) 
  21 ( 1516) const paddlesize = 24;
  22 ( 1519)       xmin = 40;
  23 ( 1519) 
  24 ( 1519) var i,xball,yball,lastxball,lastyball,
  25 ( 1519)     ypaddle,lastypaddle,maxx,maxy,xspeed,
  26 ( 1519)     yspeed,hit,miss,dummy: integer;
  27 ( 1519) 
  28 ( 1519) proc showball;
  29 ( 1519) begin
  30 ( 1519)   lastxball:=xball;
  31 ( 1524)   lastyball:=yball;
  32 ( 1532)   plot(xball shr 3, yball shr 3,white);
  33 ( 1562)   plot((xball shr 3)+1, yball shr 3,white);
  34 ( 1587)   plot(xball shr 3, (yball shr 3)+1,white);
  35 ( 1612)   plot((xball shr 3)+1, (yball shr 3)+1,
  36 ( 1631)                           white);
  37 ( 1640) end;
  38 ( 1640) 
  39 ( 1641) proc eraseball;
  40 ( 1641) begin
  41 ( 1641)   plot(lastxball shr 3,
  42 ( 1652)                lastyball shr 3,black);
  43 ( 1668)   plot((lastxball shr 3)+1,
  44 ( 1677)                lastyball shr 3,black);
  45 ( 1693)   plot(lastxball shr 3,
  46 ( 1699)                (lastyball shr 3)+1,black);
  47 ( 1718)   plot((lastxball shr 3)+1,
  48 ( 1727)                (lastyball shr 3)+1,black);
  49 ( 1746) end;
  50 ( 1746) 
  51 ( 1747) proc init;
  52 ( 1747) begin
  53 ( 1747)   grinit;
  54 ( 1756)   cleargr;
  55 ( 1760)   move(xmin,0);
  56 ( 1770)   draw(xsize,0,white);
  57 ( 1782)   draw(xsize,ysize,white);
  58 ( 1794)   draw(xmin,ysize,white);
  59 ( 1806)   draw(xmin,0,white);

----------------------------------------------------------------------

R65 COMPILE 4.2: program PONG             5/2/24 page 2

  60 ( 1818)   maxx:=(xsize-1) shl 3;
  61 ( 1825)   maxy:=(ysize-1) shl 3;
  62 ( 1837)   xball:=xsize shl 2;
  63 ( 1846)   yball:=2 shl 3;
  64 ( 1855)   xspeed:=16 + random shr 3;
  65 ( 1870)   yspeed:=16 + random shr 3;
  66 ( 1886)   ypaddle:=(ysize-paddlesize) div 2;
  67 ( 1899)   lastypaddle:=-1;
  68 ( 1906)   hit:=0;
  69 ( 1913)   miss:=0;
  70 ( 1919) end;
  71 ( 1923) 
  72 ( 1924) proc showpaddle;
  73 ( 1924) begin
  74 ( 1924)   if lastypaddle = -1 then begin
  75 ( 1937)     move(xsize-3,ypaddle);
  76 ( 1955)     draw(xsize-3, ypaddle+paddlesize,
  77 ( 1966)     white);
  78 ( 1975)   end else begin
  79 ( 1978)     if ypaddle<lastypaddle then begin
  80 ( 1987)       move(xsize-3,ypaddle);
  81 ( 2005)       draw(xsize-3,
  82 ( 2009)         lastypaddle-1,white);
  83 ( 2025)       move(xsize-3,ypaddle+paddlesize+1);
  84 ( 2046)       draw(xsize-3,
  85 ( 2050)         lastypaddle+paddlesize,black);
  86 ( 2066)     end else begin
  87 ( 2069)       move(xsize-3,lastypaddle);
  88 ( 2084)       draw(xsize-3,
  89 ( 2088)         ypaddle-1,black);
  90 ( 2104)       move(xsize-3,
  91 ( 2108)         lastypaddle+paddlesize+1);
  92 ( 2125)       draw(xsize-3,
  93 ( 2129)         ypaddle+paddlesize,white);
  94 ( 2145)     end
  95 ( 2145)   end;
  96 ( 2145)   lastypaddle:=ypaddle;
  97 ( 2145) end;
  98 ( 2153) 
  99 ( 2154) proc showcount(x,y,count:integer);
 100 ( 2154) var digit: integer;
 101 ( 2157) begin
 102 ( 2157)   digit:=count div 10;
 103 ( 2165)   move(x,y);
 104 ( 2184)   write(@plotdev,chr(ord('0')+digit),
 105 ( 2194)     chr(ord('0')+mod(count,10)));
 106 ( 2216) end;
 107 ( 2216) 
 108 ( 2217) begin
 109 ( 2217)   init;
 110 ( 2223)   move(1,100);
 111 ( 2233)   write(@plotdev,'Hit ');
 112 ( 2242)   showcount(1,90,hit);
 113 ( 2256)   move(1,70);
 114 ( 2266)   write(@plotdev,'Miss');
 115 ( 2275)   showcount(1,60,miss);
 116 ( 2289)   showball;
 117 ( 2293)   showpaddle;
 118 ( 2297)   repeat
 119 ( 2297)     xball:=xball+xspeed;

----------------------------------------------------------------------

R65 COMPILE 4.2: program PONG             5/2/24 page 3

 120 ( 2301)     yball:=yball+yspeed;
 121 ( 2314)     if xball<(8*xmin)+9 then begin
 122 ( 2336)       xspeed:=abs(xspeed);
 123 ( 2351)       xball:=8*xmin+9;
 124 ( 2362)     end
 125 ( 2367)     else if (xball>=maxx-32) then begin
 126 ( 2382)       if (yball>=8*(ypaddle-1)) and
 127 ( 2400)         (yball<=8*(ypaddle+paddlesize+1))
 128 ( 2416)       then begin
 129 ( 2419)         hit:=hit+1;
 130 ( 2428)         showcount(1,90,hit);
 131 ( 2447)         xspeed:=-xspeed;
 132 ( 2447)       end
 133 ( 2456)       else begin
 134 ( 2459)         miss:=miss+1;
 135 ( 2465)         showcount(1,60,miss);
 136 ( 2484)         delay10msec(100);
 137 ( 2492)         xspeed:=-16 - random shr 3;
 138 ( 2503)         yspeed:=16 + random shr 3;
 139 ( 2519)       end;
 140 ( 2525)       xball:=maxx-32;
 141 ( 2531)     end;
 142 ( 2536)     if yball<8 then begin
 143 ( 2543)       yspeed:=abs(yspeed);
 144 ( 2558)       yball:=8
 145 ( 2562)     end
 146 ( 2564)     else if yball>=maxy then begin
 147 ( 2580)       yspeed:=-yspeed;
 148 ( 2583)       yball:=maxy-1
 149 ( 2596)     end;
 150 ( 2603)     if (keypressed<>chr(0)) then begin
 151 ( 2611)       if (keypressed = chr($1a)) and
 152 ( 2622)         (ypaddle<(ysize-paddlesize-4))
 153 ( 2634)           then
 154 ( 2635)             ypaddle := ypaddle+4;
 155 ( 2645)       if (keypressed = chr($18)) and
 156 ( 2658)         (ypaddle>4)
 157 ( 2664)           then
 158 ( 2665)             ypaddle := ypaddle-4;
 159 ( 2675)       keypressed:=chr(0);
 160 ( 2682)       if (ypaddle<>lastypaddle) then
 161 ( 2697)         showpaddle;
 162 ( 2704)     end;
 163 ( 2704)     dummy:=syncscreen;
 164 ( 2710)     if (xball<>lastxball) or
 165 ( 2723)        (yball<>lastyball) then begin
 166 ( 2733)       eraseball;
 167 ( 2740)       showball;
 168 ( 2744)     end;
 169 ( 2744)   until (miss>=10) or (hit>=10);
 170 ( 2758)   grend;
 171 ( 2766)   writeln('Score:');
 172 ( 2779)   writeln('Hit  ',hit);
 173 ( 2796)   writeln('Miss ',miss);
 174 ( 2813) end.
 175 ( 2813) 

End compile

Code lenght:          2812
Compiler stack size:  42
Ident stack size:     99
Pascal errors:        0


R65 COMPILE 4.3: program CIRCLES          12/2/24 page 1


   1 (    4) { circles: display circles on graphics canvas }
   2 (    4) program circles;
   3 (    4) uses syslib,plotlib,mathlib;
   4 ( 5287) 
   5 ( 5287) const toggle=chr($0c);
   6 ( 5290)       autorepeat=false;
   7 ( 5290) 
   8 ( 5290) mem   sflag=$1781:integer&;
   9 ( 5290) 
  10 ( 5290) var   x,y,r:integer;
  11 ( 5290) 
  12 ( 5290) {$I ICIRCLE:P}
ICIRCLE:P       .04  SP 0000-0200 0004 12/02/24
{I}    1 ( 5290) proc circle(x,y,r,c:integer);
{I}    2 ( 5290) var step,rr,angle:real;
{I}    3 ( 5293) begin
{I}    4 ( 5293)  rr:=conv(r); step:=180.0/rr; angle:=0.0;
{I}    5 ( 5331)  if step>22.5 then step:=22.5;
{I}    6 ( 5359)  move(x+r,y);
{I}    7 ( 5384)  repeat
{I}    8 ( 5384)    angle:=angle+step;
{I}    9 ( 5390)    draw(x+trunc(rr*cos(angle)+0.5),
{I}   10 ( 5435)         y+trunc(rr*sin(angle)+0.5),c);
{I}   11 ( 5481)  until angle>=360.0;
{I}   12 ( 5493) end;
  13 ( 5498) {$I IRANDOM:P}
IRANDOM:P       .02  SP 0000-0200 0006 12/02/24
{I}    1 ( 5498) { irandom: real and integer random functions with limit
{I}    2 ( 5498) }
{I}    3 ( 5498) 
{I}    4 ( 5498) func rrandom(min,max:real):real;
{I}    5 ( 5498) begin
{I}    6 ( 5498)   rrandom := min + (conv(random)/255.0) * (max - min);
{I}    7 ( 5536) end;
{I}    8 ( 5544) 
{I}    9 ( 5545) func irandom(min,max:integer):integer;
{I}   10 ( 5545) begin
{I}   11 ( 5545)   irandom := trunc(rrandom(conv(min),conv(max)));
{I}   12 ( 5568) end;
{I}   13 ( 5573) 
  14 ( 5574) 
  15 ( 5574) func expaint:boolean;
  16 ( 5574) begin
  17 ( 5574)   expaint:=false;
  18 ( 5581)   r := 3 + random div 5;
  19 ( 5595)   x := irandom(r div 2, xsize - r div 2);
  20 ( 5626)   y := irandom(r div 2, ysize - r div 2);
  21 ( 5655)   circle(x,y,r,white);
  22 ( 5679) end;
  23 ( 5679) 
  24 ( 5680) func exkey(ch:char):boolean;
  25 ( 5680) begin
  26 ( 5680)   exkey := (ch = chr(0));  { stop on escape }
  27 ( 5697)   { otherwise nothing to do }
  28 ( 5697) end;
  29 ( 5697) 
  30 ( 5698) {$I IANIMATE:P}
IANIMATE:P      .0C  SP 0000-0400 00DB 12/02/24
{I}    1 ( 5698) { ianimate - run animation in loop
{I}    2 ( 5698)   proc expaint;
{I}    3 ( 5698)     Called to paint one picture and apply motion.
{I}    4 ( 5698)   func exkey(ch:char):boolean;

----------------------------------------------------------------------

R65 COMPILE 4.3: program CIRCLES          12/2/24 page 2

{I}    5 ( 5698)     Called to check for key and stop loop if true  }
{I}    6 ( 5698) 
{I}    7 ( 5698) proc animate(arepeat:boolean);
{I}    8 ( 5698) { arepeat: auto repeat cursor keys without delay }
{I}    9 ( 5698) const toggle=chr($0c);
{I}   10 ( 5701)       cleft=chr($03); cright=chr($16);
{I}   11 ( 5701)       cup=chr($1a); cdown=chr($18); esc=chr(0);
{I}   12 ( 5701) mem   sflag=$1781:integer&;
{I}   13 ( 5701)       emuflags=$1707:integer&;
{I}   14 ( 5701) var   ch:char;
{I}   15 ( 5701)       dummy:integer;
{I}   16 ( 5701)       stop:boolean;
{I}   17 ( 5701) begin
{I}   18 ( 5701)   repeat
{I}   19 ( 5701)     repeat
{I}   20 ( 5703)       stop:=expaint;
{I}   21 ( 5709)       dummy:=syncscreen; { sleep for up to 30 msec }
{I}   22 ( 5723)       ch:=keypressed; { sleep for 10 msec }
{I}   23 ( 5731)       { sflag bit 8 is escape flag. Pass it through }
{I}   24 ( 5731)     until (ord(ch)<>0) or ((sflag and $80)<>0)
{I}   25 ( 5747)       or stop;
{I}   26 ( 5749)     if not(((ch=cup) or (ch=cdown) or (ch=cleft) or
{I}   27 ( 5779)        (ch=cright)) and
{I}   28 ( 5788)        ((emuflags and 1)<>0) and arepeat) then
{I}   29 ( 5804)        { cursor keys auto repeat without delay }
{I}   30 ( 5805)        keypressed := chr(0);
{I}   31 ( 5810)     sflag:=sflag and $7f; { clear escape flag }
{I}   32 ( 5828)     if ch=toggle then write(toggle);
{I}   33 ( 5841)   until exkey(ch) or stop;
{I}   34 ( 5853) end;
  31 ( 5862) 
  32 ( 5862) begin
  33 ( 5862)   grinit; cleargr; fullview;
  34 ( 5876)   animate(autorepeat);
  35 ( 5884)   splitview;
  36 ( 5888) end.

End compile

Code lenght:          5887
Compiler stack size:  97
Ident stack size:     125
Pascal errors:        0
